(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new game_preloader_BlankPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("static/bglevelUp.png");
	types.push("IMAGE");
	urls.push("static/bgmenu.png");
	types.push("IMAGE");
	urls.push("static/funLogo.png");
	types.push("IMAGE");
	urls.push("static/gameBg1.png");
	types.push("IMAGE");
	urls.push("static/gameBg3.png");
	types.push("IMAGE");
	urls.push("static/gameBg4.png");
	types.push("IMAGE");
	urls.push("static/gameLoop.json");
	types.push("TEXT");
	urls.push("static/gameLoop.png");
	types.push("IMAGE");
	urls.push("static/gameObj.json");
	types.push("TEXT");
	urls.push("static/gameObj.png");
	types.push("IMAGE");
	urls.push("static/image.json");
	types.push("TEXT");
	urls.push("static/image.png");
	types.push("IMAGE");
	urls.push("static/loaderLoop.json");
	types.push("TEXT");
	urls.push("static/loaderLoop.png");
	types.push("IMAGE");
	urls.push("static/sheepLoop.json");
	types.push("TEXT");
	urls.push("static/sheepLoop.png");
	types.push("IMAGE");
	urls.push("static/timercircle.png");
	types.push("IMAGE");
	urls.push("static/font24.fnt");
	types.push("TEXT");
	urls.push("static/font24.png");
	types.push("IMAGE");
	urls.push("static/font28b.fnt");
	types.push("TEXT");
	urls.push("static/font28b.png");
	types.push("IMAGE");
	urls.push("static/font36b.fnt");
	types.push("TEXT");
	urls.push("static/font36b.png");
	types.push("IMAGE");
	urls.push("static/font60.fnt");
	types.push("TEXT");
	urls.push("static/font60.png");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "167", company : "csharks", file : "SheepFarm", fps : 60, name : "Sheep Farm", orientation : "", packageName : "com.csharks.sheepfarm", version : "1.0.3", windows : [{ antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 0, parameters : "{}", resizable : true, stencilBuffer : true, title : "Sheep Farm", vsync : false, width : 0, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		if(this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0; else return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var dispatching = this.__dispatching.get(type) == true;
		if(dispatching) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list;
		if(this.__dispatching.get(type) == true) {
			list = this.__newEventMap.get(type);
			if(list == null) return false;
			list = list.slice();
		} else {
			list = this.__eventMap.get(type);
			if(list == null) return false;
			this.__dispatching.set(type,true);
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getWorldTransform().__transformInversePoint(pos);
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getWorldTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getWorldTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(!this.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__drawGraphicsGL: function(renderSession) {
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__preRenderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
	}
	,__postRenderGL: function(renderSession) {
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) this.stage.set_focus(null);
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			}
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = this.__transform.a * parentTransform.a + this.__transform.b * parentTransform.c;
			this.__worldTransform.b = this.__transform.a * parentTransform.b + this.__transform.b * parentTransform.d;
			this.__worldTransform.c = this.__transform.c * parentTransform.a + this.__transform.d * parentTransform.c;
			this.__worldTransform.d = this.__transform.c * parentTransform.b + this.__transform.d * parentTransform.d;
			this.__worldTransform.tx = this.__transform.tx * parentTransform.a + this.__transform.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = this.__transform.tx * parentTransform.b + this.__transform.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(this.__transform);
			this.__worldOffset.setTo(0,0);
		}
		if(this.get_scrollRect() != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else this.__offset.setTo(0,0);
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getWorldTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popRect();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
		if(this.__removedChildren.length > 0) this.__removedChildren.splice(0,this.__removedChildren.length);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.timeStep = 0.016666666666666666;
	this.lastTime = 0;
	openfl_display_Sprite.call(this);
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.added));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	fw_Config.logicWidth = 960;
	fw_Config.logicHeight = 640;
	fw_Config.assetMode = "singleAsset";
	fw_Config.assetMode = "singleAsset";
	fw_Config.singleAssetScreen = "static";
	fw_Config.singleAssetgameWidth = 960;
	fw_Config.useFixedStep = false;
	fw_Config.showFPS = true;
	fw_managers_MusicManager.init("music");
	fw_managers_SFXManager.init("snd");
	fw_managers_MusicManager.addMusic("music");
	openfl_Lib.current.stage.align = openfl_display_StageAlign.TOP_LEFT;
	openfl_Lib.current.stage.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	openfl_Lib.current.addChild(new Main());
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	resize: function(e) {
		if(!this.inited) this.init();
		if(this.stage.stageWidth > this.stage.stageHeight) fw_Config.orientation = 1; else fw_Config.orientation = 0;
		var scaleX = this.stage.stageWidth / fw_Config.gameWidth;
		var scaleY = this.stage.stageHeight / fw_Config.gameHeight;
		var scale = Math.max(scaleX,scaleY);
		fw_Config.scaleRatio = scale;
		var x = (this.stage.stageWidth - fw_Config.gameWidth * scale) / 2;
		var y = (this.stage.stageHeight - fw_Config.gameHeight * scale) / 2;
		fw_Config.viewport.x = 0;
		fw_Config.viewport.y = 0;
		fw_Config.viewport.width = openfl_Lib.current.stage.stageWidth;
		fw_Config.viewport.height = openfl_Lib.current.stage.stageHeight;
		fw_managers_SceneManager.setScale(scale);
		fw_managers_SceneManager.setX(x);
		fw_managers_SceneManager.setY(y);
		fw_managers_SceneManager.resize();
	}
	,init: function() {
		if(this.inited) return;
		this.inited = true;
		this.gameData = { };
		var srx = Math.max(this.stage.stageWidth,this.stage.stageHeight);
		if(srx > 1440) {
			fw_Config.screen = "xxlarge";
			fw_Config.gameWidth = 1440;
		}
		if(srx <= 1440) {
			fw_Config.screen = "xxlarge";
			fw_Config.gameWidth = 1440;
		}
		if(srx <= 960) {
			fw_Config.screen = "xlarge";
			fw_Config.gameWidth = 960;
		}
		if(srx <= 720) {
			fw_Config.screen = "large";
			fw_Config.gameWidth = 720;
		}
		if(srx <= 480) {
			fw_Config.screen = "normal";
			fw_Config.gameWidth = 480;
		}
		if(srx <= 360) {
			fw_Config.screen = "small";
			fw_Config.gameWidth = 360;
		}
		if(fw_Config.assetMode == "singleAsset") {
			fw_Config.screen = fw_Config.singleAssetScreen;
			fw_Config.gameWidth = fw_Config.singleAssetgameWidth;
		}
		fw_Config.gameHeight = fw_Config.gameWidth * fw_Config.logicHeight / fw_Config.logicWidth;
		this.timeStep = 0.016666666666666666;
		if(!fw_Config.useFixedStep) this.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.onDeltaEnterFrame)); else this.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.onFixedEnterFrame));
		fw_managers_SceneManager.init();
		this.resize(null);
		fw_managers_SceneManager.changeScene(game_scenes_Menu);
		if(fw_Config.showFPS) {
		}
	}
	,DoThisAfterABit: function() {
	}
	,onDeltaEnterFrame: function(e) {
		this.blockPortraitMode();
		var now = openfl_Lib.getTimer();
		var delta = (now - this.lastTime) / 16;
		this.lastTime = now;
		fw_managers_SceneManager.currentScene.onUpdate(delta);
	}
	,onFixedEnterFrame: function(e) {
		this.blockPortraitMode();
		var lag = 0.0;
		var now = openfl_Lib.getTimer();
		var elapsed = (now - this.lastTime) / 1000;
		this.lastTime = now;
		lag += elapsed;
		while(lag >= this.timeStep) {
			fw_managers_SceneManager.currentScene.onFixedUpdate(this.timeStep);
			lag -= this.timeStep;
		}
		fw_managers_SceneManager.currentScene.onUpdate(lag / this.timeStep);
	}
	,blockPortraitMode: function() {
		if(fw_Config.orientation == 0) {
			if(this.orientationGraphic == null) {
				var ob = new openfl_display_BitmapData(fw_Config.viewport.width | 0,fw_Config.viewport.height | 0,false,0);
				var m = new openfl_geom_Matrix();
				var obmp = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/orientation.jpg"),openfl_display_PixelSnapping.ALWAYS,true);
				m.translate(fw_Config.viewport.width / 2 - obmp.get_width() / 2,fw_Config.viewport.height / 2 - obmp.get_height() / 2);
				ob.draw(obmp,m);
				this.orientationGraphic = new openfl_display_Bitmap(ob,openfl_display_PixelSnapping.ALWAYS,true);
				fw_managers_SceneManager.addToHUD(this.orientationGraphic,fw_Config.viewport.width / 2 - this.orientationGraphic.get_width() / 2,fw_Config.viewport.height / 2 - this.orientationGraphic.get_height() / 2);
			}
			return;
		} else if(this.orientationGraphic != null) {
			fw_managers_SceneManager.removeFromHUD(this.orientationGraphic);
			this.orientationGraphic = null;
		}
	}
	,blockLandscapeMode: function() {
		if(fw_Config.orientation == 1) {
			if(this.orientationGraphic == null) {
				var ob = new openfl_display_BitmapData(fw_Config.viewport.width | 0,fw_Config.viewport.height | 0,false,0);
				var m = new openfl_geom_Matrix();
				var obmp = new openfl_display_Bitmap(openfl_Assets.getBitmapData("img/orientation.jpg"),openfl_display_PixelSnapping.ALWAYS,true);
				m.rotate(90 * Math.PI / 180);
				m.translate(obmp.get_height() + fw_Config.viewport.width / 2 - obmp.get_height() / 2,fw_Config.viewport.height / 2 - obmp.get_width() / 2);
				ob.draw(obmp,m);
				this.orientationGraphic = new openfl_display_Bitmap(ob,openfl_display_PixelSnapping.ALWAYS,true);
				fw_managers_SceneManager.addToHUD(this.orientationGraphic,fw_Config.viewport.width / 2 - this.orientationGraphic.get_width() / 2,fw_Config.viewport.height / 2 - this.orientationGraphic.get_height() / 2);
			}
			return;
		} else if(this.orientationGraphic != null) {
			fw_managers_SceneManager.removeFromHUD(this.orientationGraphic);
			this.orientationGraphic = null;
		}
	}
	,added: function(e) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.added));
		this.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.resize));
		this.init();
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _g = this;
		return new lime_app_Future(function() {
			return _g;
		});
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "static/bglevelUp.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/bgmenu.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/funLogo.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/gameBg1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/gameBg3.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/gameBg4.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/gameLoop.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/gameLoop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/gameObj.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/gameObj.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/image.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/image.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/loaderLoop.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/loaderLoop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/sheepLoop.json";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/sheepLoop.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/timercircle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/font24.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/font24.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/font28b.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/font28b.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/font36b.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/font36b.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/font60.fnt";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "static/font60.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "static/click.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/click.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/milk.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/milk.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/pickup7.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/pickup7.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/scissor.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/scissor.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/sheep.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/sheep.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/silence.m4a";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/silence.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/silence.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/water.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/water.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/won.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/won.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/zoomin.mp3";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/zoomin.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "static/music.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "static/music.ogg";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var loader;
		var key = this.path.get(id);
		loader = lime_app_Preloader.loaders.get(key);
		if(loader == null) return null;
		var data = loader.data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _g = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _g.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
			loader.onComplete.add(function(_) {
				promise.complete(loader.data);
			});
			loader.onProgress.add(function(_1,loaded,total) {
				if(total == 0) promise.progress(0); else promise.progress(loaded / total);
			});
			loader.onIOError.add(function(_2,e) {
				promise.error(e);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else promise.complete(this.getBytes(id));
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			image.src = this.path.get(id);
		} else promise.complete(this.getImage(id));
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		if(this.path.exists(id)) {
			var loader = new lime_net_URLLoader();
			loader.onComplete.add(function(_) {
				promise.complete(loader.data);
			});
			loader.onProgress.add(function(_1,loaded,total) {
				if(total == 0) promise.progress(0); else promise.progress(loaded / total);
			});
			loader.onIOError.add(function(_2,msg) {
				promise.error(msg);
			});
			loader.load(new lime_net_URLRequest(this.path.get(id)));
		} else promise.complete(this.getText(id));
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var GameSettings = function() { };
$hxClasses["GameSettings"] = GameSettings;
GameSettings.__name__ = ["GameSettings"];
GameSettings.savedData = null;
GameSettings.a = null;
GameSettings.b = null;
GameSettings.c = null;
GameSettings.d = null;
GameSettings.e = null;
GameSettings.loader = null;
GameSettings.fx = null;
GameSettings.fontSize = null;
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 0;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 0;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.nodeName;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		this.attributeMap.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element && (function($this) {
				var $r;
				if(child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				$r = child.nodeName;
				return $r;
			}(this)) == name) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) return child;
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(x.parent != null) x.parent.removeChild(x);
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
	,__properties__: {get_nodeName:"get_nodeName"}
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return (function($this) {
			var $r;
			var array = [$this.redMultiplier,0,0,0,$this.redOffset / 255,0,$this.greenMultiplier,0,0,$this.greenOffset / 255,0,0,$this.blueMultiplier,0,$this.blueOffset / 255,0,0,0,$this.alphaMultiplier,$this.alphaOffset / 255];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this));
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var bitmapFont_BitmapFont = function(name,bitmap) {
	this.spaceWidth = 0;
	this.minOffsetX = 0;
	this.italic = false;
	this.bold = false;
	this.lineHeight = 0;
	this.size = 0;
	this.bitmap = bitmap;
	this.fontName = name;
	this.glyphs = new haxe_ds_IntMap();
	bitmapFont_BitmapFont.store(name,this);
};
$hxClasses["bitmapFont.BitmapFont"] = bitmapFont_BitmapFont;
bitmapFont_BitmapFont.__name__ = ["bitmapFont","BitmapFont"];
bitmapFont_BitmapFont.store = function(fontKey,font) {
	if(!bitmapFont_BitmapFont.fonts.exists(fontKey)) bitmapFont_BitmapFont.fonts.set(fontKey,font);
};
bitmapFont_BitmapFont.get = function(fontKey) {
	return bitmapFont_BitmapFont.fonts.get(fontKey);
};
bitmapFont_BitmapFont.remove = function(fontKey) {
	var font = bitmapFont_BitmapFont.fonts.get(fontKey);
	bitmapFont_BitmapFont.fonts.remove(fontKey);
	if(font != null) font.dispose();
};
bitmapFont_BitmapFont.clearFonts = function() {
	var $it0 = bitmapFont_BitmapFont.fonts.iterator();
	while( $it0.hasNext() ) {
		var font = $it0.next();
		font.dispose();
	}
	bitmapFont_BitmapFont.fonts = new haxe_ds_StringMap();
};
bitmapFont_BitmapFont.getDefaultFont = function() {
	var font = bitmapFont_BitmapFont.get("defaultFontKey");
	if(font != null) return font;
	var letters = "";
	var bd = new openfl_display_BitmapData(700,9,true,-7829368);
	var letterPos = 0;
	var i = 0;
	while(i < " 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000".length) {
		letters += HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",i,1);
		var gw = Std.parseInt((function($this) {
			var $r;
			var pos = ++i;
			$r = HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",pos,1);
			return $r;
		}(this)));
		var gh = Std.parseInt((function($this) {
			var $r;
			var pos1 = ++i;
			$r = HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",pos1,1);
			return $r;
		}(this)));
		var _g = 0;
		while(_g < gh) {
			var py = _g++;
			var _g1 = 0;
			while(_g1 < gw) {
				var px = _g1++;
				i++;
				if(HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",i,1) == "1") bd.setPixel32(1 + letterPos * 7 + px,1 + py,-1); else bd.setPixel32(1 + letterPos * 7 + px,1 + py,0);
			}
		}
		i++;
		letterPos++;
	}
	return bitmapFont_BitmapFont.fromXNA("defaultFontKey",bd,letters);
};
bitmapFont_BitmapFont.fromAngelCode = function(Source,Data) {
	var fast = new haxe_xml_Fast(Data.firstElement());
	var fontName = Std.string(fast.node.resolve("info").att.resolve("face"));
	var font = bitmapFont_BitmapFont.get(fontName);
	if(font != null) return font;
	font = new bitmapFont_BitmapFont(fontName,Source);
	font.lineHeight = Std.parseInt(fast.node.resolve("common").att.resolve("lineHeight"));
	font.size = Std.parseInt(fast.node.resolve("info").att.resolve("size"));
	font.fontName = Std.string(fast.node.resolve("info").att.resolve("face"));
	font.bold = Std.parseInt(fast.node.resolve("info").att.resolve("bold")) != 0;
	font.italic = Std.parseInt(fast.node.resolve("info").att.resolve("italic")) != 0;
	var frame;
	var glyph;
	var charCode;
	var spaceCharCode = HxOverrides.cca(" ",0);
	var xOffset;
	var yOffset;
	var xAdvance;
	var frameHeight;
	var chars = fast.node.resolve("chars");
	var _g = chars.nodes.resolve("char").iterator();
	while(_g.head != null) {
		var $char;
		$char = (function($this) {
			var $r;
			_g.val = _g.head[0];
			_g.head = _g.head[1];
			$r = _g.val;
			return $r;
		}(this));
		frame = new openfl_geom_Rectangle();
		frame.x = Std.parseInt($char.att.resolve("x"));
		frame.y = Std.parseInt($char.att.resolve("y"));
		frame.width = Std.parseInt($char.att.resolve("width"));
		frameHeight = Std.parseInt($char.att.resolve("height"));
		frame.height = frameHeight;
		if($char.has.resolve("xoffset")) xOffset = Std.parseInt($char.att.resolve("xoffset")); else xOffset = 0;
		if($char.has.resolve("yoffset")) yOffset = Std.parseInt($char.att.resolve("yoffset")); else yOffset = 0;
		if($char.has.resolve("xadvance")) xAdvance = Std.parseInt($char.att.resolve("xadvance")); else xAdvance = 0;
		if(font.minOffsetX > xOffset) font.minOffsetX = xOffset; else font.minOffsetX = font.minOffsetX;
		glyph = null;
		charCode = -1;
		if($char.has.resolve("letter")) glyph = $char.att.resolve("letter"); else if($char.has.resolve("id")) charCode = Std.parseInt($char.att.resolve("id"));
		if(charCode == -1 && glyph == null) throw new js__$Boot_HaxeError("Invalid font xml data!");
		if(glyph != null) {
			switch(glyph) {
			case "space":
				glyph = " ";
				break;
			case "&quot;":
				glyph = "\"";
				break;
			case "&amp;":
				glyph = "&";
				break;
			case "&gt;":
				glyph = ">";
				break;
			case "&lt;":
				glyph = "<";
				break;
			default:
				glyph = glyph;
			}
			charCode = HxOverrides.cca(glyph,0);
		}
		font.addGlyphFrame(charCode,frame,xOffset,yOffset,xAdvance);
		if(charCode == spaceCharCode) font.spaceWidth = xAdvance; else if(font.lineHeight > frameHeight + yOffset) font.lineHeight = font.lineHeight; else font.lineHeight = frameHeight + yOffset;
	}
	return font;
};
bitmapFont_BitmapFont.fromXNA = function(key,source,letters,glyphBGColor) {
	if(glyphBGColor == null) glyphBGColor = 0;
	var font = bitmapFont_BitmapFont.get(key);
	if(font != null) return font;
	font = new bitmapFont_BitmapFont(key,source);
	font.fontName = key;
	if(letters == null) letters = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"; else letters = letters;
	var bmd = source;
	var globalBGColor = bmd.getPixel(0,0);
	var cy = 0;
	var cx;
	var letterIdx = 0;
	var charCode;
	var numLetters = letters.length;
	var rect;
	var xAdvance;
	while(cy < bmd.height && letterIdx < numLetters) {
		var rowHeight = 0;
		cx = 0;
		while(cx < bmd.width && letterIdx < numLetters) {
			if(Std["int"](bmd.getPixel(cx,cy)) != globalBGColor) {
				var gx = cx;
				var gy = cy;
				while(Std["int"](bmd.getPixel(gx,cy)) != globalBGColor) gx++;
				while(Std["int"](bmd.getPixel(cx,gy)) != globalBGColor) gy++;
				var gw = gx - cx;
				var gh = gy - cy;
				charCode = HxOverrides.cca(letters,letterIdx);
				rect = new openfl_geom_Rectangle(cx,cy,gw,gh);
				xAdvance = gw;
				font.addGlyphFrame(charCode,rect,0,0,xAdvance);
				if(charCode == 32) font.spaceWidth = xAdvance;
				if(gh > rowHeight) rowHeight = gh;
				if(gh > font.size) font.size = gh;
				cx += gw;
				letterIdx++;
			}
			cx++;
		}
		cy += rowHeight + 1;
	}
	font.lineHeight = font.size;
	bitmapFont_BitmapFont.POINT.x = bitmapFont_BitmapFont.POINT.y = 0;
	var bgColor32 = bmd.getPixel32(0,0);
	bitmapFont_BitmapFont.replaceColor(bmd,bgColor32,0);
	if(glyphBGColor != 0) bitmapFont_BitmapFont.replaceColor(bmd,glyphBGColor,0);
	return font;
};
bitmapFont_BitmapFont.replaceColor = function(bitmapData,color,newColor) {
	var row = 0;
	var column = 0;
	var rows = bitmapData.height;
	var columns = bitmapData.width;
	bitmapData.lock();
	while(row < rows) {
		column = 0;
		while(column < columns) {
			if(bitmapData.getPixel32(column,row) == color) bitmapData.setPixel32(column,row,newColor);
			column++;
		}
		row++;
	}
	bitmapData.unlock();
	return bitmapData;
};
bitmapFont_BitmapFont.fromMonospace = function(key,source,letters,charSize,region,spacing) {
	var font = bitmapFont_BitmapFont.get(key);
	if(font != null) return font;
	if(letters == null) letters = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"; else letters = letters;
	if(region == null) region = source.rect; else region = region;
	if(region.width == 0 || region.get_right() > source.width) region.width = source.width - region.x;
	if(region.height == 0 || region.get_bottom() > source.height) region.height = source.height - region.y;
	if(spacing == null) spacing = new openfl_geom_Point(0,0); else spacing = spacing;
	var bitmapWidth = region.width | 0;
	var bitmapHeight = region.height | 0;
	var startX = region.x | 0;
	var startY = region.y | 0;
	var xSpacing = spacing.x | 0;
	var ySpacing = spacing.y | 0;
	var charWidth = charSize.x | 0;
	var charHeight = charSize.y | 0;
	var spacedWidth = charWidth + xSpacing;
	var spacedHeight = charHeight + ySpacing;
	var numRows;
	if(charHeight == 0) numRows = 1; else numRows = (bitmapHeight + ySpacing) / spacedHeight | 0;
	var numCols;
	if(charWidth == 0) numCols = 1; else numCols = (bitmapWidth + xSpacing) / spacedWidth | 0;
	font = new bitmapFont_BitmapFont(key,source);
	font.fontName = key;
	font.lineHeight = font.size = charHeight;
	var charRect;
	var xAdvance = charWidth;
	font.spaceWidth = xAdvance;
	var letterIndex = 0;
	var numLetters = letters.length;
	var _g1 = 0;
	var _g = numRows;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = numCols;
		while(_g3 < _g2) {
			var i = _g3++;
			charRect = new openfl_geom_Rectangle(startX + i * spacedWidth,startY + j * spacedHeight,charWidth,charHeight);
			font.addGlyphFrame(HxOverrides.cca(letters,letterIndex),charRect,0,0,xAdvance);
			letterIndex++;
			if(letterIndex >= numLetters) return font;
		}
	}
	return font;
};
bitmapFont_BitmapFont.prototype = {
	dispose: function() {
		if(this.bitmap != null) this.bitmap.dispose();
		this.bitmap = null;
		this.glyphs = null;
		this.fontName = null;
	}
	,addGlyphFrame: function(charCode,frame,offsetX,offsetY,xAdvance) {
		if(xAdvance == null) xAdvance = 0;
		if(offsetY == null) offsetY = 0;
		if(offsetX == null) offsetX = 0;
		if(frame.width == 0 || frame.height == 0 || this.glyphs.h[charCode] != null) return;
		var glyphFrame = new bitmapFont_BitmapGlyphFrame(this);
		glyphFrame.charCode = charCode;
		glyphFrame.xoffset = offsetX;
		glyphFrame.yoffset = offsetY;
		glyphFrame.xadvance = xAdvance;
		glyphFrame.rect = frame;
		this.glyphs.h[charCode] = glyphFrame;
	}
	,prepareGlyphs: function(scale,color,useColor,smoothing) {
		if(smoothing == null) smoothing = true;
		if(useColor == null) useColor = true;
		return new bitmapFont_BitmapGlyphCollection(this,scale,color,useColor,smoothing);
	}
	,__class__: bitmapFont_BitmapFont
};
var bitmapFont_BitmapGlyphFrame = function(parent) {
	this.parent = parent;
};
$hxClasses["bitmapFont.BitmapGlyphFrame"] = bitmapFont_BitmapGlyphFrame;
bitmapFont_BitmapGlyphFrame.__name__ = ["bitmapFont","BitmapGlyphFrame"];
bitmapFont_BitmapGlyphFrame.prototype = {
	dispose: function() {
		this.rect = null;
		if(this._bitmap != null) this._bitmap.dispose();
		this._bitmap = null;
	}
	,get_bitmap: function() {
		if(this._bitmap != null) return this._bitmap;
		this._bitmap = new openfl_display_BitmapData(Math.ceil(this.rect.width),Math.ceil(this.rect.height),true,0);
		this._bitmap.copyPixels(this.parent.bitmap,this.rect,new openfl_geom_Point());
		return this._bitmap;
	}
	,__class__: bitmapFont_BitmapGlyphFrame
	,__properties__: {get_bitmap:"get_bitmap"}
};
var bitmapFont_BitmapGlyphCollection = function(font,scale,color,useColor,smoothing) {
	if(smoothing == null) smoothing = true;
	if(useColor == null) useColor = true;
	this.spaceWidth = 0;
	this.minOffsetX = 0;
	this.glyphMap = new haxe_ds_IntMap();
	this.glyphs = [];
	this.font = font;
	this.scale = scale;
	if(useColor) this.color = color; else this.color = -1;
	this.minOffsetX = font.minOffsetX * scale;
	this.prepareGlyphs(smoothing);
};
$hxClasses["bitmapFont.BitmapGlyphCollection"] = bitmapFont_BitmapGlyphCollection;
bitmapFont_BitmapGlyphCollection.__name__ = ["bitmapFont","BitmapGlyphCollection"];
bitmapFont_BitmapGlyphCollection.prototype = {
	prepareGlyphs: function(smoothing) {
		if(smoothing == null) smoothing = true;
		var matrix = new openfl_geom_Matrix();
		matrix.scale(this.scale,this.scale);
		var colorTransform = new openfl_geom_ColorTransform();
		colorTransform.redMultiplier = _$UInt_UInt_$Impl_$.toFloat(this.color >> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
		colorTransform.greenMultiplier = _$UInt_UInt_$Impl_$.toFloat(this.color >> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
		colorTransform.blueMultiplier = _$UInt_UInt_$Impl_$.toFloat(this.color & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
		colorTransform.alphaMultiplier = _$UInt_UInt_$Impl_$.toFloat(this.color >> 24 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
		var glyphBD;
		var preparedBD;
		var glyph;
		var preparedGlyph;
		var bdWidth;
		var bdHeight;
		var offsetX;
		var offsetY;
		var xAdvance;
		this.spaceWidth = this.font.spaceWidth * this.scale;
		var $it0 = this.font.glyphs.iterator();
		while( $it0.hasNext() ) {
			var glyph1 = $it0.next();
			glyphBD = glyph1.get_bitmap();
			bdWidth = Math.ceil(glyphBD.width * this.scale);
			bdHeight = Math.ceil(glyphBD.height * this.scale);
			if(bdWidth > 0) bdWidth = bdWidth; else bdWidth = 1;
			if(bdHeight > 0) bdHeight = bdHeight; else bdHeight = 1;
			preparedBD = new openfl_display_BitmapData(bdWidth,bdHeight,true,0);
			preparedBD.draw(glyphBD,matrix,null,null,null,smoothing);
			preparedBD.colorTransform(preparedBD.rect,colorTransform);
			offsetX = Math.ceil(glyph1.xoffset * this.scale);
			offsetY = Math.ceil(glyph1.yoffset * this.scale);
			xAdvance = Math.ceil(glyph1.xadvance * this.scale);
			preparedGlyph = new bitmapFont_BitmapGlyph(glyph1.charCode,preparedBD,offsetX,offsetY,xAdvance);
			this.glyphs.push(preparedGlyph);
			this.glyphMap.h[preparedGlyph.charCode] = preparedGlyph;
		}
	}
	,dispose: function() {
		if(this.glyphs != null) {
			var _g = 0;
			var _g1 = this.glyphs;
			while(_g < _g1.length) {
				var glyph = _g1[_g];
				++_g;
				glyph.dispose();
			}
		}
		this.glyphs = null;
		this.glyphMap = null;
		this.font = null;
	}
	,__class__: bitmapFont_BitmapGlyphCollection
};
var bitmapFont_BitmapGlyph = function(charCode,bmd,offsetX,offsetY,xAdvance) {
	if(xAdvance == null) xAdvance = 0;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.xAdvance = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.charCode = charCode;
	this.bitmap = bmd;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.xAdvance = xAdvance;
	this.rect = bmd.rect;
};
$hxClasses["bitmapFont.BitmapGlyph"] = bitmapFont_BitmapGlyph;
bitmapFont_BitmapGlyph.__name__ = ["bitmapFont","BitmapGlyph"];
bitmapFont_BitmapGlyph.prototype = {
	dispose: function() {
		if(this.bitmap != null) this.bitmap.dispose();
		this.bitmap = null;
	}
	,__class__: bitmapFont_BitmapGlyph
};
var bitmapFont_BitmapTextField = function(font,text,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	if(text == null) text = "";
	this._fieldHeight = 1;
	this._fieldWidth = 1;
	this._pendingBorderGlyphsChange = false;
	this._pendingTextGlyphsChange = true;
	this._pendingGraphicChange = true;
	this._pendingTextChange = true;
	this.updateImmediately = true;
	this.size = 1;
	this.numLines = 0;
	this.multiLine = true;
	this.backgroundColor = 0;
	this.background = false;
	this.borderQuality = 0;
	this.borderSize = 1;
	this.borderColor = -16777216;
	this.borderStyle = bitmapFont_TextBorderStyle.NONE;
	this.useTextColor = false;
	this.textColor = -1;
	this._tabSpaces = "    ";
	this.numSpacesInTab = 4;
	this.padding = 0;
	this.autoSize = true;
	this.wrapByWord = true;
	this.wordWrap = true;
	this.autoUpperCase = false;
	this.letterSpacing = 0;
	this.lineSpacing = 0;
	this.alignment = "left";
	this._linesWidth = [];
	this._lines = [];
	this.text = "";
	openfl_display_Sprite.call(this);
	this.shadowOffset = new openfl_geom_Point(1,1);
	if(pixelSnapping == null) pixelSnapping = openfl_display_PixelSnapping.AUTO; else pixelSnapping = pixelSnapping;
	this._bitmapData = new openfl_display_BitmapData(this._fieldWidth,this._fieldHeight,true,0);
	this._bitmap = new openfl_display_Bitmap(this._bitmapData,pixelSnapping,smoothing);
	this.addChild(this._bitmap);
	this._point = new openfl_geom_Point();
	if(font == null) font = bitmapFont_BitmapFont.getDefaultFont();
	this.set_font(font);
	this.set_text(text);
	this.set_smoothing(smoothing);
};
$hxClasses["bitmapFont.BitmapTextField"] = bitmapFont_BitmapTextField;
bitmapFont_BitmapTextField.__name__ = ["bitmapFont","BitmapTextField"];
bitmapFont_BitmapTextField.__super__ = openfl_display_Sprite;
bitmapFont_BitmapTextField.prototype = $extend(openfl_display_Sprite.prototype,{
	dispose: function() {
		this.set_updateImmediately(false);
		this.set_font(null);
		this.set_text(null);
		this._lines = null;
		this._linesWidth = null;
		this.shadowOffset = null;
		this._point = null;
		if(this.textGlyphs != null) this.textGlyphs.dispose();
		this.textGlyphs = null;
		if(this.borderGlyphs != null) this.borderGlyphs.dispose();
		this.borderGlyphs = null;
		if(this._bitmap != null) this.removeChild(this._bitmap);
		this._bitmap = null;
		if(this._bitmapData != null) this._bitmapData.dispose();
		this._bitmapData = null;
	}
	,forceGraphicUpdate: function() {
		this._pendingGraphicChange = true;
		if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
		if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
		if(this._pendingTextChange) {
			this.updateText();
			this._pendingGraphicChange = true;
		}
		if(this._pendingGraphicChange) this.updateGraphic();
	}
	,checkImmediateChanges: function() {
		if(this.updateImmediately) {
			if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
			if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
			if(this._pendingTextChange) {
				this.updateText();
				this._pendingGraphicChange = true;
			}
			if(this._pendingGraphicChange) this.updateGraphic();
		}
	}
	,checkPendingChanges: function() {
		if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
		if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
		if(this._pendingTextChange) {
			this.updateText();
			this._pendingGraphicChange = true;
		}
		if(this._pendingGraphicChange) this.updateGraphic();
	}
	,set_textColor: function(value) {
		if(this.textColor != value) {
			this.textColor = value;
			this._pendingTextGlyphsChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_useTextColor: function(value) {
		if(this.useTextColor != value) {
			this.useTextColor = value;
			this._pendingTextGlyphsChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_text: function(value) {
		if(value != this.text && value != null) {
			this.text = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,updateText: function() {
		var tmp;
		if(this.autoUpperCase) tmp = this.text.toUpperCase(); else tmp = this.text;
		this._lines = tmp.split("\n");
		if(!this.autoSize) {
			if(this.wordWrap) this.wrap(); else this.cutLines();
		}
		if(!this.multiLine) this._lines = [this._lines[0]];
		this._pendingTextChange = false;
		this._pendingGraphicChange = true;
	}
	,computeTextSize: function() {
		var txtWidth = Math.ceil(this._fieldWidth);
		var txtHeight = Math.ceil(this.get_textHeight()) + 2 * this.padding;
		var tw = Math.ceil(this.get_textWidth());
		if(this.autoSize) txtWidth = tw + 2 * this.padding; else txtWidth = Math.ceil(this._fieldWidth);
		if(txtWidth == 0) this._fieldWidth = 1; else this._fieldWidth = txtWidth;
		if(txtHeight == 0) this._fieldHeight = 1; else this._fieldHeight = txtHeight;
	}
	,getLineWidth: function(lineIndex) {
		if(lineIndex < 0 || lineIndex >= this._lines.length) return 0;
		return this.getStringWidth(this._lines[lineIndex]);
	}
	,getStringWidth: function(str) {
		var spaceWidth = Math.ceil(this.font.spaceWidth * this.size);
		var tabWidth = Math.ceil(spaceWidth * this.numSpacesInTab);
		var lineLength = str.length;
		var lineWidth = Math.ceil(Math.abs(this.font.minOffsetX) * this.size);
		var charCode;
		var charWidth = 0;
		var widthPlusOffset = 0;
		var glyphFrame;
		var _g = 0;
		while(_g < lineLength) {
			var c = _g++;
			charCode = HxOverrides.cca(str,c);
			if(charCode == 32) charWidth = spaceWidth; else if(charCode == 9) charWidth = tabWidth; else if(this.font.glyphs.h.hasOwnProperty(charCode)) {
				glyphFrame = this.font.glyphs.h[charCode];
				charWidth = Math.ceil(glyphFrame.xadvance * this.size);
				if(c == lineLength - 1) {
					widthPlusOffset = Math.ceil((glyphFrame.xoffset + glyphFrame.get_bitmap().width) * this.size);
					if(widthPlusOffset > charWidth) charWidth = widthPlusOffset;
				}
			} else charWidth = 0;
			lineWidth += charWidth + this.letterSpacing;
		}
		if(lineLength > 0) lineWidth -= this.letterSpacing;
		return lineWidth;
	}
	,cutLines: function() {
		var newLines = [];
		var lineLength;
		var c;
		var $char;
		var charCode;
		var charWidth = 0;
		var subLine;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth * this.size;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = Math.abs(this.font.minOffsetX) * this.size;
		var _g = 0;
		var _g1 = this._lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			lineLength = line.length;
			subLine = new haxe_Utf8();
			subLineWidth = startX;
			c = 0;
			while(c < lineLength) {
				charCode = HxOverrides.cca(line,c);
				if(charCode == 32) charWidth = spaceWidth; else if(charCode == 9) charWidth = tabWidth; else if(this.font.glyphs.h.hasOwnProperty(charCode)) charWidth = this.font.glyphs.h[charCode].xadvance * this.size; else charWidth = 0;
				charWidth += this.letterSpacing;
				if(subLineWidth + charWidth > this._fieldWidth - 2 * this.padding) {
					subLine.__b += String.fromCharCode(charCode);
					newLines.push(subLine.__b);
					subLine = new haxe_Utf8();
					subLineWidth = startX;
					c = lineLength;
				} else {
					subLine.__b += String.fromCharCode(charCode);
					subLineWidth += charWidth;
				}
				c++;
			}
		}
		this._lines = newLines;
	}
	,wrap: function() {
		var newLines = [];
		var words;
		var _g = 0;
		var _g1 = this._lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			words = [];
			this.splitLineIntoWords(line,words);
			if(this.wrapByWord) this.wrapLineByWord(words,newLines); else this.wrapLineByCharacter(words,newLines);
		}
		this._lines = newLines;
	}
	,splitLineIntoWords: function(line,words) {
		var word = "";
		var wordUtf8 = new haxe_Utf8();
		var isSpaceWord = false;
		var lineLength = line.length;
		var hyphenCode = HxOverrides.cca("-",0);
		var c = 0;
		var charCode;
		var charUtf8;
		while(c < lineLength) {
			charCode = HxOverrides.cca(line,c);
			word = wordUtf8.__b;
			if(charCode == 32 || charCode == 9) {
				if(!isSpaceWord) {
					isSpaceWord = true;
					if(word != "") {
						words.push(word);
						wordUtf8 = new haxe_Utf8();
					}
				}
				wordUtf8.__b += String.fromCharCode(charCode);
			} else if(charCode == hyphenCode) {
				if(isSpaceWord && word != "") {
					isSpaceWord = false;
					words.push(word);
					words.push("-");
				} else if(isSpaceWord == false) {
					charUtf8 = new haxe_Utf8();
					charUtf8.__b += String.fromCharCode(charCode);
					words.push(word + charUtf8.__b);
				}
				wordUtf8 = new haxe_Utf8();
			} else {
				if(isSpaceWord && word != "") {
					isSpaceWord = false;
					words.push(word);
					wordUtf8 = new haxe_Utf8();
				}
				wordUtf8.__b += String.fromCharCode(charCode);
			}
			c++;
		}
		word = wordUtf8.__b;
		if(word != "") words.push(word);
	}
	,wrapLineByWord: function(words,newLines) {
		var numWords = words.length;
		var w;
		var word;
		var wordWidth;
		var wordLength;
		var isSpaceWord = false;
		var charCode;
		var charWidth = 0;
		var subLines = [];
		var subLine;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth * this.size;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = Math.abs(this.font.minOffsetX) * this.size;
		if(numWords > 0) {
			w = 0;
			subLineWidth = startX;
			subLine = "";
			while(w < numWords) {
				wordWidth = 0;
				word = words[w];
				wordLength = word.length;
				charCode = HxOverrides.cca(word,0);
				isSpaceWord = charCode == 32 || charCode == 9;
				var _g = 0;
				while(_g < wordLength) {
					var c = _g++;
					charCode = HxOverrides.cca(word,c);
					if(charCode == 32) charWidth = spaceWidth; else if(charCode == 9) charWidth = tabWidth; else if(this.font.glyphs.h.hasOwnProperty(charCode)) charWidth = this.font.glyphs.h[charCode].xadvance * this.size; else charWidth = 0;
					wordWidth += charWidth;
				}
				wordWidth += (wordLength - 1) * this.letterSpacing;
				if(subLineWidth + wordWidth > this._fieldWidth - 2 * this.padding) {
					if(isSpaceWord) {
						subLines.push(subLine);
						subLine = "";
						subLineWidth = startX;
					} else if(subLine != "") {
						subLines.push(subLine);
						subLine = word;
						subLineWidth = startX + wordWidth + this.letterSpacing;
					} else {
						subLine = word;
						subLineWidth = startX + wordWidth + this.letterSpacing;
					}
				} else {
					subLine += word;
					subLineWidth += wordWidth + this.letterSpacing;
				}
				w++;
			}
			if(subLine != "") subLines.push(subLine);
		}
		var _g1 = 0;
		while(_g1 < subLines.length) {
			var subline = subLines[_g1];
			++_g1;
			newLines.push(subline);
		}
	}
	,wrapLineByCharacter: function(words,newLines) {
		var numWords = words.length;
		var w;
		var word;
		var wordLength;
		var isSpaceWord = false;
		var $char;
		var charCode;
		var c;
		var charWidth = 0;
		var subLines = [];
		var subLine;
		var subLineUtf8;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth * this.size;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = Math.abs(this.font.minOffsetX) * this.size;
		if(numWords > 0) {
			w = 0;
			subLineWidth = startX;
			subLineUtf8 = new haxe_Utf8();
			while(w < numWords) {
				word = words[w];
				wordLength = word.length;
				charCode = HxOverrides.cca(word,0);
				isSpaceWord = charCode == 32 || charCode == 9;
				c = 0;
				while(c < wordLength) {
					charCode = HxOverrides.cca(word,c);
					if(charCode == 32) charWidth = spaceWidth; else if(charCode == 9) charWidth = tabWidth; else if(this.font.glyphs.h.hasOwnProperty(charCode)) charWidth = this.font.glyphs.h[charCode].xadvance * this.size; else charWidth = 0;
					if(subLineWidth + charWidth > this._fieldWidth - 2 * this.padding) {
						subLine = subLineUtf8.__b;
						if(isSpaceWord) {
							subLines.push(subLine);
							c = wordLength;
							subLineUtf8 = new haxe_Utf8();
							subLineWidth = startX;
						} else if(subLine != "") {
							subLines.push(subLine);
							subLineUtf8 = new haxe_Utf8();
							subLineUtf8.__b += String.fromCharCode(charCode);
							subLineWidth = startX + charWidth + this.letterSpacing;
						} else {
							subLineUtf8 = new haxe_Utf8();
							subLineUtf8.__b += String.fromCharCode(charCode);
							subLineWidth = startX + charWidth + this.letterSpacing;
						}
					} else {
						subLineUtf8.__b += String.fromCharCode(charCode);
						subLineWidth += charWidth + this.letterSpacing;
					}
					c++;
				}
				w++;
			}
			subLine = subLineUtf8.__b;
			if(subLine != "") subLines.push(subLine);
		}
		var _g = 0;
		while(_g < subLines.length) {
			var subline = subLines[_g];
			++_g;
			newLines.push(subline);
		}
	}
	,updateGraphic: function() {
		this.computeTextSize();
		var colorForFill;
		if(this.background) colorForFill = this.backgroundColor; else colorForFill = 0;
		if(this._bitmapData == null || (this._fieldWidth != this._bitmapData.width || this._fieldHeight != this._bitmapData.height)) {
			if(this._bitmapData != null) this._bitmapData.dispose();
			this._bitmapData = new openfl_display_BitmapData(this._fieldWidth,this._fieldHeight,true,colorForFill);
			this._bitmap.bitmapData = this._bitmapData;
			this._bitmap.smoothing = this.smoothing;
		} else this._bitmapData.fillRect(this._bitmapData.rect,colorForFill);
		if(this.size > 0) {
			this._bitmapData.lock();
			var numLines = this._lines.length;
			var line;
			var lineWidth;
			var ox;
			var oy;
			var iterations = this.borderSize * this.borderQuality | 0;
			if(iterations <= 0) iterations = 1; else iterations = iterations;
			var delta = this.borderSize / iterations | 0;
			var iterationsX = 1;
			var iterationsY = 1;
			var deltaX = 1;
			var deltaY = 1;
			if(this.borderStyle == bitmapFont_TextBorderStyle.SHADOW) {
				iterationsX = Math.round(Math.abs(this.shadowOffset.x) * this.borderQuality);
				if(iterationsX <= 0) iterationsX = 1; else iterationsX = iterationsX;
				iterationsY = Math.round(Math.abs(this.shadowOffset.y) * this.borderQuality);
				if(iterationsY <= 0) iterationsY = 1; else iterationsY = iterationsY;
				deltaX = Math.round(this.shadowOffset.x / iterationsX);
				deltaY = Math.round(this.shadowOffset.y / iterationsY);
			}
			var _g = 0;
			while(_g < numLines) {
				var i = _g++;
				line = this._lines[i];
				lineWidth = this._linesWidth[i];
				ox = Std["int"](Math.abs(this.font.minOffsetX) * this.size);
				oy = (i * (this.font.lineHeight * this.size + this.lineSpacing) | 0) + this.padding;
				if(this.alignment == "center") ox += ((this._fieldWidth - lineWidth) / 2 | 0) - this.padding;
				if(this.alignment == "right") ox += this._fieldWidth - (lineWidth | 0) - this.padding; else ox += this.padding;
				var _g1 = this.borderStyle;
				switch(_g1[1]) {
				case 1:
					var _g2 = 0;
					while(_g2 < iterationsY) {
						var iterY = _g2++;
						var _g3 = 0;
						while(_g3 < iterationsX) {
							var iterX = _g3++;
							this.blitLine(line,this.borderGlyphs,ox + deltaX * (iterX + 1),oy + deltaY * (iterY + 1));
						}
					}
					break;
				case 2:
					var itd = 0;
					var _g21 = 0;
					while(_g21 < iterations) {
						var iter = _g21++;
						itd = delta * (iter + 1);
						this.blitLine(line,this.borderGlyphs,ox - itd,oy - itd);
						this.blitLine(line,this.borderGlyphs,ox,oy - itd);
						this.blitLine(line,this.borderGlyphs,ox + itd,oy - itd);
						this.blitLine(line,this.borderGlyphs,ox - itd,oy);
						this.blitLine(line,this.borderGlyphs,ox + itd,oy);
						this.blitLine(line,this.borderGlyphs,ox - itd,oy + itd);
						this.blitLine(line,this.borderGlyphs,ox,oy + itd);
						this.blitLine(line,this.borderGlyphs,ox + itd,oy + itd);
					}
					break;
				case 3:
					var itd1 = 0;
					var _g22 = 0;
					while(_g22 < iterations) {
						var iter1 = _g22++;
						itd1 = delta * (iter1 + 1);
						this.blitLine(line,this.borderGlyphs,ox - itd1,oy - itd1);
						this.blitLine(line,this.borderGlyphs,ox + itd1,oy - itd1);
						this.blitLine(line,this.borderGlyphs,ox - itd1,oy + itd1);
						this.blitLine(line,this.borderGlyphs,ox + itd1,oy + itd1);
					}
					break;
				case 0:
					break;
				}
			}
			var _g4 = 0;
			while(_g4 < numLines) {
				var i1 = _g4++;
				line = this._lines[i1];
				lineWidth = this._linesWidth[i1];
				ox = Std["int"](Math.abs(this.font.minOffsetX) * this.size);
				oy = (i1 * (this.font.lineHeight * this.size + this.lineSpacing) | 0) + this.padding;
				if(this.alignment == "center") ox += ((this._fieldWidth - lineWidth) / 2 | 0) - this.padding;
				if(this.alignment == "right") ox += this._fieldWidth - (lineWidth | 0) - this.padding; else ox += this.padding;
				this.blitLine(line,this.textGlyphs,ox,oy);
			}
			this._bitmapData.unlock();
		}
		this._pendingGraphicChange = false;
	}
	,blitLine: function(line,glyphs,startX,startY) {
		if(glyphs == null) return;
		var glyph;
		var charCode;
		var curX = startX;
		var curY = startY;
		var spaceWidth = this.font.spaceWidth * this.size | 0;
		var tabWidth = spaceWidth * this.numSpacesInTab | 0;
		var lineLength = line.length;
		var _g = 0;
		while(_g < lineLength) {
			var i = _g++;
			charCode = HxOverrides.cca(line,i);
			if(charCode == 32) curX += spaceWidth; else if(charCode == 9) curX += tabWidth; else {
				glyph = glyphs.glyphMap.h[charCode];
				if(glyph != null) {
					this._point.x = curX + glyph.offsetX;
					this._point.y = curY + glyph.offsetY;
					this._bitmapData.copyPixels(glyph.bitmap,glyph.rect,this._point,null,null,true);
					curX += glyph.xAdvance;
				}
			}
			curX += this.letterSpacing;
		}
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) Quality = 1;
		if(Size == null) Size = 1;
		if(Color == null) Color = -1;
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		if(this.borderStyle == bitmapFont_TextBorderStyle.SHADOW) this.shadowOffset.setTo(this.borderSize,this.borderSize);
		this._pendingGraphicChange = true;
		if(this.updateImmediately) {
			if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
			if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
			if(this._pendingTextChange) {
				this.updateText();
				this._pendingGraphicChange = true;
			}
			if(this._pendingGraphicChange) this.updateGraphic();
		}
	}
	,set_width: function(value) {
		value = value | 0;
		value = Math.max(1,value);
		if(value != this.get_width()) {
			if(value == 0) this._fieldWidth = 1; else this._fieldWidth = value | 0;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_alignment: function(value) {
		if(this.alignment != value) {
			this.alignment = value;
			this._pendingGraphicChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_multiLine: function(value) {
		if(this.multiLine != value) {
			this.multiLine = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_font: function(value) {
		if(this.font != value && value != null) {
			this.font = value;
			this._pendingTextChange = true;
			this._pendingBorderGlyphsChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_lineSpacing: function(value) {
		if(this.lineSpacing != value) {
			this.lineSpacing = Std["int"](Math.abs(value));
			this._pendingGraphicChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.lineSpacing;
	}
	,set_letterSpacing: function(value) {
		var tmp = Std["int"](Math.abs(value));
		if(tmp != this.letterSpacing) {
			this.letterSpacing = tmp;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.letterSpacing;
	}
	,set_autoUpperCase: function(value) {
		if(this.autoUpperCase != value) {
			this.autoUpperCase = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.autoUpperCase;
	}
	,set_wordWrap: function(value) {
		if(this.wordWrap != value) {
			this.wordWrap = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.wordWrap;
	}
	,set_wrapByWord: function(value) {
		if(this.wrapByWord != value) {
			this.wrapByWord = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_autoSize: function(value) {
		if(this.autoSize != value) {
			this.autoSize = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.autoSize;
	}
	,set_size: function(value) {
		var tmp = Math.abs(value);
		if(tmp != this.size) {
			this.size = tmp;
			this._pendingTextGlyphsChange = true;
			this._pendingBorderGlyphsChange = true;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_padding: function(value) {
		if(value != this.padding) {
			this.padding = value;
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_numSpacesInTab: function(value) {
		if(this.numSpacesInTab != value && value > 0) {
			this.numSpacesInTab = value;
			this._tabSpaces = "";
			var _g = 0;
			while(_g < value) {
				var i = _g++;
				this._tabSpaces += " ";
			}
			this._pendingTextChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_background: function(value) {
		if(this.background != value) {
			this.background = value;
			this._pendingGraphicChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_backgroundColor: function(value) {
		if(this.backgroundColor != value) {
			this.backgroundColor = value;
			this._pendingGraphicChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this.borderStyle = style;
			this._pendingBorderGlyphsChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return this.borderStyle;
	}
	,set_borderColor: function(value) {
		if(this.borderColor != value) {
			this.borderColor = value;
			this._pendingBorderGlyphsChange = true;
			if(this.updateImmediately) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_borderSize: function(value) {
		if(value != this.borderSize) {
			this.borderSize = value;
			if(this.borderStyle != bitmapFont_TextBorderStyle.NONE) {
				this._pendingGraphicChange = true;
				if(this.updateImmediately) {
					if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
					if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
					if(this._pendingTextChange) {
						this.updateText();
						this._pendingGraphicChange = true;
					}
					if(this._pendingGraphicChange) this.updateGraphic();
				}
			}
		}
		return value;
	}
	,set_borderQuality: function(value) {
		value = Math.min(1,Math.max(0,value));
		if(value != this.borderQuality) {
			this.borderQuality = value;
			if(this.borderStyle != bitmapFont_TextBorderStyle.NONE) {
				this._pendingGraphicChange = true;
				if(this.updateImmediately) {
					if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
					if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
					if(this._pendingTextChange) {
						this.updateText();
						this._pendingGraphicChange = true;
					}
					if(this._pendingGraphicChange) this.updateGraphic();
				}
			}
		}
		return value;
	}
	,get_numLines: function() {
		return this._lines.length;
	}
	,get_textWidth: function() {
		var max = 0;
		var numLines = this._lines.length;
		var lineWidth;
		this._linesWidth = [];
		var _g = 0;
		while(_g < numLines) {
			var i = _g++;
			lineWidth = this.getLineWidth(i);
			this._linesWidth[i] = lineWidth;
			max = Math.max(max,lineWidth);
		}
		return max;
	}
	,get_textHeight: function() {
		return (this.get_lineHeight() + this.lineSpacing) * this._lines.length - this.lineSpacing;
	}
	,get_lineHeight: function() {
		return this.font.lineHeight * this.size;
	}
	,set_updateImmediately: function(value) {
		if(this.updateImmediately != value) {
			this.updateImmediately = value;
			if(value) {
				if(this._pendingTextGlyphsChange) this.updateTextGlyphs();
				if(this._pendingBorderGlyphsChange) this.updateBorderGlyphs();
				if(this._pendingTextChange) {
					this.updateText();
					this._pendingGraphicChange = true;
				}
				if(this._pendingGraphicChange) this.updateGraphic();
			}
		}
		return value;
	}
	,set_smoothing: function(value) {
		this._bitmap.smoothing = value;
		return this.smoothing = value;
	}
	,updateTextGlyphs: function() {
		if(this.font == null) return;
		if(this.textGlyphs != null) this.textGlyphs.dispose();
		this.textGlyphs = this.font.prepareGlyphs(this.size,this.textColor,this.useTextColor,this.smoothing);
		this._pendingTextGlyphsChange = false;
		this._pendingGraphicChange = true;
	}
	,updateBorderGlyphs: function() {
		if(this.font != null && (this.borderGlyphs == null || this.borderColor != this.borderGlyphs.color || this.size != this.borderGlyphs.scale || this.font != this.borderGlyphs.font)) {
			if(this.borderGlyphs != null) this.borderGlyphs.dispose();
			this.borderGlyphs = this.font.prepareGlyphs(this.size,this.borderColor,true,this.smoothing);
		}
		this._pendingBorderGlyphsChange = false;
		this._pendingGraphicChange = true;
	}
	,__class__: bitmapFont_BitmapTextField
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_updateImmediately:"set_updateImmediately",set_smoothing:"set_smoothing",set_size:"set_size",get_numLines:"get_numLines",set_multiLine:"set_multiLine",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_useTextColor:"set_useTextColor",set_textColor:"set_textColor",set_numSpacesInTab:"set_numSpacesInTab",get_lineHeight:"get_lineHeight",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_padding:"set_padding",set_autoSize:"set_autoSize",set_wrapByWord:"set_wrapByWord",set_wordWrap:"set_wordWrap",set_autoUpperCase:"set_autoUpperCase",set_letterSpacing:"set_letterSpacing",set_lineSpacing:"set_lineSpacing",set_alignment:"set_alignment",set_text:"set_text",set_font:"set_font"})
});
var bitmapFont_TextBorderStyle = $hxClasses["bitmapFont.TextBorderStyle"] = { __ename__ : ["bitmapFont","TextBorderStyle"], __constructs__ : ["NONE","SHADOW","OUTLINE","OUTLINE_FAST"] };
bitmapFont_TextBorderStyle.NONE = ["NONE",0];
bitmapFont_TextBorderStyle.NONE.toString = $estr;
bitmapFont_TextBorderStyle.NONE.__enum__ = bitmapFont_TextBorderStyle;
bitmapFont_TextBorderStyle.SHADOW = ["SHADOW",1];
bitmapFont_TextBorderStyle.SHADOW.toString = $estr;
bitmapFont_TextBorderStyle.SHADOW.__enum__ = bitmapFont_TextBorderStyle;
bitmapFont_TextBorderStyle.OUTLINE = ["OUTLINE",2];
bitmapFont_TextBorderStyle.OUTLINE.toString = $estr;
bitmapFont_TextBorderStyle.OUTLINE.__enum__ = bitmapFont_TextBorderStyle;
bitmapFont_TextBorderStyle.OUTLINE_FAST = ["OUTLINE_FAST",3];
bitmapFont_TextBorderStyle.OUTLINE_FAST.toString = $estr;
bitmapFont_TextBorderStyle.OUTLINE_FAST.__enum__ = bitmapFont_TextBorderStyle;
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var fw_Config = function() { };
$hxClasses["fw.Config"] = fw_Config;
fw_Config.__name__ = ["fw","Config"];
fw_Config.gameWidth = null;
fw_Config.gameHeight = null;
fw_Config.orientation = null;
fw_Config.convertWidth = function(val) {
	return val / fw_Config.logicWidth * fw_Config.gameWidth;
};
fw_Config.convertHeight = function(val) {
	return val / fw_Config.logicHeight * fw_Config.gameHeight;
};
var fw_ai_pathfinding_node_Grid = function() {
	this._nodes = new haxe_ds_StringMap();
};
$hxClasses["fw.ai.pathfinding.node.Grid"] = fw_ai_pathfinding_node_Grid;
fw_ai_pathfinding_node_Grid.__name__ = ["fw","ai","pathfinding","node","Grid"];
fw_ai_pathfinding_node_Grid.prototype = {
	parseXML: function(xml) {
		try {
			this.authorWidth = Std.parseFloat(((function($this) {
				var $r;
				if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
				$r = xml.children[0];
				return $r;
			}(this))).get("width"));
			this.authorHeight = Std.parseFloat(((function($this) {
				var $r;
				if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
				$r = xml.children[0];
				return $r;
			}(this))).get("height"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				this.authorWidth = fw_Config.gameWidth;
				this.authorHeight = fw_Config.gameHeight;
			} else throw(e);
		}
		var $it0 = ((function($this) {
			var $r;
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
			$r = xml.children[0];
			return $r;
		}(this))).elements();
		while( $it0.hasNext() ) {
			var nodeXML = $it0.next();
			var node = new fw_ai_pathfinding_node_Node(nodeXML.get("id"),Std.parseFloat(nodeXML.get("x")) * fw_Config.gameWidth / this.authorWidth,Std.parseFloat(nodeXML.get("y")) * fw_Config.gameHeight / this.authorHeight);
			node.parseNeighbors(nodeXML.get("join"));
			this._nodes.set(node.id,node);
		}
	}
	,getNodeById: function(id) {
		if(this._nodes.exists(id)) return this._nodes.get(id);
		return null;
	}
	,getPathPoints: function(startId,goalId) {
		var thisPath = this.findPath(startId,goalId);
		var pointArray = [];
		var _g1 = 0;
		var _g = thisPath.get_computedPath().length;
		while(_g1 < _g) {
			var k = _g1++;
			var p = { 'id' : thisPath.get_computedPath()[k], 'x' : this.getNodeById(thisPath.get_computedPath()[k]).x, 'y' : this.getNodeById(thisPath.get_computedPath()[k]).y};
			pointArray.push(p);
		}
		return pointArray;
	}
	,getPathPointsConverted: function(startId,goalId) {
		return this.getPathPoints(startId,goalId);
	}
	,findPath: function(startId,goalId) {
		var stack = [];
		stack.push(new fw_ai_pathfinding_node_Path(0,0,[startId]));
		var best = new fw_ai_pathfinding_node_Path();
		var reachedNodes = new haxe_ds_StringMap();
		var cyc = 0;
		while(stack.length > 0) {
			var searchPath = stack.shift();
			var searchNode = this.getNodeById(searchPath.get_lastElement());
			var _g1 = 0;
			var _g = searchNode.get_numNeighbors();
			while(_g1 < _g) {
				var j = _g1++;
				var branch = searchPath.clone();
				var expandNode = searchNode.getNeighbor(j);
				if(!branch.containsNode(expandNode)) {
					var prevCoord = this.getNodeById(branch.get_lastElement());
					var currentCoord = this.getNodeById(expandNode);
					var goalCoord = this.getNodeById(goalId);
					branch.addNode(expandNode);
					branch.length += openfl_geom_Point.distance(prevCoord,currentCoord);
					branch.bestCase = branch.length + openfl_geom_Point.distance(currentCoord,goalCoord);
					var shortest;
					shortest = __map_reserved[expandNode] != null?reachedNodes.getReserved(expandNode):reachedNodes.h[expandNode];
					if(shortest == null || isNaN(shortest) || shortest == 0) shortest = branch.length;
					if(branch.length <= shortest && (!best.get_hasLength() || branch.bestCase < best.length)) {
						reachedNodes.set(expandNode,branch.length);
						if(expandNode == goalId) best = branch; else stack.push(branch);
					}
				}
			}
			stack.sort($bind(this,this.priority));
			cyc++;
		}
		return best;
	}
	,priority: function(a,b) {
		if(a.bestCase < b.bestCase) return -1; else if(a.bestCase > b.bestCase) return 1; else return 0;
	}
	,getNodes: function() {
		return this._nodes;
	}
	,getNearbyNode: function(x,y) {
		var distSq = 1000000;
		var nearestNode = null;
		var $it0 = this._nodes.keys();
		while( $it0.hasNext() ) {
			var nodeId = $it0.next();
			var n = this._nodes.get(nodeId);
			var newDist = Math.abs(x - n.x + y - n.y);
			if(newDist < distSq) {
				distSq = newDist;
				nearestNode = n;
			}
		}
		return nearestNode;
	}
	,__class__: fw_ai_pathfinding_node_Grid
};
var fw_ai_pathfinding_node_Node = function(key,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(key == null) key = "";
	this.id = "";
	openfl_geom_Point.call(this,x,y);
	this.id = key;
	this._neighbors = [];
};
$hxClasses["fw.ai.pathfinding.node.Node"] = fw_ai_pathfinding_node_Node;
fw_ai_pathfinding_node_Node.__name__ = ["fw","ai","pathfinding","node","Node"];
fw_ai_pathfinding_node_Node.__super__ = openfl_geom_Point;
fw_ai_pathfinding_node_Node.prototype = $extend(openfl_geom_Point.prototype,{
	cloneNode: function() {
		var node = new fw_ai_pathfinding_node_Node(this.id,this.x,this.y);
		node.parseNeighbors(this._neighbors.join(","));
		return node;
	}
	,parseNeighbors: function(csv) {
		var _g = 0;
		var _g1 = csv.split(",");
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			this.addNeighbor(j);
		}
	}
	,addNeighbor: function(id) {
		if(!this.containsNeighbor(id) && id != "") this._neighbors.push(id);
	}
	,getNeighbor: function(index) {
		if(index >= 0 && index < this._neighbors.length) return this._neighbors[index];
		return null;
	}
	,get_numNeighbors: function() {
		return this._neighbors.length;
	}
	,containsNeighbor: function(id) {
		return HxOverrides.indexOf(this._neighbors,id,0) > -1;
	}
	,expandNamespace: function(key) {
		this.id += key;
		var _g = 0;
		var _g1 = this._neighbors;
		while(_g < _g1.length) {
			var j = _g1[_g];
			++_g;
			j += key;
		}
	}
	,toString: function() {
		return "[Node] id:" + this.id + ", x:" + this.x + ", y:" + this.y + ", neighbors:(" + Std.string(this._neighbors) + ")";
	}
	,__class__: fw_ai_pathfinding_node_Node
	,__properties__: $extend(openfl_geom_Point.prototype.__properties__,{get_numNeighbors:"get_numNeighbors"})
});
var fw_ai_pathfinding_node_Path = function(thisLength,thisBestCase,thisPath) {
	if(thisBestCase == null) thisBestCase = -1;
	if(thisLength == null) thisLength = -1;
	this.bestCase = -1;
	this.length = -1;
	this.length = thisLength;
	this.bestCase = thisBestCase;
	this._path = thisPath;
};
$hxClasses["fw.ai.pathfinding.node.Path"] = fw_ai_pathfinding_node_Path;
fw_ai_pathfinding_node_Path.__name__ = ["fw","ai","pathfinding","node","Path"];
fw_ai_pathfinding_node_Path.prototype = {
	destroy: function() {
		this._path = null;
		this.nodes = null;
	}
	,clone: function() {
		return new fw_ai_pathfinding_node_Path(this.length,this.bestCase,this._path.slice(0));
	}
	,get_hasLength: function() {
		return this.length + this.bestCase >= 0;
	}
	,get_lastElement: function() {
		return this._path.slice(-1)[0];
	}
	,containsNode: function(id) {
		return HxOverrides.indexOf(this._path,id,0) > -1;
	}
	,addNode: function(id) {
		if(!this.containsNode(id)) this._path.push(id);
	}
	,toString: function() {
		return "[Path] length:" + this.length + ", nodes:(" + Std.string(this._path) + ")";
	}
	,get_computedPath: function() {
		return this._path;
	}
	,__class__: fw_ai_pathfinding_node_Path
	,__properties__: {get_lastElement:"get_lastElement",get_hasLength:"get_hasLength",get_computedPath:"get_computedPath"}
};
var fw_def_AtlasDefinition = function(data,type,padding) {
	this.frames = new haxe_ds_StringMap();
	switch(type) {
	case "typeJsonHash":
		this.parseJsonHash(data,padding);
		break;
	}
};
$hxClasses["fw.def.AtlasDefinition"] = fw_def_AtlasDefinition;
fw_def_AtlasDefinition.__name__ = ["fw","def","AtlasDefinition"];
fw_def_AtlasDefinition.prototype = {
	parseJsonHash: function(data,padding) {
		var d = Reflect.field(JSON.parse(data),"frames");
		var oldKey = "";
		var _g = 0;
		var _g1 = Reflect.fields(d);
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var key = n.substring(0,n.lastIndexOf(".") - padding);
			if(!this.frames.exists(key)) {
				var value = [];
				this.frames.set(key,value);
			}
			var frameArray = this.frames.get(key);
			var fd = Reflect.field(d,n).frame;
			fd.name = n;
			fd.index = Std.parseInt(fd.name.substring(fd.name.lastIndexOf(".") - padding,fd.name.lastIndexOf(".")));
			frameArray.push(fd);
			this.frames.set(key,frameArray);
			oldKey = key;
		}
		var $it0 = this.frames.iterator();
		while( $it0.hasNext() ) {
			var frameArr = $it0.next();
			haxe_ds_ArraySort.sort(frameArr,function(a,b) {
				if(a.index > b.index) return 1;
				if(a.index < b.index) return -1;
				return 0;
			});
		}
	}
	,getFrames: function(frameName) {
		if(!this.frames.exists(frameName)) throw new js__$Boot_HaxeError(new openfl_errors_Error("There is no definition for '" + frameName + "' in the specified atlas"));
		return this.frames.get(frameName);
	}
	,__class__: fw_def_AtlasDefinition
};
var fw_display_AtlasSprite = function(bitmapData,frames) {
	this.loop = false;
	this.fpsStep = 1;
	this.fpsCounter = 0;
	this.frameIndex = 0;
	openfl_display_Sprite.call(this);
	this.bitmap = new openfl_display_Bitmap();
	this.addChild(this.bitmap);
	this.mouseChildren = false;
	this.destPoint = new openfl_geom_Point();
	this.animationFrames = frames;
	this.sourceBitmapData = bitmapData;
	this.calculateBmdBounds();
	this.frameRect = new openfl_geom_Rectangle(this.animationFrames[0].x,this.animationFrames[0].y,this.animationFrames[0].w,this.animationFrames[0].h);
	this.destinationBitmapData.copyPixels(this.sourceBitmapData,this.frameRect,this.destPoint);
};
$hxClasses["fw.display.AtlasSprite"] = fw_display_AtlasSprite;
fw_display_AtlasSprite.__name__ = ["fw","display","AtlasSprite"];
fw_display_AtlasSprite.createFromBitmapData = function(bitmapData) {
	var region = { x : 0, y : 0, w : bitmapData.width, h : bitmapData.height};
	return new fw_display_AtlasSprite(bitmapData,[region]);
};
fw_display_AtlasSprite.__super__ = openfl_display_Sprite;
fw_display_AtlasSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	setFrames: function(frames,fps) {
		if(fps == null) fps = 60;
		this.fpsStep = fps;
		this.animationFrames = frames;
		this.frameIndex = 0;
		this.calculateBmdBounds();
		this.draw();
	}
	,calculateBmdBounds: function() {
		var maxW = 0;
		var maxH = 0;
		var $it0 = HxOverrides.iter(this.animationFrames);
		while( $it0.hasNext() ) {
			var i = $it0.next();
			var w = i.w | 0;
			var h = i.h | 0;
			if(maxW < w) maxW = w;
			if(maxH < h) maxH = h;
		}
		this.destinationBitmapData = new openfl_display_BitmapData(maxW,maxH,true,0);
		this.bitmap.bitmapData = this.destinationBitmapData;
	}
	,play: function(startIndex,isLooping) {
		if(isLooping == null) isLooping = false;
		if(startIndex == null) startIndex = 0;
		this.frameIndex = startIndex;
		this.isPlaying = true;
		this.loop = isLooping;
	}
	,gotoFrame: function(index) {
		this.frameIndex = index;
		this.draw();
	}
	,stop: function() {
		this.isPlaying = false;
	}
	,update: function() {
		if(!this.get_isPlaying()) return;
		this.fpsCounter += this.fpsStep;
		if(this.fpsCounter >= 60) {
			this.fpsCounter = 0;
			this.frameIndex += 1;
			if(this.frameIndex >= this.animationFrames.length) {
				this.frameIndex = this.animationFrames.length - 1;
				if(this.loop) this.frameIndex = 0;
			}
			this.draw();
		}
	}
	,draw: function() {
		this.frameRect.x = this.animationFrames[this.frameIndex].x;
		this.frameRect.y = this.animationFrames[this.frameIndex].y;
		this.frameRect.width = this.animationFrames[this.frameIndex].w;
		this.frameRect.height = this.animationFrames[this.frameIndex].h;
		this.destinationBitmapData.fillRect(this.destinationBitmapData.rect,0);
		this.destinationBitmapData.copyPixels(this.sourceBitmapData,this.frameRect,this.destPoint);
	}
	,setPixelSnapping: function(value) {
		this.bitmap.pixelSnapping = value;
	}
	,setSmoothing: function(value) {
		this.bitmap.smoothing = value;
	}
	,get_isPlaying: function() {
		return this.isPlaying;
	}
	,__class__: fw_display_AtlasSprite
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_isPlaying:"get_isPlaying"})
});
var fw_display_IScene = function() { };
$hxClasses["fw.display.IScene"] = fw_display_IScene;
fw_display_IScene.__name__ = ["fw","display","IScene"];
fw_display_IScene.prototype = {
	__class__: fw_display_IScene
};
var fw_display_ImageSprite = function(bitmapData,pixelSnapping,smoothing) {
	haxe_Log.trace("WARNING!! Use AtlasSprite instead of ImageSprite",{ fileName : "ImageSprite.hx", lineNumber : 21, className : "fw.display.ImageSprite", methodName : "new"});
	openfl_display_Sprite.call(this);
	this.addChild(new openfl_display_Bitmap(bitmapData,pixelSnapping,smoothing));
};
$hxClasses["fw.display.ImageSprite"] = fw_display_ImageSprite;
fw_display_ImageSprite.__name__ = ["fw","display","ImageSprite"];
fw_display_ImageSprite.__super__ = openfl_display_Sprite;
fw_display_ImageSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: fw_display_ImageSprite
});
var fw_editor_tools_pathfinding_node_NodePoint = function(thisId) {
	this.selected = false;
	this.id = 0;
	openfl_display_Sprite.call(this);
	this.neighbors = [];
	this.id = thisId;
	this.get_graphics().beginFill(16776960,1);
	this.get_graphics().drawCircle(0,0,10);
	this.get_graphics().endFill();
	this.buttonMode = true;
	this.useHandCursor = true;
	var tF = new openfl_text_TextField();
	this.addChild(tF);
	tF.set_textColor(0);
	tF.set_text(this.getNodeId());
	tF.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	var f = tF.get_defaultTextFormat();
	f.align = openfl_text_TextFormatAlign.CENTER;
	tF.set_x(-tF.get_textWidth() / 2 - 2);
	tF.set_y(-tF.get_textHeight() / 2 - 2);
	tF.mouseEnabled = false;
	this.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.dispose));
};
$hxClasses["fw.editor.tools.pathfinding.node.NodePoint"] = fw_editor_tools_pathfinding_node_NodePoint;
fw_editor_tools_pathfinding_node_NodePoint.__name__ = ["fw","editor","tools","pathfinding","node","NodePoint"];
fw_editor_tools_pathfinding_node_NodePoint.__super__ = openfl_display_Sprite;
fw_editor_tools_pathfinding_node_NodePoint.prototype = $extend(openfl_display_Sprite.prototype,{
	dispose: function(e) {
		this.removeEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(this,this.dispose));
		this.neighbors = null;
	}
	,addNeighbor: function(n) {
		if(HxOverrides.indexOf(this.neighbors,n,0) == -1) this.neighbors.push(n);
	}
	,removeNeighbor: function(n) {
		if(HxOverrides.indexOf(this.neighbors,n,0) >= 0) HxOverrides.remove(this.neighbors,n);
	}
	,select: function(val) {
		this.selected = val;
		this.get_graphics().clear();
		if(this.selected) {
			this.get_graphics().beginFill(16711680,1);
			this.get_graphics().drawCircle(0,0,10);
			this.get_graphics().endFill();
		} else {
			this.get_graphics().beginFill(16776960,1);
			this.get_graphics().drawCircle(0,0,10);
			this.get_graphics().endFill();
		}
	}
	,getNodeId: function() {
		return "n" + this.id;
	}
	,__class__: fw_editor_tools_pathfinding_node_NodePoint
});
var fw_editor_tools_pathfinding_node_PathEditor = function(nodeData) {
	this.lastAddedId = 1;
	openfl_display_Sprite.call(this);
	this.bg = new openfl_display_Sprite();
	this.bg.get_graphics().beginFill(0,0);
	this.bg.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
	this.bg.get_graphics().endFill();
	this.addChild(this.bg);
	this.linesBg = new openfl_display_Sprite();
	this.addChild(this.linesBg);
	this.nodes = [];
	if(nodeData == null) this.addNodePoint(fw_Config.convertWidth(fw_Config.logicWidth / 2),fw_Config.convertHeight(fw_Config.logicHeight / 2)); else {
		var nodeXML = Xml.parse(nodeData);
		var authorWidth = Std.parseFloat(((function($this) {
			var $r;
			if(nodeXML.nodeType != Xml.Document && nodeXML.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + nodeXML.nodeType);
			$r = nodeXML.children[0];
			return $r;
		}(this))).get("width"));
		var authorHeight = Std.parseFloat(((function($this) {
			var $r;
			if(nodeXML.nodeType != Xml.Document && nodeXML.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + nodeXML.nodeType);
			$r = nodeXML.children[0];
			return $r;
		}(this))).get("height"));
		var $it0 = ((function($this) {
			var $r;
			if(nodeXML.nodeType != Xml.Document && nodeXML.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + nodeXML.nodeType);
			$r = nodeXML.children[0];
			return $r;
		}(this))).elements();
		while( $it0.hasNext() ) {
			var n = $it0.next();
			var npx = Std.parseFloat(n.get("x"));
			var npy = Std.parseFloat(n.get("y"));
			this.addNodePoint(npx,npy,Std.parseInt((function($this) {
				var $r;
				var _this = n.get("id");
				$r = HxOverrides.substr(_this,1,null);
				return $r;
			}(this))));
		}
		var $it1 = ((function($this) {
			var $r;
			if(nodeXML.nodeType != Xml.Document && nodeXML.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + nodeXML.nodeType);
			$r = nodeXML.children[0];
			return $r;
		}(this))).elements();
		while( $it1.hasNext() ) {
			var n1 = $it1.next();
			var pnode = this.getNodeById(n1.get("id"));
			var neighbours = n1.get("join").split(",");
			var $it2 = HxOverrides.iter(neighbours);
			while( $it2.hasNext() ) {
				var nbr = $it2.next();
				pnode.addNeighbor(this.getNodeById(nbr));
			}
		}
	}
	this.bg.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.onBgClicked));
	var helpText = new openfl_text_TextField();
	helpText.set_text("Click on empty space to add node");
	helpText.appendText("\nShift+Click on a node to remove it");
	helpText.appendText("\nCtrl/Alt+Click on two nodes to connect/disconnect them");
	helpText.appendText("\nPress 'E' to show node data");
	helpText.set_textColor(16777215);
	helpText.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
	helpText.mouseEnabled = false;
	fw_managers_SceneManager.addToHUD(helpText,10,openfl_Lib.current.stage.stageHeight - helpText.get_textHeight() - 2);
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
	openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
};
$hxClasses["fw.editor.tools.pathfinding.node.PathEditor"] = fw_editor_tools_pathfinding_node_PathEditor;
fw_editor_tools_pathfinding_node_PathEditor.__name__ = ["fw","editor","tools","pathfinding","node","PathEditor"];
fw_editor_tools_pathfinding_node_PathEditor.__super__ = openfl_display_Sprite;
fw_editor_tools_pathfinding_node_PathEditor.prototype = $extend(openfl_display_Sprite.prototype,{
	getNodeById: function(id) {
		var $it0 = HxOverrides.iter(this.nodes);
		while( $it0.hasNext() ) {
			var n = $it0.next();
			if(n.getNodeId() == id) return n;
		}
		return null;
	}
	,onKeyUp: function(e) {
		if(e.keyCode == 69) {
			this.hideExport();
			var exportXML = Xml.createDocument();
			var rootNode = Xml.createElement("nodes");
			rootNode.set("width",Std.string(fw_Config.gameWidth));
			rootNode.set("height",Std.string(fw_Config.gameHeight));
			exportXML.addChild(rootNode);
			var $it0 = HxOverrides.iter(this.nodes);
			while( $it0.hasNext() ) {
				var n = $it0.next();
				var nodeXML = Xml.createElement("node");
				nodeXML.set("id",n.getNodeId());
				nodeXML.set("x",Std.string(n.get_x()));
				nodeXML.set("y",Std.string(n.get_y()));
				var ns = [];
				var $it1 = HxOverrides.iter(n.neighbors);
				while( $it1.hasNext() ) {
					var neighbor = $it1.next();
					ns.push(neighbor.getNodeId());
				}
				nodeXML.set("join",ns.join(","));
				rootNode.addChild(nodeXML);
			}
			this.outBg = new openfl_display_Sprite();
			this.outBg.get_graphics().beginFill(0,0.5);
			this.outBg.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
			this.outBg.get_graphics().endFill();
			this.addChild(this.outBg);
			this.outBg.addEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.hideExport));
			var out = new openfl_text_TextField();
			out.set_border(true);
			out.set_background(true);
			out.set_backgroundColor(16777215);
			var tf = new openfl_text_TextFormat();
			tf.font = "_sans";
			tf.size = 18;
			tf.color = 0;
			out.set_defaultTextFormat(tf);
			out.set_text(haxe_xml_Printer.print(exportXML));
			this.outBg.addChild(out);
			out.set_width(fw_Config.convertWidth(fw_Config.logicWidth));
			out.set_multiline(true);
			out.set_type(openfl_text_TextFieldType.INPUT);
			out.set_wordWrap(true);
			out.set_height(fw_Config.convertHeight(fw_Config.logicHeight * 0.5));
			out.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
			out.set_x(0);
			out.set_y(fw_Config.convertHeight(fw_Config.logicHeight / 2 - out.get_height() / 2));
			openfl_Lib.current.stage.set_focus(out);
			haxe_Log.trace("\n======================\n" + out.get_text() + "\n======================\n",{ fileName : "PathEditor.hx", lineNumber : 139, className : "fw.editor.tools.pathfinding.node.PathEditor", methodName : "onKeyUp"});
			haxe_Timer.delay(function() {
				out.setSelection(0,out.get_text().length);
			},1);
		}
	}
	,hideExport: function(e) {
		if(e != null && js_Boot.__instanceof(e.target,openfl_text_TextField)) return;
		if(this.outBg != null && this.outBg.parent == this) {
			this.outBg.removeEventListener(openfl_events_MouseEvent.CLICK,$bind(this,this.hideExport));
			this.outBg.parent.removeChild(this.outBg);
		}
	}
	,onEnterFrame: function(e) {
		this.linesBg.get_graphics().clear();
		this.linesBg.get_graphics().lineStyle(3,16776960,1);
		var $it0 = HxOverrides.iter(this.nodes);
		while( $it0.hasNext() ) {
			var n = $it0.next();
			var $it1 = HxOverrides.iter(n.neighbors);
			while( $it1.hasNext() ) {
				var neighbor = $it1.next();
				this.linesBg.get_graphics().moveTo(n.get_x(),n.get_y());
				this.linesBg.get_graphics().lineTo(neighbor.get_x(),neighbor.get_y());
			}
			n.select(false);
		}
		if(this.previousNode != null && !this.previousNode.selected) this.previousNode.select(true);
	}
	,onBgClicked: function(e) {
		this.addNodePoint(this.bg.get_mouseX(),this.bg.get_mouseY());
	}
	,addNodePoint: function(x,y,id) {
		if(id == null) id = 0;
		this.previousNode = null;
		if(id > 0) this.lastAddedId = id;
		var n = new fw_editor_tools_pathfinding_node_NodePoint(this.lastAddedId);
		this.addChild(n);
		n.set_x(x);
		n.set_y(y);
		n.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onNodeDown));
		n.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNodeUp));
		this.nodes.push(n);
		this.lastAddedId += 1;
	}
	,removeNodePoint: function(n) {
		this.previousNode = null;
		var $it0 = HxOverrides.iter(this.nodes);
		while( $it0.hasNext() ) {
			var np = $it0.next();
			np.removeNeighbor(n);
		}
		n.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onNodeDown));
		n.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNodeUp));
		this.removeChild(n);
		HxOverrides.remove(this.nodes,n);
	}
	,onNodeUp: function(e) {
		var n;
		n = js_Boot.__cast(e.currentTarget , fw_editor_tools_pathfinding_node_NodePoint);
		n.stopDrag();
		if(e.shiftKey) this.removeNodePoint(n);
		if(e.ctrlKey) {
			if(HxOverrides.indexOf(this.nodes,this.previousNode,0) == -1) this.previousNode = null;
			if(this.previousNode != null) {
				this.previousNode.addNeighbor(n);
				n.addNeighbor(this.previousNode);
			}
			if(this.previousNode != n) this.previousNode = n; else this.previousNode = null;
		}
		if(e.altKey) {
			if(HxOverrides.indexOf(this.nodes,this.previousNode,0) == -1) this.previousNode = null;
			if(this.previousNode != null) {
				this.previousNode.removeNeighbor(n);
				n.removeNeighbor(this.previousNode);
			}
			if(this.previousNode != n) this.previousNode = n; else this.previousNode = null;
		}
	}
	,onNodeDown: function(e) {
		(js_Boot.__cast(e.currentTarget , fw_editor_tools_pathfinding_node_NodePoint)).startDrag(false);
	}
	,__class__: fw_editor_tools_pathfinding_node_PathEditor
});
var fw_managers_MusicManager = function() { };
$hxClasses["fw.managers.MusicManager"] = fw_managers_MusicManager;
fw_managers_MusicManager.__name__ = ["fw","managers","MusicManager"];
fw_managers_MusicManager.playingMusicsHTML5 = null;
fw_managers_MusicManager.library = null;
fw_managers_MusicManager.isMuted = null;
fw_managers_MusicManager.basePath = null;
fw_managers_MusicManager.init = function(basepath) {
	if(fw_managers_MusicManager.inited) return;
	fw_managers_MusicManager.basePath = basepath;
	fw_managers_MusicManager.inited = true;
	fw_managers_MusicManager.library = new haxe_ds_StringMap();
	fw_managers_MusicManager.isMuted = false;
	fw_managers_MusicManager.playingMusicsHTML5 = [];
};
fw_managers_MusicManager.addMusic = function(filename) {
	var extension = ".ogg";
};
fw_managers_MusicManager.playMusic = function(id,repeat,fadeTime,forceStart) {
	if(forceStart == null) forceStart = false;
	if(fadeTime == null) fadeTime = 0;
	var mus = fw_managers_MusicManager;
	
				var s = createjs.Sound.play(id, createjs.Sound.defaultInterruptBehavior, 0, 0, repeat);
				s.id = id;
				mus.playingMusicsHTML5.push(s);
			;
};
fw_managers_MusicManager.stopMusic = function(id,fadeTime) {
	if(fadeTime == null) fadeTime = 0;
	if(id == null) id = "";
	
				createjs.Sound.stop();
			;
};
fw_managers_MusicManager.mute = function() {
	var $it0 = fw_managers_MusicManager.library.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var m = fw_managers_MusicManager.library.get(key);
		m.soundTransform.volume = 0;
		if(m.channel != null) m.channel.set_soundTransform(m.channel.get_soundTransform());
	}
};
fw_managers_MusicManager.unMute = function() {
	var $it0 = fw_managers_MusicManager.library.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		var m = fw_managers_MusicManager.library.get(key);
		m.soundTransform.volume = 1;
		if(m.channel != null) m.channel.set_soundTransform(m.channel.get_soundTransform());
	}
};
fw_managers_MusicManager.isPlaying = function(id) {
	var mus = fw_managers_MusicManager;
	var i = fw_managers_MusicManager.playingMusicsHTML5.length;
	while(--i > 0) {
		var mu = fw_managers_MusicManager.playingMusicsHTML5[i];
		
				if (mu.playState == "playSucceeded") {
					if (mu.id == id) {
						return true;
					}
				}else {
					mus.playingMusicsHTML5.splice(i,1);
				}
			;
	}
	return false;
};
var fw_managers_SFXManager = function() { };
$hxClasses["fw.managers.SFXManager"] = fw_managers_SFXManager;
fw_managers_SFXManager.__name__ = ["fw","managers","SFXManager"];
fw_managers_SFXManager.isMuted = null;
fw_managers_SFXManager.basePath = null;
fw_managers_SFXManager.init = function(basepath) {
	if(fw_managers_SFXManager.inited) return;
	fw_managers_SFXManager.basePath = basepath;
	fw_managers_SFXManager.inited = true;
	fw_managers_SFXManager.isMuted = false;
};
fw_managers_SFXManager.playSound = function(id,volume,pan) {
	if(pan == null) pan = 0;
	if(volume == null) volume = 1;
	var sfx = fw_managers_SFXManager;
	
				var s = createjs.Sound.play(id);
				if(!sfx.html5JumpStartDone){
					var d = setInterval(function() {
						if (s.playState == createjs.Sound.PLAY_SUCCEEDED) {
							console.log("Silencing for first time");
							createjs.Sound.play("silence");
							clearInterval(d);
							sfx.html5JumpStartDone = true;
						}
					}, 10);
				}
			;
};
var fw_managers_SceneManager = function() { };
$hxClasses["fw.managers.SceneManager"] = fw_managers_SceneManager;
fw_managers_SceneManager.__name__ = ["fw","managers","SceneManager"];
fw_managers_SceneManager._scenes = null;
fw_managers_SceneManager.currentScene = null;
fw_managers_SceneManager._hud = null;
fw_managers_SceneManager.changeScene = function(sceneClass) {
	if(fw_managers_SceneManager.currentScene != null) {
		var key = Type.getClassName(Type.getClass(fw_managers_SceneManager.currentScene));
		fw_managers_SceneManager._scenes.remove(key);
		openfl_Lib.current.stage.removeChild(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite));
		fw_managers_SceneManager.currentScene.onExit();
		fw_managers_SceneManager.currentScene = null;
	}
	fw_managers_SceneManager.currentScene = Type.createInstance(sceneClass,[]);
	openfl_Lib.current.stage.addChildAt(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite),openfl_Lib.current.stage.getChildIndex(js_Boot.__cast(fw_managers_SceneManager._hud , openfl_display_Sprite)));
	(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_x(fw_managers_SceneManager.x);
	(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_y(fw_managers_SceneManager.y);
	(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_scaleX((js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_scaleY(fw_managers_SceneManager.scale));
	fw_managers_SceneManager.currentScene.onInit();
	var key1 = Type.getClassName(sceneClass);
	fw_managers_SceneManager._scenes.set(key1,fw_managers_SceneManager.currentScene);
};
fw_managers_SceneManager.suspendScene = function() {
	fw_managers_SceneManager.currentScene.onSuspend();
	fw_managers_SceneManager.currentScene = null;
};
fw_managers_SceneManager.resumeScene = function(sceneClass) {
	if((function($this) {
		var $r;
		var key = Type.getClassName(sceneClass);
		$r = fw_managers_SceneManager._scenes.exists(key);
		return $r;
	}(this))) {
		if(fw_managers_SceneManager.currentScene != null) {
			var key1 = Type.getClassName(Type.getClass(fw_managers_SceneManager.currentScene));
			fw_managers_SceneManager._scenes.remove(key1);
			openfl_Lib.current.stage.removeChild(js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite));
			fw_managers_SceneManager.currentScene.onExit();
			fw_managers_SceneManager.currentScene = null;
		}
		var key2 = Type.getClassName(sceneClass);
		fw_managers_SceneManager.currentScene = fw_managers_SceneManager._scenes.get(key2);
		fw_managers_SceneManager.currentScene.onResume();
	} else throw new js__$Boot_HaxeError(new openfl_errors_Error("Class " + Std.string(sceneClass) + " was not suspended to resume"));
};
fw_managers_SceneManager.resize = function() {
	if(fw_managers_SceneManager.currentScene != null) fw_managers_SceneManager.currentScene.onResize();
};
fw_managers_SceneManager.init = function(x,y,scale) {
	if(scale == null) scale = 1;
	if(y == null) y = 0;
	if(x == null) x = 0;
	fw_managers_SceneManager.x = x;
	fw_managers_SceneManager.y = y;
	fw_managers_SceneManager.scale = scale;
	fw_managers_SceneManager._scenes = new haxe_ds_StringMap();
	fw_managers_SceneManager._hud = new openfl_display_Sprite();
	openfl_Lib.current.stage.addChild(fw_managers_SceneManager._hud);
};
fw_managers_SceneManager.addToHUD = function(child,x,y) {
	fw_managers_SceneManager._hud.addChild(child);
	if(x != null && y != null) {
		child.set_x(x);
		child.set_y(y);
	}
};
fw_managers_SceneManager.removeFromHUD = function(child) {
	fw_managers_SceneManager._hud.removeChild(child);
};
fw_managers_SceneManager.clearHUD = function() {
	while(fw_managers_SceneManager._hud.get_numChildren() > 0) fw_managers_SceneManager._hud.removeChildAt(0);
};
fw_managers_SceneManager.setScale = function(val) {
	fw_managers_SceneManager.scale = val;
	if(fw_managers_SceneManager.currentScene != null) (js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_scaleX((js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_scaleY(fw_managers_SceneManager.scale));
};
fw_managers_SceneManager.setX = function(val) {
	fw_managers_SceneManager.x = val;
	if(fw_managers_SceneManager.currentScene != null) (js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_x(fw_managers_SceneManager.x);
};
fw_managers_SceneManager.setY = function(val) {
	fw_managers_SceneManager.y = val;
	if(fw_managers_SceneManager.currentScene != null) (js_Boot.__cast(fw_managers_SceneManager.currentScene , openfl_display_Sprite)).set_y(fw_managers_SceneManager.y);
};
var fw_preloader_DefaultPreloader = function() {
	NMEPreloader.call(this);
	fw_utils_html5utils_Device.init();
};
$hxClasses["fw.preloader.DefaultPreloader"] = fw_preloader_DefaultPreloader;
fw_preloader_DefaultPreloader.__name__ = ["fw","preloader","DefaultPreloader"];
fw_preloader_DefaultPreloader.__super__ = NMEPreloader;
fw_preloader_DefaultPreloader.prototype = $extend(NMEPreloader.prototype,{
	onInit: function() {
		NMEPreloader.prototype.onInit.call(this);
		fw_managers_MusicManager.init("static");
		fw_managers_SFXManager.init("static");
		
				createjs.Sound.initializeDefaultPlugins();
				createjs.Sound.defaultInterruptBehavior = createjs.Sound.INTERRUPT_LATE;
			;
	}
	,onLoaded: function() {
		var sfx = fw_managers_SFXManager;
		var mus = fw_managers_MusicManager;
		window.preloaderInstance = this;
		if(fw_utils_html5utils_Device.desktop) {
			var audiodata = fw_Config.html5AudioSpriteData;
			var musicdata = fw_Config.html5MusicData;
			if(audiodata.length + musicdata.length == 0) {
				window.preloaderInstance.onDesktopHTML5SoundLoaded(0, 0);;
				return;
			}
			
					window.loadedSounds = 0;
					createjs.Sound.alternateExtensions = ["mp3", "m4a"];
					window.preloaderInstance.onDesktopHTML5SoundLoading();
					var sounds = audiodata;
					var musics = musicdata;
					createjs.Sound.on("fileload", function(e) {
						window.loadedSounds += 1;
						window.preloaderInstance.onDesktopHTML5SoundLoaded(window.loadedSounds, sounds.length+musics.length);
					});
					createjs.Sound.registerSounds(sounds, sfx.basePath+"/");
					createjs.Sound.registerSounds(musics, mus.basePath+"/");
				;
		} else this.readyForDeviceHTML5Sounds();
	}
	,readyForDeviceHTML5Sounds: function() {
	}
	,loadHTML5Sounds: function() {
		var sfx = fw_managers_SFXManager;
		var mus = fw_managers_MusicManager;
		var audiodata = fw_Config.html5AudioSpriteData;
		var musicdata = fw_Config.html5MusicData;
		
			createjs.Sound.alternateExtensions = ["mp3", "m4a"];
			createjs.Sound.on("fileload", function(e) {
				console.log("Sound(s) loaded");
			});
			var sounds = audiodata;
			var musics = musicdata;
			createjs.Sound.registerSounds(sounds, sfx.basePath+"/");
			createjs.Sound.registerSounds(musics, mus.basePath+"/");
		;
		NMEPreloader.prototype.onLoaded.call(this);
	}
	,onDesktopHTML5SoundLoading: function() {
	}
	,onDesktopHTML5SoundLoaded: function(count,totalSounds) {
		if(count >= totalSounds) NMEPreloader.prototype.onLoaded.call(this);
	}
	,__class__: fw_preloader_DefaultPreloader
});
var fw_utils_html5utils_Device = function() { };
$hxClasses["fw.utils.html5utils.Device"] = fw_utils_html5utils_Device;
fw_utils_html5utils_Device.__name__ = ["fw","utils","html5utils","Device"];
fw_utils_html5utils_Device.init = function() {
	var ua = "";
	ua = window.navigator.userAgent;
	if(new EReg("Playstation Vita","").match(ua)) fw_utils_html5utils_Device.vita = true; else if(new EReg("Kindle","").match(ua) || new EReg("\\bKF[A-Z][A-Z]+","").match(ua) || new EReg("Silk.*Mobile Safari","").match(ua)) fw_utils_html5utils_Device.kindle = true; else if(new EReg("Android","").match(ua)) fw_utils_html5utils_Device.android = true; else if(new EReg("CrOS","").match(ua)) fw_utils_html5utils_Device.chromeOS = true; else if(new EReg("iP[ao]d|iPhone","i").match(ua)) fw_utils_html5utils_Device.iOS = true; else if(new EReg("Linux","").match(ua)) fw_utils_html5utils_Device.linux = true; else if(new EReg("Mac OS","").match(ua)) fw_utils_html5utils_Device.macOS = true; else if(new EReg("Windows","").match(ua)) {
		fw_utils_html5utils_Device.windows = true;
		if(new EReg("Windows Phone","i").match(ua)) fw_utils_html5utils_Device.windowsPhone = true;
	}
	var silk = new EReg("Silk","").match(ua);
	if(fw_utils_html5utils_Device.windows || fw_utils_html5utils_Device.macOS || fw_utils_html5utils_Device.linux && !silk || fw_utils_html5utils_Device.chromeOS) fw_utils_html5utils_Device.desktop = true;
	if(fw_utils_html5utils_Device.windowsPhone || new EReg("Windows NT","i").match(ua) && new EReg("Touch","i").match(ua)) fw_utils_html5utils_Device.desktop = false;
	try {
		fw_utils_html5utils_Device.canvas = !(!window.document.createElement("canvas").getContext);
		var canvas = window.document.createElement("canvas");
		canvas.screencanvas = false;
		fw_utils_html5utils_Device.webgl = !(!(window.WebGLRenderingContext && (canvas.getContext("webgl") || canvas.getContext("experimental-webgl"))));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		fw_utils_html5utils_Device.webgl = false;
	}
	if(window.document.compatMode == "CSS1Compat") fw_utils_html5utils_Device.quirksMode = false; else fw_utils_html5utils_Device.quirksMode = true;
	if(window.document.documentElement.ontouchstart != null || window.navigator.maxTouchPoints && window.navigator.maxTouchPoints > 1) fw_utils_html5utils_Device.touch = true;
	if(window.navigator.msPointerEnabled || window.navigator.pointerEnabled) fw_utils_html5utils_Device.mspointer = true;
	if(new EReg("Arora","").match(ua)) fw_utils_html5utils_Device.arora = true; else if(new EReg("Chrome","").match(ua)) fw_utils_html5utils_Device.chrome = true; else if(new EReg("Epiphany","").match(ua)) fw_utils_html5utils_Device.epiphany = true; else if(new EReg("Firefox","").match(ua)) fw_utils_html5utils_Device.firefox = true; else if(new EReg("AppleWebKit","").match(ua) && fw_utils_html5utils_Device.iOS) fw_utils_html5utils_Device.mobileSafari = true; else if(new EReg("MSIE (\\d+\\.\\d+);","").match(ua)) {
		fw_utils_html5utils_Device.ie = true;
		fw_utils_html5utils_Device.ieVersion = parseInt(RegExp.$1, 10);
	} else if(new EReg("Midori","").match(ua)) fw_utils_html5utils_Device.midori = true; else if(new EReg("Opera","").match(ua)) fw_utils_html5utils_Device.opera = true; else if(new EReg("Safari","").match(ua)) fw_utils_html5utils_Device.safari = true; else if(new EReg("Trident/(\\d+\\.\\d+)(.*)rv:(\\d+\\.\\d+)","").match(ua)) {
		fw_utils_html5utils_Device.ie = true;
		fw_utils_html5utils_Device.trident = true;
		fw_utils_html5utils_Device.tridentVersion = parseInt(RegExp.$1, 10);
		fw_utils_html5utils_Device.ieVersion = parseInt(RegExp.$3, 10);
	}
	if(new EReg("Silk","").match(ua)) silk = true;
	if(window.navigator.standalone) fw_utils_html5utils_Device.webApp = true;
	fw_utils_html5utils_Device.webAudio = !(!(window.AudioContext || window.webkitAudioContext));
	var pixelRatio = window.devicePixelRatio || 1;
	fw_utils_html5utils_Device.iPhone = ua.toLowerCase().indexOf("iphone") != -1;
	fw_utils_html5utils_Device.iPhone4 = pixelRatio == 2 && fw_utils_html5utils_Device.iPhone;
	fw_utils_html5utils_Device.iPad = ua.toLowerCase().indexOf("ipad") != -1;
};
fw_utils_html5utils_Device.isAndroidStockBrowser = function() {
	var matches = window.navigator.userAgent.match(new EReg("Android.*AppleWebKit/([\\d.]+)",""));
	return matches && matches[1] < 537;
	return false;
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingFramebuffer = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl_display_BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		filter.__applyFilter(this.image.buffer.__srcImageData,sourceBitmapData.image.buffer.__srcImageData,sourceRect,destPoint);
		this.image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingFramebuffer = false;
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.__isValid == false || otherBitmapData.__isValid == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingFramebuffer = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingFramebuffer = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__framebuffer != null) {
			this.__framebuffer.destroy();
			this.__framebuffer = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		if(colorTransform != null) {
			var copy = new openfl_display_BitmapData(Reflect.getProperty(source,"width"),Reflect.getProperty(source,"height"),true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		var matrixCache = source.__worldTransform;
		if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl_geom_Matrix();
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__worldTransform = matrixCache;
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) renderSession.maskManager.popMask();
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = this.image.encode("png"); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingFramebuffer = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.floodFill(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,(function($this) {
				var $r;
				var this1;
				if(data != null) this1 = new Float32Array(data); else this1 = null;
				$r = this1;
				return $r;
			}(this)),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		var color1 = color;
		if((color1 >> 24 & 255) == 0) color1 = 0;
		var rect = this.image.getColorBoundsRect(mask,color1,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.image.getPixels(rect.__toLimeRectangle(),1);
	}
	,getSurface: function() {
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingFramebuffer && this.__framebuffer != null) return this.__framebuffer.texture;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = pixels1.length / 4 | 0;
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingFramebuffer = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl_Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) return;
		this.image.scroll(x,y);
		this.__usingFramebuffer = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.image.setPixel32(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.image.setPixels(rect.__toLimeRectangle(),byteArray,1);
		this.__usingFramebuffer = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime_utils_ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			var memory = new lime_utils_ByteArray(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl_Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl_Memory._setPositionTemporarily(position,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl_display_BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl_Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl_Memory.select(null);
			return hits;
		} else {
			sourceRect = sourceRect.clone();
			if(sourceRect.get_right() > sourceBitmapData.width) sourceRect.width = sourceBitmapData.width - sourceRect.x;
			if(sourceRect.get_bottom() > sourceBitmapData.height) sourceRect.height = sourceBitmapData.height - sourceRect.y;
			var targetRect = sourceRect.clone();
			targetRect.offsetPoint(destPoint);
			if(targetRect.get_right() > this.width) targetRect.width = this.width - targetRect.x;
			if(targetRect.get_bottom() > this.height) targetRect.height = this.height - targetRect.y;
			sourceRect.width = Math.min(sourceRect.width,targetRect.width);
			sourceRect.height = Math.min(sourceRect.height,targetRect.height);
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceRect.width | 0;
			var sh = sourceRect.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime_utils_ByteArray(totalMemory);
			memory1.position = 0;
			var pixels = sourceBitmapData.getPixels(sourceRect);
			if(copySource) memory1.writeBytes(pixels); else memory1.writeBytes(this.getPixels(targetRect));
			memory1.position = canvasMemory;
			memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl_Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl_Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl_display_BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl_Memory.setI32(position1,color);
						hits1++;
					}
				}
			}
			memory1.position = 0;
			this.setPixels(targetRect,memory1);
			openfl_Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__drawGL: function(renderSession,width,height,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels) {
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		var renderer = openfl_Lib.current.stage.__renderer;
		if(renderer == null) return;
		var renderSession1 = renderer.renderSession;
		var gl = renderSession1.gl;
		if(gl == null) return;
		var spritebatch = renderSession1.spriteBatch;
		var renderTransparent = renderSession1.renderer.transparent;
		var tmpRect;
		if(clipRect == null) tmpRect = new openfl_geom_Rectangle(0,0,width,height); else tmpRect = clipRect.clone();
		renderSession1.renderer.transparent = this.transparent;
		if(this.__framebuffer == null) this.__framebuffer = new openfl__$internal_renderer_opengl_utils_FilterTexture(gl,width,height,smoothing);
		this.__framebuffer.resize(width,height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
		renderer.setViewport(0,0,width,height);
		spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
		gl.colorMask(true,true,true,true);
		renderSession1.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		renderSession1.shaderManager.setShader(renderSession1.shaderManager.defaultShader,true);
		if(clearBuffer || drawSelf) this.__framebuffer.clear();
		if(drawSelf) {
			this.__worldTransform.identity();
			this.__flipMatrix(this.__worldTransform);
			this.__renderGL(renderSession1);
			spritebatch.stop();
			gl.deleteTexture(this.__texture);
			this.__texture = null;
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var matrixCache = source.__worldTransform;
		var blendModeCache = source.__blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
		this.__flipMatrix(m);
		source.__worldTransform = m;
		if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
		source.__blendMode = blendMode;
		source.__cacheAsBitmap = false;
		source.__updateChildren(false);
		source.__renderGL(renderSession1);
		source.__worldColorTransform = ctCache;
		source.__worldTransform = matrixCache;
		source.__blendMode = blendModeCache;
		source.__cacheAsBitmap = cached;
		source.__updateChildren(true);
		spritebatch.finish();
		if(readPixels) {
			if(this.image.width != width || this.image.height != height) this.image.resize(width,height);
			gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,this.image.buffer.data);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER,renderSession1.defaultFramebuffer);
		renderer.setViewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
		renderSession1.renderer.transparent = renderTransparent;
		gl.colorMask(true,true,true,renderSession1.renderer.transparent);
		this.__usingFramebuffer = false;
		if(this.image != null) {
			this.image.dirty = false;
			this.image.set_premultiplied(true);
		}
		this.__createUVs();
		this.__isValid = true;
	}
	,__flipMatrix: function(m) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,this.height);
		m.tx += tx;
		m.ty -= ty;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode);
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__class__: openfl_display_BitmapData
};
var game_preloader_Logo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(game_preloader_Logo.preload != null) {
		this.image = game_preloader_Logo.preload;
		width = this.image.width;
		height = this.image.height;
	} else this.__fromBase64(haxe_Resource.getString(game_preloader_Logo.resourceName),game_preloader_Logo.resourceType,function(b) {
		if(game_preloader_Logo.preload == null) game_preloader_Logo.preload = b.image;
		if(onload != null) onload(b);
	});
};
$hxClasses["game.preloader.Logo"] = game_preloader_Logo;
game_preloader_Logo.__name__ = ["game","preloader","Logo"];
game_preloader_Logo.preload = null;
game_preloader_Logo.__super__ = openfl_display_BitmapData;
game_preloader_Logo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: game_preloader_Logo
});
var game_preloader_BlankPreloader = function() {
	var cf = openfl_Assets.getFont("arialbd");
	this.textFormat = new openfl_text_TextFormat(cf.name);
	this.textFormat.size = 26;
	this.textFormat.color = 16710336;
	this.textFormat.align = openfl_text_TextFormatAlign.JUSTIFY;
	fw_Config.html5MusicData = [{ src : "music.ogg", id : "music"}];
	fw_preloader_DefaultPreloader.call(this);
};
$hxClasses["game.preloader.BlankPreloader"] = game_preloader_BlankPreloader;
game_preloader_BlankPreloader.__name__ = ["game","preloader","BlankPreloader"];
game_preloader_BlankPreloader.__super__ = fw_preloader_DefaultPreloader;
game_preloader_BlankPreloader.prototype = $extend(fw_preloader_DefaultPreloader.prototype,{
	onInit: function() {
		if(fw_utils_html5utils_Device.webgl == false) haxe_Log.trace("Rendering performance will be limited",{ fileName : "BlankPreloader.hx", lineNumber : 72, className : "game.preloader.BlankPreloader", methodName : "onInit"});
		if(fw_utils_html5utils_Device.webAudio == false || fw_utils_html5utils_Device.desktop == false) haxe_Log.trace("Audio performance will be limited",{ fileName : "BlankPreloader.hx", lineNumber : 75, className : "game.preloader.BlankPreloader", methodName : "onInit"});
		fw_preloader_DefaultPreloader.prototype.onInit.call(this);
		this.logo = new openfl_display_Bitmap(new game_preloader_Logo(1440,960),openfl_display_PixelSnapping.ALWAYS,true);
		this.addChild(this.logo);
		var xpos = this.stage.stageWidth / 1440;
		var ypos = this.stage.stageHeight / 960;
		if(xpos > ypos) {
			this.logo.set_scaleX(xpos);
			this.logo.set_scaleY(xpos);
		} else {
			this.logo.set_scaleX(ypos);
			this.logo.set_scaleY(ypos);
		}
		this.logo.set_x(0);
		this.logo.set_y(0);
		var LoadingTextField = new openfl_text_TextField();
		LoadingTextField.set_textColor(16777215);
		LoadingTextField.set_embedFonts(true);
		LoadingTextField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT);
		LoadingTextField.set_defaultTextFormat(this.textFormat);
		LoadingTextField.set_selectable(false);
		LoadingTextField.set_x(this.stage.stageWidth / 2 - LoadingTextField.get_width() / 2 - 50);
		LoadingTextField.set_y(this.stage.stageHeight / 2 - LoadingTextField.get_textHeight() * 2 + 25);
		this.addChild(LoadingTextField);
		LoadingTextField.set_text("Loading");
		this.loadingBar = new openfl_display_Sprite();
		this.loadingBar.get_graphics().beginFill(65280,1);
		this.loadingBar.get_graphics().drawRect(0,0,220,15);
		this.loadingBar.get_graphics().endFill();
		this.addChild(this.loadingBar);
		this.loadingBar.set_x(this.stage.stageWidth / 2 - this.loadingBar.get_width() / 2);
		this.loadingBar.set_y(this.stage.stageHeight / 2 - this.loadingBar.get_height() * 2 + 65);
		this.loadingBar1 = new openfl_display_Sprite();
		this.loadingBar1.get_graphics().beginFill(4194304,1);
		this.loadingBar1.get_graphics().drawRect(0,0,1,5);
		this.loadingBar1.get_graphics().endFill();
		this.addChild(this.loadingBar1);
		this.loadingBar1.set_x(this.loadingBar.get_x() + 8);
		this.loadingBar1.set_y(this.loadingBar.get_y() + 4);
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		fw_preloader_DefaultPreloader.prototype.onUpdate.call(this,bytesLoaded,bytesTotal);
		var percentLoaded = bytesLoaded / bytesTotal * 100 | 0;
		this.loadingBar1.set_scaleX(percentLoaded * 2);
	}
	,onDesktopHTML5SoundLoading: function() {
		fw_preloader_DefaultPreloader.prototype.onDesktopHTML5SoundLoading.call(this);
	}
	,readyForDeviceHTML5Sounds: function() {
		var clickToStart = new openfl_text_TextField();
		clickToStart.set_textColor(16777215);
		clickToStart.set_text("Click to start");
		clickToStart.set_x(this.stage.stageWidth / 2 - clickToStart.get_width() / 2);
		clickToStart.set_y(this.stage.stageHeight / 2 - clickToStart.get_textHeight() * 2);
		this.addChild(clickToStart);
		clickToStart.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onClickToStartClick));
	}
	,onClickToStartClick: function(e) {
		e.currentTarget.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onClickToStartClick));
		this.loadHTML5Sounds();
	}
	,__class__: game_preloader_BlankPreloader
});
var game_scenes_BuyShop = function() {
	this.limit = 0;
	openfl_display_Sprite.call(this);
	var fontXML = Xml.parse(openfl_Assets.getText("static/font60.fnt"));
	var fontImage = openfl_Assets.getBitmapData("static/font60.png");
	this.angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
	var fontXML1 = Xml.parse(openfl_Assets.getText("static/font24.fnt"));
	var fontImage1 = openfl_Assets.getBitmapData("static/font24.png");
	this.angelCodeFont24 = bitmapFont_BitmapFont.fromAngelCode(fontImage1,fontXML1);
};
$hxClasses["game.scenes.BuyShop"] = game_scenes_BuyShop;
game_scenes_BuyShop.__name__ = ["game","scenes","BuyShop"];
game_scenes_BuyShop.__interfaces__ = [fw_display_IScene];
game_scenes_BuyShop.__super__ = openfl_display_Sprite;
game_scenes_BuyShop.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.limit = 6;
		if(GameSettings.bg2played) this.limit = 8;
		if(GameSettings.bg3played) this.limit = 9;
		var bd = (10 - GameSettings.grassBundle) * 6;
		GameSettings.buyCost.h[5] = bd;
		bd = GameSettings.foodFrame * 15;
		GameSettings.buyCost.h[1] = bd;
		bd = (10 - Math.floor(GameSettings.medicineTotal / 3)) * 8;
		haxe_Log.trace(GameSettings.medicineTotal,{ fileName : "BuyShop.hx", lineNumber : 124, className : "game.scenes.BuyShop", methodName : "onInit"});
		GameSettings.buyCost.h[4] = bd;
		this.priceArray = [];
		this.oldScaleX = 1;
		this.oldScaleX1 = .7;
		this.oldScaleX1 = .6;
		this.shopbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bgmenu.png"));
		this.addChild(this.shopbg);
		this.shopbg.smoothing = true;
		this.box = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shop_bg"));
		this.addChild(this.box);
		this.box.set_scaleX(this.box.set_scaleY(.7));
		this.box.set_scaleY(.65);
		this.box.set_x(fw_Config.convertWidth(240));
		this.box.set_y(fw_Config.convertHeight(145));
		this.box.setSmoothing(true);
		this.box.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.box.set_scaleX(this.box.set_scaleY(.5));
		this.box.set_x(fw_Config.convertWidth(300));
		this.box.set_y(fw_Config.convertHeight(180));
		this.buttonbox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shopTab_buy"));
		this.addChild(this.buttonbox);
		this.buttonbox.set_scaleX(this.buttonbox.set_scaleY(.8));
		this.buttonbox.set_x(fw_Config.convertWidth(305));
		this.buttonbox.set_y(fw_Config.convertHeight(115));
		this.buttonbox.setSmoothing(true);
		this.buttonbox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.buttonbox.set_scaleX(this.buttonbox.set_scaleY(.6));
		this.buttonbox.set_x(fw_Config.convertWidth(340));
		this.buttonbox.set_y(fw_Config.convertHeight(160));
		this.sellButton = new openfl_display_Sprite();
		this.sellButton.get_graphics().beginFill(2228224,0);
		this.sellButton.get_graphics().drawRect(0,0,155,40);
		this.sellButton.get_graphics().endFill();
		this.addChild(this.sellButton);
		this.sellButton.set_x(fw_Config.convertWidth(500));
		this.sellButton.set_y(fw_Config.convertHeight(115));
		if(GameSettings.level > 1) {
			this.sellButton.buttonMode = true;
			this.sellButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoSell));
		}
		this.sellButton.set_scaleX(this.sellButton.set_scaleY(.8));
		this.sellButton.set_x(fw_Config.convertWidth(485));
		this.sellButton.set_y(fw_Config.convertHeight(160));
		this.cashTxt = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cashTxt.set_autoSize(true);
		this.cashTxt.set_wrapByWord(true);
		this.cashTxt.mouseEnabled = false;
		this.cashTxt.mouseChildren = false;
		this.cashTxt.set_smoothing(true);
		this.addChild(this.cashTxt);
		this.cashTxt.set_x(fw_Config.convertWidth(290));
		this.cashTxt.set_y(fw_Config.convertHeight(490));
		this.cashTxt.set_text("Cash :");
		this.cashTxt.set_scaleX(this.cashTxt.set_scaleY(.6));
		this.cashTxt.set_scaleX(this.cashTxt.set_scaleY(.4));
		this.cashTxt.set_x(fw_Config.convertWidth(330));
		this.cashTxt.set_y(fw_Config.convertHeight(450));
		this.cash = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cash.set_autoSize(true);
		this.cash.set_wrapByWord(true);
		this.cash.mouseEnabled = false;
		this.cash.mouseChildren = false;
		this.cash.set_smoothing(true);
		this.addChild(this.cash);
		this.cash.set_x(fw_Config.convertWidth(400));
		this.cash.set_y(fw_Config.convertHeight(490));
		this.cash.set_text(Std.string(GameSettings.cash));
		this.cash.set_scaleX(this.cash.set_scaleY(.6));
		this.cash.set_scaleX(this.cash.set_scaleY(.4));
		this.cash.set_x(fw_Config.convertWidth(400));
		this.cash.set_y(fw_Config.convertHeight(450));
		this.backButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_back"));
		this.addChild(this.backButton);
		if(GameSettings.level > 1) {
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.backtoGame));
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
			this.backButton.buttonMode = true;
		}
		this.backButton.set_scaleX(this.backButton.set_scaleY(0.7));
		this.backButton.set_x(fw_Config.convertWidth(550));
		this.backButton.set_y(fw_Config.convertHeight(490));
		this.backButton.set_scaleX(this.backButton.set_scaleY(0.6));
		this.backButton.set_x(fw_Config.convertWidth(500));
		this.backButton.set_y(fw_Config.convertHeight(445));
		this.backButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.backButton.setSmoothing(true);
		this.countArray = [];
		this.itemArray = [];
		this.addSprite(340,210,1);
		this.addSprite(410,210,2);
		this.addSprite(480,210,3);
		this.addSprite(550,210,4);
		this.addSprite(340,290,5);
		this.addSprite(410,290,6);
		this.addSprite(480,290,7);
		this.addSprite(550,290,8);
		this.addSprite(340,370,9);
		this.addSprite(410,370,10);
		this.addSprite(480,370,11);
		this.addSprite(550,370,12);
		if(GameSettings.level == 1) {
			this.arrow = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("arrow"));
			this.addChild(this.arrow);
			this.arrow.setFrames(GameSettings.c.getFrames("arrow"),15);
			this.arrow.set_x(fw_Config.convertWidth(240));
			this.arrow.set_y(fw_Config.convertHeight(460));
			this.arrow.set_scaleX(this.arrow.set_scaleY(.7));
			this.arrow.stop();
			this.arrow.set_visible(false);
			this.arrow.setSmoothing(true);
			this.arrow.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.updateItems();
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onGame));
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOut1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1));
	}
	,onMouseOver: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX - 0.03));
	}
	,onMouseOver1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX1 = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1 + 0.05));
	}
	,onGame: function(e) {
		if(e.keyCode == 27) {
		}
	}

	,addSprite: function(xpos,ypos,no) {
		this.item = new openfl_display_Sprite();
		this.item.get_graphics().beginFill(2228224,0);
		this.item.get_graphics().drawRect(0,0,80,80);
		this.item.get_graphics().endFill();
		this.addChild(this.item);
		this.item.set_x(fw_Config.convertWidth(xpos));
		this.item.set_y(fw_Config.convertHeight(ypos));
		this.itemArray.push(this.item);
		this.itemBox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shopItem_box"));
		this.item.addChild(this.itemBox);
		this.itemBox.set_scaleX(this.itemBox.set_scaleY(.7));
		this.itemBox.set_scaleX(this.itemBox.set_scaleY(.5));
		this.itemBox.setSmoothing(true);
		this.itemBox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.buy = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("buy"));
		this.item.addChild(this.buy);
		this.buy.set_scaleX(this.buy.set_scaleY(.7));
		this.buy.set_x(fw_Config.convertWidth(2));
		this.buy.set_y(fw_Config.convertHeight(1));
		this.buy.setSmoothing(true);
		this.buy.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.buy.set_scaleX(this.buy.set_scaleY(.5));
		this.money = new bitmapFont_BitmapTextField(this.angelCodeFont24);
		this.money.set_autoSize(true);
		this.money.set_wrapByWord(true);
		this.money.mouseEnabled = false;
		this.money.mouseChildren = false;
		this.money.set_smoothing(true);
		this.item.addChild(this.money);
		this.money.set_x(fw_Config.convertWidth(15));
		this.money.set_y(fw_Config.convertHeight(83));
		this.money.set_text(Std.string(GameSettings.buyCost.h[no]) + ".00");
		this.money.set_scaleX(this.money.set_scaleY(.8));
		this.money.set_scaleX(this.money.set_scaleY(.6));
		this.money.set_x(fw_Config.convertWidth(0));
		this.money.set_y(fw_Config.convertHeight(60));
		this.object = this.buy;
		if(no == 1) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sheepFood"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(17));
			this.object.set_y(fw_Config.convertHeight(25));
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(15));
		} else if(no == 2) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(35));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(7));
			this.object.set_y(fw_Config.convertHeight(25));
		} else if(no == 3) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon8"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.9));
			this.object.set_x(fw_Config.convertWidth(5));
			this.object.set_scaleX(this.object.set_scaleY(.7));
			this.object.set_x(fw_Config.convertWidth(0));
			this.object.set_y(fw_Config.convertHeight(-2));
		} else if(no == 4) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("medicine"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(30));
			this.object.set_y(fw_Config.convertHeight(30));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(25));
		} else if(no == 5) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(25));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(20));
		} else if(no == 6) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(25));
			this.object.set_y(fw_Config.convertHeight(20));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(15));
		} else if(no == 7) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat_drying_0001"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.2));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(30));
			this.object.set_scaleX(this.object.set_scaleY(.15));
			this.object.set_x(fw_Config.convertWidth(6));
			this.object.set_y(fw_Config.convertHeight(25));
		} else if(no == 8) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(7));
			this.object.set_y(fw_Config.convertHeight(22));
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(3));
			this.object.set_y(fw_Config.convertHeight(15));
		} else if(no == 9) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color0001"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(22));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(18));
		} else if(no == 10) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color0002"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(22));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(18));
		} else if(no == 11) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color0003"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(22));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(18));
		} else if(no == 12) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color0004"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(22));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(18));
		}
		this.object.setSmoothing(true);
		this.object.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		if(no >= this.limit) {
			this.object.set_visible(false);
			this.money.set_visible(false);
			this.buy.set_visible(false);
			this.item.set_alpha(.3);
		}
	}
	,updateItems: function() {
		var cost = 0;
		var flag = false;
		var _g1 = 1;
		var _g = this.limit;
		while(_g1 < _g) {
			var i = _g1++;
			flag = false;
			cost = GameSettings.buyCost.h[i];
			if(cost > GameSettings.cash) {
				this.itemArray[i - 1].set_alpha(.3);
				if(this.itemArray[i - 1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
					this.itemArray[i - 1].buttonMode = false;
					this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
					this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
					this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
				}
			} else {
				flag = false;
				if(i == 1) {
					if(GameSettings.foodFrame > 3) flag = true;
				} else if(i == 2) {
					if(GameSettings.sackTotal < 12) flag = true;
				} else if(i == 3) {
					if(GameSettings.sheepTotal < 11) flag = true;
				} else if(i == 4) {
					if(GameSettings.medicineTotal < 24) flag = true;
				} else if(i == 5) {
					if(GameSettings.grassBundle < 8) flag = true;
				} else if(i == 6) {
					if(GameSettings.basketTotal < 12) flag = true;
				} else if(i == 7) {
					if(GameSettings.matTotal < 6) flag = true;
				} else if(i == 8) {
					if(!GameSettings.vehicleUp) flag = true;
				} else if(i >= 9) {
					if(!GameSettings.color1Up || !GameSettings.color2Up || !GameSettings.color3Up || !GameSettings.color4Up) flag = true;
				}
				if(flag) {
					this.itemArray[i - 1].set_alpha(1);
					if(GameSettings.level > 1) {
						if(!this.itemArray[i - 1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
							this.itemArray[i - 1].buttonMode = true;
							this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
							this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
							this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
						}
					}
				} else {
					this.itemArray[i - 1].set_alpha(.3);
					if(GameSettings.level > 1) {
						if(this.itemArray[i - 1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
							this.itemArray[i - 1].buttonMode = false;
							this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
							this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
							this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
						}
					}
				}
			}
		}
		if(GameSettings.level == 1) {
			this.itemArray[0].set_alpha(1);
			this.itemArray[0].buttonMode = true;
			this.itemArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
			this.itemArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
			this.itemArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
			this.arrow.set_x(fw_Config.convertWidth(this.itemArray[0].get_x() + 50));
			this.arrow.set_y(fw_Config.convertHeight(this.itemArray[0].get_y() - 30));
			this.arrow.play(0,true);
			this.arrow.set_visible(true);
		}
	}
	,clickonItem: function(e) {
		var k;
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		var _g1 = 0;
		var _g = this.itemArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.itemArray[i] == e.currentTarget) {
				k = i + 1;
				GameSettings.cash -= GameSettings.buyCost.h[k];
				this.price = new bitmapFont_BitmapTextField(this.angelCodeFont24);
				this.price.set_autoSize(true);
				this.price.set_wrapByWord(true);
				this.price.mouseEnabled = false;
				this.price.mouseChildren = false;
				this.price.set_smoothing(true);
				this.addChild(this.price);
				this.price.set_x(fw_Config.convertWidth(390));
				this.price.set_y(fw_Config.convertHeight(490));
				this.price.set_text("-" + Std.string(GameSettings.buyCost.h[k]));
				motion_Actuate.tween(this.price,1,{ y : fw_Config.convertHeight(300)}).ease(motion_easing_Back.get_easeIn()).onComplete($bind(this,this.tweenComplete));
				this.priceArray.push(this.price);
				this.price.set_scaleX(this.price.set_scaleY(.9));
				this.cash.set_text(Std.string(GameSettings.cash));
				if(k == 1) {
					GameSettings.foodTotal = 18;
					GameSettings.foodFrame = 0;
				} else if(k == 2) {
					GameSettings.sackTotal++;
					GameSettings.availableSack++;
				} else if(k == 3) {
					GameSettings.sheepTotal++;
					GameSettings.buysheepCount++;
				} else if(k == 4) GameSettings.medicineTotal = 30; else if(k == 5) {
					GameSettings.grassTotal = 30;
					GameSettings.grassBundle = 10;
				} else if(k == 6) {
					GameSettings.basketTotal++;
					GameSettings.availableBasket++;
				} else if(k == 7) GameSettings.matTotal++; else if(k == 8) GameSettings.vehicleUp = true; else if(k >= 9) {
					if(!GameSettings.color1Up) {
						GameSettings.color1Up = true;
						GameSettings.clr1 = k - 4;
						GameSettings.bar1Frame = 0;
					} else if(!GameSettings.color2Up) {
						GameSettings.color2Up = true;
						GameSettings.clr2 = k - 4;
						GameSettings.bar2Frame = 0;
					} else if(!GameSettings.color3Up) {
						GameSettings.color3Up = true;
						GameSettings.clr3 = k - 4;
						GameSettings.bar3Frame = 0;
					} else if(!GameSettings.color4Up) {
						GameSettings.color4Up = true;
						GameSettings.clr4 = k - 4;
						GameSettings.bar4Frame = 0;
					}
				}
				GameSettings.buyFlag = true;
				if(GameSettings.level == 1) {
					this.itemArray[0].set_alpha(.3);
					this.itemArray[0].buttonMode = false;
					this.itemArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
					this.itemArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
					this.itemArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
					this.arrow.set_x(fw_Config.convertWidth(this.backButton.get_x() + 50));
					this.arrow.set_y(fw_Config.convertHeight(this.backButton.get_y() - 50));
					this.arrow.play(0,true);
					this.arrow.set_visible(true);
					this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.backtoGame));
					this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
					this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
					this.backButton.buttonMode = true;
				} else this.updateItems();
				break;
			}
		}
	}
	,tweenComplete: function() {
		this.removeChild(this.priceArray[0]);
		this.priceArray.splice(0,1);
	}
	,gotoSell: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removeCurrentBg();
		fw_managers_SceneManager.changeScene(game_scenes_SellShop);
	}
	,backtoGame: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removeCurrentBg();
		if(GameSettings.level == 1) GameSettings.fromMarket = true;
		GameSettings.isPlaying = true;
		fw_managers_SceneManager.resumeScene(game_scenes_Game);
	}
	,removeCurrentBg: function() {
		var k = this.priceArray.length;
		var _g = 0;
		while(_g < k) {
			var i = _g++;
			if(this.priceArray.length > 0) {
				this.removeChild(this.priceArray[this.priceArray.length - 1]);
				this.priceArray.pop();
			} else break;
		}
		if(GameSettings.level == 1) this.removeChild(this.arrow);
		this.removeChild(this.shopbg);
		this.shopbg = null;
		this.removeChild(this.box);
		this.box = null;
		this.removeChild(this.buttonbox);
		this.buttonbox = null;
		this.removeChild(this.sellButton);
		this.sellButton = null;
		this.removeChild(this.cashTxt);
		this.cashTxt = null;
		this.removeChild(this.cash);
		this.cash = null;
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onGame));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.backtoGame));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
		this.removeChild(this.backButton);
		this.backButton = null;
		this.removeItem();
	}
	,removeItem: function() {
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			this.itemArray[i].removeChild(this.itemBox);
			this.itemArray[i].removeChild(this.buy);
			this.itemArray[i].removeChild(this.money);
			this.itemArray[i].removeChild(this.object);
			this.removeChild(this.itemArray[i]);
		}
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		if(GameSettings.level == 1) this.arrow.update();
		if(this.priceArray.length > 0) {
			var _g1 = 0;
			var _g = this.priceArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.priceArray[i] != null && this.priceArray[i].get_alpha() > 0) {
				}
			}
		}
	}
	,onExit: function() {
	}
	,__class__: game_scenes_BuyShop
});
var game_scenes_Game = function() {
	this.marketEnabled = true;
	this.TutNo = 0;
	this.restrictForTut3 = false;
	this.restrictForTut2 = false;
	openfl_display_Sprite.call(this);
};
$hxClasses["game.scenes.Game"] = game_scenes_Game;
game_scenes_Game.__name__ = ["game","scenes","Game"];
game_scenes_Game.__interfaces__ = [fw_display_IScene];
game_scenes_Game.bg1Sprite = null;
game_scenes_Game.obj1Sprite = null;
game_scenes_Game.cartSprite = null;
game_scenes_Game.hero = null;
game_scenes_Game.grid = null;
game_scenes_Game.currentNode = null;
game_scenes_Game.__super__ = openfl_display_Sprite;
game_scenes_Game.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.meetTarget = false;
		this.meetMedScore = false;
		this.meetMaxScore = false;
		this.scene2Added = false;
		GameSettings.score = 0;
		this.restrictForTut2 = false;
		this.restrictForTut3 = false;
		GameSettings.isPaused = false;
		GameSettings.isPlaying = true;
		this.incre = 0;
		this.marketEnabled = true;
		GameSettings.lightup = 0;
		this.HItem = 0;
		this.msInterval = 60;
		this.tm = 0;
		this.woolInc = 0;
		this.sackLength = 0;
		this.sheepArray = [];
		this.currentBg = "bg1";
		this.processQueue = [];
		this.sortArray = [];
		this.emptySack = [];
		this.milkArray = [];
		this.flushArray = [];
		this.lifeArray = [4,4,5,5,6];
		this.delayArray = [0,80,160,240,320];
		this.FlowCnt = 0;
		this.takeCount = 0;
		GameSettings.fromMarket = false;
		this.heroBusy = false;
		this.heroMove = false;
		this.heroState = "noTray";
		this.speed = 3;
		this.currentItem = 0;
		this.currentSack = 0;
		if(GameSettings.gameLoaded) this.putData();
		GameSettings.time = 59;
		this.common = new game_scenes_GameBackground();
		GameSettings.bg2played = false;
		GameSettings.bg3played = false;
		this.TutNo = 0;
		this.common.init(this);
		this.targetSetting();
		this.currentSheep = null;
		this.pickedSack = null;
		game_scenes_Game.bg1Sprite = new openfl_display_Sprite();
		this.addChild(game_scenes_Game.bg1Sprite);
		game_scenes_Game.obj1Sprite = new openfl_display_Sprite();
		this.addChild(game_scenes_Game.obj1Sprite);
		game_scenes_Game.cartSprite = new openfl_display_Sprite();
		this.addChild(game_scenes_Game.cartSprite);
		game_scenes_Game.grid = new fw_ai_pathfinding_node_Grid();
		game_scenes_Game.grid.parseXML(Xml.parse("<nodes height=\"640\" width=\"960\"><node x=\"536\" join=\"n2,n4,n3,n5,n20,n1,n26,n30,n32,n36,n41\" y=\"316\" id=\"n1\"/><node x=\"371\" join=\"n1,n21,n2,n18,n30,n36\" y=\"227\" id=\"n2\"/><node x=\"327\" join=\"n1,n20,n26\" y=\"429\" id=\"n3\"/><node x=\"702\" join=\"n1,n21,n41\" y=\"413\" id=\"n4\"/><node x=\"710\" join=\"n1,n32,n5\" y=\"230\" id=\"n5\"/><node x=\"425\" join=\"n20,n21,n6,n25\" y=\"443\" id=\"n6\"/><node x=\"527\" join=\"n8\" y=\"496\" id=\"n7\"/><node x=\"587\" join=\"n7,n25,n43\" y=\"468\" id=\"n8\"/><node x=\"761\" join=\"n42\" y=\"356\" id=\"n9\"/><node x=\"891\" join=\"n11,n10\" y=\"299\" id=\"n10\"/><node x=\"843\" join=\"n39,n10,n42\" y=\"282\" id=\"n11\"/><node x=\"680\" join=\"n13,n12\" y=\"166\" id=\"n12\"/><node x=\"637\" join=\"n12,n37\" y=\"164\" id=\"n13\"/><node x=\"473\" join=\"n34\" y=\"177\" id=\"n14\"/><node x=\"283\" join=\"n25,n26,n27\" y=\"308\" id=\"n15\"/><node x=\"248\" join=\"n27,n17\" y=\"355\" id=\"n16\"/><node x=\"306\" join=\"n29,n16,n17\" y=\"372\" id=\"n17\"/><node x=\"331\" join=\"n2\" y=\"233\" id=\"n18\"/><node x=\"364\" join=\"n6,n3,n1,n26,n20\" y=\"410\" id=\"n20\"/><node x=\"592\" join=\"n6,n4,n2,n25,n38,n41\" y=\"349\" id=\"n21\"/><node x=\"476\" join=\"n15,n6,n21,n8,n25,n43\" y=\"413\" id=\"n25\"/><node x=\"417\" join=\"n15,n3,n1,n29,n26,n43,n20\" y=\"381\" id=\"n26\"/><node x=\"309\" join=\"n16,n15,n27,n29\" y=\"323\" id=\"n27\"/><node x=\"351\" join=\"n27,n17,n26,n30\" y=\"345\" id=\"n29\"/><node x=\"467\" join=\"n29,n2,n1,n31,n30\" y=\"280\" id=\"n30\"/><node x=\"592\" join=\"n32,n30,n31,n37\" y=\"213\" id=\"n31\"/><node x=\"660\" join=\"n31,n1,n5,n38,n37\" y=\"253\" id=\"n32\"/><node x=\"507\" join=\"n14,n37,n34\" y=\"163\" id=\"n34\"/><node x=\"447\" join=\"n37,n2,n1\" y=\"266\" id=\"n36\"/><node x=\"567\" join=\"n34,n36,n32,n38,n31,n13,n37\" y=\"199\" id=\"n37\"/><node x=\"720\" join=\"n32,n37,n21,n39\" y=\"288\" id=\"n38\"/><node x=\"770\" join=\"n38,n11,n39,n41,n42\" y=\"317\" id=\"n39\"/><node x=\"644\" join=\"n39,n4,n1,n21,n42,n43\" y=\"377\" id=\"n41\"/><node x=\"726\" join=\"n9,n41,n11,n39\" y=\"339\" id=\"n42\"/><node x=\"531\" join=\"n41,n8,n25,n26\" y=\"441\" id=\"n43\"/></nodes>"));
		this.addBg1();
		this.grassPos = [370,350,330,310,360,340,320,350,330,340,65,80,95,110,60,75,90,55,70,50];
		this.grass = new openfl_display_Sprite();
		this.grass.get_graphics().beginFill(2228224,0);
		this.grass.get_graphics().drawRect(320,60,fw_Config.convertWidth(100),fw_Config.convertHeight(80));
		this.grass.get_graphics().endFill();
		game_scenes_Game.bg1Sprite.addChild(this.grass);
		this.grass.set_x(fw_Config.convertWidth(15));
		this.grass.set_y(fw_Config.convertHeight(70));
		this.grass.set_name("grass");
		this.grassArray = [];
		this.grass.mouseChildren = false;
		this.grass.mouseEnabled = false;
		var _g1 = 0;
		var _g = GameSettings.grassBundle;
		while(_g1 < _g) {
			var i = _g1++;
			this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
			this.grass.addChild(this.grass1);
			this.grass1.set_x(fw_Config.convertWidth(this.grassPos[i]));
			this.grass1.set_y(fw_Config.convertHeight(this.grassPos[i + 10]));
			this.grass1.set_scaleX(this.grass1.set_scaleY(.8));
			this.grassArray.push(this.grass1);
			this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.grass1.setSmoothing(true);
			this.grass1.mouseChildren = false;
			this.grass1.mouseEnabled = false;
		}
		this.grassClick = new openfl_display_Sprite();
		this.grassClick.get_graphics().beginFill(2228224,0);
		this.grassClick.get_graphics().drawRect(0,0,fw_Config.convertWidth(110),fw_Config.convertHeight(65));
		this.grassClick.get_graphics().endFill();
		this.addChild(this.grassClick);
		this.grassClick.set_x(fw_Config.convertWidth(320));
		this.grassClick.set_y(fw_Config.convertHeight(180));
		this.grassClick.set_rotation(-40);
		this.grassClick.set_name("grass");
		this.bucket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("bucket"));
		game_scenes_Game.bg1Sprite.addChild(this.bucket);
		this.bucket.setFrames(GameSettings.d.getFrames("bucket"),15);
		this.bucket.gotoFrame(0);
		this.bucket.set_x(fw_Config.convertWidth(720));
		this.bucket.set_y(fw_Config.convertHeight(140));
		this.bucket.set_scaleX(this.bucket.set_scaleY(.8));
		this.bucket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.bucket.setSmoothing(true);
		this.bucket.set_name("bucket");
		if(GameSettings.gameLoaded) this.bucket.gotoFrame(GameSettings.savedData.bucketFrame);
		this.bucketClick = new openfl_display_Sprite();
		this.bucketClick.get_graphics().beginFill(2228224,0);
		this.bucketClick.get_graphics().drawRect(320,60,fw_Config.convertWidth(52),fw_Config.convertHeight(63));
		this.bucketClick.get_graphics().endFill();
		this.addChild(this.bucketClick);
		this.bucketClick.set_x(fw_Config.convertWidth(408));
		this.bucketClick.set_y(fw_Config.convertHeight(85));
		this.bucketClick.set_name("grass");
		this.waterFlow = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("waterFlow"));
		game_scenes_Game.bg1Sprite.addChild(this.waterFlow);
		this.waterFlow.setFrames(GameSettings.d.getFrames("waterFlow"),15);
		this.waterFlow.gotoFrame(0);
		this.waterFlow.set_visible(false);
		this.waterFlow.set_x(fw_Config.convertWidth(742));
		this.waterFlow.set_y(fw_Config.convertHeight(120));
		this.waterFlow.set_scaleX(this.waterFlow.set_scaleY(.25));
		this.waterFlow.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.waterFlow.setSmoothing(true);
		this.sackPos = [125,117,109,101,93,85,125,117,109,101,93,85];
		this.emptySack = [];
		var _g11 = 0;
		var _g2 = GameSettings.availableSack;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.sack1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
			if(i1 > 5) this.sackextra.addChild(this.sack1); else this.sack.addChild(this.sack1);
			this.sack1.set_x(fw_Config.convertWidth(180));
			this.sack1.set_y(fw_Config.convertHeight(this.sackPos[i1]));
			this.sack1.set_scaleX(this.sack1.set_scaleY(.8));
			this.emptySack.push(this.sack1);
			this.sack1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.sack1.setSmoothing(true);
		}
		this.addSheep();
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence1"));
		game_scenes_Game.bg1Sprite.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(575));
		this.fence1.set_y(fw_Config.convertHeight(30));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence1"));
		game_scenes_Game.bg1Sprite.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(820));
		this.fence1.set_y(fw_Config.convertHeight(170));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence1"));
		game_scenes_Game.bg1Sprite.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(575));
		this.fence1.set_y(fw_Config.convertHeight(35));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.85));
		var _g3 = this.fence1;
		_g3.set_scaleX(_g3.get_scaleX() * -1);
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence4"));
		game_scenes_Game.bg1Sprite.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(110));
		this.fence1.set_y(fw_Config.convertHeight(190));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence1"));
		this.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(115));
		this.fence1.set_y(fw_Config.convertHeight(300));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence1"));
		this.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(360));
		this.fence1.set_y(fw_Config.convertHeight(440));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence4"));
		this.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(505));
		this.fence1.set_y(fw_Config.convertHeight(420));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.fence1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fence4"));
		this.addChild(this.fence1);
		this.fence1.set_x(fw_Config.convertWidth(780));
		this.fence1.set_y(fw_Config.convertHeight(270));
		this.fence1.set_scaleX(this.fence1.set_scaleY(.8));
		this.fence1.setSmoothing(true);
		this.fence1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.fence1.mouseChildren = false;
		this.fence1.mouseEnabled = false;
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat_gameBg1"));
		this.addChild(this.mat);
		this.mat.set_x(fw_Config.convertWidth(-20));
		this.mat.set_y(fw_Config.convertHeight(365));
		this.mat.set_scaleX(this.mat.set_scaleY(.75));
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		game_scenes_Game.cartSprite = new openfl_display_Sprite();
		this.addChild(game_scenes_Game.cartSprite);
		this.sackMArray = [];
		this.sackMPos = [140,195,85,140,35,90,500,472,470,442,440,410];
		var k = 0;
		var _g12 = 0;
		var _g4 = this.sackLength;
		while(_g12 < _g4) {
			var i2 = _g12++;
			k++;
			this.sackM = new game_scenes_ObjGame("sack");
			game_scenes_Game.cartSprite.addChild(this.sackM);
			this.sackM.set_x(fw_Config.convertWidth(this.sackMPos[i2]));
			this.sackM.set_y(fw_Config.convertHeight(this.sackMPos[i2 + 6]));
			this.sackM.set_scaleX(this.sackM.set_scaleY(.8));
			this.sackM.id = "sack" + (k == null?"null":"" + k);
			this.sackMArray.push(this.sackM);
			if(GameSettings.level > 1) {
				this.sackM.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
				this.sackM.buttonMode = true;
			}
		}
		k = 0;
		if(GameSettings.gameLoaded) {
			var _g13 = 0;
			var _g5 = this.sackMArray.length;
			while(_g13 < _g5) {
				var i3 = _g13++;
				if(GameSettings.savedData.sackArray[k] == 0) {
					this.sackMArray[i3].set_visible(false);
					this.sackMArray[i3].obj.gotoFrame(0);
				} else this.sackMArray[i3].obj.gotoFrame(GameSettings.savedData.sackArray[k + 1]);
				k += 2;
				this.sackMArray[i3].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
				this.sackMArray[i3].buttonMode = true;
			}
			this.sortFunctionSack();
			this.sackMArray.reverse();
		}
		this.bgTray = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("trayBg"));
		game_scenes_Game.cartSprite.addChild(this.bgTray);
		this.bgTray.setSmoothing(true);
		this.bgTray.set_x(fw_Config.convertWidth(235));
		this.bgTray.set_y(fw_Config.convertHeight(420));
		if(GameSettings.level > 1) {
			this.bgTray.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnbgTray));
			this.bgTray.buttonMode = true;
		}
		if(GameSettings.woolTrayCount > 0) this.bgTray.gotoFrame(1);
		this.bgTray.setSmoothing(true);
		this.bgTray.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.addCart();
		this.gameBg2 = new game_scenes_Game2(this);
		this.addChild(this.gameBg2);
		this.gameBg2.set_visible(false);
		this.gameBg3 = new game_scenes_Game3(this);
		this.addChild(this.gameBg3);
		this.gameBg3.set_visible(false);
		this.gameBg4 = new game_scenes_Game4(this);
		this.addChild(this.gameBg4);
		this.gameBg4.set_visible(false);
		if(GameSettings.level > 1) {
			this.foodClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnFood));
			this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.sackextra.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.grassClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
			this.bucketClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBucket));
			this.vehicle.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
			this.vehicle.buttonMode = true;
			this.foodClick.buttonMode = true;
			this.sack.buttonMode = true;
			this.sackextra.buttonMode = true;
			this.grassClick.buttonMode = true;
			this.bucketClick.buttonMode = true;
		}
		if(GameSettings.level == 1) {
			this.arrow = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("arrow"));
			this.addChild(this.arrow);
			this.arrow.setFrames(GameSettings.c.getFrames("arrow"),15);
			this.arrow.set_x(fw_Config.convertWidth(240));
			this.arrow.set_y(fw_Config.convertHeight(460));
			this.arrow.set_scaleX(this.arrow.set_scaleY(.7));
			this.arrow.stop();
			this.arrow.set_visible(false);
			this.arrow.setSmoothing(true);
			this.arrow.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.arrow.mouseChildren = false;
			this.arrow.mouseEnabled = false;
			this.arrow1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("arrow"));
			fw_managers_SceneManager.addToHUD(this.arrow1);
			this.arrow1.setFrames(GameSettings.c.getFrames("arrow"),15);
			this.arrow1.set_x(fw_Config.convertWidth(240));
			this.arrow1.set_y(fw_Config.convertHeight(460));
			this.arrow1.set_scaleX(this.arrow1.set_scaleY(fw_Config.scaleRatio * .7));
			this.arrow1.stop();
			this.arrow1.set_visible(false);
			this.arrow1.setSmoothing(true);
			this.arrow1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.arrow1.mouseChildren = false;
			this.arrow1.mouseEnabled = false;
			this.tutorial = new game_scenes_TutMessages();
			this.addChild(this.tutorial);
			this.tutorial.set_visible(false);
			this.tutorial1 = new game_scenes_TutMessages();
			fw_managers_SceneManager.addToHUD(this.tutorial1);
			this.tutorial1.addMessages("sack");
			this.tutorial1.set_scaleX(this.tutorial1.set_scaleY(fw_Config.scaleRatio));
			this.tutorial1.set_visible(false);
			if(GameSettings.level == 1) {
				this.gameData = { };
				this.saveData(1);
				GameSettings.nextAction = true;
			}
		}
		this.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.onPause));
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
	}
	,checksackForTut: function() {
		var flag = false;
		var _g1 = 0;
		var _g = this.sackMArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sackMArray[i].get_visible() && this.sackMArray[i].obj.frameIndex == 3) {
				this.arrow.set_x(fw_Config.convertWidth(this.sackMArray[i].get_x() + 10));
				this.arrow.set_y(fw_Config.convertHeight(this.sackMArray[i].get_y() - 130));
				this.arrow.play(0,true);
				this.arrow.set_visible(true);
				this.tutorial.addMessages("sack");
				this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 50));
				this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() - 50));
				this.tutorial.set_visible(true);
				flag = true;
				break;
			}
		}
		if(flag == false) {
			this.arrow.stop();
			this.arrow.set_visible(false);
			this.tutorial.set_visible(false);
		}
	}
	,handlekeyDown: function(e) {
		if(e.keyCode == 27) {
		}
	}
	,onPause: function(e) {
		if(GameSettings.isPaused == false) {
			GameSettings.isPlaying = false;
			this.addPausedBox();
		}
	}
	,targetSetting: function() {
		if(GameSettings.level == 1) {
			GameSettings.target = 5;
			GameSettings.sheepTotal = 1;
			this.timeDealay = 200;
			GameSettings.medtarget = 9;
			GameSettings.maxtarget = 13;
		} else if(GameSettings.level == 2) {
			GameSettings.sheepTotal = 3;
			GameSettings.target = 30;
			GameSettings.medtarget = 50;
			GameSettings.maxtarget = 70;
			this.timeDealay = 230;
		} else if(GameSettings.level == 3) {
			GameSettings.target = 60;
			GameSettings.medtarget = 80;
			GameSettings.maxtarget = 100;
			this.timeDealay = 235;
		} else if(GameSettings.level == 4) {
			GameSettings.target = 90;
			GameSettings.medtarget = 110;
			GameSettings.maxtarget = 130;
			this.timeDealay = 240;
		} else if(GameSettings.level == 5) {
			GameSettings.target = 120;
			GameSettings.medtarget = 150;
			GameSettings.maxtarget = 180;
			this.timeDealay = 245;
		} else if(GameSettings.level == 6) {
			GameSettings.target = 150;
			GameSettings.medtarget = 190;
			GameSettings.maxtarget = 240;
			this.timeDealay = 250;
		} else if(GameSettings.level == 7) {
			GameSettings.target = 190;
			GameSettings.medtarget = 250;
			GameSettings.maxtarget = 320;
			this.timeDealay = 255;
		} else if(GameSettings.level == 8) {
			GameSettings.target = 220;
			GameSettings.medtarget = 280;
			GameSettings.maxtarget = 350;
			this.timeDealay = 260;
		} else if(GameSettings.level == 9) {
			GameSettings.target = 260;
			GameSettings.medtarget = 350;
			GameSettings.maxtarget = 430;
			this.timeDealay = 265;
		} else if(GameSettings.level == 10) {
			GameSettings.target = 300;
			GameSettings.medtarget = 400;
			GameSettings.maxtarget = 510;
			this.timeDealay = 270;
		} else if(GameSettings.level == 11) {
			GameSettings.target = 340;
			GameSettings.medtarget = 480;
			GameSettings.maxtarget = 590;
			this.timeDealay = 275;
		} else if(GameSettings.level == 12) {
			GameSettings.target = 380;
			GameSettings.medtarget = 530;
			GameSettings.maxtarget = 660;
			this.timeDealay = 280;
		} else if(GameSettings.level == 13) {
			GameSettings.target = 430;
			GameSettings.medtarget = 580;
			GameSettings.maxtarget = 700;
			this.timeDealay = 285;
		} else if(GameSettings.level == 14) {
			GameSettings.target = 480;
			GameSettings.medtarget = 620;
			GameSettings.maxtarget = 750;
			this.timeDealay = 290;
		} else if(GameSettings.level == 15) {
			GameSettings.target = 530;
			GameSettings.medtarget = 660;
			GameSettings.maxtarget = 800;
			this.timeDealay = 295;
		} else if(GameSettings.level == 16) {
			GameSettings.target = 570;
			GameSettings.medtarget = 700;
			GameSettings.maxtarget = 850;
			this.timeDealay = 300;
		} else if(GameSettings.level == 17) {
			GameSettings.target = 620;
			GameSettings.medtarget = 750;
			GameSettings.maxtarget = 900;
			this.timeDealay = 305;
		} else if(GameSettings.level == 18) {
			GameSettings.target = 660;
			GameSettings.medtarget = 800;
			GameSettings.maxtarget = 940;
			this.timeDealay = 310;
		} else if(GameSettings.level == 19) {
			GameSettings.target = 700;
			GameSettings.medtarget = 850;
			GameSettings.maxtarget = 1000;
			this.timeDealay = 315;
		} else if(GameSettings.level == 20) {
			GameSettings.target = 740;
			GameSettings.medtarget = 900;
			GameSettings.maxtarget = 1050;
			this.timeDealay = 320;
		} else {
			GameSettings.target = 750 + (GameSettings.level - 20) * 20;
			GameSettings.medtarget = GameSettings.target + 100;
			GameSettings.maxtarget = GameSettings.target + 200;
			this.timeDealay = 320;
		}
		GameSettings.bonus = GameSettings.level;
		GameSettings.bonus += GameSettings.matTotal - 1;
	}
	,addCart: function() {
		var milkX;
		var milkY;
		if(GameSettings.vehicleUp) {
			GameSettings.bonus += 4;
			this.cart11 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart2_piece1"));
			game_scenes_Game.cartSprite.addChild(this.cart11);
			this.cart11.set_x(fw_Config.convertWidth(735));
			this.cart11.set_y(fw_Config.convertHeight(400));
			this.cart11.set_scaleX(this.cart11.set_scaleY(.8));
			this.cart11.setSmoothing(true);
			this.cart11.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			milkX = [788,804,819,781,797,813,838,853,868,832,847,862];
			milkY = [443,451,459,451,459,466,470,478,486,477,485,493];
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("milkBottle2"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.set_x(fw_Config.convertWidth(milkX[i]));
				this.flush.set_y(fw_Config.convertHeight(milkY[i]) - this.flush.get_height() / 2);
				this.flush.set_scaleX(this.flush.set_scaleY(.8));
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.milkArray.push(this.flush);
				if(i > GameSettings.milkTotal - 1) this.flush.set_visible(false);
			}
			this.cart11 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart2_piece3"));
			game_scenes_Game.cartSprite.addChild(this.cart11);
			this.cart11.set_x(fw_Config.convertWidth(820));
			this.cart11.set_y(fw_Config.convertHeight(438));
			this.cart11.setSmoothing(true);
			this.cart11.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			var _g1 = 6;
			while(_g1 < 12) {
				var i1 = _g1++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("milkBottle2"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.set_x(fw_Config.convertWidth(milkX[i1]));
				this.flush.set_y(fw_Config.convertHeight(milkY[i1]) - this.flush.get_height() / 2);
				this.flush.set_scaleX(this.flush.set_scaleY(.8));
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.milkArray.push(this.flush);
				if(i1 > GameSettings.milkTotal - 1) this.flush.set_visible(false);
			}
			this.cart11 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart2_piece4"));
			game_scenes_Game.cartSprite.addChild(this.cart11);
			this.cart11.set_x(fw_Config.convertWidth(760));
			this.cart11.set_y(fw_Config.convertHeight(425));
			this.cart11.setSmoothing(true);
			this.cart11.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			milkX = [867,853,927,913];
			milkY = [491,511,525,545];
			var _g2 = 0;
			while(_g2 < 2) {
				var i2 = _g2++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.gotoFrame(18);
				this.flush.set_scaleX(this.flush.set_scaleY(.95));
				var _g11 = this.flush;
				_g11.set_scaleX(_g11.get_scaleX() * -1);
				this.flush.set_x(fw_Config.convertWidth(milkX[i2]) - this.flush.get_width() / 2);
				this.flush.set_y(fw_Config.convertHeight(milkY[i2]) - this.flush.get_height() / 1.5);
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.flushArray.push(this.flush);
				if(GameSettings.gameLoaded) this.flush.gotoFrame(GameSettings.savedData.flushArray[i2]);
				if(i2 > GameSettings.flushTotal - 1) this.flush.set_visible(false);
			}
			this.cart11 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart2_piece5"));
			game_scenes_Game.cartSprite.addChild(this.cart11);
			this.cart11.set_x(fw_Config.convertWidth(770));
			this.cart11.set_y(fw_Config.convertHeight(458));
			this.cart11.setSmoothing(true);
			this.cart11.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			var _g3 = 2;
			while(_g3 < 4) {
				var i3 = _g3++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.gotoFrame(18);
				this.flush.set_scaleX(this.flush.set_scaleY(.95));
				var _g12 = this.flush;
				_g12.set_scaleX(_g12.get_scaleX() * -1);
				this.flush.set_x(fw_Config.convertWidth(milkX[i3]) - this.flush.get_width() / 2);
				this.flush.set_y(fw_Config.convertHeight(milkY[i3]) - this.flush.get_height() / 1.5);
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.flushArray.push(this.flush);
				if(GameSettings.gameLoaded) this.flush.gotoFrame(GameSettings.savedData.flushArray[i3]);
				if(i3 > GameSettings.flushTotal - 1) this.flush.set_visible(false);
			}
			this.cart12 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart2_piece2"));
			game_scenes_Game.cartSprite.addChild(this.cart12);
			this.cart12.set_x(fw_Config.convertWidth(700));
			this.cart12.set_y(fw_Config.convertHeight(450));
			this.cart12.set_scaleX(this.cart12.set_scaleY(.8));
			this.cart12.setSmoothing(true);
			this.cart12.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		} else {
			this.cart11 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart1_piece1"));
			game_scenes_Game.cartSprite.addChild(this.cart11);
			this.cart11.set_x(fw_Config.convertWidth(725));
			this.cart11.set_y(fw_Config.convertHeight(415));
			this.cart11.set_scaleX(this.cart11.set_scaleY(.8));
			this.cart11.setSmoothing(true);
			this.cart11.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			milkX = [767,779,792,806,819,759,774,785,799,813];
			milkY = [443,452,458,466,474,452,461,466,474,481];
			var _g4 = 0;
			while(_g4 < 10) {
				var i4 = _g4++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("milkBottle2"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.set_x(fw_Config.convertWidth(milkX[i4]));
				this.flush.set_y(fw_Config.convertHeight(milkY[i4]) - this.flush.get_height() / 2);
				this.flush.set_scaleX(this.flush.set_scaleY(.9));
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.milkArray.push(this.flush);
				if(i4 > GameSettings.milkTotal - 1) this.flush.set_visible(false);
			}
			milkX = [847,881,866,833];
			milkY = [481,501,521,501];
			var _g5 = 0;
			while(_g5 < 4) {
				var i5 = _g5++;
				this.flush = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
				game_scenes_Game.cartSprite.addChild(this.flush);
				this.flush.gotoFrame(18);
				this.flush.set_scaleX(this.flush.set_scaleY(.95));
				var _g13 = this.flush;
				_g13.set_scaleX(_g13.get_scaleX() * -1);
				this.flush.set_x(fw_Config.convertWidth(milkX[i5]) - this.flush.get_width() / 2);
				this.flush.set_y(fw_Config.convertHeight(milkY[i5]) - this.flush.get_height() / 1.5);
				this.flush.setSmoothing(true);
				this.flush.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.flushArray.push(this.flush);
				if(GameSettings.gameLoaded) this.flush.gotoFrame(GameSettings.savedData.flushArray[i5]);
				if(i5 > GameSettings.flushTotal - 1) this.flush.set_visible(false);
			}
			this.cart12 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("cart1_piece2"));
			game_scenes_Game.cartSprite.addChild(this.cart12);
			this.cart12.set_x(fw_Config.convertWidth(700));
			this.cart12.set_y(fw_Config.convertHeight(450));
			this.cart12.set_scaleX(this.cart12.set_scaleY(.8));
			this.cart12.setSmoothing(true);
			this.cart12.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.vehicle = new openfl_display_Sprite();
		this.vehicle.get_graphics().beginFill(2228224,0);
		this.vehicle.get_graphics().drawRect(320,60,fw_Config.convertWidth(160),fw_Config.convertHeight(130));
		this.vehicle.get_graphics().endFill();
		game_scenes_Game.cartSprite.addChild(this.vehicle);
		this.vehicle.set_x(fw_Config.convertWidth(385));
		this.vehicle.set_y(fw_Config.convertHeight(365));
		this.vehicle.set_name("vehicle");
		if(GameSettings.level > 1) {
			this.vehicle.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
			this.vehicle.buttonMode = true;
		}
	}
	,addBg1: function() {
		this.bg1 = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/gameBg1.png"));
		game_scenes_Game.bg1Sprite.addChild(this.bg1);
		this.bg1.smoothing = true;
		this.clickbg = new openfl_display_Sprite();
		this.clickbg.get_graphics().beginFill(2228224,0);
		this.clickbg.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.clickbg.get_graphics().endFill();
		game_scenes_Game.bg1Sprite.addChild(this.clickbg);
		this.step = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("stairBg"));
		this.step.setSmoothing(true);
		this.step.set_x(fw_Config.convertWidth(-35));
		this.step.set_y(fw_Config.convertHeight(-35));
		this.step.setSmoothing(true);
		this.step.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.well = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("well"));
		game_scenes_Game.bg1Sprite.addChild(this.well);
		this.well.set_x(fw_Config.convertWidth(750));
		this.well.set_y(fw_Config.convertHeight(-5));
		this.well.set_scaleX(this.well.set_scaleY(.8));
		this.well.setSmoothing(true);
		this.well.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.well.set_name("well");
		this.food = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("food"));
		game_scenes_Game.bg1Sprite.addChild(this.food);
		game_scenes_Game.bg1Sprite.addChild(this.step);
		this.food.setFrames(GameSettings.d.getFrames("food"),15);
		this.food.gotoFrame(0);
		this.food.set_x(fw_Config.convertWidth(13));
		this.food.set_y(fw_Config.convertHeight(205));
		this.food.set_scaleX(this.food.set_scaleY(.8));
		this.food.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.food.setSmoothing(true);
		this.food.set_name("food");
		if(GameSettings.gameLoaded) {
			this.food.gotoFrame(GameSettings.savedData.foodFrame);
			GameSettings.foodFrame = GameSettings.savedData.foodFrame;
		}
		if(GameSettings.foodTotal <= 0) this.food.set_visible(false);
		this.foodClick = new openfl_display_Sprite();
		this.foodClick.get_graphics().beginFill(2228224,0);
		this.foodClick.get_graphics().drawRect(0,0,fw_Config.convertWidth(150),fw_Config.convertHeight(90));
		this.foodClick.get_graphics().endFill();
		this.addChild(this.foodClick);
		this.foodClick.set_x(fw_Config.convertWidth(-13));
		this.foodClick.set_y(fw_Config.convertHeight(270));
		this.foodClick.set_name("food");
		this.foodClick.set_rotation(-40);
		this.scissor1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
		game_scenes_Game.bg1Sprite.addChild(this.scissor1);
		this.scissor1.gotoFrame(5);
		this.scissor1.set_x(fw_Config.convertWidth(174));
		this.scissor1.set_y(fw_Config.convertHeight(173));
		this.scissor1.setSmoothing(true);
		this.scissor1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.scissor1.set_name("scissor");
		this.scissor1.mouseChildren = false;
		this.scissor1.mouseEnabled = false;
		this.scissor = new openfl_display_Sprite();
		this.scissor.get_graphics().beginFill(2228224,0);
		this.scissor.get_graphics().drawRect(0,0,fw_Config.convertWidth(60),fw_Config.convertHeight(50));
		this.scissor.get_graphics().endFill();
		this.addChild(this.scissor);
		this.scissor.set_x(fw_Config.convertWidth(174));
		this.scissor.set_y(fw_Config.convertHeight(181));
		this.medicine1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
		game_scenes_Game.bg1Sprite.addChild(this.medicine1);
		this.medicine1.gotoFrame(6);
		this.medicine1.set_x(fw_Config.convertWidth(180));
		this.medicine1.set_y(fw_Config.convertHeight(125));
		this.medicine1.setSmoothing(true);
		this.medicine1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.medicine1.set_name("medicine");
		this.medicine1.mouseChildren = false;
		this.medicine1.mouseEnabled = false;
		this.medicine = new openfl_display_Sprite();
		this.medicine.get_graphics().beginFill(2228224,0);
		this.medicine.get_graphics().drawRect(0,0,fw_Config.convertWidth(60),fw_Config.convertHeight(60));
		this.medicine.get_graphics().endFill();
		this.addChild(this.medicine);
		this.medicine.set_x(fw_Config.convertWidth(177));
		this.medicine.set_y(fw_Config.convertHeight(120));
		if(GameSettings.medicineTotal <= 0) {
			this.medicine1.set_visible(false);
			this.medicine.set_visible(false);
		}
		this.milk1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("tray"));
		game_scenes_Game.bg1Sprite.addChild(this.milk1);
		this.milk1.gotoFrame(7);
		this.milk1.set_x(fw_Config.convertWidth(115));
		this.milk1.set_y(fw_Config.convertHeight(160));
		this.milk1.setSmoothing(true);
		this.milk1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.milk1.set_name("milk");
		this.milk1.mouseChildren = false;
		this.milk1.mouseEnabled = false;
		this.milk = new openfl_display_Sprite();
		this.milk.get_graphics().beginFill(2228224,0);
		this.milk.get_graphics().drawRect(0,0,fw_Config.convertWidth(60),fw_Config.convertHeight(60));
		this.milk.get_graphics().endFill();
		this.addChild(this.milk);
		this.milk.set_x(fw_Config.convertWidth(110));
		this.milk.set_y(fw_Config.convertHeight(155));
		this.sackextra = new openfl_display_Sprite();
		this.sackextra.get_graphics().beginFill(2228224,0);
		this.sackextra.get_graphics().drawRect(180,80,fw_Config.convertWidth(80),fw_Config.convertHeight(80));
		this.sackextra.get_graphics().endFill();
		game_scenes_Game.bg1Sprite.addChild(this.sackextra);
		this.sackextra.set_x(fw_Config.convertWidth(110));
		this.sackextra.set_y(fw_Config.convertHeight(-25));
		this.sackextra.set_name("sack");
		this.sack = new openfl_display_Sprite();
		this.sack.get_graphics().beginFill(2228224,0);
		this.sack.get_graphics().drawRect(180,80,fw_Config.convertWidth(80),fw_Config.convertHeight(80));
		this.sack.get_graphics().endFill();
		game_scenes_Game.bg1Sprite.addChild(this.sack);
		this.sack.set_x(fw_Config.convertWidth(60));
		this.sack.set_y(fw_Config.convertHeight(0));
		this.sack.set_name("sack");
		if(GameSettings.level > 1) {
			this.scissor.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
			this.medicine.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
			this.milk.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
			this.well.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
			this.clickbg.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnclickbg));
			this.well.buttonMode = true;
			this.scissor.buttonMode = true;
			this.medicine.buttonMode = true;
			this.milk.buttonMode = true;
		}
	}
	,clickOnclickbg: function(e) {
		if(!this.restrictForTut2) {
			if(this.currentSheep != null) {
				this.currentSheep.state = this.currentSheep.prestate;
				this.currentSheep.set_visible(true);
				this.currentSheep = null;
				this.heroState = "noTray";
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.hero.gotoFrame(3);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				this.currentItem = 0;
				game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
				game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
				if(this.HItem > 0) {
					this.currentItem = this.HItem;
					this.heroState = "withTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
					game_scenes_Game.hero.hero.gotoFrame(3);
					game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
					game_scenes_Game.hero.itmF.set_visible(true);
					game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					game_scenes_Game.hero.hero.setSmoothing(true);
					this.HItem = 0;
				} else this.takeCount = 0;
			}
		}
	}
	,startItem: function(e) {
		e.currentTarget.startDrag();
	}
	,stopItem: function(e) {
		this.stopDrag();
	}
	,sortFunctionSack: function() {
		this.sackMArray.sort($bind(this,this.sortByY));
		var _g1 = 0;
		var _g = this.sackMArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			game_scenes_Game.cartSprite.setChildIndex(this.sackMArray[i],i);
		}
	}
	,clickOnSack: function(e) {
		if(!this.restrictForTut2) {
			var k = 0;
			haxe_Log.trace(GameSettings.availableSack + "//" + GameSettings.woolPlaceTotal,{ fileName : "Game.hx", lineNumber : 1312, className : "game.scenes.Game", methodName : "clickOnSack"});
			if(GameSettings.availableSack > 0 && GameSettings.woolPlaceTotal > 0) {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				var _g1 = 0;
				var _g = this.emptySack.length;
				while(_g1 < _g) {
					var i = _g1++;
					k = this.emptySack.length - 1 - i;
					if(this.emptySack[k].get_visible()) {
						this.emptySack[k].set_visible(false);
						GameSettings.availableSack--;
						break;
					}
				}
				var flag = false;
				var _g11 = 0;
				var _g2 = this.sackMArray.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(!this.sackMArray[i1].get_visible() && this.currentItem != 11 || !this.sackMArray[i1].get_visible() && this.currentItem == 11 && this.sackMArray[i1] != this.pickedSack) {
						this.sackMArray[i1].obj.gotoFrame(0);
						this.sackMArray[i1].set_visible(true);
						GameSettings.woolPlaceTotal--;
						flag = true;
						if(this.currentSack == 0) this.currentSack = i1 + 1;
						break;
					}
				}
				if(!flag) {
					this.sackM = new game_scenes_ObjGame("sack");
					game_scenes_Game.cartSprite.addChild(this.sackM);
					this.sackM.set_x(fw_Config.convertWidth(this.sackMPos[this.sackLength]));
					this.sackM.set_y(fw_Config.convertHeight(this.sackMPos[this.sackLength + 6]));
					this.sackM.set_scaleX(this.sackM.set_scaleY(.8));
					this.sackLength++;
					GameSettings.woolPlaceTotal--;
					this.sackM.id = "sack" + Std.string(this.sackLength);
					this.sackMArray.push(this.sackM);
					if(this.currentSack == 0) this.currentSack = this.sackLength;
					if(GameSettings.level > 1) {
						this.sackM.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
						this.sackM.buttonMode = true;
					}
					this.sortFunctionSack();
					this.sackMArray.reverse();
				}
				if(GameSettings.level == 1) {
					this.sack.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
					this.sack.buttonMode = false;
					this.arrow.set_x(fw_Config.convertWidth(this.sackMArray[0].get_x() + 30));
					this.arrow.set_y(fw_Config.convertHeight(this.sackMArray[0].get_y() - 100));
					this.tutorial.addMessages("FillSack");
					this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 50));
					this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() - 40));
					this.sackMArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
					this.sackMArray[0].buttonMode = true;
				}
			}
		}
	}
	,clickOnVehicle: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push("n4");
			this.processQueue.push("vehicle");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.vehicle.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
				this.vehicle.buttonMode = false;
			}
		}
	}
	,clickOnWell: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push("n5");
			this.processQueue.push("well");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.well.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
				this.well.buttonMode = false;
			}
		}
	}
	,clickOnSackM: function(e) {
		if(!this.restrictForTut2) {
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			this.processQueue.push("n3");
			this.processQueue.push(e.currentTarget.id);
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				if(GameSettings.level == 1) {
					this.sackMArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
					this.sackMArray[0].buttonMode = false;
				}
			}
		}
	}
	,clickOnbgTray: function(e) {
		if(!this.restrictForTut2) {
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			this.processQueue.push("n3");
			this.processQueue.push("sack7");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.bgTray.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnbgTray));
				this.bgTray.buttonMode = false;
			}
		}
	}
	,clickOnBucket: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push("n5");
			this.processQueue.push("bucket");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.bucketClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBucket));
				this.bucketClick.buttonMode = false;
			}
		}
	}
	,clickOnFood: function(e) {
		if(!this.restrictForTut2) {
			if(GameSettings.foodTotal > 0) {
				this.processQueue.push("n2");
				this.processQueue.push("food");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1) {
					this.arrow.stop();
					this.arrow.set_visible(false);
					this.tutorial.set_visible(false);
					this.foodClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnFood));
					this.foodClick.buttonMode = false;
				}
			}
		}
	}
	,clickOnGrass: function(e) {
		if(!this.restrictForTut2) {
			if(GameSettings.grassTotal > 0) {
				this.processQueue.push("n2");
				this.processQueue.push("grass");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1) {
					this.arrow.stop();
					this.arrow.set_visible(false);
					this.tutorial.set_visible(false);
					this.grassClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
					this.grassClick.buttonMode = false;
				}
			}
		}
	}
	,clickOnScissor: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push("n2");
			this.processQueue.push("scissor");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.scissor.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
				this.scissor.buttonMode = false;
			}
		}
	}
	,clickOnMilk: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push("n2");
			this.processQueue.push("milk");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.milk.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
				this.milk.buttonMode = false;
			}
		}
	}
	,clickOnMedicine: function(e) {
		if(!this.restrictForTut2) {
			if(GameSettings.medicineTotal > 0) {
				this.processQueue.push("n2");
				this.processQueue.push("medicine");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1) {
					this.arrow.stop();
					this.arrow.set_visible(false);
					this.tutorial.set_visible(false);
					this.medicine.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
					this.medicine.buttonMode = false;
				}
			}
		}
	}
	,clickOnSheep: function(e) {
		if(!this.restrictForTut2) {
			this.processQueue.push(e.currentTarget.node.id);
			this.processQueue.push(e.currentTarget.node.id);
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1) {
				this.arrow.stop();
				this.arrow.set_visible(false);
				this.tutorial.set_visible(false);
				this.sheepArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
				this.sheepArray[0].buttonMode = false;
			}
		}
	}
	,addSheep: function() {
		game_scenes_Game.hero = new game_scenes_Hero(this);
		game_scenes_Game.obj1Sprite.addChild(game_scenes_Game.hero);
		game_scenes_Game.currentNode = game_scenes_Game.grid.getNodeById("n1");
		game_scenes_Game.hero.set_x(fw_Config.convertWidth(game_scenes_Game.currentNode.x));
		game_scenes_Game.hero.set_y(fw_Config.convertHeight(game_scenes_Game.currentNode.y));
		game_scenes_Game.hero.itmB.set_visible(false);
		game_scenes_Game.hero.itmF.set_visible(false);
		this.sortArray.push(game_scenes_Game.hero);
		this.sheepXpos = [430,530,625,750,900,810,685,0,460,310,210,310];
		this.sheepYpos = [475,530,460,395,335,275,200,0,220,290,350,405];
		if(GameSettings.level == 1) {
			this.sheepState = ["idle","buy","buy","buy","buy","buy","buy","null","buy","buy","buy","buy"];
			this.sheep = new game_scenes_Sheep(this);
			game_scenes_Game.obj1Sprite.addChild(this.sheep);
			this.sheep.set_x(fw_Config.convertWidth(430));
			this.sheep.set_y(fw_Config.convertHeight(475));
			this.sheep.state = "rest";
			this.sheep.set_name("sheep1");
			this.sheep.sheepNo = 1;
			this.sheep.node = game_scenes_Game.grid.getNodeById("n6");
			this.sheepArray.push(this.sheep);
			this.sortArray.push(this.sheep);
		} else if(GameSettings.level == 2) {
			this.sheepState = ["idle","idle","idle","buy","buy","buy","buy","null","buy","buy","buy","buy"];
			this.sheep = new game_scenes_Sheep(this);
			game_scenes_Game.obj1Sprite.addChild(this.sheep);
			this.sheep.set_x(fw_Config.convertWidth(430));
			this.sheep.set_y(fw_Config.convertHeight(475));
			this.sheep.state = "rest";
			this.sheep.set_name("sheep1");
			this.sheep.sheepNo = 1;
			this.sheep.node = game_scenes_Game.grid.getNodeById("n6");
			this.sheepArray.push(this.sheep);
			this.sortArray.push(this.sheep);
			this.sheep = new game_scenes_Sheep(this);
			game_scenes_Game.obj1Sprite.addChild(this.sheep);
			this.sheep.set_x(fw_Config.convertWidth(530));
			this.sheep.set_y(fw_Config.convertHeight(530));
			this.sheep.state = "rest";
			this.sheep.set_name("sheep2");
			this.sheep.sheepNo = 2;
			this.sheep.node = game_scenes_Game.grid.getNodeById("n7");
			this.sheepArray.push(this.sheep);
			this.sortArray.push(this.sheep);
			this.sheep = new game_scenes_Sheep(this);
			game_scenes_Game.obj1Sprite.addChild(this.sheep);
			this.sheep.set_x(fw_Config.convertWidth(625));
			this.sheep.set_y(fw_Config.convertHeight(460));
			var _g = this.sheep;
			_g.set_scaleX(_g.get_scaleX() * -1);
			var _g1 = this.sheep.popupTimer;
			_g1.set_scaleX(_g1.get_scaleX() * -1);
			this.sheep.sheepNo = 3;
			this.sheep.set_name("sheep3");
			this.sheep.state = "rest";
			this.sheep.node = game_scenes_Game.grid.getNodeById("n8");
			this.sheepArray.push(this.sheep);
			this.sortArray.push(this.sheep);
		} else {
			var k = 0;
			var n = 0;
			var _g11 = 0;
			var _g2 = GameSettings.sheepTotal;
			while(_g11 < _g2) {
				var i = _g11++;
				this.sheep = new game_scenes_Sheep(this);
				game_scenes_Game.obj1Sprite.addChild(this.sheep);
				this.sheep.orderCount = GameSettings.savedData.sheepArray[k + 1];
				this.sheep.woolFrame = GameSettings.savedData.sheepArray[k + 2];
				this.sheep.woolGive = GameSettings.savedData.sheepArray[k + 3];
				this.sheep.woolState = GameSettings.savedData.sheepArray[k + 4];
				this.sheep.sheepNo = GameSettings.savedData.sheepArray[k + 5];
				this.sheep.set_scaleX(GameSettings.savedData.sheepArray[k + 6]);
				if(this.sheep.get_scaleX() == -1) {
					var _g21 = this.sheep.popupTimer;
					_g21.set_scaleX(_g21.get_scaleX() * -1);
				}
				n = GameSettings.savedData.sheepArray[k + 5];
				n--;
				this.sheep.sheep.gotoFrame(this.sheep.woolFrame);
				this.sheep.set_x(fw_Config.convertWidth(this.sheepXpos[n]));
				this.sheep.set_y(fw_Config.convertHeight(this.sheepYpos[n]));
				if(n == 5) {
					var _g22 = this.sheep.popupTimer;
					_g22.set_x(_g22.get_x() + fw_Config.convertWidth(15));
					var _g23 = this.sheep.popupItem;
					_g23.set_x(_g23.get_x() + fw_Config.convertWidth(15));
					var _g24 = this.sheep.popupTimer;
					_g24.set_y(_g24.get_y() + fw_Config.convertWidth(5));
					var _g25 = this.sheep.popupItem;
					_g25.set_y(_g25.get_y() + fw_Config.convertWidth(5));
				}
				if(n == 6) {
					var _g26 = this.sheep.popupTimer;
					_g26.set_x(_g26.get_x() - fw_Config.convertWidth(30));
					var _g27 = this.sheep.popupItem;
					_g27.set_x(_g27.get_x() - fw_Config.convertWidth(30));
					var _g28 = this.sheep.popupTimer;
					_g28.set_y(_g28.get_y() + fw_Config.convertHeight(20));
					var _g29 = this.sheep.popupItem;
					_g29.set_y(_g29.get_y() + fw_Config.convertHeight(20));
				}
				if(n == 9) {
					var _g210 = this.sheep.popupTimer;
					_g210.set_x(_g210.get_x() + fw_Config.convertWidth(20));
					var _g211 = this.sheep.popupItem;
					_g211.set_x(_g211.get_x() + fw_Config.convertWidth(20));
				}
				this.sheep.node = game_scenes_Game.grid.getNodeById(GameSettings.savedData.sheepArray[k + 7]);
				this.sheep.life = GameSettings.savedData.sheepArray[k + 8];
				k += 9;
				this.sheepArray.push(this.sheep);
				this.sortArray.push(this.sheep);
				if(Math.floor(Math.random() * 3) < 0) {
					this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
					this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
					this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.sheepArray[i].sheep.setSmoothing(true);
					this.sheepArray[i].head.set_visible(false);
					this.sheepArray[i].state = "sleep";
					this.sheepArray[i].sleep.play(0,true);
					this.sheepArray[i].sleep.set_visible(true);
				} else this.sheepArray[i].state = "rest";
			}
		}
		var _g12 = 0;
		var _g3 = this.sheepArray.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			this.sheepArray[i1].popupItem.set_visible(false);
			this.sheepArray[i1].popupTimer.set_visible(false);
			this.sheepArray[i1].popTm = 0;
			if(this.sheepArray[i1].state == "sleep") this.sheepArray[i1].timer = this.setDelay("sleep1"); else this.sheepArray[i1].timer = this.setDelay("rest1");
			this.sheepArray[i1].wlCnt = this.setDelay("wool");
			if(GameSettings.level <= 2) {
				this.sheepArray[i1].orderCount = 0;
				this.sheepArray[i1].woolFrame = 1;
				this.sheepArray[i1].woolGive = 0;
				this.sheepArray[i1].woolState = "growing";
				if(GameSettings.level == 2) {
					var rand = 0;
					rand = Math.floor(Math.random() * this.lifeArray.length);
					this.sheepArray[i1].life = this.lifeArray[rand];
					this.lifeArray.splice(rand,1);
					if(this.lifeArray.length == 0) this.lifeArray = [4,4,5,5,6];
				} else this.sheepArray[i1].life = 5;
			}
			this.sheepArray[i1].foodArray = [1,2,3,6];
			if(GameSettings.level > 1) {
				this.sheepArray[i1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
				this.sheepArray[i1].buttonMode = true;
			}
		}
		if(GameSettings.level == 1) {
			this.sheepArray[0].timer = 20;
			this.sheepArray[0].wlCnt = 120 + Math.floor(Math.random() * 60);
			this.sheepArray[0].foodArray = [1,2,3,6];
		}
	}
	,sheepActions: function(delta) {
		var rand;
		var rands;
		var _g1 = 0;
		var _g = this.sheepArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sheepArray[i] != null && this.sheepArray[i].get_visible()) {
				this.sheepArray[i].wlCnt -= delta;
				if(this.sheepArray[i].wlCnt <= 1) {
					if(this.sheepArray[i].sheep.frameIndex < 12 && this.sheepArray[i].woolState == "growing") {
						if(GameSettings.level == 1) {
							if(this.sheepArray[i].woolFrame == 3) {
								if(this.woolInc >= 1) this.sheepArray[i].woolFrame++;
							} else if(this.sheepArray[i].woolFrame == 5) {
								if(this.woolInc >= 2) this.sheepArray[i].woolFrame++;
							} else if(this.sheepArray[i].woolFrame == 8) {
								if(this.woolInc >= 3) this.sheepArray[i].woolFrame++;
							} else if(this.sheepArray[i].woolFrame == 10) {
								if(this.woolInc >= 4) this.sheepArray[i].woolFrame++;
							} else this.sheepArray[i].woolFrame++;
						} else this.sheepArray[i].woolFrame++;
						this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
						this.sheepArray[i].wlCnt = this.setDelay("wool");
						if(this.sheepArray[i].sheep.frameIndex == 12) this.sheepArray[i].woolState = "metured";
						if(GameSettings.level == 1 && this.sheepArray[i].woolGive >= 0) this.sheepArray[i].wlCnt = 180 + Math.floor(Math.random() * 60);
					}
				}
			}
			if(this.sheepArray[i] != null && this.sheepArray[i].get_visible()) {
				var _g2 = this.sheepArray[i].state;
				switch(_g2) {
				case "rest":
					this.sheepArray[i].timer -= delta;
					if(GameSettings.level == 1) {
						if(!GameSettings.nextAction) this.sheepArray[i].timer = 30;
					}
					if(this.sheepArray[i].timer <= 1) {
						if(this.sheepArray[i].sheep.frameIndex == 12 && this.sheepArray[i].woolGive >= 0) {
							if(GameSettings.level == 1) {
								this.arrow.set_x(fw_Config.convertWidth(this.scissor.get_x() + 35));
								this.arrow.set_y(fw_Config.convertHeight(this.scissor.get_y() - 50));
								this.arrow.play(0,true);
								this.arrow.set_visible(true);
								this.tutorial.addMessages("scissor");
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								this.tutorial.set_visible(true);
								GameSettings.nextAction = false;
								this.scissor.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
								this.scissor.buttonMode = true;
							}
							this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("bodyMatured"),15);
							this.sheepArray[i].sheep.play(0,true);
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].popupItem.obj.gotoFrame(5);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].state = "wool";
						} else if(GameSettings.level > 1 && this.sheepArray[i].orderCount < 3 || GameSettings.level == 1 && this.sheepArray[i].orderCount < 4) {
							rand = Math.floor(Math.random() * this.sheepArray[i].foodArray.length);
							rands = this.sheepArray[i].foodArray[rand];
							this.sheepArray[i].popupItem.obj.gotoFrame(rands);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].foodArray.splice(rand,1);
							if(rands < 5) {
								this.sheepArray[i].orderCount++;
								this.woolInc++;
							}
							if(GameSettings.level == 1) {
								if(rands == 1) {
									this.arrow.set_x(fw_Config.convertWidth(this.food.get_x() + 80));
									this.arrow.set_y(fw_Config.convertHeight(this.food.get_y() - 20));
									this.foodClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnFood));
									this.foodClick.buttonMode = true;
									this.tutorial.addMessages("food");
								} else if(rands == 2) {
									this.arrow.set_x(fw_Config.convertWidth(this.well.get_x() + 60));
									this.arrow.set_y(fw_Config.convertHeight(this.well.get_y() + 120));
									var _g3 = this.arrow;
									_g3.set_scaleX(_g3.get_scaleX() * -1);
									this.well.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
									this.well.buttonMode = true;
									this.tutorial.addMessages("well");
								} else if(rands == 3) {
									this.arrow.set_x(fw_Config.convertWidth(this.grass.get_x() + 380));
									this.arrow.set_y(fw_Config.convertHeight(this.grass.get_y() + 30));
									this.grassClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
									this.grassClick.buttonMode = true;
									this.tutorial.addMessages("grass");
								} else if(rands == 6) {
									this.arrow.set_x(fw_Config.convertWidth(this.medicine.get_x() + 30));
									this.arrow.set_y(fw_Config.convertHeight(this.medicine.get_y() - 40));
									this.medicine.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
									this.medicine.buttonMode = true;
									this.sheepArray[i].orderCount++;
									this.woolInc++;
									this.tutorial.addMessages("medicine");
								}
								this.arrow.set_visible(true);
								this.arrow.play(0,true);
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								if(rands == 1) this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x())); else if(rands == 2) this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 200));
								this.tutorial.set_visible(true);
							}
							if(GameSettings.level > 1) {
								if(this.sheepArray[i].foodArray.length == 0 || this.sheepArray[i].orderCount == 3) {
									this.sheepArray[i].foodArray.splice(0,this.sheepArray[i].foodArray.length);
									this.sheepArray[i].foodArray = [1,2,3,6];
								}
							}
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHead_calling"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].state = "order";
							if(GameSettings.musicPlaying) {
								if(this.msInterval > 50) {
									this.msInterval = 0;
									fw_managers_SFXManager.playSound("sheep");
								}
							}
							this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].head.setSmoothing(true);
						} else if(GameSettings.level == 1) {
							if(GameSettings.milkTotal == 0) {
								this.sheepArray[i].orderCount = 0;
								this.sheepArray[i].popupItem.obj.gotoFrame(7);
								this.sheepArray[i].popupTimer.set_visible(true);
								this.sheepArray[i].popupItem.set_visible(true);
								this.sheepArray[i].popTm = 0;
								this.arrow.set_x(fw_Config.convertWidth(this.milk.get_x() + 30));
								this.arrow.set_y(fw_Config.convertHeight(this.milk.get_y() - 40));
								this.milk.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
								this.milk.buttonMode = true;
								this.arrow.play(0,true);
								this.arrow.set_visible(true);
								this.tutorial.addMessages("milk");
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								this.tutorial.set_visible(true);
								GameSettings.nextAction = false;
								this.sheepArray[i].state = "milk";
							} else {
								this.sheepArray[i].popupItem.set_visible(false);
								this.sheepArray[i].popupTimer.set_visible(false);
								this.sheepArray[i].state = "flush";
								this.sheepArray[i].timer = 1000;
								this.arrow.set_x(fw_Config.convertWidth(this.sheepArray[i].get_x()));
								this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[i].get_y()));
								this.sheepArray[i].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
								this.sheepArray[i].buttonMode = true;
								this.arrow.set_visible(true);
							}
						} else {
							this.sheepArray[i].orderCount = 0;
							this.sheepArray[i].popupItem.obj.gotoFrame(7);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].state = "milk";
						}
					}
					break;
				case "order":
					this.msInterval += delta;
					var sl = 0;
					var _g4 = 0;
					var _g31 = this.sheepArray.length;
					while(_g4 < _g31) {
						var j = _g4++;
						if(this.sheepArray[j].state == "order") sl++;
					}
					if(sl < 3) sl = 3;
					if(this.msInterval > 300 * (sl / 3)) {
						this.msInterval = 0;
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("sheep");
					}
					this.sheepArray[i].popTm += delta;
					if(this.sheepArray[i].popTm >= 100) {
						this.sheepArray[i].popTm = 0;
						if(GameSettings.level > 1) this.sheepArray[i].popupTimer.obj.gotoFrame(this.sheepArray[i].popupTimer.obj.frameIndex + 1);
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 40) {
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHead_callingLowHealth"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].head.setSmoothing(true);
						}
						if(GameSettings.level > 1 && this.currentBg != "bg1" && this.sheepArray[i].popupTimer.obj.frameIndex < 57) {
							if(this.sheepArray[i].popupTimer.obj.frameIndex > 55) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(50);
								this.sheepArray[i].wlCnt += 100;
							}
						}
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 59) {
							this.sheepArray[i].popupItem.set_visible(false);
							this.sheepArray[i].popupTimer.set_visible(false);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].tray.set_visible(false);
							if(this.sheepArray[i].woolFrame < 4) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadN"),10); else if(this.sheepArray[i].woolFrame >= 4 && this.sheepArray[i].woolFrame <= 8) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadM"),10); else this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadL"),10);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].sheep.play(0,true);
							this.sheepArray[i].state = "flush";
							this.sheepArray[i].timer = 1000;
						}
					}
					break;
				case "eating":
					this.sheepArray[i].timer -= delta;
					if(this.sheepArray[i].timer <= 1) {
						this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
						this.sheepArray[i].head.play(0,true);
						this.sheepArray[i].head.set_y(fw_Config.convertHeight(-60));
						this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].head.setSmoothing(true);
						this.sheepArray[i].tray.obj.gotoFrame(0);
						if(Math.floor(Math.random() * 3) == 1) {
							this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
							this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].state = "sleep";
							this.sheepArray[i].sleep.play(0,true);
							this.sheepArray[i].sleep.set_visible(true);
							this.sheepArray[i].timer = this.setDelay("sleep");
						} else {
							this.sheepArray[i].state = "rest";
							this.sheepArray[i].timer = this.setDelay("rest");
						}
						if(GameSettings.level == 1) this.sheepArray[i].timer = 60;
					}
					break;
				case "flush":
					if(this.sheepArray[i].sheep.frameIndex >= 12 && GameSettings.level > 1) {
						this.sheepArray[i].popupItem.set_visible(false);
						this.sheepArray[i].popupTimer.set_visible(false);
						this.sheepArray[i].state = "died";
					}
					break;
				case "sleep":
					this.sheepArray[i].timer -= delta;
					if(GameSettings.level == 1) {
						if(!GameSettings.nextAction) this.sheepArray[i].timer = 30;
					}
					if(this.sheepArray[i].timer <= 1) {
						this.sheepArray[i].sleep.stop();
						this.sheepArray[i].sleep.set_visible(false);
						this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("bodyNormal"),15);
						this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
						this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].sheep.setSmoothing(true);
						this.sheepArray[i].head.set_visible(true);
						if(this.sheepArray[i].sheep.frameIndex == 12 && this.sheepArray[i].woolGive >= 0) {
							if(GameSettings.level == 1) {
								this.arrow.set_x(fw_Config.convertWidth(this.scissor.get_x() + 35));
								this.arrow.set_y(fw_Config.convertHeight(this.scissor.get_y() - 50));
								this.arrow.play(0,true);
								this.arrow.set_visible(true);
								this.tutorial.addMessages("scissor");
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								this.tutorial.set_visible(true);
								GameSettings.nextAction = false;
								this.scissor.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
								this.scissor.buttonMode = true;
							}
							this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("bodyMatured"),15);
							this.sheepArray[i].sheep.play(0,true);
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].popupItem.obj.gotoFrame(5);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].state = "wool";
						} else if(GameSettings.level > 1 && this.sheepArray[i].orderCount < 3 || GameSettings.level == 1 && this.sheepArray[i].orderCount < 4) {
							rand = Math.floor(Math.random() * this.sheepArray[i].foodArray.length);
							rands = this.sheepArray[i].foodArray[rand];
							this.sheepArray[i].popupItem.obj.gotoFrame(rands);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].foodArray.splice(rand,1);
							if(rands < 5) {
								this.sheepArray[i].orderCount++;
								this.woolInc++;
							}
							if(GameSettings.level == 1) {
								if(rands == 1) {
									this.arrow.set_x(fw_Config.convertWidth(this.food.get_x() + 80));
									this.arrow.set_y(fw_Config.convertHeight(this.food.get_y() - 20));
									this.foodClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnFood));
									this.foodClick.buttonMode = true;
									this.tutorial.addMessages("food");
								} else if(rands == 2) {
									this.arrow.set_x(fw_Config.convertWidth(this.well.get_x() + 60));
									this.arrow.set_y(fw_Config.convertHeight(this.well.get_y() + 120));
									var _g32 = this.arrow;
									_g32.set_scaleX(_g32.get_scaleX() * -1);
									this.well.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
									this.well.buttonMode = true;
									this.tutorial.addMessages("well");
								} else if(rands == 3) {
									this.arrow.set_x(fw_Config.convertWidth(this.grass.get_x() + 380));
									this.arrow.set_y(fw_Config.convertHeight(this.grass.get_y() + 30));
									this.grassClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
									this.grassClick.buttonMode = true;
									this.tutorial.addMessages("grass");
								} else if(rands == 6) {
									this.arrow.set_x(fw_Config.convertWidth(this.medicine.get_x() + 30));
									this.arrow.set_y(fw_Config.convertHeight(this.medicine.get_y() - 40));
									this.medicine.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
									this.medicine.buttonMode = true;
									this.sheepArray[i].orderCount++;
									this.woolInc++;
									this.tutorial.addMessages("medicine");
								}
								this.arrow.set_visible(true);
								this.arrow.play(0,true);
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								if(rands == 1) this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x())); else if(rands == 2) this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 200));
								this.tutorial.set_visible(true);
							}
							if(GameSettings.level > 1) {
								if(this.sheepArray[i].foodArray.length == 0 || this.sheepArray[i].orderCount == 3) {
									this.sheepArray[i].foodArray.splice(0,this.sheepArray[i].foodArray.length);
									this.sheepArray[i].foodArray = [1,2,3,6];
								}
							}
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHead_calling"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].state = "order";
							if(GameSettings.musicPlaying) {
								if(this.msInterval > 50) {
									this.msInterval = 0;
									fw_managers_SFXManager.playSound("sheep");
								}
							}
							this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].head.setSmoothing(true);
						} else if(GameSettings.level == 1) {
							if(GameSettings.milkTotal == 0) {
								this.sheepArray[i].orderCount = 0;
								this.sheepArray[i].popupItem.obj.gotoFrame(7);
								this.sheepArray[i].popupTimer.set_visible(true);
								this.sheepArray[i].popupItem.set_visible(true);
								this.sheepArray[i].popTm = 0;
								this.arrow.set_x(fw_Config.convertWidth(this.milk.get_x() + 30));
								this.arrow.set_y(fw_Config.convertHeight(this.milk.get_y() - 40));
								this.milk.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
								this.milk.buttonMode = true;
								this.arrow.set_visible(true);
								this.tutorial.addMessages("milk");
								this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
								this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
								this.tutorial.set_visible(true);
								GameSettings.nextAction = false;
								this.arrow.play(0,true);
								this.arrow.set_visible(true);
								this.sheepArray[i].state = "milk";
							} else {
								this.sheepArray[i].popupItem.set_visible(false);
								this.sheepArray[i].popupTimer.set_visible(false);
								this.sheepArray[i].state = "flush";
								this.sheepArray[i].timer = 1000;
								this.arrow.set_x(fw_Config.convertWidth(this.sheepArray[i].get_x()));
								this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[i].get_y()));
								this.sheepArray[i].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
								this.sheepArray[i].buttonMode = true;
								this.arrow.set_visible(true);
							}
						} else {
							this.sheepArray[i].orderCount = 0;
							this.sheepArray[i].popupItem.obj.gotoFrame(7);
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].popupTimer.set_visible(true);
							this.sheepArray[i].popupItem.set_visible(true);
							this.sheepArray[i].popTm = 0;
							this.sheepArray[i].state = "milk";
						}
					}
					break;
				case "milk":
					this.sheepArray[i].popTm += delta;
					if(this.sheepArray[i].popTm >= 90) {
						this.sheepArray[i].popTm = 0;
						if(GameSettings.level > 1 && this.currentBg != "bg1" && this.sheepArray[i].popupTimer.obj.frameIndex < 57) {
							if(this.sheepArray[i].popupTimer.obj.frameIndex > 55) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(50);
								this.sheepArray[i].wlCnt += 100;
							}
						}
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 40) {
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadAngry"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].head.setSmoothing(true);
						}
						if(this.sheepArray[i].popupTimer.obj.frameIndex < 59 && GameSettings.level > 1) this.sheepArray[i].popupTimer.obj.gotoFrame(this.sheepArray[i].popupTimer.obj.frameIndex + 1);
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 59) {
							this.sheepArray[i].popupTimer.set_visible(false);
							this.sheepArray[i].popupItem.set_visible(false);
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
							if(Math.floor(Math.random() * 3) == 1) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(0);
								this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
								this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
								this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
								this.sheepArray[i].sheep.setSmoothing(true);
								this.sheepArray[i].head.set_visible(false);
								this.sheepArray[i].state = "sleep";
								this.sheepArray[i].sleep.play(0,true);
								this.sheepArray[i].sleep.set_visible(true);
								this.sheepArray[i].timer = this.setDelay("sleep");
							} else {
								this.sheepArray[i].state = "rest";
								this.sheepArray[i].timer = this.setDelay("rest");
							}
							if(GameSettings.level == 1) this.sheepArray[i].timer = 30;
						}
					}
					break;
				case "milkTake":
					this.sheepArray[i].timer -= delta;
					this.incre += delta;
					if(this.incre >= 50) {
						this.incre = 0;
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("milk");
					}
					if(this.sheepArray[i].timer <= 1) {
						GameSettings.score += 2 + GameSettings.bonus;
						if(Math.floor(Math.random() * 3) == 1) {
							this.sheepArray[i].popupTimer.obj.gotoFrame(0);
							this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
							this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].state = "sleep";
							this.sheepArray[i].sleep.play(0,true);
							this.sheepArray[i].sleep.set_visible(true);
							this.sheepArray[i].timer = this.setDelay("sleep");
						} else {
							this.sheepArray[i].state = "rest";
							this.sheepArray[i].timer = this.setDelay("rest");
						}
						if(GameSettings.level == 1) this.sheepArray[i].timer = 60;
						this.currentItem = 8;
						game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						game_scenes_Game.hero.hero.gotoFrame(3);
						game_scenes_Game.hero.hero.stop();
						game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.mouseChildren = false;
						game_scenes_Game.hero.mouseEnabled = false;
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
						game_scenes_Game.hero.itmF.set_visible(true);
						this.heroBusy = false;
						this.processQueue.splice(0,2);
						if(GameSettings.level == 1) {
							this.arrow.set_x(fw_Config.convertWidth(this.vehicle.get_x() + 400));
							this.arrow.set_y(fw_Config.convertHeight(this.vehicle.get_y() + 50));
							this.arrow.play(0,true);
							this.arrow.set_visible(true);
							this.tutorial.addMessages("vehicle");
							this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 100));
							this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() - 50));
							this.tutorial.set_visible(true);
							this.vehicle.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
							this.vehicle.buttonMode = true;
						}
					}
					break;
				case "wool":
					this.sheepArray[i].popTm += delta;
					if(this.sheepArray[i].popTm >= 90) {
						this.sheepArray[i].popTm = 0;
						if(GameSettings.level > 1 && this.currentBg != "bg1" && this.sheepArray[i].popupTimer.obj.frameIndex < 57) {
							if(this.sheepArray[i].popupTimer.obj.frameIndex > 55) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(50);
								this.sheepArray[i].wlCnt += 100;
							}
						}
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 40) {
							this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadAngry"),10);
							this.sheepArray[i].head.play(0,true);
							this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].head.setSmoothing(true);
						}
						if(this.sheepArray[i].popupTimer.obj.frameIndex < 59 && GameSettings.level > 1) this.sheepArray[i].popupTimer.obj.gotoFrame(this.sheepArray[i].popupTimer.obj.frameIndex + 1);
						if(this.sheepArray[i].popupTimer.obj.frameIndex == 59) {
							this.sheepArray[i].popupTimer.set_visible(false);
							this.sheepArray[i].popupItem.set_visible(false);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].state = "woolRemove";
							this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("woolProduce"),15);
							this.sheepArray[i].sheep.gotoFrame(0);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
						}
					}
					break;
				case "woolRemove":
					if(this.sheepArray[i].sheep.frameIndex == 30) {
						this.sheepArray[i].woolGive++;
						if(GameSettings.level == 1) this.sheepArray[i].woolGive = -1;
						this.sheepArray[i].sheep.stop();
						this.sheepArray[i].woolFrame = 0;
						this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("bodyNormal"),15);
						this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
						this.sheepArray[i].head.set_visible(true);
						this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
						this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].sheep.setSmoothing(true);
						this.sheepArray[i].wlCnt = this.setDelay("wool");
						this.sheepArray[i].woolState = "growing";
						if(this.sheepArray[i].woolGive < this.sheepArray[i].life) {
							if(Math.floor(Math.random() * 3) == 1) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(0);
								this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
								this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
								this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
								this.sheepArray[i].sheep.setSmoothing(true);
								this.sheepArray[i].head.set_visible(false);
								this.sheepArray[i].state = "sleep";
								this.sheepArray[i].sleep.play(0,true);
								this.sheepArray[i].sleep.set_visible(true);
								this.sheepArray[i].timer = this.setDelay("sleep");
							} else {
								this.sheepArray[i].state = "rest";
								this.sheepArray[i].timer = this.setDelay("rest");
							}
						} else {
							this.sheepArray[i].popupItem.set_visible(false);
							this.sheepArray[i].popupTimer.set_visible(false);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].tray.set_visible(false);
							if(this.sheepArray[i].woolFrame < 4) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadN"),10); else if(this.sheepArray[i].woolFrame >= 4 && this.sheepArray[i].woolFrame <= 8) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadM"),10); else this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadL"),10);
							this.sheepArray[i].sheep.play(0,true);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].state = "flush";
							this.sheepArray[i].timer = 1000;
						}
					}
					break;
				case "woolCut":
					this.incre += delta;
					if(this.incre >= 10) {
						this.incre = 0;
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
					}
					if(this.sheepArray[i].sheep.frameIndex == 30) {
						GameSettings.score += 3 + GameSettings.bonus;
						this.sheepArray[i].woolGive++;
						if(GameSettings.level == 1) this.sheepArray[i].woolGive = -1;
						this.sheepArray[i].scissor.stop();
						this.sheepArray[i].scissor.set_visible(false);
						this.sheepArray[i].sheep.stop();
						this.sheepArray[i].woolFrame = 0;
						this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("bodyNormal"),15);
						this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
						this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
						this.sheepArray[i].head.set_visible(true);
						this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].sheep.setSmoothing(true);
						this.sheepArray[i].wlCnt = this.setDelay("wool");
						this.sheepArray[i].woolState = "growing";
						if(this.sheepArray[i].woolGive < this.sheepArray[i].life) {
							if(Math.floor(Math.random() * 3) == 1) {
								this.sheepArray[i].popupTimer.obj.gotoFrame(0);
								this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
								this.sheepArray[i].sheep.gotoFrame(this.sheepArray[i].woolFrame);
								this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
								this.sheepArray[i].sheep.setSmoothing(true);
								this.sheepArray[i].head.set_visible(false);
								this.sheepArray[i].state = "sleep";
								this.sheepArray[i].sleep.play(0,true);
								this.sheepArray[i].sleep.set_visible(true);
								this.sheepArray[i].timer = this.setDelay("sleep");
							} else {
								this.sheepArray[i].state = "rest";
								this.sheepArray[i].timer = this.setDelay("rest");
							}
							if(GameSettings.level == 1) this.sheepArray[i].timer = 60;
						} else {
							this.sheepArray[i].popupItem.set_visible(false);
							this.sheepArray[i].popupTimer.set_visible(false);
							this.sheepArray[i].head.set_visible(false);
							this.sheepArray[i].tray.set_visible(false);
							if(this.sheepArray[i].woolFrame < 4) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadN"),10); else if(this.sheepArray[i].woolFrame >= 4 && this.sheepArray[i].woolFrame <= 8) this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadM"),10); else this.sheepArray[i].sheep.setFrames(GameSettings.d.getFrames("sheepDeadL"),10);
							this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.sheepArray[i].sheep.setSmoothing(true);
							this.sheepArray[i].sheep.play(0,true);
							this.sheepArray[i].state = "flush";
							this.sheepArray[i].timer = 1000;
						}
						this.currentItem = 4;
						game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						game_scenes_Game.hero.hero.gotoFrame(3);
						game_scenes_Game.hero.hero.stop();
						game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.mouseChildren = false;
						game_scenes_Game.hero.mouseEnabled = false;
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
						game_scenes_Game.hero.itmF.set_visible(true);
						this.heroBusy = false;
						this.processQueue.splice(0,2);
						if(GameSettings.level == 1) {
							this.arrow.set_x(fw_Config.convertWidth(this.sack.get_x() + 220));
							this.arrow.set_y(fw_Config.convertHeight(this.sack.get_y() + 80));
							this.arrow.play(0,true);
							this.arrow.set_visible(true);
							this.tutorial.addMessages("EmptySack");
							this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
							this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
							this.tutorial.set_visible(true);
							this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
							this.sack.buttonMode = true;
						}
					}
					break;
				case "died":
					this.sheepArray[i].set_visible(false);
					GameSettings.sheepTotal--;
					this.sheepArray[i].state = "buy";
					var n = this.sheepArray[i].sheepNo - 1;
					this.sheepState[n] = "buy";
					this.sheepArray[i].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
					HxOverrides.remove(this.sortArray,this.sheepArray[i]);
					var sheep = this.sheepArray[i];
					HxOverrides.remove(this.sheepArray,sheep);
					game_scenes_Game.obj1Sprite.removeChild(sheep);
					break;
				}
			}
		}
	}
	,setDelay: function(state) {
		if(this.delayArray.length <= 0) this.delayArray = [0,80,160,240,320];
		var rand = Math.floor(Math.random() * this.delayArray.length);
		var rands = this.delayArray[rand];
		this.delayArray.splice(rand,1);
		var delay = 0;
		if(state == "sleep1") delay = 50 + rands; else if(state == "rest1") delay = 20 + rands; else if(state == "sleep") {
			if(GameSettings.sheepTotal <= 4) delay = 500 + rands; else if(GameSettings.sheepTotal > 4 && GameSettings.sheepTotal <= 6) delay = 700 + rands; else if(GameSettings.sheepTotal > 6 && GameSettings.sheepTotal <= 8) delay = 950 + rands; else if(GameSettings.sheepTotal > 8 && GameSettings.sheepTotal <= 10) delay = 1040 + rands; else if(GameSettings.sheepTotal > 10) delay = 1200 + rands;
		} else if(state == "rest") {
			if(GameSettings.sheepTotal <= 4) delay = 450 + rands; else if(GameSettings.sheepTotal > 4 && GameSettings.sheepTotal <= 6) delay = 650 + rands; else if(GameSettings.sheepTotal > 6 && GameSettings.sheepTotal <= 8) delay = 840 + rands; else if(GameSettings.sheepTotal > 8 && GameSettings.sheepTotal <= 10) delay = 1020 + rands; else if(GameSettings.sheepTotal > 10) delay = 1150 + rands;
		} else if(state == "eating") {
			if(GameSettings.sheepTotal <= 4) delay = 980 + rands; else if(GameSettings.sheepTotal > 4 && GameSettings.sheepTotal <= 6) delay = 1100 + rands; else if(GameSettings.sheepTotal > 6 && GameSettings.sheepTotal <= 8) delay = 1230 + rands; else if(GameSettings.sheepTotal > 8 && GameSettings.sheepTotal <= 10) delay = 1340 + rands; else if(GameSettings.sheepTotal > 10) delay = 1450 + rands;
		} else if(state == "wool") {
			if(GameSettings.sheepTotal <= 4) delay = 750 + rands; else if(GameSettings.sheepTotal > 4 && GameSettings.sheepTotal <= 6) delay = 800 + rands; else if(GameSettings.sheepTotal > 6 && GameSettings.sheepTotal <= 8) delay = 860 + rands; else if(GameSettings.sheepTotal > 8 && GameSettings.sheepTotal <= 10) delay = 920 + rands; else if(GameSettings.sheepTotal > 10) delay = 1000 + rands;
		}
		return delay;
	}
	,addMenuBox: function() {
		this.g = new openfl_display_Sprite();
		this.g.get_graphics().beginFill(2228224,1);
		this.g.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.g.get_graphics().endFill();
		this.addChild(this.g);
		this.g.set_alpha(.01);
		this.box = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("targetBox"));
		this.addChild(this.box);
		this.box.set_x(fw_Config.convertWidth(300));
		this.box.set_y(fw_Config.convertHeight(150));
		this.box.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.box.setSmoothing(true);
		this.title = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("exitWarning"));
		this.addChild(this.title);
		this.title.set_x(fw_Config.convertWidth(370));
		this.title.set_y(fw_Config.convertHeight(200));
		this.title.setSmoothing(true);
		this.title.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.menuBtn1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_yes"));
		this.addChild(this.menuBtn1);
		this.menuBtn1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.menuBtn1.buttonMode = true;
		this.menuBtn1.set_x(fw_Config.convertWidth(325));
		this.menuBtn1.set_y(fw_Config.convertHeight(330));
		this.menuBtn1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.menuBtn1.setSmoothing(true);
		this.continueBtn = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_no"));
		this.addChild(this.continueBtn);
		this.continueBtn.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onContinue));
		this.continueBtn.buttonMode = true;
		this.continueBtn.set_x(fw_Config.convertWidth(625));
		this.continueBtn.set_y(fw_Config.convertHeight(330));
		this.continueBtn.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.continueBtn.setSmoothing(true);
	}
	,addPausedBox: function() {
		if(!GameSettings.isPaused) {
			GameSettings.isPaused = true;
			this.g = new openfl_display_Sprite();
			this.g.get_graphics().beginFill(2228224,1);
			this.g.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
			this.g.get_graphics().endFill();
			this.addChild(this.g);
			this.g.set_alpha(.01);
			this.box = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("targetBox"));
			this.addChild(this.box);
			this.box.set_scaleX(this.box.set_scaleY(0.9));
			this.box.set_x(fw_Config.convertWidth(160));
			this.box.set_y(fw_Config.convertHeight(140));
			this.box.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.box.setSmoothing(true);
			this.title = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("gamePaused"));
			this.addChild(this.title);
			this.title.set_x(fw_Config.convertWidth(320));
			this.title.set_y(fw_Config.convertHeight(200));
			this.title.setSmoothing(true);
			this.title.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.menuBtn1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_menu"));
			this.addChild(this.menuBtn1);
			this.menuBtn1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
			this.menuBtn1.buttonMode = true;
			this.menuBtn1.set_x(fw_Config.convertWidth(200));
			this.menuBtn1.set_y(fw_Config.convertHeight(400));
			this.menuBtn1.set_scaleX(this.menuBtn1.set_scaleY(.9));
			this.menuBtn1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.menuBtn1.setSmoothing(true);
			this.continueBtn = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_continue"));
			this.addChild(this.continueBtn);
			this.continueBtn.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onContinue));
			this.continueBtn.buttonMode = true;
			this.continueBtn.set_x(fw_Config.convertWidth(580));
			this.continueBtn.set_y(fw_Config.convertHeight(400));
			this.continueBtn.set_scaleX(this.continueBtn.set_scaleY(.9));
			this.continueBtn.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.continueBtn.setSmoothing(true);
			if(GameSettings.musicPlaying) this.soundButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_soundOff")); else this.soundButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_soundOn"));
			this.addChild(this.soundButton);
			this.soundButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.soundMuted));
			this.soundButton.buttonMode = true;
			this.soundButton.set_scaleX(this.soundButton.set_scaleY(.9));
			this.soundButton.set_x(fw_Config.convertWidth(390));
			this.soundButton.set_y(fw_Config.convertHeight(400));
			this.soundButton.setSmoothing(true);
			this.soundButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
	}
	,soundMuted: function(e) {
		if(GameSettings.musicPlaying == false) {
			this.soundButton.setFrames(GameSettings.a.getFrames("btn_soundOn"),1);
			fw_managers_MusicManager.playMusic("music",300,5);
			GameSettings.musicPlaying = true;
		} else {
			fw_managers_MusicManager.stopMusic("music",1);
			this.soundButton.setFrames(GameSettings.a.getFrames("btn_soundOff"),1);
			GameSettings.musicPlaying = false;
		}
	}
	,removePausedBox: function() {
		this.menuBtn1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.continueBtn.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onContinue));
		this.soundButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.soundMuted));
		this.removeChild(this.soundButton);
		this.removeChild(this.g);
		this.removeChild(this.box);
		this.removeChild(this.title);
		this.removeChild(this.menuBtn1);
		this.removeChild(this.continueBtn);
	}
	,onMenu: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removePausedBox();
		this.removeItems();
		GameSettings.addTimer = 7000;
		fw_managers_SceneManager.changeScene(game_scenes_Menu);
	}
	,onContinue: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removePausedBox();
		GameSettings.isPaused = false;
		GameSettings.isPlaying = true;
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
		GameSettings.isPaused = true;
		if(this.currentItem == 11 && this.currentBg == "bg1") {
			this.heroState = "noTray";
			game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
			game_scenes_Game.hero.hero.gotoFrame(3);
			game_scenes_Game.hero.mouseChildren = false;
			game_scenes_Game.hero.mouseEnabled = false;
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_visible(false);
			this.takeCount = 0;
			this.currentItem = 0;
			this.pickedSack.set_visible(true);
			this.pickedSack = null;
		}
		if(this.currentItem == 13 && this.currentBg == "bg2") {
			var _g1 = 0;
			var _g = this.gameBg2.fullBktArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.gameBg2.fullBktArray[i].get_visible()) {
					this.gameBg2.fullBktArray[i].set_visible(true);
					break;
				}
			}
			this.heroState = "noTray";
			this.gameBg2.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
			this.gameBg2.hero.hero.gotoFrame(3);
			this.gameBg2.hero.mouseChildren = false;
			this.gameBg2.hero.mouseEnabled = false;
			this.gameBg2.hero.itmB.set_visible(false);
			this.gameBg2.hero.itmF.set_visible(false);
			this.takeCount = 0;
			this.currentItem = 0;
		}
		this.common.hud.set_visible(false);
		this.common.hudIcon1.set_visible(false);
		this.common.hudIcon2.set_visible(false);
		this.common.hudIcon3.set_visible(false);
		this.common.hudIcon4.set_visible(false);
		this.common.level.set_visible(false);
		this.common.levelText.set_visible(false);
		this.common.target.set_visible(false);
		this.common.cash.set_visible(false);
		this.common.cashText.set_visible(false);
		this.common.clock.set_visible(false);
		this.common.pauseBtn.set_visible(false);
		this.common.star1.set_visible(false);
		this.common.star2.set_visible(false);
		this.common.star3.set_visible(false);
		this.common.starb1.set_visible(false);
		this.common.starb2.set_visible(false);
		this.common.starb3.set_visible(false);
		this.common.effect.set_visible(false);
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOver: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			this.oldScaleX = sprite.get_scaleX();
			this.oldScaleY = sprite.get_scaleY();
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX + 0.05));
		}
	}
	,onResume: function() {
		GameSettings.isPaused = false;
		if(GameSettings.sellFlag) {
			GameSettings.sellFlag = false;
			this.sellupDate();
		}
		if(GameSettings.buyFlag) {
			GameSettings.buyFlag = false;
			this.buyupDate();
		}
		this.common.cashText.set_text(Std.string(GameSettings.cash));
		this.common.hud.set_visible(true);
		this.common.hudIcon1.set_visible(true);
		this.common.level.set_visible(true);
		this.common.levelText.set_visible(true);
		this.common.target.set_visible(true);
		this.common.cash.set_visible(true);
		this.common.cashText.set_visible(true);
		this.common.clock.set_visible(true);
		this.common.pauseBtn.set_visible(true);
		this.common.star1.set_visible(true);
		this.common.star2.set_visible(true);
		this.common.star3.set_visible(true);
		this.common.starb1.set_visible(true);
		this.common.starb2.set_visible(true);
		this.common.starb3.set_visible(true);
		this.common.effect.set_visible(true);
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
	}
	,onResize: function() {
		if(GameSettings.level == 1) {
			this.arrow1.set_scaleX(this.arrow1.set_scaleY(fw_Config.scaleRatio * .7));
			this.tutorial1.set_scaleX(this.tutorial1.set_scaleY(fw_Config.scaleRatio));
		}
		this.common.resize();
	}
	,onFixedUpdate: function(step) {
	}
	,saveData: function(level) {
		this.gameData.level = level;
		this.gameData.cash = GameSettings.cash;
		this.gameData.total = GameSettings.total;
		this.gameData.milkTotal = GameSettings.milkTotal;
		this.gameData.woolTotal = GameSettings.woolTotal;
		this.gameData.woolPlaceTotal = GameSettings.woolPlaceTotal;
		this.gameData.flushTotal = GameSettings.flushTotal;
		this.gameData.dryWoolTotal = GameSettings.dryWoolTotal;
		this.gameData.color1Total = GameSettings.color1Total;
		this.gameData.color2Total = GameSettings.color2Total;
		this.gameData.color3Total = GameSettings.color3Total;
		this.gameData.color4Total = GameSettings.color4Total;
		this.gameData.color5Total = GameSettings.color5Total;
		this.gameData.sheepTotal = GameSettings.sheepTotal;
		this.gameData.vehicleUp = GameSettings.vehicleUp;
		this.gameData.color1Up = GameSettings.color1Up;
		this.gameData.color2Up = GameSettings.color2Up;
		this.gameData.color3Up = GameSettings.color3Up;
		this.gameData.color4Up = GameSettings.color4Up;
		this.gameData.color4Up = GameSettings.color4Up;
		this.gameData.clr1 = GameSettings.clr1;
		this.gameData.clr2 = GameSettings.clr2;
		this.gameData.clr3 = GameSettings.clr3;
		this.gameData.clr4 = GameSettings.clr4;
		this.gameData.currentSack = this.currentSack;
		this.gameData.sackLength = this.sackLength;
		this.gameData.sheepArray = [];
		var _g1 = 0;
		var _g = this.sheepArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sheepArray[i] != null && this.sheepArray[i].state != "died" && this.sheepArray[i].state != "flush") {
				this.gameData.sheepArray.push(this.sheepArray[i].state);
				this.gameData.sheepArray.push(this.sheepArray[i].orderCount);
				this.gameData.sheepArray.push(this.sheepArray[i].woolFrame);
				this.gameData.sheepArray.push(this.sheepArray[i].woolGive);
				this.gameData.sheepArray.push(this.sheepArray[i].woolState);
				this.gameData.sheepArray.push(this.sheepArray[i].sheepNo);
				this.gameData.sheepArray.push(this.sheepArray[i].get_scaleX());
				this.gameData.sheepArray.push(this.sheepArray[i].node.id);
				this.gameData.sheepArray.push(this.sheepArray[i].life);
			} else if(this.sheepArray[i] != null && (this.sheepArray[i].state == "flush" || this.sheepArray[i].state != "died")) {
				var n = this.sheepArray[i].sheepNo - 1;
				if(this.sheepState[n] != "buy" && this.sheepState[n] != "null") {
					this.sheepState[n] = "buy";
					GameSettings.sheepTotal--;
					this.gameData.sheepTotal = GameSettings.sheepTotal;
				}
			}
		}
		this.gameData.sheepState = [];
		var _g2 = 0;
		while(_g2 < 12) {
			var i1 = _g2++;
			this.gameData.sheepState.push(this.sheepState[i1]);
		}
		this.gameData.lifeArray = [];
		var _g11 = 0;
		var _g3 = this.lifeArray.length;
		while(_g11 < _g3) {
			var i2 = _g11++;
			this.gameData.lifeArray.push(this.lifeArray[i2]);
		}
		this.gameData.grassTotal = GameSettings.grassTotal;
		this.gameData.grassBundle = GameSettings.grassBundle;
		this.gameData.foodTotal = GameSettings.foodTotal;
		this.gameData.medicineTotal = GameSettings.medicineTotal;
		this.gameData.waterTotal = GameSettings.waterTotal;
		this.gameData.woolTrayCount = GameSettings.woolTrayCount;
		this.gameData.sackTotal = GameSettings.sackTotal;
		this.gameData.basketTotal = GameSettings.basketTotal;
		this.gameData.availableSack = GameSettings.availableSack;
		this.gameData.foodFrame = this.food.frameIndex;
		this.gameData.bucketFrame = this.bucket.frameIndex;
		this.gameData.sackArray = [];
		var _g12 = 0;
		var _g4 = this.sackMArray.length;
		while(_g12 < _g4) {
			var i3 = _g12++;
			if(this.sackMArray[i3].get_visible()) this.gameData.sackArray.push(1); else this.gameData.sackArray.push(0);
			this.gameData.sackArray.push(this.sackMArray[i3].obj.frameIndex);
		}
		this.gameData.flushArray = [];
		var _g5 = 0;
		while(_g5 < 4) {
			var i4 = _g5++;
			this.gameData.flushArray.push(this.flushArray[i4].frameIndex);
		}
		this.gameData.wetWoolTotal = GameSettings.wetWoolTotal;
		this.gameData.availableBasket = GameSettings.availableBasket;
		this.gameData.grassBundle2 = GameSettings.grassBundle2;
		this.gameData.availableSack2 = GameSettings.availableSack2;
		this.gameData.matTotal = GameSettings.matTotal;
		this.gameData.availableBasket2 = GameSettings.availableBasket2;
		this.gameData.tailorWool = GameSettings.tailorWool;
		this.gameData.whiteTotal = GameSettings.whiteTotal;
		this.gameData.firstdiesheep = GameSettings.firstdiesheep;
		this.gameData.bg2played = GameSettings.bg2played;
		this.gameData.bg3played = GameSettings.bg3played;
		this.gameData.bg4played = GameSettings.bg4played;
		this.gameBg2.loadGame2();
		this.gameBg3.loadGame3();
		this.gameBg4.loadGame4();
		game_scenes_LoadGame.saveGame(this.gameData);
	}
	,setNode: function(sheep) {
		if(sheep.sheepNo == 1) sheep.node = game_scenes_Game.grid.getNodeById("n6"); else if(sheep.sheepNo == 2) sheep.node = game_scenes_Game.grid.getNodeById("n7"); else if(sheep.sheepNo == 3) {
			sheep.node = game_scenes_Game.grid.getNodeById("n8");
			var _g = sheep;
			_g.set_scaleX(_g.get_scaleX() * -1);
			var _g1 = sheep.popupTimer;
			_g1.set_scaleX(_g1.get_scaleX() * -1);
		} else if(sheep.sheepNo == 4) {
			sheep.node = game_scenes_Game.grid.getNodeById("n9");
			var _g2 = sheep;
			_g2.set_scaleX(_g2.get_scaleX() * -1);
			var _g3 = sheep.popupTimer;
			_g3.set_scaleX(_g3.get_scaleX() * -1);
		} else if(sheep.sheepNo == 5) sheep.node = game_scenes_Game.grid.getNodeById("n10"); else if(sheep.sheepNo == 6) sheep.node = game_scenes_Game.grid.getNodeById("n11"); else if(sheep.sheepNo == 7) sheep.node = game_scenes_Game.grid.getNodeById("n12"); else if(sheep.sheepNo == 8) sheep.node = game_scenes_Game.grid.getNodeById("n13"); else if(sheep.sheepNo == 9) {
			sheep.node = game_scenes_Game.grid.getNodeById("n14");
			var _g4 = sheep;
			_g4.set_scaleX(_g4.get_scaleX() * -1);
			var _g5 = sheep.popupTimer;
			_g5.set_scaleX(_g5.get_scaleX() * -1);
		} else if(sheep.sheepNo == 10) {
			sheep.node = game_scenes_Game.grid.getNodeById("n15");
			var _g6 = sheep;
			_g6.set_scaleX(_g6.get_scaleX() * -1);
			var _g7 = sheep.popupTimer;
			_g7.set_scaleX(_g7.get_scaleX() * -1);
		} else if(sheep.sheepNo == 11) sheep.node = game_scenes_Game.grid.getNodeById("n16"); else if(sheep.sheepNo == 12) sheep.node = game_scenes_Game.grid.getNodeById("n17");
	}
	,buyupDate: function() {
		var k;
		var rand;
		if(GameSettings.foodTotal == 18) {
			this.food.gotoFrame(0);
			GameSettings.foodFrame = 0;
			this.food.set_visible(true);
		}
		if(GameSettings.grassTotal == 30) {
			GameSettings.grassBundle = 10;
			var _g = 0;
			while(_g < 10) {
				var i = _g++;
				if(i < this.grassArray.length) this.grassArray[i].set_visible(true); else {
					this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
					this.grass.addChild(this.grass1);
					this.grass1.set_x(fw_Config.convertWidth(this.grassPos[i]));
					this.grass1.set_y(fw_Config.convertHeight(this.grassPos[i + 10]));
					this.grass1.set_scaleX(this.grass1.set_scaleY(.8));
					this.grassArray.push(this.grass1);
					this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.grass1.setSmoothing(true);
				}
			}
		}
		var _g1 = 0;
		var _g2 = GameSettings.availableSack;
		while(_g1 < _g2) {
			var i1 = _g1++;
			if(i1 < this.emptySack.length) this.emptySack[i1].set_visible(true); else {
				this.sack1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
				if(i1 > 5) this.sackextra.addChild(this.sack1); else this.sack.addChild(this.sack1);
				this.sack1.set_x(fw_Config.convertWidth(180));
				this.sack1.set_y(fw_Config.convertHeight(this.sackPos[i1]));
				this.sack1.set_scaleX(this.sack1.set_scaleY(.8));
				this.emptySack.push(this.sack1);
				this.sack1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.sack1.setSmoothing(true);
			}
		}
		if(GameSettings.buysheepCount > 0) {
			var _g3 = 0;
			while(_g3 < 12) {
				var i2 = _g3++;
				if(this.sheepState[i2] == "buy") {
					this.sheepState[i2] = "idle";
					this.sheep = new game_scenes_Sheep(this);
					game_scenes_Game.obj1Sprite.addChild(this.sheep);
					this.sheep.set_x(fw_Config.convertWidth(this.sheepXpos[i2]));
					this.sheep.set_y(fw_Config.convertHeight(this.sheepYpos[i2]));
					this.sheep.sheepNo = i2 + 1;
					this.sheep.state = "rest";
					this.setNode(this.sheep);
					this.sheepArray.push(this.sheep);
					this.sortArray.push(this.sheep);
					this.sheep.popupItem.set_visible(false);
					this.sheep.popupTimer.set_visible(false);
					this.sheep.popTm = 0;
					this.sheep.timer = 240 + Math.floor(Math.random() * 90);
					this.sheep.wlCnt = 780 + Math.floor(Math.random() * 360);
					this.sheep.orderCount = 0;
					this.sheep.woolFrame = 0;
					this.sheep.sheep.gotoFrame(0);
					this.sheep.woolGive = 0;
					rand = Math.floor(Math.random() * this.lifeArray.length);
					this.sheep.life = this.lifeArray[rand];
					this.lifeArray.splice(rand,1);
					if(this.lifeArray.length == 0) this.lifeArray = [4,4,5,5,6];
					this.sheep.woolState = "growing";
					this.sheep.foodArray = [1,2,3,6];
					this.sheep.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
					this.sheep.buttonMode = true;
					if(i2 == 5) {
						var _g11 = this.sheep.popupTimer;
						_g11.set_x(_g11.get_x() + fw_Config.convertWidth(15));
						var _g12 = this.sheep.popupItem;
						_g12.set_x(_g12.get_x() + fw_Config.convertWidth(15));
						var _g13 = this.sheep.popupTimer;
						_g13.set_y(_g13.get_y() + fw_Config.convertWidth(5));
						var _g14 = this.sheep.popupItem;
						_g14.set_y(_g14.get_y() + fw_Config.convertWidth(5));
					} else if(i2 == 6) {
						var _g15 = this.sheep.popupTimer;
						_g15.set_x(_g15.get_x() - fw_Config.convertWidth(30));
						var _g16 = this.sheep.popupItem;
						_g16.set_x(_g16.get_x() - fw_Config.convertWidth(30));
						var _g17 = this.sheep.popupTimer;
						_g17.set_y(_g17.get_y() + fw_Config.convertHeight(20));
						var _g18 = this.sheep.popupItem;
						_g18.set_y(_g18.get_y() + fw_Config.convertHeight(20));
					}
					if(i2 == 9) {
						var _g19 = this.sheep.popupTimer;
						_g19.set_x(_g19.get_x() + fw_Config.convertWidth(20));
						var _g110 = this.sheep.popupItem;
						_g110.set_x(_g110.get_x() + fw_Config.convertWidth(20));
					}
					GameSettings.buysheepCount--;
					if(GameSettings.buysheepCount == 0) break;
				}
			}
		}
		if(GameSettings.medicineTotal == 30) this.medicine.set_visible(true);
		this.gameBg4.buyupDate4();
		k = this.gameBg2.matArray.length;
		var _g111 = k;
		var _g4 = GameSettings.matTotal;
		while(_g111 < _g4) {
			var i3 = _g111++;
			this.gameBg2.matM = new game_scenes_ObjMat();
			this.gameBg2.matM.obj.setFrames(GameSettings.c.getFrames("mat_drying_"),15);
			this.gameBg2.obj2Sprite.addChild(this.gameBg2.matM);
			this.gameBg2.matM.set_x(fw_Config.convertWidth(this.gameBg2.matPos[k]));
			this.gameBg2.matM.set_y(fw_Config.convertHeight(this.gameBg2.matPos[k + 6]));
			this.gameBg2.matM.set_scaleX(this.gameBg2.matM.set_scaleY(.8));
			this.gameBg2.matM.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.gameBg2.matM.obj.setSmoothing(true);
			this.gameBg2.mat1 = new game_scenes_Matsp();
			this.gameBg2.obj2Sprite.addChild(this.gameBg2.mat1);
			this.gameBg2.mat1.set_scaleX(this.gameBg2.mat1.set_scaleY(.8));
			this.gameBg2.mat1.set_x(fw_Config.convertWidth(this.gameBg2.matPos[i3] - 100));
			this.gameBg2.mat1.set_y(fw_Config.convertHeight(this.gameBg2.matPos[i3 + 6] - 75));
			this.gameBg2.mat1.set_rotation(-45);
			if(k == 1) {
				this.gameBg2.matM.id = "mat2";
				this.gameBg2.matM.node = this.gameBg2.grid.getNodeById("n8");
				this.gameBg2.mat1.id = "mat2";
				this.gameBg2.mat1.node = this.gameBg2.grid.getNodeById("n8");
			} else if(k == 2) {
				this.gameBg2.matM.id = "mat3";
				this.gameBg2.matM.node = this.gameBg2.grid.getNodeById("n9");
				this.gameBg2.mat1.id = "mat3";
				this.gameBg2.mat1.node = this.gameBg2.grid.getNodeById("n9");
			} else if(k == 3) {
				this.gameBg2.matM.id = "mat4";
				this.gameBg2.matM.node = this.gameBg2.grid.getNodeById("n10");
				this.gameBg2.mat1.id = "mat4";
				this.gameBg2.mat1.node = this.gameBg2.grid.getNodeById("n10");
			} else if(k == 4) {
				this.gameBg2.matM.id = "mat5";
				this.gameBg2.matM.node = this.gameBg2.grid.getNodeById("n11");
				this.gameBg2.mat1.id = "mat5";
				this.gameBg2.mat1.node = this.gameBg2.grid.getNodeById("n11");
			} else if(k == 5) {
				this.gameBg2.matM.id = "mat6";
				this.gameBg2.matM.node = this.gameBg2.grid.getNodeById("n12");
				this.gameBg2.mat1.id = "mat6";
				this.gameBg2.mat1.node = this.gameBg2.grid.getNodeById("n12");
			}
			this.gameBg2.matM.mat = this.gameBg2.mat1;
			this.gameBg2.matArray.push(this.gameBg2.matM);
			this.gameBg2.matM.mouseChildren = false;
			this.gameBg2.matM.mouseEnabled = false;
			this.gameBg2.matM.mat.buttonMode = true;
			this.gameBg2.matM.mat.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gameBg2,$bind($_,$_.clickOnMat)));
			this.gameBg2.matM.obj.gotoFrame(0);
			this.gameBg2.matM.obj.stop();
			this.gameBg2.matM.state = "idle";
			k++;
		}
		var _g112 = 0;
		var _g5 = GameSettings.availableBasket;
		while(_g112 < _g5) {
			var i4 = _g112++;
			if(i4 < this.gameBg2.emptyBktArray.length) this.gameBg2.emptyBktArray[i4].set_visible(true); else {
				this.gameBg2.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
				this.gameBg2.emptyBkt.addChild(this.gameBg2.busket1);
				this.gameBg2.busket1.set_x(fw_Config.convertWidth(this.gameBg2.ebktPos[i4]));
				this.gameBg2.busket1.set_y(fw_Config.convertHeight(this.gameBg2.ebktPos[i4 + 12]));
				this.gameBg2.busket1.set_scaleX(this.gameBg2.busket1.set_scaleY(.8));
				this.gameBg2.emptyBktArray.push(this.gameBg2.busket1);
				this.gameBg2.busket1.setSmoothing(true);
				this.gameBg2.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			}
		}
		if(GameSettings.vehicleUp && !GameSettings.vehicleUped) {
			GameSettings.vehicleUped = true;
			game_scenes_Game.cartSprite.removeChild(this.cart11);
			this.cart11 = null;
			game_scenes_Game.cartSprite.removeChild(this.cart12);
			this.cart12 = null;
			var k1;
			var _g6 = 0;
			while(_g6 < 10) {
				var i5 = _g6++;
				k1 = 9 - i5;
				game_scenes_Game.cartSprite.removeChild(this.milkArray[k1]);
			}
			this.milkArray = [];
			var _g7 = 0;
			while(_g7 < 4) {
				var i6 = _g7++;
				k1 = 3 - i6;
				game_scenes_Game.cartSprite.removeChild(this.flushArray[k1]);
			}
			this.flushArray = [];
			game_scenes_Game.cartSprite.removeChild(this.vehicle);
			this.vehicle = null;
			this.addCart();
		}
		if(GameSettings.medicineTotal > 0) {
			this.medicine1.set_visible(true);
			this.medicine.set_visible(true);
		}
	}
	,sellupDate: function() {
		var k;
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			if(GameSettings.milkTotal < i) this.milkArray[i - 1].set_visible(false);
		}
		k = this.gameBg2.fullBktArray.length;
		if(GameSettings.selldryWoolCount > 0) {
			var _g1 = 0;
			var _g2 = this.gameBg2.fullBktArray.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				k--;
				if(GameSettings.selldryWoolCount > 0 && this.gameBg2.fullBktArray[k].get_visible()) {
					this.gameBg2.fullBktArray[k].set_visible(false);
					GameSettings.selldryWoolCount--;
					if(GameSettings.selldryWoolCount == 0) break;
				}
			}
			if(GameSettings.selldryWoolCount > 0) {
				k = this.gameBg3.basket1Array.length;
				var _g11 = 0;
				var _g3 = this.gameBg3.basket1Array.length;
				while(_g11 < _g3) {
					var i2 = _g11++;
					k--;
					if(GameSettings.selldryWoolCount > 0 && this.gameBg3.basket1Array[k].get_visible()) {
						this.gameBg3.basket1Array[k].set_visible(false);
						GameSettings.selldryWoolCount--;
						if(GameSettings.selldryWoolCount == 0) break;
					}
				}
			}
		}
		if(GameSettings.woolTrayCount == 0) this.bgTray.gotoFrame(0);
		if(GameSettings.sellWoolCount > 0) {
			k = this.sackMArray.length;
			var _g12 = 0;
			var _g4 = this.sackMArray.length;
			while(_g12 < _g4) {
				var i3 = _g12++;
				k--;
				if(this.sackMArray[k].get_visible() && this.sackMArray[k].obj.frameIndex == 3) {
					this.sackMArray[k].obj.gotoFrame(0);
					this.sackMArray[k].set_visible(false);
					GameSettings.sellWoolCount--;
					GameSettings.woolPlaceTotal++;
					if(GameSettings.sellWoolCount == 0) break;
				}
			}
		}
		if(GameSettings.sellWoolCount > 0) {
			k = GameSettings.wetWoolTotal;
			var _g5 = 0;
			while(_g5 < k) {
				var i4 = _g5++;
				if(this.gameBg2.sackMArray[GameSettings.wetWoolTotal - 1].get_visible()) {
					this.gameBg2.sackMArray[GameSettings.wetWoolTotal - 1].set_visible(false);
					GameSettings.wetWoolTotal--;
					GameSettings.sellWoolCount--;
					if(GameSettings.sellWoolCount == 0) break;
				}
			}
		}
		k = this.gameBg2.emptyBktArray.length - 1;
		var _g13 = 0;
		var _g6 = this.gameBg2.emptyBktArray.length;
		while(_g13 < _g6) {
			var i5 = _g13++;
			if(k >= GameSettings.availableBasket) this.gameBg2.emptyBktArray[k].set_visible(false);
			k--;
		}
		k = this.emptySack.length;
		var _g14 = 0;
		var _g7 = this.emptySack.length;
		while(_g14 < _g7) {
			var i6 = _g14++;
			k--;
			if(k >= GameSettings.availableSack) this.emptySack[k].set_visible(false);
		}
		var _g8 = 1;
		while(_g8 < 5) {
			var i7 = _g8++;
			if(GameSettings.flushTotal < i7) this.flushArray[i7 - 1].set_visible(false);
		}
		this.gameBg4.sellupDate4();
		k = Math.floor(GameSettings.color1Total / 3);
		var k1 = GameSettings.color1Total % 3;
		var _g15 = 0;
		var _g9 = this.gameBg3.basket2Array.length;
		while(_g15 < _g9) {
			var i8 = _g15++;
			if(i8 >= k) {
				if(this.gameBg3.basket2Array[i8].get_visible()) {
					GameSettings.availableBasket++;
					this.gameBg3.basket2Array[i8].set_visible(false);
				}
			} else this.gameBg3.basket2Array[i8].obj.gotoFrame(17);
			if(i8 == k && k1 > 0) {
				k1 += 14;
				GameSettings.availableBasket--;
				this.gameBg3.basket2Array[i8].obj.gotoFrame(k1);
				this.gameBg3.basket2Array[i8].set_visible(true);
			}
		}
		k1 = this.gameBg3.basket2Array.length;
		var _g10 = 0;
		while(_g10 < k1) {
			var i9 = _g10++;
			k = this.gameBg3.basket2Array.length - 1;
			if(!this.gameBg3.basket2Array[k].get_visible()) {
				this.gameBg3.mat1Sprite.removeChild(this.gameBg3.basket2Array[k]);
				this.gameBg3.basket2Array.splice(k,1);
			}
			k--;
			if(k > this.gameBg3.basket2Array.length) {
				if(this.gameBg3.basket2Array[k].get_visible()) break;
			}
		}
		if(GameSettings.availableBasket > 0) {
			var _g16 = 0;
			var _g17 = this.gameBg2.emptyBktArray.length;
			while(_g16 < _g17) {
				var i10 = _g16++;
				if(i10 < GameSettings.availableBasket) {
					if(!this.gameBg2.emptyBktArray[i10].get_visible()) {
						this.gameBg2.emptyBktArray[i10].set_visible(true);
						break;
					}
				}
			}
			if(GameSettings.availableBasket > this.gameBg2.emptyBktArray.length) {
				var _g18 = 0;
				var _g19 = GameSettings.availableBasket;
				while(_g18 < _g19) {
					var i11 = _g18++;
					if(this.gameBg2.emptyBktArray.length == 0) k = 0; else k = this.gameBg2.emptyBktArray.length;
					this.gameBg2.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
					this.gameBg2.emptyBkt.addChild(this.gameBg2.busket1);
					this.gameBg2.busket1.set_x(fw_Config.convertWidth(this.gameBg2.ebktPos[k]));
					this.gameBg2.busket1.set_y(fw_Config.convertHeight(this.gameBg2.ebktPos[k + 12]));
					this.gameBg2.busket1.set_scaleX(this.gameBg2.busket1.set_scaleY(.8));
					this.gameBg2.emptyBktArray.push(this.gameBg2.busket1);
					this.gameBg2.busket1.setSmoothing(true);
					this.gameBg2.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					if(GameSettings.availableBasket == this.gameBg2.emptyBktArray.length) break;
				}
			}
		}
	}
	,putData: function() {
		GameSettings.level = GameSettings.savedData.level;
		GameSettings.cash = GameSettings.savedData.cash;
		GameSettings.total = GameSettings.savedData.total;
		GameSettings.milkTotal = GameSettings.savedData.milkTotal;
		GameSettings.woolTotal = GameSettings.savedData.woolTotal;
		GameSettings.woolPlaceTotal = GameSettings.savedData.woolPlaceTotal;
		GameSettings.flushTotal = GameSettings.savedData.flushTotal;
		GameSettings.dryWoolTotal = GameSettings.savedData.dryWoolTotal;
		GameSettings.color1Total = GameSettings.savedData.color1Total;
		GameSettings.color2Total = GameSettings.savedData.color2Total;
		GameSettings.color3Total = GameSettings.savedData.color3Total;
		GameSettings.color4Total = GameSettings.savedData.color4Total;
		GameSettings.color5Total = GameSettings.savedData.color5Total;
		GameSettings.sheepTotal = GameSettings.savedData.sheepTotal;
		GameSettings.grassTotal = GameSettings.savedData.grassTotal;
		GameSettings.grassBundle = GameSettings.savedData.grassBundle;
		GameSettings.foodTotal = GameSettings.savedData.foodTotal;
		GameSettings.medicineTotal = GameSettings.savedData.medicineTotal;
		GameSettings.waterTotal = GameSettings.savedData.waterTotal;
		GameSettings.woolTrayCount = GameSettings.savedData.woolTrayCount;
		GameSettings.sackTotal = GameSettings.savedData.sackTotal;
		GameSettings.basketTotal = GameSettings.savedData.basketTotal;
		GameSettings.availableSack = GameSettings.savedData.availableSack;
		GameSettings.vehicleUp = GameSettings.savedData.vehicleUp;
		GameSettings.color1Up = GameSettings.savedData.color1Up;
		GameSettings.color2Up = GameSettings.savedData.color2Up;
		GameSettings.color3Up = GameSettings.savedData.color3Up;
		GameSettings.color4Up = GameSettings.savedData.color4Up;
		GameSettings.clr1 = GameSettings.savedData.clr1;
		GameSettings.clr2 = GameSettings.savedData.clr2;
		GameSettings.clr3 = GameSettings.savedData.clr3;
		GameSettings.clr4 = GameSettings.savedData.clr4;
		this.currentSack = GameSettings.savedData.currentSack;
		this.sheepState = [];
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			this.sheepState.push(GameSettings.savedData.sheepState[i]);
		}
		this.lifeArray = [];
		var _g1 = 0;
		var _g2 = GameSettings.savedData.lifeArray.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			this.lifeArray.push(GameSettings.savedData.lifeArray[i1]);
		}
		this.sackLength = GameSettings.savedData.sackLength;
		GameSettings.wetWoolTotal = GameSettings.savedData.wetWoolTotal;
		GameSettings.availableBasket = GameSettings.savedData.availableBasket;
		GameSettings.grassBundle2 = GameSettings.savedData.grassBundle2;
		GameSettings.availableSack2 = GameSettings.savedData.availableSack2;
		GameSettings.matTotal = GameSettings.savedData.matTotal;
		GameSettings.availableBasket2 = GameSettings.savedData.availableBasket2;
		GameSettings.tailorWool = GameSettings.savedData.tailorWool;
		GameSettings.whiteTotal = GameSettings.savedData.whiteTotal;
		GameSettings.vehicleUped = GameSettings.savedData.vehicleUp;
		GameSettings.bar1Frame = GameSettings.savedData.bar1Frame;
		GameSettings.bar2Frame = GameSettings.savedData.bar2Frame;
		GameSettings.bar3Frame = GameSettings.savedData.bar3Frame;
		GameSettings.bar4Frame = GameSettings.savedData.bar4Frame;
		GameSettings.firstdiesheep = GameSettings.savedData.firstdiesheep;
		GameSettings.bg2played = GameSettings.savedData.bg2played;
		GameSettings.bg3played = GameSettings.savedData.bg3played;
		GameSettings.bg4played = GameSettings.savedData.bg4played;
	}
	,onUpdate: function(delta) {
		if(GameSettings.isPlaying) {
			this.checkScore();
			if(game_scenes_InmobiAdd.failedCount >= 2) {
				game_scenes_InmobiAdd.delay += delta;
				if(game_scenes_InmobiAdd.delay > 4000) {
					game_scenes_InmobiAdd.delay = 0;
					game_scenes_InmobiAdd.failedCount = 0;
					game_scenes_InmobiAdd.loadInterstitial();
				}
			}
			if(GameSettings.level == 1) {
				this.arrow.update();
				this.arrow1.update();
			}
			this.food.update();
			this.bgTray.update();
			this.waterFlow.update();
			this.bucket.update();
			this.common.clock.update();
			var _g1 = 0;
			var _g = this.sheepArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.sheepArray[i] != null) {
					this.sheepArray[i].sheep.update();
					this.sheepArray[i].sleep.update();
					this.sheepArray[i].scissor.update();
					this.sheepArray[i].head.update();
					this.sheepArray[i].popupTimer.obj.update();
					this.sheepArray[i].popupItem.obj.update();
					this.sheepArray[i].tray.obj.update();
				}
			}
			if(!this.restrictForTut2) this.sheepActions(delta);
			if(this.currentBg == "bg1") {
				this.sortFunction(delta);
				this.fillWater();
				if(game_scenes_Game.hero != null) {
					this.heroMoving(delta);
					game_scenes_Game.hero.hero.update();
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
				}
			}
			this.gameBg2.onUpdate(delta);
			this.gameBg3.onUpdate(delta);
			this.gameBg4.onUpdate(delta);
			if(GameSettings.level == 1) {
				if(GameSettings.fromMarket == true) {
					this.tm += delta;
					if(this.tm >= 40) {
						this.gameData = { };
						var k = GameSettings.level + 1;
						GameSettings.total += GameSettings.score;
						this.saveData(k);
						this.removeItems();
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("won");
						haxe_Log.trace(GameSettings.score + "//" + GameSettings.target,{ fileName : "Game.hx", lineNumber : 3808, className : "game.scenes.Game", methodName : "onUpdate"});
						fw_managers_SceneManager.changeScene(game_scenes_Levelup);
					}
				}
			} else if(!this.restrictForTut2) {
				this.tm += delta;
				if(GameSettings.sheepTotal == 0 && GameSettings.cash < 500 && GameSettings.dryWoolTotal == 0 && GameSettings.color1Total == 0 && GameSettings.color2Total == 0 && GameSettings.color3Total == 0 && GameSettings.color4Total == 0 && GameSettings.color5Total == 0 && GameSettings.milkTotal == 0 && GameSettings.woolTotal == 0 && GameSettings.flushTotal == 0 && GameSettings.woolTrayCount == 0 && this.currentItem < 18 && this.currentItem != 8) {
					GameSettings.overMsg = 1;
					this.removeItems();
					if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("zoomin");
					fw_managers_SceneManager.changeScene(game_scenes_Over);
				} else if(this.tm >= this.timeDealay) {
					this.tm = 0;
					GameSettings.time--;
					if(this.common.clock.frameIndex < 59) {
						this.common.clock.gotoFrame(this.common.clock.frameIndex + 1);
						if(this.common.clock.frameIndex > 52) {
						}
					}
					if(GameSettings.time <= 0) {
						GameSettings.time = 0;
						this.tm = this.timeDealay;
					}
					if(GameSettings.time <= 0 && !this.heroBusy) {
						haxe_Log.trace(GameSettings.score + "//" + GameSettings.target,{ fileName : "Game.hx", lineNumber : 3850, className : "game.scenes.Game", methodName : "onUpdate"});
						if(GameSettings.target > GameSettings.score) {
							GameSettings.overMsg = 2;
							this.removeItems();
							if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("zoomin");
							fw_managers_SceneManager.changeScene(game_scenes_Over);
						} else {
							if(this.currentBg == "bg1") {
								if(this.currentSheep != null) {
									this.currentSheep.state = this.currentSheep.prestate;
									this.currentSheep.set_visible(true);
									this.currentSheep = null;
									this.heroState = "noTray";
									game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
									game_scenes_Game.hero.mouseChildren = false;
									game_scenes_Game.hero.mouseEnabled = false;
									game_scenes_Game.hero.itmB.set_visible(false);
									game_scenes_Game.hero.itmF.set_visible(false);
									this.currentItem = 0;
									game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
									game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
									if(this.HItem > 0) this.currentItem = this.HItem; else this.takeCount = 0;
								}
								if(this.currentItem == 11) {
									this.takeCount = 0;
									this.currentItem = 0;
									this.pickedSack.set_visible(true);
									this.pickedSack = null;
								} else if(this.currentItem == 4) {
									this.bgTray.gotoFrame(1);
									GameSettings.woolTrayCount += this.takeCount;
									this.takeCount = 0;
									this.currentItem = 0;
								} else if(this.currentItem == 8) GameSettings.milkTotal += this.takeCount; else if(this.currentItem > 0) this.checkItem();
							} else if(this.currentBg == "bg2") {
								if(this.currentItem > 0) this.gameBg2.checkItem();
							} else if(this.currentBg == "bg3") this.gameBg3.checkItem(); else if(this.currentBg == "bg4") this.gameBg4.checkItem();
							this.gameData = { };
							var k1 = GameSettings.level + 1;
							GameSettings.total += GameSettings.score;
							this.saveData(k1);
							this.removeItems();
							if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("won");
							fw_managers_SceneManager.changeScene(game_scenes_Levelup);
						}
					}
				}
			}
		}
	}
	,checkScore: function() {
		this.common.effect.star.update();
		if(!this.meetTarget) {
			if(GameSettings.score >= GameSettings.target) {
				this.meetTarget = true;
				this.common.effect.set_scaleX(this.common.effect.set_scaleY(fw_Config.scaleRatio * 1.5));
				this.common.effect.set_x(this.common.star1.get_x());
				this.common.effect.set_y(this.common.star1.get_y());
				this.common.star1.set_visible(true);
				this.common.effect.star.play(0,true);
				this.common.effect.set_visible(true);
				this.common.effect.set_alpha(1);
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
			}
		} else if(!this.meetMedScore) {
			if(GameSettings.score >= GameSettings.medtarget) {
				this.meetMedScore = true;
				this.common.effect.set_scaleX(this.common.effect.set_scaleY(fw_Config.scaleRatio * 1.5));
				this.common.effect.set_x(this.common.star2.get_x());
				this.common.effect.set_y(this.common.star2.get_y());
				this.common.star2.set_visible(true);
				this.common.effect.star.play(0,true);
				this.common.effect.set_visible(true);
				this.common.effect.set_alpha(1);
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
			}
		} else if(!this.meetMaxScore) {
			if(GameSettings.score >= GameSettings.maxtarget) {
				this.meetMaxScore = true;
				this.common.effect.set_scaleX(this.common.effect.set_scaleY(fw_Config.scaleRatio * 1.5));
				this.common.effect.set_x(this.common.star3.get_x());
				this.common.effect.set_y(this.common.star3.get_y());
				this.common.star3.set_visible(true);
				this.common.effect.star.play(0,true);
				this.common.effect.set_visible(true);
				this.common.effect.set_alpha(1);
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
			}
		}
		if(this.common.effect.get_visible() && this.common.effect.get_alpha() > 0) {
			if(this.common.effect.star.frameIndex > 8) {
				if(this.meetMaxScore) {
					var _g = this.common.star3;
					_g.set_alpha(_g.get_alpha() + .1);
				} else if(this.meetMedScore) {
					var _g1 = this.common.star2;
					_g1.set_alpha(_g1.get_alpha() + .1);
				} else {
					var _g2 = this.common.star1;
					_g2.set_alpha(_g2.get_alpha() + .1);
				}
			}
			if(this.common.effect.star.frameIndex >= 14) {
				this.common.effect.set_visible(false);
				this.common.effect.set_alpha(0);
				this.common.effect.star.gotoFrame(0);
				this.common.effect.star.stop();
			}
		}
	}
	,sortFunction: function(delta) {
		this.sortArray.sort($bind(this,this.sortByY));
		var _g1 = 0;
		var _g = this.sortArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sortArray[i] != null) game_scenes_Game.obj1Sprite.setChildIndex(this.sortArray[i],i);
		}
	}
	,sortByY: function(a,b) {
		if(a.get_y() == b.get_y()) return 0;
		if(a.get_y() > b.get_y()) return 1;
		return -1;
	}
	,heroMoving: function(delta) {
		var sf;
		if(!this.heroBusy && this.processQueue.length > 0) {
			if(this.processQueue[0] == "bg1" || this.processQueue[0] == "bg2" || this.processQueue[0] == "bg3" || this.processQueue[0] == "bg4") this.changeBg(); else if(game_scenes_Game.currentNode.id == this.processQueue[0]) {
				this.heroBusy = true;
				if(this.currentSheep != null) {
					this.currentSheep.state = this.currentSheep.prestate;
					this.currentSheep.set_visible(true);
					this.currentSheep = null;
					this.heroState = "noTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_visible(false);
					this.currentItem = 0;
					game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
					game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
					if(this.HItem > 0) {
						this.currentItem = this.HItem;
						this.heroState = "withTray";
						game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						game_scenes_Game.hero.hero.gotoFrame(3);
						game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmB.set_visible(false);
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
						game_scenes_Game.hero.itmF.set_visible(true);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						this.HItem = 0;
					} else this.takeCount = 0;
				}
				this.angleEngine(true);
			} else {
				this.path = game_scenes_Game.grid.getPathPointsConverted(game_scenes_Game.currentNode.id,this.processQueue[0]);
				this.pathIndex = 0;
				this.nextNode = this.path.shift();
				if(this.processQueue[0] == "n4" && this.currentSheep != null) {
					sf = this.currentItem;
					if(this.HItem > 0) {
						this.currentItem = this.HItem;
						this.HItem = sf;
					}
					if(this.currentItem == 4) {
						this.bgTray.gotoFrame(1);
						GameSettings.woolTrayCount += this.takeCount;
						this.takeCount = 0;
						this.currentItem = 0;
					} else if(this.currentItem != 0) this.checkItem();
					this.currentItem = sf;
				}
				if(this.processQueue[0] != "n4" && this.currentSheep != null) {
					this.currentSheep.state = this.currentSheep.prestate;
					this.currentSheep.set_visible(true);
					this.currentSheep = null;
					this.heroState = "noTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_visible(false);
					this.currentItem = 0;
					game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
					game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
					if(this.HItem > 0) {
						this.currentItem = this.HItem;
						this.heroState = "withTray";
						game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						game_scenes_Game.hero.hero.gotoFrame(3);
						game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmB.set_visible(false);
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
						game_scenes_Game.hero.itmF.set_visible(true);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						this.HItem = 0;
					} else this.takeCount = 0;
				} else if(this.currentItem == 11) {
					this.heroState = "noTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_visible(false);
					this.takeCount = 0;
					this.currentItem = 0;
					this.pickedSack.set_visible(true);
					this.pickedSack = null;
					this.marketEnabled = true;
				}
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				this.heroBusy = true;
				this.heroMove = true;
				this.angleEngine(false);
			}
		}
		if(this.heroMove) {
			var dx = this.nextNode.x - game_scenes_Game.hero.get_x();
			var dy = this.nextNode.y - game_scenes_Game.hero.get_y();
			var angle = Math.atan2(dy,dx);
			var dist = Math.sqrt(dx * dx + dy * dy);
			if(dist >= this.speed * delta) {
				var _g = game_scenes_Game.hero;
				_g.set_x(_g.get_x() + fw_Config.convertWidth(Math.cos(angle) * this.speed * delta));
				var _g1 = game_scenes_Game.hero;
				_g1.set_y(_g1.get_y() + fw_Config.convertHeight(Math.sin(angle) * this.speed * delta));
			} else {
				game_scenes_Game.hero.set_x(fw_Config.convertWidth(this.nextNode.x));
				game_scenes_Game.hero.set_y(fw_Config.convertHeight(this.nextNode.y));
				game_scenes_Game.currentNode = this.nextNode;
				if(this.path.length > 0) {
					this.nextNode = this.path.shift();
					this.angleEngine(false);
				} else {
					game_scenes_Game.currentNode = this.nextNode;
					this.heroMove = false;
					this.angleEngine(true);
				}
			}
		}
	}
	,angleEngine: function(turn) {
		if(!turn) {
			var delX = game_scenes_Game.hero.get_x() - this.nextNode.x;
			var delY = game_scenes_Game.hero.get_y() - this.nextNode.y;
			var state = "heroidle";
			if(delX > 0 && delY > 0) {
				if(this.heroState == "withTray") state = "herowalkobjB"; else state = "herowalkB";
			} else if(delX > 0 && delY < 0) {
				if(this.heroState == "withTray") state = "herowalkobjL"; else state = "herowalkL";
			} else if(delX < 0 && delY > 0) {
				if(this.heroState == "withTray") state = "herowalkobjR"; else state = "herowalkR";
			} else if(delX < 0 && delY < 0) {
				if(this.heroState == "withTray") state = "herowalkobjF"; else state = "herowalkF";
			}
			if(this.heroState == "withTray") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames(state),10); else game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames(state),10);
			game_scenes_Game.hero.mouseChildren = false;
			game_scenes_Game.hero.mouseEnabled = false;
			game_scenes_Game.hero.hero.play(0,true);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			game_scenes_Game.hero.hero.setSmoothing(true);
			if(state == "herowalkobjF" || state == "herowalkobjL") {
				game_scenes_Game.hero.itmF.set_visible(true);
				game_scenes_Game.hero.itmB.set_visible(false);
				if(state == "herowalkobjF") {
					game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
					if(this.currentItem >= 18) {
						game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(5));
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(10));
					} else game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
				} else {
					game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(0));
					if(this.currentItem >= 18) {
						game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(5));
						game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(-10));
					} else game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
				}
			} else if(state == "herowalkobjR" || state == "herowalkobjB") {
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.itmB.set_visible(true);
				if(state == "herowalkobjR") {
					game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(30));
					if(this.currentItem >= 18) {
						game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(-5));
						game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(10));
					} else game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
				} else {
					game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(0));
					if(this.currentItem >= 18) {
						game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(-5));
						game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(-10));
					} else game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
				}
			} else {
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.itmB.set_visible(false);
			}
		} else if(game_scenes_Game.currentNode.id == "n2") {
			game_scenes_Game.hero.hero.stop();
			this.takeItem();
			this.processQueue.splice(0,2);
			this.heroBusy = false;
		} else if(game_scenes_Game.currentNode.id == "n5") {
			game_scenes_Game.hero.hero.gotoFrame(1);
			game_scenes_Game.hero.hero.stop();
			this.checkWell();
		} else if(game_scenes_Game.currentNode.id == "n3") {
			game_scenes_Game.hero.hero.stop();
			this.checkSack();
		} else if(game_scenes_Game.currentNode.id == "n4") {
			this.checkVehicle();
			this.processQueue.splice(0,2);
			this.heroBusy = false;
		} else {
			game_scenes_Game.hero.hero.stop();
			this.checkSheep();
		}
	}
	,checkSheep: function() {
		var flag = false;
		var _g1 = 0;
		var _g = this.sheepArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sheepArray[i] != null && this.sheepArray[i].node.id == this.processQueue[0]) {
				flag = true;
				var sheep = this.sheepArray[i];
				if(sheep.state == "order") {
					if(this.sheepArray[i].popupItem.obj.frameIndex == this.currentItem && this.currentItem != 6) {
						this.sheepArray[i].head.setFrames(GameSettings.d.getFrames("sheepHeadeating"),10);
						this.sheepArray[i].head.play(0,true);
						this.sheepArray[i].head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].head.setSmoothing(true);
						this.sheepArray[i].head.set_y(fw_Config.convertHeight(-40));
						this.sheepArray[i].tray.obj.gotoFrame(this.currentItem);
						this.takeCount--;
						this.sheepArray[i].popupItem.set_visible(false);
						this.sheepArray[i].popupTimer.set_visible(false);
						this.sheepArray[i].popupTimer.obj.gotoFrame(0);
						this.sheepArray[i].timer = this.setDelay("eating");
						if(GameSettings.level == 1) sheep.timer = 180;
						sheep.state = "eating";
						GameSettings.score += GameSettings.bonus;
						if(this.takeCount == 0) {
							this.heroState = "noTray";
							this.currentItem = 0;
							game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
							this.changeFrame1(game_scenes_Game.currentNode);
						} else game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						this.changeFrame1(game_scenes_Game.currentNode);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
					} else if(this.sheepArray[i].popupItem.obj.frameIndex == this.currentItem && this.currentItem == 6) {
						this.sheepArray[i].popupItem.set_visible(false);
						this.sheepArray[i].popupTimer.set_visible(false);
						this.sheepArray[i].popupTimer.obj.gotoFrame(0);
						sheep.sheep.setFrames(GameSettings.d.getFrames("sheepSleep"),15);
						sheep.sheep.gotoFrame(sheep.woolFrame);
						this.sheepArray[i].sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sheepArray[i].sheep.setSmoothing(true);
						this.sheepArray[i].head.set_visible(false);
						sheep.timer = this.setDelay("sleep");
						if(GameSettings.level == 1) sheep.timer = 60;
						this.takeCount--;
						sheep.state = "sleep";
						GameSettings.score += GameSettings.bonus;
						sheep.sleep.play(0,true);
						sheep.sleep.set_visible(true);
						if(this.takeCount == 0) {
							this.heroState = "noTray";
							this.currentItem = 0;
							game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
							this.changeFrame1(game_scenes_Game.currentNode);
						} else game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						this.changeFrame1(game_scenes_Game.currentNode);
						game_scenes_Game.hero.itmF.obj.gotoFrame(6);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
					} else {
						this.HItem = this.currentItem;
						this.heroBusy = false;
						if(sheep.woolFrame < 3) this.currentItem = 18; else if(sheep.woolFrame < 6) this.currentItem = 19; else if(sheep.woolFrame < 9) this.currentItem = 20; else this.currentItem = 21;
						this.heroState = "withTray";
						game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
						this.changeFrame1(game_scenes_Game.currentNode);
						game_scenes_Game.hero.mouseChildren = false;
						game_scenes_Game.hero.mouseEnabled = false;
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
						game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
						this.currentSheep = sheep;
						sheep.prestate = sheep.state;
						sheep.set_visible(false);
						sheep.state = "died";
						if(GameSettings.level == 1) {
							this.arrow.set_x(fw_Config.convertWidth(this.vehicle.get_x() + 400));
							this.arrow.set_y(fw_Config.convertHeight(this.vehicle.get_y() + 50));
							this.arrow.play(0,true);
							this.arrow.set_visible(true);
							this.tutorial.addMessages("vehicle");
							this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 100));
							this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() - 50));
							this.tutorial.set_visible(true);
							this.vehicle.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
							this.vehicle.buttonMode = true;
						}
					}
					this.processQueue.splice(0,2);
					this.heroBusy = false;
				} else if(sheep.state == "milk" && (this.currentItem == 7 || this.currentItem == 8)) {
					if(this.currentItem == 7) this.takeCount = 0;
					if(this.takeCount < 3) {
						this.takeCount += 1;
						this.currentItem = 8;
						this.sheepArray[i].popupItem.set_visible(false);
						this.sheepArray[i].popupTimer.set_visible(false);
						this.sheepArray[i].popupTimer.obj.gotoFrame(0);
						sheep.timer = 180 + Math.floor(Math.random() * 30);
						this.changeFrame(game_scenes_Game.currentNode);
						game_scenes_Game.hero.hero.play(0,true);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						game_scenes_Game.hero.itmB.set_visible(false);
						game_scenes_Game.hero.itmF.set_visible(false);
						this.incre = 0;
						if(GameSettings.level == 1) sheep.timer = 180; else if(GameSettings.sheepTotal > 9) sheep.timer = 90 + Math.floor(Math.random() * 30); else if(GameSettings.sheepTotal > 6) sheep.timer = 120 + Math.floor(Math.random() * 30);
						sheep.head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),10);
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("milk");
						sheep.state = "milkTake";
					} else {
						this.heroBusy = false;
						this.processQueue.splice(0,2);
					}
				} else if(sheep.state == "wool" && (this.currentItem == 4 || this.currentItem == 5)) {
					if(this.currentItem == 5) this.takeCount = 0;
					if(this.takeCount < 3) {
						this.takeCount += 1;
						this.currentItem = 8;
						this.sheepArray[i].popupItem.set_visible(false);
						this.sheepArray[i].popupTimer.set_visible(false);
						this.sheepArray[i].popupTimer.obj.gotoFrame(0);
						sheep.timer = 180 + Math.floor(Math.random() * 30);
						this.changeFrameW(game_scenes_Game.currentNode);
						game_scenes_Game.hero.hero.play(0,true);
						game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						game_scenes_Game.hero.hero.setSmoothing(true);
						game_scenes_Game.hero.itmB.set_visible(false);
						game_scenes_Game.hero.itmF.set_visible(false);
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
						this.incre = 0;
						sheep.state = "woolCut";
						sheep.sheep.setFrames(GameSettings.d.getFrames("woolProduce"),15);
						sheep.sheep.gotoFrame(0);
						sheep.sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						sheep.sheep.setSmoothing(true);
						sheep.sheep.play(0,true);
						sheep.scissor.play(0,true);
						sheep.scissor.set_visible(true);
						this.sheepArray[i].head.set_visible(false);
					} else {
						this.heroBusy = false;
						this.processQueue.splice(0,2);
					}
				} else {
					this.HItem = this.currentItem;
					this.heroBusy = false;
					if(sheep.woolFrame < 3) this.currentItem = 18; else if(sheep.woolFrame < 6) this.currentItem = 19; else if(sheep.woolFrame < 9) this.currentItem = 20; else this.currentItem = 21;
					this.heroState = "withTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
					this.changeFrame1(game_scenes_Game.currentNode);
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
					game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					game_scenes_Game.hero.hero.setSmoothing(true);
					game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
					this.currentSheep = sheep;
					sheep.prestate = sheep.state;
					sheep.set_visible(false);
					sheep.state = "died";
					if(GameSettings.level == 1) {
						this.arrow.set_x(fw_Config.convertWidth(this.vehicle.get_x() + 400));
						this.arrow.set_y(fw_Config.convertHeight(this.vehicle.get_y() + 50));
						this.arrow.play(0,true);
						this.arrow.set_visible(true);
						this.tutorial.addMessages("vehicle");
						this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 100));
						this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() - 50));
						this.tutorial.set_visible(true);
						this.vehicle.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
						this.vehicle.buttonMode = true;
					}
					this.processQueue.splice(0,2);
					this.heroBusy = false;
				}
				break;
			}
		}
		if(!flag) {
			this.heroBusy = false;
			this.processQueue.splice(0,2);
		}
		if(this.currentItem >= 18) {
			game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(5));
			game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(10));
		}
	}
	,changeFrame1: function(currentNode) {
		if(currentNode.id == "n6" || currentNode.id == "n7" || currentNode.id == "n10" || currentNode.id == "n12" || currentNode.id == "n17") game_scenes_Game.hero.hero.gotoFrame(3); else if(currentNode.id == "n9" || currentNode.id == "n14") game_scenes_Game.hero.hero.gotoFrame(2); else if(currentNode.id == "n8" || currentNode.id == "n15") game_scenes_Game.hero.hero.gotoFrame(1); else if(currentNode.id == "n16" || currentNode.id == "n13" || currentNode.id == "n11") game_scenes_Game.hero.hero.gotoFrame(0);
		if(this.heroState == "noTray") {
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_visible(false);
		} else if(game_scenes_Game.hero.hero.frameIndex == 3) {
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(30));
			game_scenes_Game.hero.itmF.set_visible(true);
		} else if(game_scenes_Game.hero.hero.frameIndex == 2) {
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(0));
			game_scenes_Game.hero.itmF.set_visible(true);
		} else if(game_scenes_Game.hero.hero.frameIndex == 1) {
			game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(30));
			game_scenes_Game.hero.itmB.set_visible(true);
			game_scenes_Game.hero.itmF.set_visible(false);
		} else if(game_scenes_Game.hero.hero.frameIndex == 0) {
			game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(0));
			game_scenes_Game.hero.itmB.set_visible(true);
			game_scenes_Game.hero.itmF.set_visible(false);
		}
	}
	,changeFrame: function(currentNode) {
		if(currentNode.id == "n6" || currentNode.id == "n7" || currentNode.id == "n10" || currentNode.id == "n12" || currentNode.id == "n17") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingF"),10); else if(currentNode.id == "n9" || currentNode.id == "n14") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingL"),10); else if(currentNode.id == "n8" || currentNode.id == "n15") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingR"),10); else if(currentNode.id == "n16" || currentNode.id == "n13" || currentNode.id == "n11") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingB"),10);
	}
	,changeFrameW: function(currentNode) {
		if(currentNode.id == "n6" || currentNode.id == "n7" || currentNode.id == "n10" || currentNode.id == "n12" || currentNode.id == "n17") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herocuttingF"),10); else if(currentNode.id == "n9" || currentNode.id == "n14") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herocuttingL"),10); else if(currentNode.id == "n8" || currentNode.id == "n15") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herocuttingR"),10); else if(currentNode.id == "n13" || currentNode.id == "n11" || currentNode.id == "n16") game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herocuttingB"),10);
	}
	,checkSack: function() {
		if(this.processQueue[1] == "sack7") {
			if(this.currentItem == 4) {
				this.bgTray.gotoFrame(1);
				GameSettings.woolTrayCount += this.takeCount;
				this.heroState = "noTray";
				this.currentItem = 0;
				this.takeCount = 0;
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.hero.gotoFrame(2);
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
			} else if(this.currentItem != 11) {
				this.checkItem();
				if(GameSettings.woolTrayCount > 0) {
					if(GameSettings.woolTrayCount <= 3) {
						this.takeCount = GameSettings.woolTrayCount;
						GameSettings.woolTrayCount = 0;
						this.bgTray.gotoFrame(0);
					} else {
						this.takeCount = 3;
						GameSettings.woolTrayCount -= 3;
					}
					this.currentItem = 4;
					this.heroState = "withTray";
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
					game_scenes_Game.hero.hero.gotoFrame(2);
					game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(0));
					game_scenes_Game.hero.itmF.set_visible(true);
					game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					game_scenes_Game.hero.hero.setSmoothing(true);
				}
			}
		} else if(this.currentItem == 4) {
			if(GameSettings.level == 1) {
				this.sackMArray[this.currentSack - 1].obj.gotoFrame(1);
				GameSettings.nextAction = true;
				this.takeCount = 0;
			} else {
				if(this.currentSack > 0 && !this.sackMArray[this.currentSack - 1].get_visible()) this.currentSack = 0;
				if(this.currentSack == 0) this.checkCSack1();
				if(this.currentSack == 0) {
					this.bgTray.gotoFrame(1);
					GameSettings.woolTrayCount += this.takeCount;
					this.takeCount = 0;
					this.currentItem = 0;
				} else if(this.currentSack > 0) {
					if(this.takeCount == 3) {
						if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 0) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							GameSettings.woolTotal++;
							this.takeCount = 0;
							this.currentSack = 0;
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 1) {
							GameSettings.woolTotal++;
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							this.takeCount = 1;
							this.currentSack = 0;
							this.checkCSack();
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 2) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							GameSettings.woolTotal++;
							this.takeCount = 2;
							this.currentSack = 0;
							this.checkCSack();
						}
					} else if(this.takeCount == 2) {
						if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 0) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(2);
							this.takeCount = 0;
							this.currentItem = 0;
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 1) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							GameSettings.woolTotal++;
							this.takeCount = 0;
							this.currentSack = 0;
							this.currentItem = 0;
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 2) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							GameSettings.woolTotal++;
							this.takeCount = 1;
							this.currentSack = 0;
							this.checkCSack();
						}
					} else if(this.takeCount == 1) {
						if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 0) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(1);
							this.takeCount = 0;
							this.currentItem = 0;
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 1) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(2);
							this.takeCount = 0;
							this.currentItem = 0;
						} else if(this.sackMArray[this.currentSack - 1].obj.frameIndex == 2) {
							this.sackMArray[this.currentSack - 1].obj.gotoFrame(3);
							GameSettings.woolTotal++;
							this.takeCount = 0;
							this.currentSack = 0;
							this.currentItem = 0;
						}
					}
				}
			}
			if(this.takeCount == 0) {
				this.heroState = "noTray";
				this.currentItem = 0;
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.hero.gotoFrame(2);
				game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(0));
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
			}
		} else {
			if(this.currentItem != 0) this.checkItem();
			var i;
			if(this.currentItem == 11) {
				this.pickedSack.set_visible(true);
				this.pickedSack = null;
				this.currentItem = 0;
			}
			i = Std.parseInt(this.processQueue[1].substring(4));
			i--;
		}
		this.processQueue.splice(0,2);
		this.heroBusy = false;
	}
	,checkVehicle: function() {
		var k;
		if(this.currentItem == 8) {
			GameSettings.milkTotal += this.takeCount;
			var _g1 = 0;
			var _g = this.milkArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(GameSettings.milkTotal > i) this.milkArray[i].set_visible(true);
			}
			this.heroState = "noTray";
			if(GameSettings.level == 1) {
				this.arrow.set_x(fw_Config.convertWidth(this.sheepArray[0].get_x() + 20));
				this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 110));
				this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 120));
				this.sheepArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
				this.sheepArray[0].buttonMode = true;
				this.arrow.play(0,true);
				this.arrow.set_visible(true);
				this.tutorial.addMessages("sheep");
				this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
				this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
				this.tutorial.set_visible(true);
			}
		} else if(this.currentItem >= 18) {
			k = GameSettings.flushTotal;
			GameSettings.flushTotal += 1;
			GameSettings.score += 2;
			if(GameSettings.flushTotal <= 4) {
				this.flushArray[k].gotoFrame(this.currentItem);
				this.flushArray[k].set_visible(true);
			}
			game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
			game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
			HxOverrides.remove(this.sortArray,this.currentSheep);
			HxOverrides.remove(this.sheepArray,this.currentSheep);
			this.heroState = "noTray";
			this.currentSheep.state = "buy";
			this.currentSheep.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
			if(GameSettings.level > 1) GameSettings.sheepTotal--;
			var n = this.currentSheep.sheepNo - 1;
			this.sheepState[n] = "buy";
			game_scenes_Game.obj1Sprite.removeChild(this.currentSheep);
			this.currentSheep = null;
			if(GameSettings.level == 1) {
				this.arrow1.set_x(fw_Config.convertWidth(this.common.hudIcon1.get_x() + 30));
				this.arrow1.set_y(fw_Config.convertHeight(this.common.hudIcon1.get_y() - 50));
				this.arrow1.play(0,true);
				this.arrow1.set_visible(true);
				this.tutorial1.addMessages("Market");
				this.tutorial1.set_x(fw_Config.convertWidth(this.arrow1.get_x() - this.tutorial1.get_width() - 10));
				this.tutorial1.set_y(fw_Config.convertHeight(this.arrow1.get_y() - 10));
				this.tutorial1.set_visible(true);
				this.common.hudIcon1.buttonMode = true;
				this.common.hudIcon1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.common,$bind($_,$_.gotoMarket)));
			}
		}
		if(this.heroState == "noTray") {
			this.heroState = "noTray";
			this.currentItem = 0;
			this.takeCount = 0;
			game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
			game_scenes_Game.hero.hero.stop();
			game_scenes_Game.hero.mouseChildren = false;
			game_scenes_Game.hero.mouseEnabled = false;
			game_scenes_Game.hero.hero.gotoFrame(2);
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_visible(false);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			game_scenes_Game.hero.hero.setSmoothing(true);
		} else {
			game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
			game_scenes_Game.hero.hero.gotoFrame(2);
			game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
			game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
			game_scenes_Game.hero.hero.stop();
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_x(fw_Config.convertWidth(0));
			game_scenes_Game.hero.itmF.set_visible(true);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			game_scenes_Game.hero.hero.setSmoothing(true);
		}
	}
	,checkCSack1: function() {
		var _g1 = 0;
		var _g = this.sackMArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sackMArray[i].get_visible() && this.sackMArray[i].obj.frameIndex < 3) {
				this.currentSack = i + 1;
				break;
			}
		}
	}
	,checkCSack: function() {
		var _g1 = 0;
		var _g = this.sackMArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sackMArray[i].get_visible() && this.sackMArray[i].obj.frameIndex < 3) {
				this.currentSack = i + 1;
				if(this.takeCount > 0) {
					if(this.takeCount == 3) this.currentSack = 0;
					this.sackMArray[i].obj.gotoFrame(this.takeCount);
					this.takeCount = 0;
					this.currentItem = 0;
				}
				break;
			}
		}
	}
	,playwatersnd: function(id) {
	}
	,checkWell: function() {
		if(this.processQueue[1] == "well") {
			this.processQueue.splice(0,2);
			if(this.bucket.frameIndex < 8 && !this.waterFlow.get_visible()) {
				if(GameSettings.musicPlaying) this.playwatersnd("water");
				this.waterFlow.set_visible(true);
				this.waterFlow.play(0,true);
				this.FlowCnt = 0;
			} else this.heroBusy = false;
		} else if(this.processQueue[1] == "bucket") {
			if(this.bucket.frameIndex > 0) {
				if(this.currentItem == 4) {
					this.bgTray.gotoFrame(1);
					GameSettings.woolTrayCount += this.takeCount;
					this.takeCount = 0;
					this.currentItem = 0;
				} else this.checkItem();
				this.bucket.gotoFrame(this.bucket.frameIndex - 1);
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
				this.currentItem = 2;
				game_scenes_Game.hero.hero.gotoFrame(1);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(30));
				game_scenes_Game.hero.itmB.set_visible(true);
				this.heroState = "withTray";
				this.takeCount = 3;
				if(GameSettings.waterTotal < 3) this.takeCount = GameSettings.waterTotal;
				GameSettings.waterTotal -= this.takeCount;
				if(GameSettings.waterTotal >= 22) this.bucket.gotoFrame(8); else if(GameSettings.waterTotal >= 19) this.bucket.gotoFrame(7); else if(GameSettings.waterTotal >= 16) this.bucket.gotoFrame(6); else if(GameSettings.waterTotal >= 13) this.bucket.gotoFrame(5); else if(GameSettings.waterTotal >= 10) this.bucket.gotoFrame(4); else if(GameSettings.waterTotal >= 7) this.bucket.gotoFrame(3); else if(GameSettings.waterTotal >= 4) this.bucket.gotoFrame(2); else if(GameSettings.waterTotal >= 1) this.bucket.gotoFrame(1); else this.bucket.gotoFrame(0);
				if(GameSettings.level == 1) {
					this.arrow.set_x(fw_Config.convertWidth(this.sheepArray[0].get_x() + 20));
					this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 110));
					this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 120));
					this.sheepArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
					this.sheepArray[0].buttonMode = true;
					this.arrow.play(0,true);
					this.arrow.set_visible(true);
					this.tutorial.addMessages("water_sheep");
					this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
					this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
					this.tutorial.set_visible(true);
				}
			}
			this.processQueue.splice(0,2);
			this.heroBusy = false;
		}
	}
	,takeItem: function() {
		var k;
		if(this.processQueue[1] == "idle") {
			if(this.currentItem == 9) {
				GameSettings.grassTotal += 3;
				this.takeCount = 0;
				if(GameSettings.grassTotal >= 1) GameSettings.grassBundle = 1;
				if(GameSettings.grassTotal >= 4) GameSettings.grassBundle = 2;
				if(GameSettings.grassTotal >= 7) GameSettings.grassBundle = 3;
				if(GameSettings.grassTotal >= 10) GameSettings.grassBundle = 4;
				if(GameSettings.grassTotal >= 13) GameSettings.grassBundle = 5;
				if(GameSettings.grassTotal >= 16) GameSettings.grassBundle = 6;
				if(GameSettings.grassTotal >= 19) GameSettings.grassBundle = 7;
				if(GameSettings.grassTotal >= 22) GameSettings.grassBundle = 8;
				if(GameSettings.grassTotal >= 25) GameSettings.grassBundle = 9;
				if(GameSettings.grassTotal >= 28) GameSettings.grassBundle = 10;
				var k1 = GameSettings.grassBundle - 1;
				if(this.grassArray.length < GameSettings.grassBundle) {
					this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
					this.grass.addChild(this.grass1);
					this.grass1.set_x(fw_Config.convertWidth(this.grassPos[k1]));
					this.grass1.set_y(fw_Config.convertHeight(this.grassPos[k1 + 10]));
					this.grass1.set_scaleX(this.grass1.set_scaleY(.8));
					this.grassArray.push(this.grass1);
					this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.grass1.setSmoothing(true);
				} else this.grassArray[k1].set_visible(true);
				GameSettings.score += GameSettings.bonus;
				if(GameSettings.level == 1) {
					this.arrow1.set_x(this.common.hudIcon2.get_x() + 30);
					this.arrow1.set_y(this.common.hudIcon2.get_y() - 50);
					this.arrow1.play(0,true);
					this.arrow1.set_visible(true);
					this.tutorial1.addMessages("gotobg21");
					this.tutorial1.set_x(this.arrow1.get_x() - this.tutorial1.get_width());
					this.tutorial1.set_y(this.arrow1.get_y() - 5);
					this.tutorial1.set_visible(true);
					this.common.hudIcon2.buttonMode = true;
					this.gameBg2.spinned = true;
					this.common.hudIcon2.buttonMode = true;
					this.common.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.common,$bind($_,$_.gotoBg)));
				}
			} else if(this.currentItem == 10) {
				GameSettings.availableSack++;
				var _g1 = 0;
				var _g = GameSettings.availableSack;
				while(_g1 < _g) {
					var i = _g1++;
					if(i < this.emptySack.length) this.emptySack[i].set_visible(true); else {
						this.sack1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
						if(i > 5) this.sackextra.addChild(this.sack1); else this.sack.addChild(this.sack1);
						this.sack1.set_x(fw_Config.convertWidth(180));
						this.sack1.set_y(fw_Config.convertHeight(this.sackPos[i]));
						this.sack1.set_scaleX(this.sack1.set_scaleY(.8));
						this.emptySack.push(this.sack1);
						this.sack1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.sack1.setSmoothing(true);
					}
				}
				if(GameSettings.level == 1) GameSettings.nextAction = true;
			} else {
			}
			this.heroState = "noTray";
			this.currentItem = 0;
			this.takeCount = 0;
			game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
			game_scenes_Game.hero.mouseChildren = false;
			game_scenes_Game.hero.mouseEnabled = false;
			game_scenes_Game.hero.hero.gotoFrame(3);
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_visible(false);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			game_scenes_Game.hero.hero.setSmoothing(true);
			this.heroBusy = false;
			this.processQueue.splice(0,2);
		} else {
			if(this.currentItem == 8) this.checkVehicle();
			if(this.currentItem == 4) {
				this.bgTray.gotoFrame(1);
				GameSettings.woolTrayCount += this.takeCount;
				this.takeCount = 0;
				this.currentItem = 0;
			} else this.checkItem();
			var flag = false;
			if(this.processQueue[1] == "grass") {
				var _g11 = 0;
				var _g2 = this.grassArray.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(this.grassArray[i1].get_visible()) {
						flag = true;
						break;
					}
				}
				if(flag) {
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
					game_scenes_Game.hero.hero.gotoFrame(0);
					game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					game_scenes_Game.hero.hero.setSmoothing(true);
					this.currentItem = 3;
					game_scenes_Game.hero.mouseChildren = false;
					game_scenes_Game.hero.mouseEnabled = false;
					game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(0));
					game_scenes_Game.hero.itmB.set_visible(true);
					this.heroState = "withTray";
				}
				this.takeCount = 3;
				if(GameSettings.grassTotal < 3) this.takeCount = GameSettings.grassTotal;
				GameSettings.grassTotal -= this.takeCount;
				if(GameSettings.grassTotal < 28) GameSettings.grassBundle = 9;
				if(GameSettings.grassTotal < 25) GameSettings.grassBundle = 8;
				if(GameSettings.grassTotal < 22) GameSettings.grassBundle = 7;
				if(GameSettings.grassTotal < 19) GameSettings.grassBundle = 6;
				if(GameSettings.grassTotal < 16) GameSettings.grassBundle = 5;
				if(GameSettings.grassTotal < 13) GameSettings.grassBundle = 4;
				if(GameSettings.grassTotal < 10) GameSettings.grassBundle = 3;
				if(GameSettings.grassTotal < 7) GameSettings.grassBundle = 2;
				if(GameSettings.grassTotal < 4) GameSettings.grassBundle = 1;
				if(GameSettings.grassTotal < 1) GameSettings.grassBundle = 0;
				var k2 = GameSettings.grassBundle;
				var _g12 = k2;
				var _g3 = this.grassArray.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					this.grassArray[k2].set_visible(false);
				}
			} else {
				if(this.processQueue[1] == "food") {
					this.currentItem = 1;
					this.takeCount = 3;
					if(GameSettings.foodTotal < 3) this.takeCount = GameSettings.foodTotal;
					GameSettings.foodTotal -= this.takeCount;
					if(GameSettings.foodTotal >= 16) {
						this.food.gotoFrame(0);
						GameSettings.foodFrame = 0;
					} else if(GameSettings.foodTotal >= 13) {
						this.food.gotoFrame(1);
						GameSettings.foodFrame = 1;
					} else if(GameSettings.foodTotal >= 10) {
						this.food.gotoFrame(2);
						GameSettings.foodFrame = 2;
					} else if(GameSettings.foodTotal >= 7) {
						this.food.gotoFrame(3);
						GameSettings.foodFrame = 3;
					} else if(GameSettings.foodTotal >= 4) {
						this.food.gotoFrame(4);
						GameSettings.foodFrame = 4;
					} else if(GameSettings.foodTotal >= 1) {
						this.food.gotoFrame(5);
						GameSettings.foodFrame = 5;
					} else {
						this.food.set_visible(false);
						GameSettings.foodFrame = 6;
					}
				} else if(this.processQueue[1] == "milk") this.currentItem = 7; else if(this.processQueue[1] == "scissor") this.currentItem = 5; else if(this.processQueue[1] == "medicine") {
					this.takeCount = 3;
					this.currentItem = 6;
					if(GameSettings.medicineTotal <= 3) {
						this.takeCount = GameSettings.medicineTotal;
						GameSettings.medicineTotal = 0;
						this.medicine1.set_visible(false);
						this.medicine.set_visible(false);
					} else GameSettings.medicineTotal -= 3;
				}
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),1);
				game_scenes_Game.hero.hero.gotoFrame(0);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
				game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(0));
				game_scenes_Game.hero.itmB.set_visible(true);
				this.heroState = "withTray";
			}
			if(GameSettings.level == 1) {
				this.arrow.set_x(fw_Config.convertWidth(this.sheepArray[0].get_x() + 20));
				this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 110));
				this.arrow.set_y(fw_Config.convertHeight(this.sheepArray[0].get_y() - 120));
				this.sheepArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
				this.sheepArray[0].buttonMode = true;
				this.arrow.play(0,true);
				this.arrow.set_visible(true);
				if(this.currentItem == 1) this.tutorial.addMessages("food_sheep"); else if(this.currentItem == 3) this.tutorial.addMessages("grass_sheep"); else if(this.currentItem == 5) this.tutorial.addMessages("scissor_sheep"); else if(this.currentItem == 6) this.tutorial.addMessages("medicine_sheep"); else if(this.currentItem == 7) this.tutorial.addMessages("milk_sheep");
				this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 60));
				this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
				this.tutorial.set_visible(true);
			}
		}
	}
	,checkItem: function() {
		var k = 0;
		var flag = false;
		if(this.currentItem == 3) {
			GameSettings.grassTotal += this.takeCount;
			if(GameSettings.grassTotal >= 1) GameSettings.grassBundle = 1;
			if(GameSettings.grassTotal >= 4) GameSettings.grassBundle = 2;
			if(GameSettings.grassTotal >= 7) GameSettings.grassBundle = 3;
			if(GameSettings.grassTotal >= 10) GameSettings.grassBundle = 4;
			if(GameSettings.grassTotal >= 13) GameSettings.grassBundle = 5;
			if(GameSettings.grassTotal >= 16) GameSettings.grassBundle = 6;
			if(GameSettings.grassTotal >= 19) GameSettings.grassBundle = 7;
			if(GameSettings.grassTotal >= 22) GameSettings.grassBundle = 8;
			if(GameSettings.grassTotal >= 25) GameSettings.grassBundle = 9;
			if(GameSettings.grassTotal >= 28) GameSettings.grassBundle = 10;
			var k1 = GameSettings.grassBundle - 1;
			this.grassArray[k1].set_visible(true);
			flag = true;
		} else if(this.currentItem == 1) {
			GameSettings.foodTotal += this.takeCount;
			this.food.set_visible(true);
			if(GameSettings.foodTotal >= 16) {
				this.food.gotoFrame(0);
				GameSettings.foodFrame = 0;
			} else if(GameSettings.foodTotal >= 13) {
				this.food.gotoFrame(1);
				GameSettings.foodFrame = 1;
			} else if(GameSettings.foodTotal >= 10) {
				this.food.gotoFrame(2);
				GameSettings.foodFrame = 2;
			} else if(GameSettings.foodTotal >= 7) {
				this.food.gotoFrame(3);
				GameSettings.foodFrame = 3;
			} else if(GameSettings.foodTotal >= 4) {
				this.food.gotoFrame(4);
				GameSettings.foodFrame = 4;
			} else if(GameSettings.foodTotal >= 1) {
				this.food.gotoFrame(5);
				GameSettings.foodFrame = 5;
			} else {
				this.food.set_visible(false);
				GameSettings.foodFrame = 6;
			}
			flag = true;
		} else if(this.currentItem == 2) {
			GameSettings.waterTotal += this.takeCount;
			if(GameSettings.waterTotal >= 22) this.bucket.gotoFrame(8); else if(GameSettings.waterTotal >= 19) this.bucket.gotoFrame(7); else if(GameSettings.waterTotal >= 16) this.bucket.gotoFrame(6); else if(GameSettings.waterTotal >= 13) this.bucket.gotoFrame(5); else if(GameSettings.waterTotal >= 10) this.bucket.gotoFrame(4); else if(GameSettings.waterTotal >= 7) this.bucket.gotoFrame(3); else if(GameSettings.waterTotal >= 4) this.bucket.gotoFrame(2); else if(GameSettings.waterTotal >= 1) this.bucket.gotoFrame(1); else this.bucket.gotoFrame(0);
			flag = true;
		} else if(this.currentItem == 6) {
			if(this.takeCount > 0) {
				this.medicine1.set_visible(true);
				this.medicine.set_visible(true);
				GameSettings.medicineTotal += this.takeCount;
			}
			flag = true;
		} else if(this.currentItem == 8) {
			GameSettings.milkTotal += this.takeCount;
			var _g1 = 0;
			var _g = this.milkArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(GameSettings.milkTotal > i) this.milkArray[i].set_visible(true);
			}
			flag = true;
		}
		if(this.currentItem == 4 || this.currentItem == 5 || this.currentItem == 7) flag = true;
		if(this.HItem >= 18) {
			flag = false;
			this.HItem = 0;
		}
		if(flag) {
			this.heroState = "noTray";
			this.currentItem = 0;
			this.takeCount = 0;
			game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
			game_scenes_Game.hero.hero.stop();
			game_scenes_Game.hero.mouseChildren = false;
			game_scenes_Game.hero.mouseEnabled = false;
			game_scenes_Game.hero.hero.gotoFrame(3);
			game_scenes_Game.hero.itmB.set_visible(false);
			game_scenes_Game.hero.itmF.set_visible(false);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			game_scenes_Game.hero.hero.setSmoothing(true);
		}
	}
	,fillWater: function() {
		if(this.waterFlow.get_visible()) {
			this.FlowCnt++;
			if(this.FlowCnt >= 5) {
				this.FlowCnt = 0;
				this.bucket.gotoFrame(this.bucket.frameIndex + 1);
				if(this.bucket.frameIndex >= 8) {
					this.waterFlow.set_visible(false);
					this.heroBusy = false;
					if(this.waterchannel != null) this.waterchannel.stop();
					GameSettings.waterTotal = 24;
					if(GameSettings.level == 1) {
						this.arrow.set_x(fw_Config.convertWidth(this.bucket.get_x() + 50));
						this.arrow.set_y(fw_Config.convertHeight(this.bucket.get_y() - 30));
						var _g = this.arrow;
						_g.set_scaleX(_g.get_scaleX() * -1);
						this.arrow.play(0,true);
						this.arrow.set_visible(true);
						this.bucketClick.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBucket));
						this.bucketClick.buttonMode = true;
						this.tutorial.addMessages("bucket");
						this.tutorial.set_x(fw_Config.convertWidth(this.arrow.get_x() - 200));
						this.tutorial.set_y(fw_Config.convertHeight(this.arrow.get_y() + 80));
						this.tutorial.set_visible(true);
					}
				}
			}
		}
	}
	,changeBg: function() {
		var fNo = 0;
		var cfNo = 0;
		if(this.currentBg == "bg1") fNo = 0; else if(this.currentBg == "bg2") fNo = 1; else if(this.currentBg == "bg3") fNo = 2; else if(this.currentBg == "bg4") fNo = 3;
		if(this.processQueue[0] == "bg1") cfNo = 0; else if(this.processQueue[0] == "bg2") cfNo = 1; else if(this.processQueue[0] == "bg3") cfNo = 2; else if(this.processQueue[0] == "bg4") cfNo = 3;
		if(this.currentBg == "bg1") {
			if(this.currentSheep != null) {
				this.currentSheep.state = this.currentSheep.prestate;
				this.currentSheep.set_visible(true);
				this.currentSheep = null;
				this.heroState = "noTray";
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				this.currentItem = 0;
				game_scenes_Game.hero.itmB.set_y(fw_Config.convertHeight(10));
				game_scenes_Game.hero.itmF.set_y(fw_Config.convertHeight(20));
				if(this.HItem > 0) this.currentItem = this.HItem; else this.takeCount = 0;
			}
			if(this.currentItem == 4) {
				this.bgTray.gotoFrame(1);
				GameSettings.woolTrayCount += this.takeCount;
				this.takeCount = 0;
				this.currentItem = 0;
				this.heroState = "noTray";
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
			} else if(this.currentItem == 11 && this.processQueue[0] != "bg2") {
				this.heroState = "noTray";
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
				game_scenes_Game.hero.mouseChildren = false;
				game_scenes_Game.hero.mouseEnabled = false;
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				this.takeCount = 0;
				this.currentItem = 0;
				this.pickedSack.set_visible(true);
				this.pickedSack = null;
				this.marketEnabled = true;
			} else this.checkItem();
			game_scenes_Game.hero.hero.setSmoothing(true);
			game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			if(this.processQueue[0] == "bg2") {
				if(this.currentItem == 11) this.marketEnabled = false;
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg2";
				this.gameBg2.addBg2();
				this.gameBg2.set_visible(true);
			} else if(this.processQueue[0] == "bg3") {
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg3";
				this.gameBg3.addBg3();
				this.gameBg3.set_visible(true);
			} else if(this.processQueue[0] == "bg4") {
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg4";
				this.gameBg4.addBg4();
				this.gameBg4.set_visible(true);
			}
		} else if(this.currentBg == "bg2") {
			if(this.processQueue[0] == "bg1") {
				this.currentBg = "bg1";
				this.gameBg2.set_visible(false);
				this.processQueue.splice(0,this.processQueue.length);
				if(this.heroState == "noTray") {
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herowalkR"),1);
					game_scenes_Game.hero.itmB.set_visible(false);
					game_scenes_Game.hero.itmF.set_visible(false);
				} else {
					game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herowalkobjR"),1);
					game_scenes_Game.hero.itmB.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmF.obj.gotoFrame(this.currentItem);
					game_scenes_Game.hero.itmB.set_x(fw_Config.convertWidth(30));
					game_scenes_Game.hero.itmB.set_visible(true);
					game_scenes_Game.hero.itmF.set_visible(false);
				}
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				game_scenes_Game.currentNode = game_scenes_Game.grid.getNodeById("n18");
				game_scenes_Game.hero.set_x(fw_Config.convertWidth(game_scenes_Game.currentNode.x));
				game_scenes_Game.hero.set_y(fw_Config.convertHeight(game_scenes_Game.currentNode.y));
				this.processQueue.splice(0,this.processQueue.length);
				this.processQueue = ["n2","idle"];
			} else if(this.processQueue[0] == "bg3") {
				if(this.currentItem == 13) this.marketEnabled = false;
				this.processQueue.splice(0,this.processQueue.length);
				this.gameBg2.set_visible(false);
				this.currentBg = "bg3";
				this.gameBg3.addBg3();
				this.gameBg3.set_visible(true);
			} else if(this.processQueue[0] == "bg4") {
				this.processQueue.splice(0,this.processQueue.length);
				this.gameBg2.set_visible(false);
				this.currentBg = "bg4";
				this.gameBg4.addBg4();
				this.gameBg4.set_visible(true);
			}
		} else if(this.currentBg == "bg3") {
			if(this.processQueue[0] == "bg1") {
				this.currentBg = "bg1";
				this.gameBg3.set_visible(false);
				this.processQueue.splice(0,this.processQueue.length);
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herowalkR"),1);
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				game_scenes_Game.currentNode = game_scenes_Game.grid.getNodeById("n18");
				game_scenes_Game.hero.set_x(fw_Config.convertWidth(game_scenes_Game.currentNode.x));
				game_scenes_Game.hero.set_y(fw_Config.convertHeight(game_scenes_Game.currentNode.y));
				this.processQueue.splice(0,this.processQueue.length);
				this.processQueue = ["n2","idle"];
			} else if(this.processQueue[0] == "bg2") {
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg2";
				this.gameBg3.set_visible(false);
				this.gameBg2.addBg2();
				this.gameBg2.set_visible(true);
			} else if(this.processQueue[0] == "bg4") {
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg4";
				this.gameBg3.set_visible(false);
				this.gameBg4.addBg4();
				this.gameBg4.set_visible(true);
			}
		} else if(this.currentBg == "bg4") {
			if(this.processQueue[0] == "bg1") {
				this.currentBg = "bg1";
				this.gameBg4.set_visible(false);
				this.processQueue.splice(0,this.processQueue.length);
				game_scenes_Game.hero.hero.setFrames(GameSettings.d.getFrames("herowalkR"),1);
				game_scenes_Game.hero.itmB.set_visible(false);
				game_scenes_Game.hero.itmF.set_visible(false);
				game_scenes_Game.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				game_scenes_Game.hero.hero.setSmoothing(true);
				game_scenes_Game.currentNode = game_scenes_Game.grid.getNodeById("n18");
				game_scenes_Game.hero.set_x(fw_Config.convertWidth(game_scenes_Game.currentNode.x));
				game_scenes_Game.hero.set_y(fw_Config.convertHeight(game_scenes_Game.currentNode.y));
				this.processQueue.splice(0,this.processQueue.length);
				this.processQueue = ["n2","idle"];
			} else if(this.processQueue[0] == "bg2") {
				this.processQueue.splice(0,this.processQueue.length);
				this.currentBg = "bg2";
				this.gameBg4.set_visible(false);
				this.gameBg2.addBg2();
				this.gameBg2.set_visible(true);
			} else if(this.processQueue[0] == "bg3") {
				this.processQueue.splice(0,this.processQueue.length);
				this.gameBg4.set_visible(false);
				this.currentBg = "bg3";
				this.gameBg3.addBg3();
				this.gameBg3.set_visible(true);
			}
		}
		this.changeIcon(fNo,cfNo);
	}
	,changeIcon: function(fNo,cfNo) {
		if(this.common.hudIcon2.frameIndex == cfNo) this.common.hudIcon2.gotoFrame(fNo); else if(this.common.hudIcon3.frameIndex == cfNo) this.common.hudIcon3.gotoFrame(fNo);
	}
	,removeBg1Items: function() {
		this.scissor.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
		this.medicine.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
		this.milk.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
		this.well.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
		game_scenes_Game.bg1Sprite.removeChild(this.bg1);
		this.bg1 = null;
		game_scenes_Game.bg1Sprite.removeChild(this.well);
		this.well = null;
		game_scenes_Game.bg1Sprite.removeChild(this.medicine);
		this.medicine = null;
		game_scenes_Game.bg1Sprite.removeChild(this.milk);
		this.milk = null;
		game_scenes_Game.bg1Sprite.removeChild(this.scissor);
		this.scissor = null;
		this.sortArray.splice(0,1);
		game_scenes_Game.obj1Sprite.removeChild(game_scenes_Game.hero);
		game_scenes_Game.hero = null;
	}
	,removeItems: function() {
		if(GameSettings.level == 1) {
			this.removeChild(this.arrow);
			fw_managers_SceneManager.removeFromHUD(this.arrow1);
			this.tutorial1.onExit();
			fw_managers_SceneManager.removeFromHUD(this.tutorial1);
			this.tutorial.onExit();
			this.removeChild(this.tutorial);
		} else {
			this.scissor.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnScissor));
			this.medicine.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMedicine));
			this.milk.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMilk));
			this.well.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnWell));
			this.vehicle.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnVehicle));
			this.bgTray.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnbgTray));
			this.foodClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnFood));
			this.sack.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.sackextra.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.grassClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
			this.bucketClick.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBucket));
			var _g1 = 0;
			var _g = this.sheepArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.sheepArray[i] != null) this.sheepArray[i].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSheep));
			}
			var _g11 = 0;
			var _g2 = this.sackMArray.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.sackMArray[i1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSackM));
			}
			this.clickbg.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnclickbg));
		}
		this.sortArray.splice(0,this.sortArray.length);
		game_scenes_Game.bg1Sprite.removeChild(this.clickbg);
		game_scenes_Game.bg1Sprite.removeChild(this.bg1);
		this.bg1 = null;
		game_scenes_Game.bg1Sprite.removeChild(this.well);
		this.well = null;
		game_scenes_Game.bg1Sprite.removeChild(this.medicine);
		this.medicine = null;
		game_scenes_Game.bg1Sprite.removeChild(this.milk);
		this.milk = null;
		game_scenes_Game.bg1Sprite.removeChild(this.scissor);
		this.scissor = null;
		this.sortArray.splice(0,1);
		game_scenes_Game.obj1Sprite.removeChild(game_scenes_Game.hero);
		game_scenes_Game.hero = null;
		game_scenes_Game.bg1Sprite.removeChild(this.cart12);
		this.cart12 = null;
		game_scenes_Game.bg1Sprite.removeChild(this.vehicle);
		this.vehicle = null;
		var k;
		this.common.onExit();
		this.gameBg2.onExit();
		this.gameBg3.onExit();
		if(game_scenes_Game.bg1Sprite.get_numChildren() > 0) {
			k = game_scenes_Game.bg1Sprite.get_numChildren();
			var _g3 = 0;
			while(_g3 < k) {
				var i2 = _g3++;
				game_scenes_Game.bg1Sprite.removeChildAt(0);
			}
		}
		if(game_scenes_Game.obj1Sprite.get_numChildren() > 0) {
			k = game_scenes_Game.obj1Sprite.get_numChildren();
			var _g4 = 0;
			while(_g4 < k) {
				var i3 = _g4++;
				game_scenes_Game.obj1Sprite.removeChildAt(0);
			}
		}
		if(game_scenes_Game.cartSprite.get_numChildren() > 0) {
			k = game_scenes_Game.cartSprite.get_numChildren();
			var _g5 = 0;
			while(_g5 < k) {
				var i4 = _g5++;
				game_scenes_Game.cartSprite.removeChildAt(0);
			}
		}
		if(this.get_numChildren() > 0) {
			k = this.get_numChildren();
			var _g6 = 0;
			while(_g6 < k) {
				var i5 = _g6++;
				this.removeChildAt(0);
			}
		}
	}
	,onExit: function() {
		this.removeEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.onPause));
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
	}
	,__class__: game_scenes_Game
});
var game_scenes_Game2 = function(gm) {
	openfl_display_Sprite.call(this);
	this.gm1 = gm;
	this.onInit();
};
$hxClasses["game.scenes.Game2"] = game_scenes_Game2;
game_scenes_Game2.__name__ = ["game","scenes","Game2"];
game_scenes_Game2.__super__ = openfl_display_Sprite;
game_scenes_Game2.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.grid = new fw_ai_pathfinding_node_Grid();
		this.grid.parseXML(Xml.parse("<nodes height=\"640\" width=\"960\"><node x=\"441\" join=\"n23,n4,n1,n5\" y=\"152\" id=\"n1\"/><node x=\"620\" join=\"n3,n23,n12\" y=\"255\" id=\"n2\"/><node x=\"725\" join=\"n2,n16\" y=\"318\" id=\"n3\"/><node x=\"365\" join=\"n21,n1,n9,n5\" y=\"198\" id=\"n4\"/><node x=\"230\" join=\"n6,n4,n22,n21,n1\" y=\"278\" id=\"n5\"/><node x=\"153\" join=\"n18,n21,n5,n6\" y=\"323\" id=\"n6\"/><node x=\"95\" join=\"n15,n18\" y=\"357\" id=\"n7\"/><node x=\"230\" join=\"n18,n9,n22,n8\" y=\"278\" id=\"n8\"/><node x=\"365\" join=\"n8,n4\" y=\"198\" id=\"n9\"/><node x=\"273\" join=\"n19\" y=\"460\" id=\"n10\"/><node x=\"402\" join=\"n20,n19\" y=\"384\" id=\"n11\"/><node x=\"541\" join=\"n2,n20\" y=\"302\" id=\"n12\"/><node x=\"703\" join=\"n16,n17\" y=\"379\" id=\"n13\"/><node x=\"289\" join=\"n17,n7,n20\" y=\"244\" id=\"n15\"/><node x=\"770\" join=\"n3,n13\" y=\"339\" id=\"n16\"/><node x=\"611\" join=\"n13,n15,n21,n20,n17\" y=\"432\" id=\"n17\"/><node x=\"152\" join=\"n7,n8,n19,n6\" y=\"323\" id=\"n18\"/><node x=\"328\" join=\"n11,n10,n18\" y=\"430\" id=\"n19\"/><node x=\"464\" join=\"n12,n11,n17,n15\" y=\"346\" id=\"n20\"/><node x=\"289\" join=\"n6,n17,n4,n5\" y=\"243\" id=\"n21\"/><node x=\"230\" join=\"n8,n5\" y=\"278\" id=\"n22\"/><node x=\"529\" join=\"n1,n2\" y=\"201\" id=\"n23\"/></nodes>"));
		this.gm1.processQueue = [];
		this.tapState = "idle";
		this.tapName = "Cleaning_fill_";
		this.gm1.heroBusy = false;
		this.heroMove = false;
		this.gm1.heroState = "noTray";
		this.speed = 3;
		this.gm1.currentItem = 0;
		this.spinned = false;
		this.tapTimer = 0;
		this.bg2Sprite = new openfl_display_Sprite();
		this.addChild(this.bg2Sprite);
		this.obj2Sprite = new openfl_display_Sprite();
		this.addChild(this.obj2Sprite);
		this.fullBkt = new openfl_display_Sprite();
		this.fullBkt.get_graphics().beginFill(2228224,0);
		this.fullBkt.get_graphics().drawRect(180,80,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.fullBkt.get_graphics().endFill();
		this.obj2Sprite.addChild(this.fullBkt);
		this.fullBkt.set_x(fw_Config.convertWidth(100));
		this.fullBkt.set_y(fw_Config.convertHeight(15));
		this.fullBktArray = [];
		this.ebktPosf = [180,150,120,90,210,180,150,120,240,210,180,150,60,75,90,105,75,90,105,120,90,105,120,135];
		var _g1 = 0;
		var _g = GameSettings.dryWoolTotal;
		while(_g1 < _g) {
			var i = _g1++;
			this.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket2"));
			this.fullBkt.addChild(this.busket1);
			this.busket1.set_x(fw_Config.convertWidth(this.ebktPosf[i]));
			this.busket1.set_y(fw_Config.convertHeight(this.ebktPosf[i + 12]));
			this.busket1.set_scaleX(this.busket1.set_scaleY(.8));
			this.fullBktArray.push(this.busket1);
			this.busket1.setSmoothing(true);
			this.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.sack = new openfl_display_Sprite();
		this.sack.get_graphics().beginFill(2228224,0);
		this.sack.get_graphics().drawRect(180,80,fw_Config.convertWidth(80),fw_Config.convertHeight(80));
		this.sack.get_graphics().endFill();
		this.obj2Sprite.addChild(this.sack);
		this.sack.set_x(fw_Config.convertWidth(-60));
		this.sack.set_y(fw_Config.convertHeight(80));
		this.sack.set_name("sack");
		this.emptySack = [];
		this.sack2Pos = [125,117,109,101,93,85,77,69,61,53,45,37];
		var _g11 = 0;
		var _g2 = GameSettings.availableSack2;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.sack1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
			this.sack.addChild(this.sack1);
			this.sack1.set_x(fw_Config.convertWidth(180));
			this.sack1.set_y(fw_Config.convertHeight(this.sack2Pos[i1]));
			this.sack1.set_scaleX(this.sack1.set_scaleY(.8));
			this.emptySack.push(this.sack1);
			this.sack1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.sack1.setSmoothing(true);
		}
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat_gameBg1"));
		this.obj2Sprite.addChild(this.mat);
		this.mat.set_x(fw_Config.convertWidth(510));
		this.mat.set_y(fw_Config.convertHeight(75));
		this.mat.set_scaleX(this.mat.set_scaleY(.8));
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.tap = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("Cleaning_fill_"));
		this.obj2Sprite.addChild(this.tap);
		this.tap.setFrames(GameSettings.c.getFrames(this.tapName),15);
		this.tap.set_x(fw_Config.convertWidth(710));
		this.tap.set_y(fw_Config.convertHeight(150));
		this.tap.set_scaleX(this.tap.set_scaleY(.8));
		this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.tap.setSmoothing(true);
		this.tap.stop();
		this.matSprite = new openfl_display_Sprite();
		this.matSprite.get_graphics().beginFill(2228224,0);
		this.matSprite.get_graphics().drawRect(150,50,fw_Config.convertWidth(230),fw_Config.convertHeight(130));
		this.matSprite.get_graphics().endFill();
		this.obj2Sprite.addChild(this.matSprite);
		this.matSprite.set_x(fw_Config.convertWidth(390));
		this.matSprite.set_y(fw_Config.convertHeight(40));
		this.matSprite.set_name("sack");
		this.sackMArray = [];
		this.sackM2Pos = [260,310,200,255,150,205,90,60,60,30,30,0];
		var _g12 = 0;
		var _g3 = GameSettings.wetWoolTotal;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.sackM = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack0004"));
			this.matSprite.addChild(this.sackM);
			this.sackM.set_x(fw_Config.convertWidth(this.sackM2Pos[i2]));
			this.sackM.set_y(fw_Config.convertHeight(this.sackM2Pos[i2 + 6]));
			this.sackM.set_scaleX(this.sackM.set_scaleY(.8));
			this.sackMArray.push(this.sackM);
			this.sackM.setSmoothing(true);
			this.sackM.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.sortFunctionSkm();
		this.sackMArray.reverse();
		this.emptyBkt = new openfl_display_Sprite();
		this.emptyBkt.get_graphics().beginFill(2228224,0);
		this.emptyBkt.get_graphics().drawRect(180,80,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.emptyBkt.get_graphics().endFill();
		this.obj2Sprite.addChild(this.emptyBkt);
		this.emptyBkt.set_x(fw_Config.convertWidth(-100));
		this.emptyBkt.set_y(fw_Config.convertHeight(125));
		this.emptyBktArray = [];
		this.ebktPos = [180,150,210,180,180,150,210,180,180,150,210,180,60,75,75,90,30,45,45,60,0,15,15,30];
		var _g13 = 0;
		var _g4 = GameSettings.availableBasket;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
			this.emptyBkt.addChild(this.busket1);
			this.busket1.set_x(fw_Config.convertWidth(this.ebktPos[i3]));
			this.busket1.set_y(fw_Config.convertHeight(this.ebktPos[i3 + 12]));
			this.busket1.set_scaleX(this.busket1.set_scaleY(.8));
			this.emptyBktArray.push(this.busket1);
			this.busket1.setSmoothing(true);
			this.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.tapBkt = new game_scenes_ObjGame("sack");
		this.tapBkt.obj.setFrames(GameSettings.d.getFrames("basket"),5);
		this.obj2Sprite.addChild(this.tapBkt);
		this.tapBkt.set_x(fw_Config.convertWidth(760));
		this.tapBkt.set_y(fw_Config.convertHeight(250));
		this.tapBkt.set_scaleX(this.tapBkt.set_scaleY(.8));
		this.tapBkt.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.tapBkt.obj.setSmoothing(true);
		this.tapBkt.id = "tapBkt";
		this.tapBkt.set_visible(false);
		if(GameSettings.gameLoaded) {
			this.tapState = GameSettings.savedData.tapState;
			this.tapTimer = GameSettings.savedData.tapTimer;
			this.tap.gotoFrame(GameSettings.savedData.tapFrame);
			this.tapBkt.obj.gotoFrame(GameSettings.savedData.tapBktFrame);
			this.tapBkt.set_visible(GameSettings.savedData.tapBktV);
			this.tapName = GameSettings.savedData.tapName;
			this.tap.setFrames(GameSettings.c.getFrames(this.tapName),15);
			this.tap.gotoFrame(GameSettings.savedData.tapFrame);
			this.tap.stop();
			this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tap.setSmoothing(true);
			if(this.tapState == "washing" || this.tapState == "waterFilling" || this.tapState == "washStart" || this.tapState == "washFinish") this.tap.play(0,true);
		}
		this.grassMain = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("grassfield"));
		this.obj2Sprite.addChild(this.grassMain);
		this.grassMain.set_x(fw_Config.convertWidth(470));
		this.grassMain.set_y(fw_Config.convertHeight(320));
		this.grassMain.setSmoothing(true);
		this.grassMain.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.grassMain1 = new openfl_display_Sprite();
		this.grassMain1.get_graphics().beginFill(2228224,0);
		this.grassMain1.get_graphics().drawRect(0,0,fw_Config.convertWidth(500),fw_Config.convertHeight(250));
		this.grassMain1.get_graphics().endFill();
		this.obj2Sprite.addChild(this.grassMain1);
		this.grassMain1.set_x(fw_Config.convertWidth(500));
		this.grassMain1.set_y(fw_Config.convertHeight(580));
		this.grassMain1.set_rotation(-30);
		this.matArray = [];
		this.matPos = [160,295,430,320,455,590,480,400,320,575,495,415];
		haxe_Log.trace(GameSettings.matTotal,{ fileName : "Game2.hx", lineNumber : 349, className : "game.scenes.Game2", methodName : "onInit"});
		var _g14 = 0;
		var _g5 = GameSettings.matTotal;
		while(_g14 < _g5) {
			var i4 = _g14++;
			this.matM = new game_scenes_ObjMat();
			this.matM.obj.setFrames(GameSettings.c.getFrames("mat_drying_"),15);
			this.obj2Sprite.addChild(this.matM);
			this.matM.set_x(fw_Config.convertWidth(this.matPos[i4]));
			this.matM.set_y(fw_Config.convertHeight(this.matPos[i4 + 6]));
			this.matM.set_scaleX(this.matM.set_scaleY(.8));
			this.matM.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.matM.obj.setSmoothing(true);
			this.mat1 = new game_scenes_Matsp();
			this.obj2Sprite.addChild(this.mat1);
			this.mat1.set_scaleX(this.mat1.set_scaleY(.8));
			this.mat1.set_x(fw_Config.convertWidth(this.matPos[i4] - 100));
			this.mat1.set_y(fw_Config.convertHeight(this.matPos[i4 + 6] - 75));
			this.mat1.set_rotation(-45);
			if(i4 == 0) {
				this.matM.id = "mat1";
				this.matM.node = this.grid.getNodeById("n7");
				this.mat1.id = "mat1";
				this.mat1.node = this.grid.getNodeById("n7");
			} else if(i4 == 1) {
				this.matM.id = "mat2";
				this.matM.node = this.grid.getNodeById("n8");
				this.mat1.id = "mat2";
				this.mat1.node = this.grid.getNodeById("n8");
			} else if(i4 == 2) {
				this.matM.id = "mat3";
				this.matM.node = this.grid.getNodeById("n9");
				this.mat1.id = "mat3";
				this.mat1.node = this.grid.getNodeById("n9");
			} else if(i4 == 3) {
				this.matM.id = "mat4";
				this.matM.node = this.grid.getNodeById("n10");
				this.mat1.id = "mat4";
				this.mat1.node = this.grid.getNodeById("n10");
			} else if(i4 == 4) {
				this.matM.id = "mat5";
				this.matM.node = this.grid.getNodeById("n11");
				this.mat1.id = "mat5";
				this.mat1.node = this.grid.getNodeById("n11");
			} else if(i4 == 5) {
				this.matM.id = "mat6";
				this.matM.node = this.grid.getNodeById("n12");
				this.mat1.id = "mat6";
				this.mat1.node = this.grid.getNodeById("n12");
			}
			this.matM.mat = this.mat1;
			this.matArray.push(this.matM);
			this.matM.mouseChildren = false;
			this.matM.mouseEnabled = false;
			if(GameSettings.level > 1 && GameSettings.bg2played) {
				this.mat1.buttonMode = true;
				this.mat1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
			}
			if(i4 >= GameSettings.matTotal) {
			}
			this.matArray[i4].obj.gotoFrame(0);
			this.matArray[i4].obj.stop();
			this.matArray[i4].state = "upgrade";
		}
		this.matArray[0].state = "idle";
		var k = 0;
		if(GameSettings.gameLoaded) {
			var _g15 = 0;
			var _g6 = GameSettings.matTotal;
			while(_g15 < _g6) {
				var i5 = _g15++;
				this.matArray[i5].state = GameSettings.savedData.matArray[k];
				this.matArray[i5].obj.gotoFrame(GameSettings.savedData.matArray[k + 1]);
				if(this.matArray[i5].state == "spinning" || this.matArray[i5].state == "spinned") {
					this.matclock = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("timer_"));
					this.matArray[i5].addChild(this.matclock);
					this.matclock.set_x(fw_Config.convertWidth(20));
					this.matclock.set_y(fw_Config.convertHeight(-60));
					this.matclock.set_scaleX(this.matclock.set_scaleY(.5));
					this.matclock.setSmoothing(true);
					this.matclock.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.matclock.gotoFrame(GameSettings.savedData.matArray[k + 2]);
					this.matArray[i5].clock = this.matclock;
					this.matArray[i5].timer = 0;
					this.matbkt = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("basket"));
					this.matArray[i5].addChild(this.matbkt);
					this.matbkt.set_x(fw_Config.convertWidth(70));
					this.matbkt.set_y(fw_Config.convertHeight(-120));
					this.matbkt.set_scaleX(this.matbkt.set_scaleY(.8));
					this.matbkt.setSmoothing(true);
					this.matbkt.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.matArray[i5].bkt = this.matbkt;
					this.matbkt.gotoFrame(0);
					this.matbkt.stop();
				}
				k += 3;
			}
		}
		this.grass = new openfl_display_Sprite();
		this.grass.get_graphics().beginFill(2228224,0);
		this.grass.get_graphics().drawRect(320,60,fw_Config.convertWidth(100),fw_Config.convertHeight(80));
		this.grass.get_graphics().endFill();
		this.obj2Sprite.addChild(this.grass);
		this.grass.set_x(fw_Config.convertWidth(380));
		this.grass.set_y(fw_Config.convertHeight(320));
		this.grass.set_name("grass");
		this.grassArray = [];
		this.grass2Pos = [370,350,330,360,340,65,80,95,60,75];
		var _g16 = 0;
		var _g7 = GameSettings.grassBundle2;
		while(_g16 < _g7) {
			var i6 = _g16++;
			this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
			this.grass.addChild(this.grass1);
			this.grass1.set_x(fw_Config.convertWidth(this.grass2Pos[i6]));
			this.grass1.set_y(fw_Config.convertHeight(this.grass2Pos[i6 + 5]));
			this.grassArray.push(this.grass1);
			this.grass1.setSmoothing(true);
			this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		if(GameSettings.level > 1 && GameSettings.bg2played) {
			this.grassMain1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrassField));
			this.grass.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
			this.emptyBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnemptyBkt));
			this.fullBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnfullBkt));
			this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.tap.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
			this.tapBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntapBkt));
			this.matSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnsackMain));
			this.matSprite.buttonMode = true;
			this.grassMain1.buttonMode = true;
			this.grass.buttonMode = true;
			this.emptyBkt.buttonMode = true;
			this.fullBkt.buttonMode = true;
			this.sack.buttonMode = true;
			this.tapBkt.buttonMode = true;
			this.tap.buttonMode = true;
		}
		this.hero = new game_scenes_Hero(this.gm1);
		this.addChild(this.hero);
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		this.hero.itmB.set_visible(false);
		this.hero.itmF.set_visible(false);
		this.hero.mouseChildren = false;
		this.hero.mouseEnabled = false;
	}
	,addListeners: function() {
		this.fullBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnfullBkt));
		this.fullBkt.buttonMode = true;
		if(!this.grassMain1.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
			this.grassMain1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrassField));
			this.grass.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
			this.emptyBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnemptyBkt));
			this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.tap.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
			this.tapBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntapBkt));
			this.matSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnsackMain));
			this.mat1.buttonMode = true;
			this.mat1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
			this.matSprite.buttonMode = true;
			this.grassMain1.buttonMode = true;
			this.grass.buttonMode = true;
			this.emptyBkt.buttonMode = true;
			this.sack.buttonMode = true;
			this.tapBkt.buttonMode = true;
			this.tap.buttonMode = true;
		}
	}
	,addBg2: function() {
		this.bg2 = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/gameBg4.png"));
		this.bg2Sprite.addChild(this.bg2);
		this.bg2.set_x(fw_Config.convertWidth(0));
		this.bg2.set_y(fw_Config.convertHeight(0));
		this.bg2.smoothing = true;
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		if(this.gm1.heroState == "noTray") {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(2);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.processQueue = ["n23","idle"];
			this.gm1.marketEnabled = true;
			if(GameSettings.level == 1 || !GameSettings.bg2played && GameSettings.bg3played) {
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.sack.get_x() + 220));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.sack.get_y() + 70));
				this.gm1.arrow.play(0,true);
				this.gm1.arrow.set_visible(true);
				this.gm1.tutorial.addMessages("sack2");
				this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x()));
				this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 80));
				this.gm1.tutorial.set_visible(true);
				this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
				this.sack.buttonMode = true;
			}
		} else {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmB.set_x(fw_Config.convertWidth(0));
			this.hero.itmB.set_visible(true);
			this.hero.itmF.set_visible(false);
			if(this.gm1.currentItem == 11) {
				GameSettings.woolPlaceTotal++;
				this.gm1.processQueue = ["n2","idle"];
			} else {
				this.gm1.marketEnabled = true;
				this.gm1.processQueue = ["n6","idle"];
			}
		}
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.hero.setSmoothing(true);
		if(GameSettings.level > 1 && GameSettings.bg2played && !GameSettings.bg3played) this.drywoolForTut();
	}
	,drywoolForTut: function() {
		if(GameSettings.dryWoolTotal > 0) {
			this.gm1.arrow.set_x(fw_Config.convertWidth(this.fullBkt.get_x() + 220));
			this.gm1.arrow.set_y(fw_Config.convertHeight(this.fullBkt.get_y() + 70));
			this.gm1.arrow.play(0,true);
			this.gm1.arrow.set_visible(true);
			this.gm1.tutorial.addMessages("sack");
			this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 100));
			this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 70));
			this.gm1.tutorial.set_visible(true);
		}
	}
	,sortFunctionSkm: function() {
		this.sackMArray.sort($bind(this,this.sortByY));
		var _g1 = 0;
		var _g = this.sackMArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.matSprite.setChildIndex(this.sackMArray[i],i);
		}
	}
	,sortByY: function(a,b) {
		if(a.get_y() == b.get_y()) return 0;
		if(a.get_y() > b.get_y()) return 1;
		return -1;
	}
	,startItem: function(e) {
		e.currentTarget.startDrag();
	}
	,stopItem: function(e) {
		this.stopDrag();
	}
	,clickOnGrassField: function(e) {
		if(!this.gm1.restrictForTut3) {
			var k;
			var count = 5;
			if(this.gm1.currentItem == 9) count = 4;
			if(GameSettings.grassBundle2 < count) {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				GameSettings.grassBundle2++;
				if(this.grassArray.length >= GameSettings.grassBundle2) {
					var _g1 = 0;
					var _g = this.grassArray.length;
					while(_g1 < _g) {
						var i = _g1++;
						if(this.grassArray[i].get_visible() == false) {
							this.grassArray[i].set_visible(true);
							break;
						}
					}
				} else {
					k = GameSettings.grassBundle2 - 1;
					this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
					this.grass.addChild(this.grass1);
					this.grass1.set_x(fw_Config.convertWidth(this.grass2Pos[k]));
					this.grass1.set_y(fw_Config.convertHeight(this.grass2Pos[k + 5]));
					this.grassArray.push(this.grass1);
					this.grass1.setSmoothing(true);
					this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				}
			}
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.grassMain1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrassField));
				this.grassMain1.buttonMode = false;
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.grass.get_x() + 410));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.grass.get_y() + 10));
				this.gm1.tutorial.addMessages("grass2");
				this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 200));
				this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() - 50));
				this.gm1.tutorial.set_visible(true);
				this.grass.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
				this.grass.buttonMode = true;
			}
		}
	}
	,clickOnGrass: function(e) {
		if(!this.gm1.restrictForTut3) {
			if(this.grassArray.length > 0) {
				if(this.grassArray[0].get_visible()) {
					if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
					this.gm1.processQueue.push("n13");
					this.gm1.processQueue.push("grass");
					if(GameSettings.level == 1 || !GameSettings.bg2played) {
						this.gm1.arrow.stop();
						this.gm1.arrow.set_visible(false);
						this.gm1.tutorial.set_visible(false);
						this.grass.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
						this.grass.buttonMode = false;
					}
				}
			}
		}
	}
	,clickOnemptyBkt: function(e) {
		if(!this.gm1.restrictForTut3) {
			if(this.tapBkt.get_visible() == false && this.gm1.currentItem != 12 && GameSettings.availableBasket > 0) {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				this.tapBkt.obj.gotoFrame(0);
				this.tapBkt.set_visible(true);
				var k;
				var _g1 = 0;
				var _g = this.emptyBktArray.length;
				while(_g1 < _g) {
					var i = _g1++;
					k = this.emptyBktArray.length - 1 - i;
					if(this.emptyBktArray[k].get_visible()) {
						this.emptyBktArray[k].set_visible(false);
						GameSettings.availableBasket--;
						this.emptyBkt.buttonMode = false;
						break;
					}
				}
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.set_x(fw_Config.convertWidth(this.tap.get_x() + 100));
					this.gm1.arrow.set_y(fw_Config.convertHeight(this.tap.get_y() + 50));
					this.emptyBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnemptyBkt));
					this.emptyBkt.buttonMode = false;
					this.gm1.tutorial.addMessages("FillSack");
					this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 200));
					this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 70));
					this.gm1.tutorial.set_visible(true);
					this.tap.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
					this.tap.buttonMode = true;
				}
			}
		}
	}
	,clickOnfullBkt: function(e) {
		if(!this.gm1.restrictForTut3) {
			if(GameSettings.dryWoolTotal > 0) {
				this.gm1.processQueue.push("n4");
				this.gm1.processQueue.push("busket");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1 || !GameSettings.bg2played || !GameSettings.bg3played) {
					this.gm1.arrow.stop();
					this.gm1.arrow.set_visible(false);
					this.gm1.tutorial.set_visible(false);
					this.fullBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnfullBkt));
					this.fullBkt.buttonMode = false;
					if(GameSettings.bg2played && !GameSettings.bg3played) {
					}
				}
			}
		}
	}
	,clickOnSack: function(e) {
		if(!this.gm1.restrictForTut3) {
			if(GameSettings.availableSack2 > 0) {
				this.gm1.processQueue.push("n5");
				this.gm1.processQueue.push("sack");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.stop();
					this.gm1.arrow.set_visible(false);
					this.gm1.tutorial.set_visible(false);
					this.sack.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
					this.sack.buttonMode = false;
				}
			}
		}
	}
	,clickOnsackMain: function(e) {
		if(!this.gm1.restrictForTut3) {
			this.gm1.processQueue.push("n2");
			this.gm1.processQueue.push("sackM");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow.stop();
				this.gm1.arrow.set_visible(false);
				this.gm1.tutorial.set_visible(false);
				this.matSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnsackMain));
				this.matSprite.buttonMode = false;
			}
		}
	}
	,clickOntap: function(e) {
		if(!this.gm1.restrictForTut3) {
			this.gm1.processQueue.push("n3");
			this.gm1.processQueue.push("tap");
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow.stop();
				this.gm1.arrow.set_visible(false);
				this.gm1.tutorial.set_visible(false);
				this.tap.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
				this.tap.buttonMode = false;
			}
		}
	}
	,clickOntapBkt: function(e) {
		if(!this.gm1.restrictForTut3) {
			if(this.tapBkt.get_visible()) {
				this.gm1.processQueue.push("n3");
				this.gm1.processQueue.push("tapBkt");
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.stop();
					this.gm1.arrow.set_visible(false);
					this.gm1.tutorial.set_visible(false);
					this.tapBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntapBkt));
					this.tapBkt.buttonMode = false;
				}
			}
		}
	}
	,clickOnMat: function(e) {
		if(!this.gm1.restrictForTut3) {
			this.gm1.processQueue.push(e.currentTarget.node.id);
			this.gm1.processQueue.push(e.currentTarget.id);
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow.stop();
				this.gm1.arrow.set_visible(false);
				this.gm1.tutorial.set_visible(false);
				this.matArray[0].mat.buttonMode = false;
				this.matArray[0].mat.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
			}
		}
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,loadGame2: function() {
		this.gm1.gameData.matArray = [];
		var _g1 = 0;
		var _g = GameSettings.matTotal;
		while(_g1 < _g) {
			var i = _g1++;
			this.gm1.gameData.matArray.push(this.matArray[i].state);
			this.gm1.gameData.matArray.push(this.matArray[i].obj.frameIndex);
			if(this.matArray[i].state == "spinning" || this.matArray[i].state == "spinned") this.gm1.gameData.matArray.push(this.matArray[i].clock.frameIndex); else this.gm1.gameData.matArray.push("0");
		}
		this.gm1.gameData.tapState = this.tapState;
		this.gm1.gameData.tapTimer = this.tapTimer;
		this.gm1.gameData.tapFrame = this.tap.frameIndex;
		this.gm1.gameData.tapBktFrame = this.tapBkt.obj.frameIndex;
		this.gm1.gameData.tapBktV = this.tapBkt.get_visible();
		this.gm1.gameData.tapName = this.tapName;
	}
	,onUpdate: function(delta) {
		var _g1 = 0;
		var _g = GameSettings.matTotal;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.matArray[i] != null) {
				this.matArray[i].obj.update();
				if(this.matArray[i].bkt != null) this.matArray[i].bkt.update();
			}
		}
		if(this.gm1.currentBg == "bg2") {
			if(this.hero != null) {
				this.heroMoving(delta);
				this.hero.hero.update();
			}
		}
		if(!this.gm1.restrictForTut3) {
			this.tap.update();
			this.tankFun(delta);
			this.matFunct(delta);
		}
	}
	,heroMoving: function(delta) {
		if(!this.gm1.heroBusy && this.gm1.processQueue.length > 0) {
			if(this.gm1.processQueue[0] == "bg1" || this.gm1.processQueue[0] == "bg2" || this.gm1.processQueue[0] == "bg3" || this.gm1.processQueue[0] == "bg4") this.changeBg1(); else if(this.currentNode.id == this.gm1.processQueue[0]) {
				this.gm1.heroBusy = true;
				this.angleEngine(true);
			} else {
				this.path = this.grid.getPathPointsConverted(this.currentNode.id,this.gm1.processQueue[0]);
				this.pathIndex = 0;
				this.nextNode = this.path.shift();
				this.checkCurrentObj();
				this.gm1.heroBusy = true;
				this.heroMove = true;
				this.angleEngine(false);
			}
		}
		if(this.heroMove) {
			var dx = this.nextNode.x - this.hero.get_x();
			var dy = this.nextNode.y - this.hero.get_y();
			var angle = Math.atan2(dy,dx);
			var dist = Math.sqrt(dx * dx + dy * dy);
			if(dist >= this.speed * delta) {
				var _g = this.hero;
				_g.set_x(_g.get_x() + fw_Config.convertWidth(Math.cos(angle) * this.speed * delta));
				var _g1 = this.hero;
				_g1.set_y(_g1.get_y() + fw_Config.convertHeight(Math.sin(angle) * this.speed * delta));
			} else {
				this.currentNode = this.nextNode;
				if(this.path.length > 0) {
					this.nextNode = this.path.shift();
					this.angleEngine(false);
				} else {
					this.currentNode = this.nextNode;
					this.heroMove = false;
					this.angleEngine(true);
				}
			}
		}
	}
	,angleEngine: function(turn) {
		if(!turn) {
			var delX = this.hero.get_x() - this.nextNode.x;
			var delY = this.hero.get_y() - this.nextNode.y;
			var state = "heroidle";
			if(delX > 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjB"; else state = "herowalkB";
			} else if(delX > 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjL"; else state = "herowalkL";
			} else if(delX < 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjR"; else state = "herowalkR";
			} else if(delX < 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjF"; else state = "herowalkF";
			}
			if(this.gm1.heroState == "withTray") this.hero.hero.setFrames(GameSettings.d.getFrames(state),10); else this.hero.hero.setFrames(GameSettings.d.getFrames(state),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			if(state == "herowalkobjF" || state == "herowalkobjL") {
				this.hero.itmF.set_visible(true);
				this.hero.itmB.set_visible(false);
				if(state == "herowalkobjF") this.hero.itmF.set_x(fw_Config.convertWidth(30)); else this.hero.itmF.set_x(fw_Config.convertWidth(0));
			} else if(state == "herowalkobjR" || state == "herowalkobjB") {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(true);
				if(state == "herowalkobjR") this.hero.itmB.set_x(fw_Config.convertWidth(30)); else this.hero.itmB.set_x(fw_Config.convertWidth(0));
			} else {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			}
		} else if(this.currentNode.id == "n23") {
			this.gm1.heroBusy = false;
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setSmoothing(true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.processQueue.splice(0,2);
		} else if(this.currentNode.id == "n6") {
			this.gm1.heroBusy = false;
			this.hero.hero.stop();
			GameSettings.availableBasket++;
			if(GameSettings.availableBasket <= this.emptyBktArray.length) {
				var _g1 = 0;
				var _g = this.emptyBktArray.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(!this.emptyBktArray[i].get_visible()) {
						this.emptyBktArray[i].set_visible(true);
						break;
					}
				}
			} else {
				var k = GameSettings.availableBasket - 1;
				this.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
				this.emptyBkt.addChild(this.busket1);
				this.busket1.set_x(fw_Config.convertWidth(this.ebktPos[k]));
				this.busket1.set_y(fw_Config.convertHeight(this.ebktPos[k + 12]));
				this.busket1.set_scaleX(this.busket1.set_scaleY(.8));
				this.emptyBktArray.push(this.busket1);
				this.busket1.setSmoothing(true);
				this.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			}
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setSmoothing(true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.sack.get_x() + 220));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.sack.get_y() + 70));
				this.gm1.arrow.play(0,true);
				this.gm1.arrow.set_visible(true);
				this.sack.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
				this.sack.buttonMode = true;
			}
			this.gm1.processQueue.splice(0,2);
		} else if(this.currentNode.id == "n3") {
			this.hero.hero.stop();
			if(this.gm1.heroState == "noTray") {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(1);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			} else {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
				this.hero.hero.gotoFrame(1);
				this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmB.set_x(fw_Config.convertWidth(30));
				this.hero.itmB.set_visible(true);
				this.hero.itmF.set_visible(false);
			}
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.checkTank();
			this.gm1.processQueue.splice(0,2);
		} else if(this.currentNode.id == "n2") {
			if(this.gm1.heroState == "noTray" && this.gm1.processQueue[1] == "idle") {
				this.gm1.heroBusy = false;
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.hero.setSmoothing(true);
				this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
				this.gm1.processQueue.splice(0,2);
			} else {
				this.hero.hero.stop();
				this.gm1.heroBusy = false;
				this.checkSackFull();
				this.gm1.marketEnabled = true;
				this.gm1.processQueue.splice(0,2);
			}
		} else if(this.currentNode.id == "n4") {
			this.hero.hero.stop();
			this.checkdryWool();
		} else if(this.currentNode.id == "n5") {
			this.hero.hero.stop();
			this.checkemptySack();
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow1.set_x(this.gm1.common.hudIcon2.get_x() + 30);
				this.gm1.arrow1.set_y(this.gm1.common.hudIcon2.get_y() - 50);
				this.gm1.arrow1.play(0,true);
				this.gm1.arrow1.set_visible(true);
				this.gm1.tutorial1.addMessages("gotobg1");
				this.gm1.tutorial1.set_x(this.gm1.arrow1.get_x() - this.gm1.tutorial1.get_width());
				this.gm1.tutorial1.set_y(this.gm1.arrow1.get_y() - 5);
				this.gm1.tutorial1.set_visible(true);
				this.gm1.common.hudIcon2.buttonMode = true;
				this.gm1.common.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg)));
			}
		} else if(this.currentNode.id == "n13") this.checkgrassField(); else {
			this.hero.hero.stop();
			if(this.gm1.heroState == "noTray") {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			} else {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmB.set_x(fw_Config.convertWidth(0));
				this.hero.itmB.set_visible(true);
				this.hero.itmF.set_visible(false);
			}
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.checkMat();
		}
	}
	,checkItem: function() {
		var k = 0;
		if(this.gm1.currentItem == 12) {
			this.tapBkt.obj.gotoFrame(9);
			this.tapBkt.set_visible(true);
			this.gm1.currentItem = 0;
		}
		if(this.gm1.currentItem == 13) {
			var _g1 = 0;
			var _g = this.fullBktArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.fullBktArray[i].get_visible()) {
					this.fullBktArray[i].set_visible(true);
					break;
				}
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else if(this.gm1.currentItem == 10) {
			var _g11 = 0;
			var _g2 = this.emptySack.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(!this.emptySack[i1].get_visible()) {
					this.emptySack[i1].set_visible(true);
					GameSettings.availableSack2++;
					break;
				}
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else if(this.gm1.currentItem == 11) {
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
			k = GameSettings.wetWoolTotal;
			GameSettings.wetWoolTotal++;
			this.sackMArray[k].set_visible(true);
			GameSettings.woolTotal++;
		} else if(this.gm1.currentItem == 9) {
			GameSettings.grassBundle2++;
			if(this.grassArray.length >= GameSettings.grassBundle2) {
				var _g12 = 0;
				var _g3 = this.grassArray.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					if(this.grassArray[i2].get_visible() == false) {
						this.grassArray[i2].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.grassBundle2 - 1;
				this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
				this.grass.addChild(this.grass1);
				this.grass1.set_x(fw_Config.convertWidth(this.grass2Pos[k]));
				this.grass1.set_y(fw_Config.convertHeight(this.grass2Pos[k + 5]));
				this.grassArray.push(this.grass1);
				this.grass1.setSmoothing(true);
				this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			}
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
		}
	}
	,checkCurrentObj: function() {
		var k = 0;
		if(this.gm1.currentItem == 13 && this.gm1.processQueue[0] != "bg3" && this.gm1.processQueue[1] != "put") {
			var _g1 = 0;
			var _g = this.fullBktArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.fullBktArray[i].get_visible()) {
					this.fullBktArray[i].set_visible(true);
					break;
				}
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else if(this.gm1.currentItem == 10 && this.gm1.processQueue[0] != "bg1") {
			var _g11 = 0;
			var _g2 = this.emptySack.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(!this.emptySack[i1].get_visible()) {
					this.emptySack[i1].set_visible(true);
					GameSettings.availableSack2++;
					break;
				}
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else if(this.gm1.currentItem == 11 && this.gm1.processQueue[0] != "n3" && this.gm1.processQueue[0] != "n2") {
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
			k = GameSettings.wetWoolTotal;
			GameSettings.wetWoolTotal++;
			this.sackMArray[k].set_visible(true);
			GameSettings.woolTotal++;
		} else if(this.gm1.currentItem == 9 && (this.gm1.processQueue[0] != "bg1" || GameSettings.grassBundle == 10)) {
			GameSettings.grassBundle2++;
			if(this.grassArray.length >= GameSettings.grassBundle2) {
				var _g12 = 0;
				var _g3 = this.grassArray.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					if(this.grassArray[i2].get_visible() == false) {
						this.grassArray[i2].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.grassBundle2 - 1;
				this.grass1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("grassBundle"));
				this.grass.addChild(this.grass1);
				this.grass1.set_x(fw_Config.convertWidth(this.grass2Pos[k]));
				this.grass1.set_y(fw_Config.convertHeight(this.grass2Pos[k + 5]));
				this.grassArray.push(this.grass1);
				this.grass1.setSmoothing(true);
				this.grass1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			}
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
		}
	}
	,checkMat: function() {
		this.gm1.heroBusy = false;
		var i = Std.parseInt(this.gm1.processQueue[1].substring(3));
		i--;
		if(this.matArray[i].state == "idle" && this.gm1.currentItem == 12) {
			this.gm1.heroBusy = true;
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heropourF"),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			var _g = this.hero;
			_g.set_x(_g.get_x() + 80);
			var _g1 = this.hero;
			_g1.set_y(_g1.get_y() + 50);
			this.matArray[i].state = "spreading";
			this.matbkt = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("basket"));
			this.matArray[i].addChild(this.matbkt);
			this.matbkt.set_x(fw_Config.convertWidth(70));
			this.matbkt.set_y(fw_Config.convertHeight(-120));
			this.matbkt.set_scaleX(this.matbkt.set_scaleY(.8));
			this.matbkt.setSmoothing(true);
			this.matbkt.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.matArray[i].bkt = this.matbkt;
			this.matbkt.gotoFrame(9);
			this.matbkt.stop();
			this.spreadTime = 40;
			this.gm1.processQueue.splice(0,2);
		} else if(this.matArray[i].state == "spinned") {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
			}
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.heroBusy = true;
			this.hero.hero.setFrames(GameSettings.d.getFrames("herotakeF"),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.matArray[i].state = "collecting";
			this.spreadTime = 40;
		} else {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.heroBusy = false;
			this.gm1.processQueue.splice(0,2);
		}
	}
	,checkgrassField: function() {
		this.gm1.processQueue.splice(0,2);
		this.gm1.heroBusy = false;
		if(this.gm1.currentItem != 9) {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
				this.gm1.currentItem = 0;
			}
			this.gm1.currentItem = 9;
			this.gm1.heroState = "withTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.hero.stop();
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.set_x(fw_Config.convertWidth(30));
			this.hero.itmF.set_visible(true);
			var k;
			var _g1 = 0;
			var _g = this.grassArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				k = this.grassArray.length - 1 - i;
				if(this.grassArray[k].get_visible()) {
					this.grassArray[k].set_visible(false);
					GameSettings.grassBundle2--;
					break;
				}
			}
			if(GameSettings.level == 1 || !GameSettings.bg2played) {
				this.gm1.arrow1.set_x(this.gm1.common.hudIcon2.get_x() + 30);
				this.gm1.arrow1.set_y(this.gm1.common.hudIcon2.get_y() - 50);
				this.gm1.arrow1.play(0,true);
				this.gm1.arrow1.set_visible(true);
				this.gm1.tutorial1.addMessages("gotobg1");
				this.gm1.tutorial1.set_x(this.gm1.arrow1.get_x() - this.gm1.tutorial1.get_width());
				this.gm1.tutorial1.set_y(this.gm1.arrow1.get_y() - 5);
				this.gm1.tutorial1.set_visible(true);
				this.gm1.common.hudIcon2.buttonMode = true;
				this.gm1.common.hudIcon2.buttonMode = true;
				this.gm1.common.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg)));
			}
		} else {
		}
	}
	,checkemptySack: function() {
		var k;
		if(this.gm1.currentItem == 12) {
			this.tapBkt.obj.gotoFrame(9);
			this.tapBkt.set_visible(true);
			this.gm1.currentItem = 0;
		}
		k = this.emptySack.length;
		var _g1 = 0;
		var _g = this.emptySack.length;
		while(_g1 < _g) {
			var i = _g1++;
			k--;
			if(this.emptySack[k].get_visible()) {
				this.emptySack[k].set_visible(false);
				GameSettings.availableSack2--;
				this.gm1.currentItem = 10;
				this.gm1.heroState = "withTray";
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.hero.hero.setSmoothing(true);
				this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.set_x(fw_Config.convertWidth(30));
				this.hero.itmF.set_visible(true);
				break;
			}
		}
		this.gm1.processQueue.splice(0,2);
		this.gm1.heroBusy = false;
	}
	,checkdryWool: function() {
		var k;
		if(this.gm1.processQueue[1] == "put") {
			if(GameSettings.dryWoolTotal <= this.fullBktArray.length) {
				var _g1 = 0;
				var _g = this.fullBktArray.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(!this.fullBktArray[i].get_visible()) {
						this.fullBktArray[i].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.dryWoolTotal - 1;
				this.busket1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket2"));
				this.fullBkt.addChild(this.busket1);
				this.busket1.set_x(fw_Config.convertWidth(this.ebktPosf[k]));
				this.busket1.set_y(fw_Config.convertHeight(this.ebktPosf[k + 12]));
				this.busket1.set_scaleX(this.busket1.set_scaleY(.8));
				this.fullBktArray.push(this.busket1);
				this.busket1.setSmoothing(true);
				this.busket1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			if(GameSettings.level == 1 || !GameSettings.bg2played || !GameSettings.bg3played) {
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.fullBkt.get_x() + 220));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.fullBkt.get_y() + 70));
				this.gm1.arrow.play(0,true);
				this.gm1.arrow.set_visible(true);
				this.gm1.tutorial.addMessages("sack");
				this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x()));
				this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 70));
				this.gm1.tutorial.set_visible(true);
				this.fullBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnfullBkt));
				this.fullBkt.buttonMode = true;
			}
		} else {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
				this.gm1.currentItem = 0;
			}
			k = this.fullBktArray.length;
			if(this.gm1.currentItem != 13) {
				var _g11 = 0;
				var _g2 = this.fullBktArray.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					k--;
					if(this.fullBktArray[k].get_visible()) {
						this.fullBktArray[k].set_visible(false);
						this.gm1.currentItem = 13;
						this.gm1.heroState = "withTray";
						this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
						this.hero.hero.gotoFrame(3);
						this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.hero.hero.setSmoothing(true);
						this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
						this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
						this.hero.itmF.set_visible(false);
						this.hero.itmB.set_visible(false);
						this.hero.itmF.set_x(fw_Config.convertWidth(30));
						this.hero.itmF.set_visible(true);
						break;
					}
				}
				if(GameSettings.level == 1 || !GameSettings.bg2played || !GameSettings.bg3played) {
					this.gm1.processQueue.splice(0,this.gm1.processQueue.length);
					this.gm1.arrow1.set_x(fw_Config.convertWidth(this.gm1.common.hudIcon3.get_x() + 50));
					this.gm1.arrow1.set_y(fw_Config.convertHeight(this.gm1.common.hudIcon3.get_y() - 40));
					this.gm1.arrow1.play(0,true);
					this.gm1.arrow1.set_visible(true);
					this.gm1.tutorial1.addMessages("gotobg3");
					this.gm1.tutorial1.set_x(this.gm1.arrow1.get_x() - this.gm1.tutorial1.get_width());
					this.gm1.tutorial1.set_y(this.gm1.arrow1.get_y() - 5);
					this.gm1.tutorial1.set_visible(true);
					this.gm1.common.hudIcon3.buttonMode = true;
					this.gm1.common.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg)));
					this.gm1.common.hudIcon2.buttonMode = true;
					this.gm1.common.hudIcon2.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg)));
					if(GameSettings.bg2played && !GameSettings.bg3played) {
						this.gm1.restrictForTut3 = true;
						this.gm1.marketEnabled = false;
					}
				}
			}
		}
		this.gm1.processQueue.splice(0,2);
		this.gm1.heroBusy = false;
	}
	,checkSackFull: function() {
		var k;
		if(this.gm1.currentItem != 11 && GameSettings.wetWoolTotal > 0 && this.gm1.processQueue[1] != "idle") {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
				this.gm1.currentItem = 0;
			}
			this.gm1.currentItem = 11;
			this.gm1.heroState = "withTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.set_x(fw_Config.convertWidth(30));
			this.hero.itmF.set_visible(true);
			GameSettings.wetWoolTotal--;
			this.sackMArray[GameSettings.wetWoolTotal].set_visible(false);
			GameSettings.woolTotal--;
		} else if(this.gm1.currentItem == 11) {
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
			k = GameSettings.wetWoolTotal;
			GameSettings.wetWoolTotal++;
			if(this.gm1.processQueue[1] != "idle") GameSettings.woolTotal++;
			if(GameSettings.wetWoolTotal <= this.sackMArray.length) this.sackMArray[k].set_visible(true); else {
				this.sackM = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack0004"));
				this.matSprite.addChild(this.sackM);
				this.sackM.set_x(fw_Config.convertWidth(this.sackM2Pos[k]));
				this.sackM.set_y(fw_Config.convertHeight(this.sackM2Pos[k + 6]));
				this.sackM.set_scaleX(this.sackM.set_scaleY(.8));
				this.sackMArray.push(this.sackM);
				this.sackM.setSmoothing(true);
				this.sackM.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.sortFunctionSkm();
				this.sackMArray.reverse();
			}
		} else {
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
				this.gm1.currentItem = 0;
			}
			this.gm1.heroState = "noTray";
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.gm1.currentItem = 0;
		}
		if(GameSettings.level == 1 || !GameSettings.bg2played) {
			this.gm1.arrow.set_x(fw_Config.convertWidth(this.tap.get_x() + 100));
			this.gm1.arrow.set_y(fw_Config.convertHeight(this.tap.get_y() + 50));
			this.gm1.arrow.play(0,true);
			this.gm1.arrow.set_visible(true);
			if(this.gm1.heroState == "noTray") this.gm1.tutorial.addMessages("tank"); else this.gm1.tutorial.addMessages("tank1");
			this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 200));
			this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 70));
			this.gm1.tutorial.set_visible(true);
			this.tap.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
			this.tap.buttonMode = true;
		}
	}
	,checkTank: function() {
		var k;
		if(this.gm1.processQueue[1] == "tapBkt") {
			if(this.tapBkt.obj.frameIndex == 9 && this.gm1.heroState == "noTray") {
				this.gm1.currentItem = 12;
				this.gm1.heroState = "withTray";
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.hero.hero.setSmoothing(true);
				this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.set_x(fw_Config.convertWidth(30));
				this.hero.itmF.set_visible(true);
				this.tapBkt.set_visible(false);
			}
			this.gm1.heroBusy = false;
		} else if(this.tapState == "idle" && this.gm1.currentItem != 12) {
			if(this.tapName != "Cleaning_fill_") {
				this.tap.setFrames(GameSettings.c.getFrames("Cleaning_fill_"),15);
				this.tapName = "Cleaning_fill_";
				this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.tap.setSmoothing(true);
			}
			this.tap.play(0,true);
			if(GameSettings.musicPlaying) this.gm1.playwatersnd("water");
			this.tapState = "waterFilling";
		} else if(this.tapState == "waterFull" && this.gm1.currentItem == 11) {
			this.tap.setFrames(GameSettings.c.getFrames("wash_start_"),15);
			this.tapName = "wash_start_";
			this.tap.play(0,true);
			this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tap.setSmoothing(true);
			this.tapState = "washStart";
			this.gm1.heroState = "noTray";
			this.gm1.currentItem = 0;
			this.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingR"),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			GameSettings.availableSack2++;
			if(GameSettings.availableSack2 <= this.emptySack.length) {
				var _g1 = 0;
				var _g = this.emptySack.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(!this.emptySack[i].get_visible()) {
						this.emptySack[i].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.availableSack2 - 1;
				this.sack1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
				this.sack.addChild(this.sack1);
				this.sack1.set_x(fw_Config.convertWidth(180));
				this.sack1.set_y(fw_Config.convertHeight(this.sack2Pos[k]));
				this.sack1.set_scaleX(this.sack1.set_scaleY(.8));
				this.emptySack.push(this.sack1);
				this.sack1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.sack1.setSmoothing(true);
			}
		} else if(this.tapState == "washed" && this.tapBkt.obj.frameIndex == 0 && this.tapBkt.get_visible() && this.gm1.currentItem == 0) {
			this.gm1.heroBusy = true;
			this.tap.setFrames(GameSettings.c.getFrames("wool_take_"),15);
			this.tapName = "wool_take_";
			this.tap.stop();
			this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tap.setSmoothing(true);
			this.tapBkt.obj.stop();
			this.tapState = "collecting";
			this.tapTimer = 12;
			this.hero.hero.setFrames(GameSettings.d.getFrames("heromilkingR"),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else this.gm1.heroBusy = false;
	}
	,tankFun: function(delta) {
		var _g = this.tapState;
		switch(_g) {
		case "waterFilling":
			if(this.tap.frameIndex == 12) {
				this.tap.stop();
				this.tapState = "waterFull";
				if(this.gm1.waterchannel != null) this.gm1.waterchannel.stop();
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.set_x(fw_Config.convertWidth(700));
					this.gm1.arrow.set_y(fw_Config.convertHeight(120));
					this.gm1.arrow.play(0,true);
					this.gm1.arrow.set_visible(true);
					this.gm1.tutorial.addMessages("sack");
					this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 200));
					this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 60));
					this.gm1.tutorial.set_visible(true);
					this.matSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnsackMain));
					this.matSprite.buttonMode = true;
				}
				this.gm1.heroBusy = false;
			}
			break;
		case "washStart":
			if(this.tap.frameIndex == 5) {
				this.tapTimer = 0;
				this.tap.setFrames(GameSettings.c.getFrames("wash_loop_"),15);
				this.tapName = "wash_loop_";
				this.tap.play(0,true);
				this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.tap.setSmoothing(true);
				this.tapState = "washing";
			}
			break;
		case "washing":
			this.tapTimer += delta;
			if(this.tapTimer >= 200) {
				this.tapState = "washFinish";
				this.tap.setFrames(GameSettings.c.getFrames("wash_finish_"),15);
				this.tapName = "wash_finish_";
				this.tap.play(0,true);
				this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.tap.setSmoothing(true);
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.set_x(fw_Config.convertWidth(100));
					this.gm1.arrow.set_y(fw_Config.convertHeight(140));
					this.gm1.arrow.play(0,true);
					this.gm1.arrow.set_visible(true);
					this.gm1.tutorial.addMessages("barrel");
					this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x()));
					this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() + 80));
					this.gm1.tutorial.set_visible(true);
					this.emptyBkt.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnemptyBkt));
					this.emptyBkt.buttonMode = true;
				}
			}
			break;
		case "washFinish":
			if(this.tap.frameIndex == 5) {
				this.tap.stop();
				this.tapState = "washed";
				GameSettings.score += 5 + GameSettings.bonus;
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(1);
				this.hero.hero.stop();
				this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.hero.hero.setSmoothing(true);
				this.hero.itmB.set_visible(false);
				this.hero.itmF.set_visible(false);
				this.gm1.heroBusy = false;
			}
			break;
		case "collecting":
			this.tapTimer--;
			if(this.tapTimer == 6) this.tapBkt.obj.gotoFrame(this.tapBkt.obj.frameIndex + 1);
			if(this.tapTimer == 0) {
				this.tapTimer = 12;
				this.tap.gotoFrame(this.tap.frameIndex + 1);
			}
			if(this.tapBkt.obj.frameIndex == 9) {
				this.tap.gotoFrame(5);
				this.tapBkt.obj.stop();
			}
			if(this.tap.frameIndex == 5) {
				GameSettings.score += 2 + GameSettings.bonus;
				this.tapState = "idle";
				this.tapBkt.obj.gotoFrame(9);
				this.tap.setFrames(GameSettings.c.getFrames("Cleaning_fill_"),15);
				this.tapName = "Cleaning_fill_";
				this.tap.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.tap.setSmoothing(true);
				this.tap.stop();
				if(this.gm1.heroState == "noTray") {
					this.gm1.currentItem = 12;
					this.gm1.heroState = "withTray";
					this.hero.hero.stop();
					this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
					this.hero.hero.gotoFrame(2);
					this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.hero.hero.setSmoothing(true);
					this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmF.set_x(fw_Config.convertWidth(0));
					this.hero.itmF.set_visible(true);
					this.tapBkt.set_visible(false);
					this.tapBkt.obj.gotoFrame(0);
				}
				this.gm1.heroBusy = false;
				if(GameSettings.level == 1 || !GameSettings.bg2played) {
					this.gm1.arrow.set_x(fw_Config.convertWidth(this.matArray[0].get_x() + 10));
					this.gm1.arrow.set_y(fw_Config.convertHeight(this.matArray[0].get_y() - 140));
					this.gm1.arrow.play(0,true);
					this.gm1.arrow.set_visible(true);
					this.gm1.tutorial.addMessages("mat");
					this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x()));
					this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() - 50));
					this.gm1.tutorial.set_visible(true);
					this.matArray[0].mat.buttonMode = true;
					this.matArray[0].mat.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
				}
			}
			break;
		}
	}
	,matFunct: function(delta) {
		var _g1 = 0;
		var _g = GameSettings.matTotal;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = this.matArray[i].state;
			switch(_g2) {
			case "spreading":
				this.spreadTime--;
				if(this.spreadTime == 20) {
					if(this.matArray[i].bkt.frameIndex > 0) this.matArray[i].bkt.gotoFrame(this.matArray[i].bkt.frameIndex - 1);
				}
				if(this.spreadTime == 0) {
					this.spreadTime = 40;
					var _g3 = this.hero;
					_g3.set_x(_g3.get_x() - 16);
					var _g31 = this.hero;
					_g31.set_y(_g31.get_y() - 10);
					if(this.matArray[i].obj.frameIndex < 6) this.matArray[i].obj.gotoFrame(this.matArray[i].obj.frameIndex + 1);
				}
				if(this.matArray[i].obj.frameIndex == 6) {
					GameSettings.score += 5 + GameSettings.bonus;
					this.matArray[i].bkt.gotoFrame(0);
					this.gm1.heroBusy = false;
					this.matArray[i].state = "spinning";
					this.matclock = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("timer_"));
					this.matArray[i].addChild(this.matclock);
					this.matclock.set_x(fw_Config.convertWidth(20));
					this.matclock.set_y(fw_Config.convertHeight(-60));
					this.matclock.set_scaleX(this.matclock.set_scaleY(.5));
					this.matclock.setSmoothing(true);
					this.matclock.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.matArray[i].clock = this.matclock;
					this.matArray[i].timer = 0;
					this.gm1.heroState = "noTray";
					this.gm1.currentItem = 0;
					this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
					this.hero.hero.gotoFrame(3);
					this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.hero.hero.setSmoothing(true);
					this.hero.hero.stop();
					this.hero.itmF.set_visible(false);
					this.hero.itmB.set_visible(false);
					if(GameSettings.level == 1 || !GameSettings.bg2played) {
						this.spinned = false;
						this.gm1.arrow.set_x(fw_Config.convertWidth(this.grassMain.get_x() + 350));
						this.gm1.arrow.set_y(fw_Config.convertHeight(this.grassMain.get_y() + 120));
						this.gm1.arrow.play(0,true);
						this.gm1.arrow.set_visible(true);
						this.gm1.tutorial.addMessages("Grassfield");
						this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x() - 200));
						this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() - 50));
						this.gm1.tutorial.set_visible(true);
						this.grassMain1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrassField));
						this.grassMain1.buttonMode = true;
					}
				}
				break;
			case "spinning":
				this.matArray[i].timer += delta;
				if(this.matArray[i].timer >= 50) {
					this.matArray[i].timer = 0;
					if(GameSettings.level == 1 || !GameSettings.bg2played) this.matArray[i].timer = 45;
					if(this.matArray[i].clock.frameIndex < 58) this.matArray[i].clock.gotoFrame(this.matArray[i].clock.frameIndex + 1); else {
						this.matArray[i].clock.gotoFrame(59);
						if(GameSettings.level > 1 && !this.gm1.restrictForTut2) this.matArray[i].state = "spinned";
						if((GameSettings.level == 1 || !GameSettings.bg2played) && this.spinned && this.gm1.currentBg == "bg2") {
							this.matArray[i].state = "spinned";
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.matArray[0].get_x() + 10));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.matArray[0].get_y() - 140));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.gm1.tutorial.addMessages("mat1");
							this.gm1.tutorial.set_x(fw_Config.convertWidth(this.gm1.arrow.get_x()));
							this.gm1.tutorial.set_y(fw_Config.convertHeight(this.gm1.arrow.get_y() - 50));
							this.gm1.tutorial.set_visible(true);
							this.matArray[0].mat.buttonMode = true;
							this.matArray[0].mat.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
						}
					}
				}
				break;
			case "collecting":
				this.spreadTime--;
				if(this.spreadTime == 20) {
					if(this.matArray[i].bkt.frameIndex < 9) this.matArray[i].bkt.gotoFrame(this.matArray[i].bkt.frameIndex + 1);
				}
				if(this.spreadTime == 0) {
					this.spreadTime = 40;
					var _g32 = this.hero;
					_g32.set_x(_g32.get_x() + 16);
					var _g33 = this.hero;
					_g33.set_y(_g33.get_y() + 10);
					if(this.matArray[i].obj.frameIndex > 0) this.matArray[i].obj.gotoFrame(this.matArray[i].obj.frameIndex - 1);
				}
				if(this.matArray[i].obj.frameIndex == 0) {
					GameSettings.score += 5 + GameSettings.bonus;
					this.gm1.currentItem = 13;
					this.gm1.heroState = "withTray";
					this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
					this.hero.hero.gotoFrame(3);
					this.hero.hero.stop();
					this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.hero.hero.setSmoothing(true);
					this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
					this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
					this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
					this.matArray[i].removeChild(this.matArray[i].bkt);
					this.matArray[i].bkt = null;
					this.matArray[i].removeChild(this.matArray[i].clock);
					this.matArray[i].clock = null;
					this.hero.itmF.set_x(fw_Config.convertWidth(30));
					this.hero.itmF.set_visible(true);
					this.gm1.heroBusy = false;
					this.gm1.processQueue.splice(0,2);
					GameSettings.dryWoolTotal++;
					this.gm1.processQueue.unshift("put");
					this.gm1.processQueue.unshift("n4");
					this.matArray[i].state = "idle";
					this.gm1.heroState = "withTray";
				}
				break;
			}
		}
	}
	,changeBg1: function() {
		if(this.gm1.currentBg == "bg2") {
			this.checkCurrentObj();
			if(this.gm1.currentItem == 12) {
				this.tapBkt.obj.gotoFrame(9);
				this.tapBkt.set_visible(true);
				this.gm1.currentItem = 0;
				this.gm1.heroState = "noTray";
			}
			this.removeBg2Items();
			this.gm1.changeBg();
		}
	}
	,removeBg2Items: function() {
		this.bg2Sprite.removeChild(this.bg2);
		this.bg2 = null;
	}
	,onExit: function() {
		var k;
		if(this.bg2 != null) {
			this.bg2Sprite.removeChild(this.bg2);
			this.bg2 = null;
		}
		if(this.hero != null) {
			this.removeChild(this.hero);
			this.hero = null;
		}
		if(GameSettings.level > 1) {
			this.grassMain1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrassField));
			this.grass.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnGrass));
			this.emptyBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnemptyBkt));
			this.fullBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnfullBkt));
			this.sack.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnSack));
			this.tap.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntap));
			this.tapBkt.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOntapBkt));
			this.matSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnsackMain));
			var _g1 = 0;
			var _g = GameSettings.matTotal;
			while(_g1 < _g) {
				var i = _g1++;
				this.matArray[i].mat.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnMat));
			}
		}
		if(this.fullBkt.get_numChildren() > 0) {
			k = this.fullBkt.get_numChildren();
			var _g2 = 0;
			while(_g2 < k) {
				var i1 = _g2++;
				this.fullBkt.removeChildAt(0);
			}
		}
		this.obj2Sprite.removeChild(this.fullBkt);
		if(this.sack.get_numChildren() > 0) {
			k = this.sack.get_numChildren();
			var _g3 = 0;
			while(_g3 < k) {
				var i2 = _g3++;
				this.sack.removeChildAt(0);
			}
		}
		this.obj2Sprite.removeChild(this.sack);
		if(this.matSprite.get_numChildren() > 0) {
			k = this.matSprite.get_numChildren();
			var _g4 = 0;
			while(_g4 < k) {
				var i3 = _g4++;
				this.matSprite.removeChildAt(0);
			}
		}
		this.obj2Sprite.removeChild(this.matSprite);
		if(this.emptyBkt.get_numChildren() > 0) {
			k = this.emptyBkt.get_numChildren();
			var _g5 = 0;
			while(_g5 < k) {
				var i4 = _g5++;
				this.emptyBkt.removeChildAt(0);
			}
		}
		this.obj2Sprite.removeChild(this.emptyBkt);
		this.obj2Sprite.removeChild(this.tap);
		this.obj2Sprite.removeChild(this.tapBkt);
		if(this.bg2Sprite.get_numChildren() > 0) {
			k = this.bg2Sprite.get_numChildren();
			var _g6 = 0;
			while(_g6 < k) {
				var i5 = _g6++;
				this.bg2Sprite.removeChildAt(0);
			}
		}
		this.removeChild(this.bg2Sprite);
		if(this.obj2Sprite.get_numChildren() > 0) {
			k = this.obj2Sprite.get_numChildren();
			var _g7 = 0;
			while(_g7 < k) {
				var i6 = _g7++;
				this.obj2Sprite.removeChildAt(0);
			}
		}
		this.removeChild(this.obj2Sprite);
		if(this.get_numChildren() > 0) {
			k = this.get_numChildren();
			var _g8 = 0;
			while(_g8 < k) {
				var i7 = _g8++;
				this.removeChildAt(0);
			}
		}
	}
	,__class__: game_scenes_Game2
});
var game_scenes_Game3 = function(gm) {
	openfl_display_Sprite.call(this);
	this.gm1 = gm;
	this.onInit();
};
$hxClasses["game.scenes.Game3"] = game_scenes_Game3;
game_scenes_Game3.__name__ = ["game","scenes","Game3"];
game_scenes_Game3.__super__ = openfl_display_Sprite;
game_scenes_Game3.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.grid = new fw_ai_pathfinding_node_Grid();
		this.grid.parseXML(Xml.parse("<nodes height=\"640\" width=\"960\"><node x=\"787\" join=\"n5\" y=\"418\" id=\"n1\"/><node x=\"617\" join=\"n5\" y=\"321\" id=\"n2\"/><node x=\"697\" join=\"n5\" y=\"348\" id=\"n3\"/><node x=\"657\" join=\"n5,n4\" y=\"373\" id=\"n4\"/><node x=\"682\" join=\"n1,n2,n3,n4\" y=\"358\" id=\"n5\"/></nodes>"));
		this.gm1.processQueue = [];
		this.basket1Array = [];
		this.basket2Array = [];
		this.basket3Array = [];
		this.gm1.heroBusy = false;
		this.heroMove = false;
		this.gm1.heroState = "noTray";
		this.speed = 3;
		this.gm1.currentItem = 0;
		this.bg3Sprite = new openfl_display_Sprite();
		this.bg3Sprite = new openfl_display_Sprite();
		this.addChild(this.bg3Sprite);
		this.obj3Sprite = new openfl_display_Sprite();
		this.addChild(this.obj3Sprite);
		this.helper = new game_scenes_ObjGame("sack");
		this.helper.obj.setFrames(GameSettings.d.getFrames("helperidle"),5);
		this.obj3Sprite.addChild(this.helper);
		this.helper.set_x(fw_Config.convertWidth(540));
		this.helper.set_y(fw_Config.convertHeight(210));
		this.helper.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.helper.obj.setSmoothing(true);
		this.helper.id = "helper";
		this.helper.obj.stop();
		this.helper.state = "idle";
		this.helperBkt1 = new game_scenes_ObjGame("sack");
		this.helperBkt1.obj.setFrames(GameSettings.d.getFrames("basket"),5);
		this.obj3Sprite.addChild(this.helperBkt1);
		this.helperBkt1.set_x(fw_Config.convertWidth(630));
		this.helperBkt1.set_y(fw_Config.convertHeight(270));
		this.helperBkt1.set_scaleX(this.helperBkt1.set_scaleY(.8));
		this.helperBkt1.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.helperBkt1.obj.setSmoothing(true);
		this.helperBkt1.id = "helperBkt1";
		this.helperBkt1.obj.stop();
		this.helperBkt2 = new game_scenes_ObjGame("sack");
		this.helperBkt2.obj.setFrames(GameSettings.d.getFrames("tray"),5);
		this.helperBkt2.obj.gotoFrame(14);
		this.obj3Sprite.addChild(this.helperBkt2);
		this.helperBkt2.set_x(fw_Config.convertWidth(670));
		this.helperBkt2.set_y(fw_Config.convertHeight(290));
		this.helperBkt2.set_scaleX(this.helperBkt2.set_scaleY(.8));
		this.helperBkt2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.helperBkt2.obj.setSmoothing(true);
		this.helperBkt2.id = "helperBkt2";
		this.helperBkt2.obj.stop();
		this.helperBkt2.set_visible(false);
		if(GameSettings.gameLoaded) {
			this.helper.state = GameSettings.savedData.state;
			this.helperBkt1.obj.gotoFrame(GameSettings.savedData.bkt1Frame);
			this.helperBkt2.obj.gotoFrame(GameSettings.savedData.bkt2Frame);
			this.helperBkt2.set_visible(GameSettings.savedData.bkt2v);
			if(this.helper.state == "tailoring") {
				this.helper.obj.setFrames(GameSettings.d.getFrames("helper"),10);
				this.helper.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.helper.obj.setSmoothing(true);
				this.helper.obj.play(0,true);
				this.helper.timer = 0;
			}
		}
		this.mat1Sprite = new openfl_display_Sprite();
		this.mat1Sprite.get_graphics().beginFill(2228224,1);
		this.mat1Sprite.get_graphics().drawRect(180,80,fw_Config.convertWidth(50),fw_Config.convertHeight(50));
		this.mat1Sprite.get_graphics().endFill();
		this.obj3Sprite.addChild(this.mat1Sprite);
		this.mat1Sprite.set_x(fw_Config.convertWidth(560));
		this.mat1Sprite.set_y(fw_Config.convertHeight(180));
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat1_gameBg34"));
		this.mat1Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.set_x(fw_Config.convertWidth(80));
		this.mat.set_y(fw_Config.convertHeight(20));
		this.mat.set_scaleX(this.mat.set_scaleY(.8));
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.setSmoothing(true);
		this.mat2Sprite = new openfl_display_Sprite();
		this.mat2Sprite.get_graphics().beginFill(2228224,1);
		this.mat2Sprite.get_graphics().drawRect(180,80,fw_Config.convertWidth(50),fw_Config.convertHeight(50));
		this.mat2Sprite.get_graphics().endFill();
		this.obj3Sprite.addChild(this.mat2Sprite);
		this.mat2Sprite.set_x(fw_Config.convertWidth(340));
		this.mat2Sprite.set_y(fw_Config.convertHeight(300));
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat1_gameBg34"));
		this.mat2Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.set_x(fw_Config.convertWidth(60));
		this.mat.set_y(fw_Config.convertHeight(40));
		this.mat.set_scaleX(this.mat.set_scaleY(.8));
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.setSmoothing(true);
		this.bkt1Pos = [420,460,500,540,380,420,460,500,340,380,420,460,170,190,210,230,190,210,230,250,210,230,250,270];
		var _g1 = 0;
		var _g = GameSettings.tailorWool;
		while(_g1 < _g) {
			var i = _g1++;
			this.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket2"));
			this.addChild(this.basket);
			this.basket.set_x(fw_Config.convertWidth(this.bkt1Pos[i]));
			this.basket.set_y(fw_Config.convertHeight(this.bkt1Pos[i + 12]));
			this.basket.set_scaleX(this.basket.set_scaleY(.8));
			this.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.basket.setSmoothing(true);
			this.basket1Array.push(this.basket);
		}
		this.bkt2Pos = [240,200,160,120,280,240,200,160,320,280,240,200,90,110,130,150,110,130,150,170,130,150,170,190];
		var k = Math.floor(GameSettings.color1Total / 3);
		var k1 = GameSettings.color1Total % 3;
		if(k1 > 0) k++;
		var _g2 = 0;
		while(_g2 < k) {
			var i1 = _g2++;
			this.basket2 = new game_scenes_ObjGame("sack");
			this.basket2.obj.setFrames(GameSettings.d.getFrames("tray"),5);
			this.mat1Sprite.addChild(this.basket2);
			this.basket2.set_x(fw_Config.convertWidth(this.bkt2Pos[i1]));
			this.basket2.set_y(fw_Config.convertHeight(this.bkt2Pos[i1 + 12]));
			this.basket2.set_scaleX(this.basket2.set_scaleY(.8));
			this.basket2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.basket2.obj.setSmoothing(true);
			this.basket2Array.push(this.basket2);
			this.basket2.obj.gotoFrame(17);
			if(i1 == k - 1 && k1 > 0) {
				k1 += 14;
				this.basket2.obj.gotoFrame(k1);
				this.basket2.set_visible(true);
			}
		}
		this.bkt3Pos = [200,160,120,80,240,200,160,120,280,240,200,160,30,50,70,90,50,70,90,110,70,90,110,130];
		var _g11 = 0;
		var _g3 = GameSettings.availableBasket2;
		while(_g11 < _g3) {
			var i2 = _g11++;
			this.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
			this.mat2Sprite.addChild(this.basket);
			this.basket.set_x(fw_Config.convertWidth(this.bkt3Pos[i2]));
			this.basket.set_y(fw_Config.convertHeight(this.bkt3Pos[i2 + 12]));
			this.basket.set_scaleX(this.basket.set_scaleY(.8));
			this.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.basket.setSmoothing(true);
			this.basket3Array.push(this.basket);
		}
		if(GameSettings.level > 1 && GameSettings.bg3played) {
		}
		this.hero = new game_scenes_Hero(this.gm1);
		this.addChild(this.hero);
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		this.hero.itmB.set_visible(false);
		this.hero.itmF.set_visible(false);
		this.hero.mouseChildren = false;
		this.hero.mouseEnabled = false;
	}
	,addBg3: function() {
		this.bg3 = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/gameBg3.png"));
		this.bg3Sprite.addChild(this.bg3);
		this.bg3.smoothing = true;
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		if(this.gm1.heroState == "noTray") {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(2);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			if(GameSettings.level == 1) {
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.mat2Sprite.get_x() + 240));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.mat2Sprite.get_y() - 15));
				this.gm1.arrow.play(0,true);
				this.gm1.arrow.set_visible(true);
			}
		} else {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
			this.hero.hero.gotoFrame(0);
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmB.set_x(fw_Config.convertWidth(0));
			this.hero.itmB.set_visible(true);
			this.hero.itmF.set_visible(false);
			GameSettings.dryWoolTotal--;
			this.gm1.processQueue.push("n2");
			this.gm1.processQueue.push("tailor");
		}
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.hero.setSmoothing(true);
	}
	,addListeners: function() {
	}
	,startItem: function(e) {
		e.currentTarget.startDrag();
	}
	,stopItem: function(e) {
		this.stopDrag();
	}
	,clickOnmat1: function(e) {
		this.gm1.processQueue.push("n3");
		this.gm1.processQueue.push("mat1");
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		if(GameSettings.level == 1) {
			this.gm1.arrow.stop();
			this.gm1.arrow.set_visible(false);
			this.mat1Sprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnmat1));
			this.mat1Sprite.buttonMode = false;
		}
	}
	,clickOnmat2: function(e) {
		this.gm1.processQueue.push("n4");
		this.gm1.processQueue.push("mat2");
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		if(GameSettings.level == 1) {
			this.gm1.arrow.stop();
			this.gm1.arrow.set_visible(false);
			this.mat2Sprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnmat2));
			this.mat2Sprite.buttonMode = false;
		}
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,loadGame3: function() {
		this.gm1.gameData.state = this.helper.state;
		this.gm1.gameData.bkt1Frame = this.helperBkt1.obj.frameIndex;
		this.gm1.gameData.bkt2Frame = this.helperBkt2.obj.frameIndex;
		this.gm1.gameData.bkt2v = this.helperBkt2.get_visible();
	}
	,onUpdate: function(delta) {
		if(this.gm1.currentBg == "bg3") {
			if(this.hero != null) {
				this.heroMoving(delta);
				this.hero.hero.update();
			}
		}
		this.helper.obj.update();
		this.helperBkt1.obj.update();
		this.helperBkt2.obj.update();
		this.tailerFun(delta);
	}
	,heroMoving: function(delta) {
		if(!this.gm1.heroBusy && this.gm1.processQueue.length > 0) {
			if(this.gm1.processQueue[0] == "bg1" || this.gm1.processQueue[0] == "bg2" || this.gm1.processQueue[0] == "bg3" || this.gm1.processQueue[0] == "bg4") this.changeBg1(); else if(this.currentNode.id == this.gm1.processQueue[0]) {
				this.gm1.heroBusy = true;
				this.angleEngine(true);
			} else {
				this.path = this.grid.getPathPointsConverted(this.currentNode.id,this.gm1.processQueue[0]);
				this.pathIndex = 0;
				this.nextNode = this.path.shift();
				this.gm1.heroBusy = true;
				this.heroMove = true;
				this.angleEngine(false);
			}
		}
		if(this.heroMove) {
			var dx = this.nextNode.x - this.hero.get_x();
			var dy = this.nextNode.y - this.hero.get_y();
			var angle = Math.atan2(dy,dx);
			var dist = Math.sqrt(dx * dx + dy * dy);
			if(dist >= this.speed * delta) {
				var _g = this.hero;
				_g.set_x(_g.get_x() + fw_Config.convertWidth(Math.cos(angle) * this.speed * delta));
				var _g1 = this.hero;
				_g1.set_y(_g1.get_y() + fw_Config.convertHeight(Math.sin(angle) * this.speed * delta));
			} else {
				this.currentNode = this.nextNode;
				if(this.path.length > 0) {
					this.nextNode = this.path.shift();
					this.angleEngine(false);
				} else {
					this.currentNode = this.nextNode;
					this.heroMove = false;
					this.angleEngine(true);
				}
			}
		}
	}
	,angleEngine: function(turn) {
		if(!turn) {
			var delX = this.hero.get_x() - this.nextNode.x;
			var delY = this.hero.get_y() - this.nextNode.y;
			var state = "heroidle";
			if(delX > 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjB"; else state = "herowalkB";
			} else if(delX > 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjL"; else state = "herowalkL";
			} else if(delX < 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjR"; else state = "herowalkR";
			} else if(delX < 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjF"; else state = "herowalkF";
			}
			if(this.gm1.heroState == "withTray") this.hero.hero.setFrames(GameSettings.d.getFrames(state),10); else this.hero.hero.setFrames(GameSettings.d.getFrames(state),10);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			if(state == "herowalkobjF" || state == "herowalkobjL") {
				this.hero.itmF.set_visible(true);
				this.hero.itmB.set_visible(false);
				if(state == "herowalkobjF") this.hero.itmF.set_x(fw_Config.convertWidth(30)); else this.hero.itmF.set_x(fw_Config.convertWidth(0));
			} else if(state == "herowalkobjR" || state == "herowalkobjB") {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(true);
				if(state == "herowalkobjR") this.hero.itmB.set_x(fw_Config.convertWidth(30)); else this.hero.itmB.set_x(fw_Config.convertWidth(0));
			} else {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			}
		} else if(this.currentNode.id == "n2") {
			this.hero.hero.stop();
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
			this.hero.hero.gotoFrame(1);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			if(this.gm1.heroState == "withTray") {
				this.gm1.marketEnabled = true;
				this.checkTailor();
			}
			this.gm1.heroState = "noTray";
			this.gm1.heroBusy = false;
			this.gm1.processQueue.splice(0,2);
		} else if(this.currentNode.id == "n3") {
			this.hero.hero.stop();
			this.gm1.heroBusy = false;
			this.checkmat1();
			this.gm1.processQueue.splice(0,2);
			if(GameSettings.level == 1) {
				var _g = this.gm1.arrow1;
				_g.set_scaleX(_g.get_scaleX() * -1);
				this.gm1.arrow1.play(0,true);
				this.gm1.arrow1.set_visible(true);
			}
		} else if(this.currentNode.id == "n4") {
			this.hero.hero.stop();
			this.checkmat2();
			this.gm1.heroBusy = false;
			this.gm1.processQueue.splice(0,2);
			if(GameSettings.level == 1) {
				this.gm1.arrow1.set_x(fw_Config.convertWidth(this.gm1.common.hudIcon3.get_x() + 30));
				this.gm1.arrow1.set_y(fw_Config.convertHeight(this.gm1.common.hudIcon3.get_y() - 50));
				this.gm1.arrow1.play(0,true);
				this.gm1.arrow1.set_visible(true);
				this.gm1.common.hudIcon3.buttonMode = true;
				this.gm1.common.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg2)));
			}
		}
	}
	,checkmat1: function() {
		if(this.gm1.heroState == "noTray") {
			var k = this.basket2Array.length;
			var _g1 = 0;
			var _g = this.basket2Array.length;
			while(_g1 < _g) {
				var i = _g1++;
				k--;
				if(this.basket2Array[k].get_visible()) {
					this.basket2Array[k].set_visible(false);
					this.gm1.currentItem = this.basket2Array[k].obj.frameIndex;
					this.gm1.heroState = "withTray";
					this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
					this.hero.hero.gotoFrame(3);
					this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmB.set_visible(false);
					this.hero.itmF.set_x(fw_Config.convertWidth(30));
					this.hero.itmF.set_visible(true);
					GameSettings.color1Total -= this.gm1.currentItem - 14;
					this.mat1Sprite.removeChild(this.basket2Array[k]);
					this.basket2Array.splice(k,1);
					break;
				}
			}
		} else {
			this.checkCurrentObj();
			if(this.gm1.heroState == "noTray") {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(3);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			}
		}
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.hero.setSmoothing(true);
	}
	,checkmat2: function() {
		var k = this.basket3Array.length;
		if(this.gm1.heroState == "noTray") {
			var _g1 = 0;
			var _g = this.basket3Array.length;
			while(_g1 < _g) {
				var i = _g1++;
				k--;
				if(this.basket3Array[k].get_visible()) {
					this.basket3Array[k].set_visible(false);
					GameSettings.availableBasket2--;
					this.gm1.currentItem = 14;
					this.gm1.heroState = "withTray";
					this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),10);
					this.hero.hero.gotoFrame(2);
					this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
					this.hero.itmB.set_visible(false);
					this.hero.itmF.set_x(fw_Config.convertWidth(0));
					this.hero.itmF.set_visible(true);
					break;
				}
			}
		} else {
			this.checkCurrentObj();
			if(this.gm1.heroState == "noTray") {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),10);
				this.hero.hero.gotoFrame(2);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			}
		}
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.hero.setSmoothing(true);
	}
	,checkItem: function() {
		if(this.gm1.currentItem == 14) {
			var _g1 = 0;
			var _g = this.basket3Array.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.basket3Array[i].get_visible()) {
					this.basket3Array[i].set_visible(true);
					GameSettings.availableBasket2++;
					this.gm1.currentItem = 0;
					this.gm1.heroState = "noTray";
					break;
				}
			}
		} else if(this.gm1.currentItem > 14) {
			var _g11 = 0;
			var _g2 = this.basket2Array.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(!this.basket2Array[i1].get_visible()) {
					this.basket2Array[i1].set_visible(true);
					GameSettings.color1Total += this.gm1.currentItem - 14;
					this.gm1.currentItem = 0;
					this.gm1.heroState = "noTray";
					break;
				}
			}
		}
	}
	,checkCurrentObj: function() {
		if(this.gm1.currentItem == 14 && this.gm1.processQueue[0] != "bg2") {
			var _g1 = 0;
			var _g = this.basket3Array.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.basket3Array[i].get_visible()) {
					this.basket3Array[i].set_visible(true);
					GameSettings.availableBasket2++;
					this.gm1.currentItem = 0;
					this.gm1.heroState = "noTray";
					break;
				}
			}
		} else if(this.gm1.currentItem > 14 && this.gm1.processQueue[0] != "bg4") {
			var m = Math.floor(GameSettings.color1Total / 3);
			var m1 = Math.floor(GameSettings.color1Total % 3);
			if(m1 > 0) m++;
			var k = this.gm1.currentItem - 14;
			GameSettings.color1Total += k;
			k = Math.floor(GameSettings.color1Total / 3);
			var k1 = GameSettings.color1Total % 3;
			if(k1 > 0) k++;
			if(m >= k) {
				GameSettings.availableBasket2++;
				if(GameSettings.availableBasket2 <= this.basket3Array.length && !this.basket3Array[this.basket3Array.length - 1].get_visible()) {
					var _g11 = 0;
					var _g2 = this.basket3Array.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!this.basket3Array[i1].get_visible()) {
							this.basket3Array[i1].set_visible(true);
							break;
						}
					}
				} else {
					var k2 = GameSettings.availableBasket2 - 1;
					this.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
					this.mat2Sprite.addChild(this.basket);
					this.basket.set_x(fw_Config.convertWidth(this.bkt3Pos[k2]));
					this.basket.set_y(fw_Config.convertHeight(this.bkt3Pos[k2 + 12]));
					this.basket.set_scaleX(this.basket.set_scaleY(.8));
					this.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.basket.setSmoothing(true);
					this.basket3Array.push(this.basket);
				}
			}
			if(k == this.basket2Array.length) {
				if(k1 > 0) k1 = k1 + 14; else k1 = 17;
				this.basket2Array[k - 1].obj.gotoFrame(k1);
				this.basket2Array[k - 1].set_visible(true);
			} else {
				if(k > 0) k--;
				this.basket2 = new game_scenes_ObjGame("sack");
				this.basket2.obj.setFrames(GameSettings.d.getFrames("tray"),5);
				this.mat1Sprite.addChild(this.basket2);
				this.basket2.obj.gotoFrame(17);
				this.basket2.set_x(fw_Config.convertWidth(this.bkt2Pos[k]));
				this.basket2.set_y(fw_Config.convertHeight(this.bkt2Pos[k + 12]));
				this.basket2.set_scaleX(this.basket2.set_scaleY(.8));
				if(this.basket2Array.length > 0) this.basket2Array[this.basket2Array.length - 1].obj.gotoFrame(17);
				this.basket2Array.push(this.basket2);
				this.basket2.obj.setSmoothing(true);
				this.basket2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				if(k1 > 0) k = k1 + 14; else k = 17;
				this.basket2.obj.gotoFrame(k);
			}
			this.gm1.currentItem = 0;
			this.gm1.heroState = "noTray";
		}
	}
	,checkTailor: function() {
		var k;
		if(this.helper.state == "idle" && GameSettings.tailorWool == 0) {
			this.helper.obj.setFrames(GameSettings.d.getFrames("helper"),10);
			this.helper.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.helper.obj.setSmoothing(true);
			this.helper.state = "tailoring";
			this.helper.obj.play(0,true);
			this.helper.timer = 0;
			if(GameSettings.level == 1 || GameSettings.level > 1 && !GameSettings.bg3played) this.helper.timer = 250;
			this.helperBkt1.obj.gotoFrame(9);
			this.helperBkt2.obj.gotoFrame(14);
			this.helperBkt2.set_visible(true);
		} else {
			GameSettings.tailorWool++;
			if(GameSettings.tailorWool <= this.basket1Array.length) {
				var _g1 = 0;
				var _g = this.basket1Array.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(!this.basket1Array[i].get_visible()) {
						this.basket1Array[i].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.tailorWool - 1;
				this.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket2"));
				this.addChild(this.basket);
				this.basket.set_x(fw_Config.convertWidth(this.bkt1Pos[k]));
				this.basket.set_y(fw_Config.convertHeight(this.bkt1Pos[k + 12]));
				this.basket.set_scaleX(this.basket.set_scaleY(.8));
				this.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.basket.setSmoothing(true);
				this.basket1Array.push(this.basket);
			}
		}
		GameSettings.score += GameSettings.bonus + 10;
		this.gm1.currentItem = 0;
		this.gm1.heroState = "noTray";
	}
	,tailerFun: function(delta) {
		var k;
		if(this.helper.state == "idle") {
			if(GameSettings.tailorWool > 0) {
				k = this.basket1Array.length;
				var _g1 = 0;
				var _g = this.basket1Array.length;
				while(_g1 < _g) {
					var i = _g1++;
					k--;
					if(this.basket1Array[k].get_visible()) {
						this.basket1Array[k].set_visible(false);
						break;
					}
				}
				GameSettings.tailorWool--;
				this.helper.obj.setFrames(GameSettings.d.getFrames("helper"),10);
				this.helper.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.helper.obj.setSmoothing(true);
				this.helper.state = "tailoring";
				this.helper.obj.play(1,true);
				this.helper.timer = 0;
				this.helperBkt1.obj.gotoFrame(9);
				this.helperBkt2.obj.gotoFrame(14);
				this.helperBkt2.set_visible(true);
			}
		} else if(this.helper.state == "tailoring") {
			this.helper.timer += delta;
			if(this.helper.timer >= 330) {
				this.helper.timer = 0;
				if(GameSettings.level == 1 || GameSettings.level > 1 && !GameSettings.bg3played) this.helper.timer = 310;
				if(this.helperBkt1.obj.frameIndex > 0) this.helperBkt1.obj.gotoFrame(this.helperBkt1.obj.frameIndex - 1);
				if(this.helperBkt1.obj.frameIndex == 6) this.helperBkt2.obj.gotoFrame(15);
				if(this.helperBkt1.obj.frameIndex == 3) this.helperBkt2.obj.gotoFrame(16);
				if(this.helperBkt1.obj.frameIndex == 0) this.helperBkt2.obj.gotoFrame(17);
				if(this.helperBkt1.obj.frameIndex == 0) {
					this.helperBkt2.set_visible(false);
					GameSettings.color1Total += 3;
					k = Math.floor(GameSettings.color1Total / 3);
					var k1 = GameSettings.color1Total % 3;
					if(k1 > 0) k++;
					if(this.basket2Array.length > 0 && !this.basket2Array[this.basket2Array.length - 1].get_visible()) {
						if(k1 > 0) k1 += 14; else k1 = 17;
						var _g11 = 0;
						var _g2 = this.basket2Array.length;
						while(_g11 < _g2) {
							var i1 = _g11++;
							if(!this.basket2Array[i1].get_visible()) {
								if(i1 > 0) this.basket2Array[i1 - 1].obj.gotoFrame(17);
								this.basket2Array[i1].obj.gotoFrame(k1);
								this.basket2Array[i1].set_visible(true);
								break;
							}
						}
					} else {
						if(k > 0) k--;
						this.basket2 = new game_scenes_ObjGame("sack");
						this.basket2.obj.setFrames(GameSettings.d.getFrames("tray"),5);
						this.mat1Sprite.addChild(this.basket2);
						this.basket2.set_x(fw_Config.convertWidth(this.bkt2Pos[k]));
						this.basket2.set_y(fw_Config.convertHeight(this.bkt2Pos[k + 12]));
						this.basket2.set_scaleX(this.basket2.set_scaleY(.8));
						this.basket2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
						this.basket2.obj.setSmoothing(true);
						if(this.basket2Array.length > 0) this.basket2Array[this.basket2Array.length - 1].obj.gotoFrame(17);
						this.basket2Array.push(this.basket2);
						this.basket2.obj.gotoFrame(17);
						if(k1 > 0) {
							k1 += 14;
							this.basket2.obj.gotoFrame(k1);
						}
					}
					this.helper.obj.setFrames(GameSettings.d.getFrames("helperidle"),10);
					this.helper.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.helper.obj.setSmoothing(true);
					this.helper.state = "idle";
					if(GameSettings.level == 1 || !GameSettings.bg3played) {
						this.gm1.TutNo = 3;
						this.gm1.arrow1.set_x(fw_Config.convertWidth(this.gm1.common.hudIcon3.get_x() + 50));
						this.gm1.arrow1.set_y(fw_Config.convertHeight(this.gm1.common.hudIcon3.get_y() - 40));
						this.gm1.arrow1.play(0,true);
						this.gm1.arrow1.set_visible(true);
						this.gm1.tutorial1.addMessages("gotobg21");
						this.gm1.tutorial1.set_x(this.gm1.arrow1.get_x() - this.gm1.tutorial1.get_width());
						this.gm1.tutorial1.set_y(this.gm1.arrow1.get_y() - 5);
						this.gm1.tutorial1.set_visible(true);
						this.gm1.common.hudIcon3.buttonMode = true;
						this.gm1.common.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg)));
					}
				}
			}
		}
	}
	,changeBg1: function() {
		if(this.gm1.currentBg == "bg3") {
			this.checkCurrentObj();
			this.removeBg3Items();
			this.gm1.changeBg();
		}
	}
	,removeBg3Items: function() {
		this.bg3Sprite.removeChild(this.bg3);
		this.bg3 = null;
	}
	,onExit: function() {
		var k;
		if(GameSettings.level > 1) {
			this.mat1Sprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnmat1));
			this.mat2Sprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnmat2));
		}
		if(this.bg3 != null) {
			this.bg3Sprite.removeChild(this.bg3);
			this.bg3 = null;
		}
		if(this.hero != null) {
			this.removeChild(this.hero);
			this.hero = null;
		}
		this.obj3Sprite.removeChild(this.helper);
		this.obj3Sprite.removeChild(this.helperBkt1);
		this.obj3Sprite.removeChild(this.helperBkt2);
		if(this.mat1Sprite.get_numChildren() > 0) {
			k = this.mat1Sprite.get_numChildren();
			var _g = 0;
			while(_g < k) {
				var i = _g++;
				this.mat1Sprite.removeChildAt(0);
			}
		}
		this.obj3Sprite.removeChild(this.mat1Sprite);
		if(this.mat2Sprite.get_numChildren() > 0) {
			k = this.mat2Sprite.get_numChildren();
			var _g1 = 0;
			while(_g1 < k) {
				var i1 = _g1++;
				this.mat2Sprite.removeChildAt(0);
			}
		}
		this.obj3Sprite.removeChild(this.mat2Sprite);
		if(this.get_numChildren() > 0) {
			k = this.get_numChildren();
			var _g2 = 0;
			while(_g2 < k) {
				var i2 = _g2++;
				this.removeChildAt(0);
			}
		}
	}
	,__class__: game_scenes_Game3
});
var game_scenes_Game4 = function(gm) {
	openfl_display_Sprite.call(this);
	this.gm1 = gm;
	this.onInit();
};
$hxClasses["game.scenes.Game4"] = game_scenes_Game4;
game_scenes_Game4.__name__ = ["game","scenes","Game4"];
game_scenes_Game4.__super__ = openfl_display_Sprite;
game_scenes_Game4.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.grid = new fw_ai_pathfinding_node_Grid();
		this.grid.parseXML(Xml.parse("<nodes height=\"640\" width=\"960\"><node x=\"391\" join=\"n2\" y=\"308\" id=\"n1\"/><node x=\"454\" join=\"n1,n3\" y=\"344\" id=\"n2\"/><node x=\"506\" join=\"n2,n4\" y=\"313\" id=\"n3\"/><node x=\"563\" join=\"n3,n5\" y=\"346\" id=\"n4\"/><node x=\"674\" join=\"n4\" y=\"410\" id=\"n5\"/></nodes>"));
		this.gm1.processQueue = [];
		this.basketArray = [];
		this.color1Array = [];
		this.color2Array = [];
		this.color3Array = [];
		this.color4Array = [];
		this.trayArray = [];
		this.trayColorArray = [];
		this.gm1.heroBusy = false;
		this.heroMove = false;
		this.gm1.heroState = "noTray";
		this.speed = 3;
		this.gm1.currentItem = 0;
		this.bg4Sprite = new openfl_display_Sprite();
		this.addChild(this.bg4Sprite);
		this.obj4Sprite = new openfl_display_Sprite();
		this.addChild(this.obj4Sprite);
		this.basketSprite = new openfl_display_Sprite();
		this.basketSprite.get_graphics().beginFill(2228224,0);
		this.basketSprite.get_graphics().drawRect(180,80,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.basketSprite.get_graphics().endFill();
		this.obj4Sprite.addChild(this.basketSprite);
		this.basketSprite.set_x(fw_Config.convertWidth(330));
		this.basketSprite.set_y(fw_Config.convertHeight(30));
		this.basketArray = [];
		var k = Math.floor(GameSettings.whiteTotal / 3);
		var k1 = GameSettings.whiteTotal % 3;
		if(k1 > 0) k++;
		this.bktPos = [210,160,110,260,210,160,150,175,200,175,200,225];
		var _g = 0;
		while(_g < k) {
			var i = _g++;
			this.basket = new game_scenes_ObjGame("sack");
			this.basket.obj.setFrames(GameSettings.d.getFrames("tray"),5);
			this.basketSprite.addChild(this.basket);
			this.basket.obj.gotoFrame(17);
			this.basket.set_x(fw_Config.convertWidth(this.bktPos[i]));
			this.basket.set_y(fw_Config.convertHeight(this.bktPos[i + 6]));
			this.basket.set_scaleX(this.basket.set_scaleY(.8));
			this.basketArray.push(this.basket);
			this.basket.obj.setSmoothing(true);
			this.basket.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			if(i == k - 1 && k1 > 0) {
				k1 += 14;
				this.basket.obj.gotoFrame(k1);
			}
		}
		this.color1Sprite = new openfl_display_Sprite();
		this.color1Sprite.get_graphics().beginFill(2228224,0);
		this.color1Sprite.get_graphics().drawRect(0,0,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.color1Sprite.get_graphics().endFill();
		this.obj4Sprite.addChild(this.color1Sprite);
		this.color1Sprite.set_x(fw_Config.convertWidth(470));
		this.color1Sprite.set_y(fw_Config.convertHeight(365));
		this.color2Sprite = new openfl_display_Sprite();
		this.color2Sprite.get_graphics().beginFill(2228224,0);
		this.color2Sprite.get_graphics().drawRect(0,0,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.color2Sprite.get_graphics().endFill();
		this.obj4Sprite.addChild(this.color2Sprite);
		this.color2Sprite.set_x(fw_Config.convertWidth(590));
		this.color2Sprite.set_y(fw_Config.convertHeight(435));
		this.color3Sprite = new openfl_display_Sprite();
		this.color3Sprite.get_graphics().beginFill(2228224,0);
		this.color3Sprite.get_graphics().drawRect(0,0,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.color3Sprite.get_graphics().endFill();
		this.obj4Sprite.addChild(this.color3Sprite);
		this.color3Sprite.set_x(fw_Config.convertWidth(390));
		this.color3Sprite.set_y(fw_Config.convertHeight(415));
		this.color4Sprite = new openfl_display_Sprite();
		this.color4Sprite.get_graphics().beginFill(2228224,0);
		this.color4Sprite.get_graphics().drawRect(0,0,fw_Config.convertWidth(40),fw_Config.convertHeight(40));
		this.color4Sprite.get_graphics().endFill();
		this.obj4Sprite.addChild(this.color4Sprite);
		this.color4Sprite.set_x(fw_Config.convertWidth(510));
		this.color4Sprite.set_y(fw_Config.convertHeight(485));
		this.addColoerYarns();
		this.bottle1 = null;
		this.bottle2 = null;
		this.bottle3 = null;
		this.bottle4 = null;
		this.addBottle();
		var k2;
		if(GameSettings.gameLoaded) {
			k2 = 0;
			var _g1 = 0;
			var _g2 = this.trayArray.length;
			while(_g1 < _g2) {
				var i1 = _g1++;
				this.trayArray[i1].obj.gotoFrame(GameSettings.savedData.trayarray[k2]);
				this.trayArray[i1].state = GameSettings.savedData.trayarray[k2 + 1];
				this.trayArray[i1].timer = GameSettings.savedData.trayarray[k2 + 2];
				this.trayArray[i1].set_visible(GameSettings.savedData.trayarray[k2 + 3]);
				this.trayColorArray[i1].set_visible(GameSettings.savedData.trayarray[k2 + 4]);
				this.trayColorArray[i1].obj.gotoFrame(GameSettings.savedData.trayarray[k2 + 5]);
				k2 += 6;
			}
		}
		this.bord = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("yarnList"));
		this.addChild(this.bord);
		this.bord.set_x(fw_Config.convertWidth(55));
		this.bord.set_y(fw_Config.convertHeight(110));
		this.bord.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.bord.setSmoothing(true);
		if(GameSettings.level > 0) {
			this.basketSprite.buttonMode = true;
			this.basketSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBusket));
			var _g11 = 0;
			var _g3 = this.trayArray.length;
			while(_g11 < _g3) {
				var i2 = _g11++;
				this.trayArray[i2].buttonMode = true;
				this.trayArray[i2].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
			}
		}
		this.hero = new game_scenes_Hero(this.gm1);
		this.addChild(this.hero);
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		this.hero.itmB.set_visible(false);
		this.hero.itmF.set_visible(false);
		this.hero.mouseChildren = false;
		this.hero.mouseEnabled = false;
	}
	,addBottle: function() {
		if(GameSettings.color1Up && this.bottle1 == null) {
			this.bottle1 = new game_scenes_ObjGame("sack");
			this.bottle1.obj.setFrames(GameSettings.d.getFrames("color"),5);
			this.obj4Sprite.addChild(this.bottle1);
			this.bottle1.set_x(fw_Config.convertWidth(780));
			this.bottle1.set_y(fw_Config.convertHeight(280));
			this.bottle1.obj.gotoFrame(GameSettings.clr1 - 1);
			this.bottle1.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bottle1.obj.setSmoothing(true);
			this.bottle1.id = "bottle1";
			this.bottle1.state = "idle";
			this.bar1 = new game_scenes_ObjGame("sack");
			this.bar1.obj.setFrames(GameSettings.d.getFrames("colorBar"),5);
			this.obj4Sprite.addChild(this.bar1);
			this.bar1.set_x(fw_Config.convertWidth(780));
			this.bar1.set_y(fw_Config.convertHeight(280));
			this.bar1.obj.gotoFrame(GameSettings.bar1Frame);
			this.bar1.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bar1.obj.setSmoothing(true);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(720));
			this.tray.set_y(fw_Config.convertHeight(325));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray1";
			this.tray.state = "idle";
			this.tray.indux = 0;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color1";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(660));
			this.tray.set_y(fw_Config.convertHeight(355));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.state = "idle";
			this.trayArray.push(this.tray);
			this.tray.id = "tray2";
			this.tray.indux = 1;
			this.tray.timer = 0;
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color1";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(600));
			this.tray.set_y(fw_Config.convertHeight(385));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray3";
			this.tray.state = "idle";
			this.tray.indux = 2;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color1";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.bottle1.buttonMode = true;
			this.bottle1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.addIndex(this.bottle1);
		}
		if(GameSettings.color2Up && this.bottle2 == null) {
			this.bottle2 = new game_scenes_ObjGame("sack");
			this.bottle2.obj.setFrames(GameSettings.d.getFrames("color"),5);
			this.obj4Sprite.addChild(this.bottle2);
			this.bottle2.set_x(fw_Config.convertWidth(835));
			this.bottle2.set_y(fw_Config.convertHeight(305));
			this.bottle2.obj.gotoFrame(GameSettings.clr2 - 1);
			this.bottle2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bottle2.obj.setSmoothing(true);
			this.bottle2.id = "bottle2";
			this.bottle2.state = "idle";
			this.bar2 = new game_scenes_ObjGame("sack");
			this.bar2.obj.setFrames(GameSettings.d.getFrames("colorBar"),5);
			this.obj4Sprite.addChild(this.bar2);
			this.bar2.set_x(fw_Config.convertWidth(835));
			this.bar2.set_y(fw_Config.convertHeight(305));
			this.bar2.obj.gotoFrame(GameSettings.bar2Frame);
			this.bar2.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bar2.obj.setSmoothing(true);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(776));
			this.tray.set_y(fw_Config.convertHeight(353));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray4";
			this.tray.state = "idle";
			this.tray.indux = 3;
			this.trayArray.push(this.tray);
			this.tray.timer = 0;
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color2";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(716));
			this.tray.set_y(fw_Config.convertHeight(383));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray5";
			this.tray.state = "idle";
			this.tray.indux = 4;
			this.trayArray.push(this.tray);
			this.tray.timer = 0;
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color2";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(656));
			this.tray.set_y(fw_Config.convertHeight(413));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray6";
			this.tray.state = "idle";
			this.tray.indux = 5;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color2";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.bottle2.buttonMode = true;
			this.bottle2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.addIndex(this.bottle2);
		}
		if(GameSettings.color3Up && this.bottle3 == null) {
			this.bottle3 = new game_scenes_ObjGame("sack");
			this.bottle3.obj.setFrames(GameSettings.d.getFrames("color"),5);
			this.obj4Sprite.addChild(this.bottle3);
			this.bottle3.set_x(fw_Config.convertWidth(890));
			this.bottle3.set_y(fw_Config.convertHeight(330));
			this.bottle3.obj.gotoFrame(GameSettings.clr3 - 1);
			this.bottle3.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bottle3.obj.setSmoothing(true);
			this.bottle3.id = "bottle3";
			this.bottle3.state = "idle";
			this.bar3 = new game_scenes_ObjGame("sack");
			this.bar3.obj.setFrames(GameSettings.d.getFrames("colorBar"),5);
			this.obj4Sprite.addChild(this.bar3);
			this.bar3.set_x(fw_Config.convertWidth(890));
			this.bar3.set_y(fw_Config.convertHeight(330));
			this.bar3.obj.gotoFrame(GameSettings.bar3Frame);
			this.bar3.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bar3.obj.setSmoothing(true);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(832));
			this.tray.set_y(fw_Config.convertHeight(381));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray7";
			this.tray.state = "idle";
			this.tray.indux = 6;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color3";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(772));
			this.tray.set_y(fw_Config.convertHeight(411));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray8";
			this.tray.state = "idle";
			this.tray.indux = 7;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color3";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(712));
			this.tray.set_y(fw_Config.convertHeight(441));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray9";
			this.tray.state = "idle";
			this.tray.indux = 8;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color3";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.bottle3.buttonMode = true;
			this.bottle3.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.addIndex(this.bottle3);
		}
		if(GameSettings.color4Up && this.bottle4 == null) {
			this.bottle4 = new game_scenes_ObjGame("sack");
			this.bottle4.obj.setFrames(GameSettings.d.getFrames("color"),5);
			this.obj4Sprite.addChild(this.bottle4);
			this.bottle4.set_x(fw_Config.convertWidth(945));
			this.bottle4.set_y(fw_Config.convertHeight(355));
			this.bottle4.obj.gotoFrame(GameSettings.clr4 - 1);
			this.bottle4.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bottle4.obj.setSmoothing(true);
			this.bottle4.id = "bottle4";
			this.bottle4.state = "idle";
			this.bar4 = new game_scenes_ObjGame("sack");
			this.bar4.obj.setFrames(GameSettings.d.getFrames("colorBar"),5);
			this.obj4Sprite.addChild(this.bar4);
			this.bar4.set_x(fw_Config.convertWidth(945));
			this.bar4.set_y(fw_Config.convertHeight(355));
			this.bar4.obj.gotoFrame(GameSettings.bar4Frame);
			this.bar4.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.bar4.obj.setSmoothing(true);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(888));
			this.tray.set_y(fw_Config.convertHeight(409));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray10";
			this.tray.state = "idle";
			this.tray.indux = 9;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color4";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(828));
			this.tray.set_y(fw_Config.convertHeight(439));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray11";
			this.tray.state = "idle";
			this.tray.indux = 10;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color4";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.tray = new game_scenes_ObjGame("sack");
			this.tray.obj.setFrames(GameSettings.d.getFrames("colorTray"),5);
			this.obj4Sprite.addChild(this.tray);
			this.tray.set_x(fw_Config.convertWidth(768));
			this.tray.set_y(fw_Config.convertHeight(469));
			this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.tray.obj.setSmoothing(true);
			this.tray.id = "tray12";
			this.tray.state = "idle";
			this.tray.indux = 11;
			this.tray.timer = 0;
			this.trayArray.push(this.tray);
			this.trayColor = new game_scenes_ObjGame("sack");
			this.trayColor.obj.setFrames(GameSettings.d.getFrames("yarn_color"),5);
			this.tray.addChild(this.trayColor);
			this.trayColor.set_x(fw_Config.convertWidth(15));
			this.trayColor.set_y(fw_Config.convertHeight(2));
			this.trayColor.set_visible(false);
			this.trayColor.id = "color4";
			this.trayColor.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.trayColor.obj.setSmoothing(true);
			this.trayColorArray.push(this.trayColor);
			this.bottle4.buttonMode = true;
			this.bottle4.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.addIndex(this.bottle4);
		}
		var _g1 = 0;
		var _g = this.trayArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.trayArray[i].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
				this.trayArray[i].buttonMode = true;
				this.trayArray[i].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
			}
		}
	}
	,addIndex: function(bottle) {
		if(this.trayArray.length == 3) bottle.indux = 0; else if(this.trayArray.length == 6) bottle.indux = 3; else if(this.trayArray.length == 9) bottle.indux = 6; else if(this.trayArray.length == 12) bottle.indux = 9;
	}
	,sellupDate4: function() {
		var _g1 = 0;
		var _g = this.color1Array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i >= GameSettings.color2Total) this.color1Array[i].set_visible(false);
		}
		var _g11 = 0;
		var _g2 = this.color2Array.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(i1 >= GameSettings.color3Total) this.color2Array[i1].set_visible(false);
		}
		var _g12 = 0;
		var _g3 = this.color3Array.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(i2 >= GameSettings.color4Total) this.color3Array[i2].set_visible(false);
		}
		var _g13 = 0;
		var _g4 = this.color4Array.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(i3 >= GameSettings.color5Total) this.color4Array[i3].set_visible(false);
		}
	}
	,buyupDate4: function() {
		this.addBottle();
	}
	,addBg4: function() {
		this.bg4 = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/gameBg3.png"));
		this.bg4Sprite.addChild(this.bg4);
		this.bg4.smoothing = true;
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat2_gameBg34"));
		this.bg4Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.set_x(fw_Config.convertWidth(430));
		this.mat.set_y(fw_Config.convertHeight(345));
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat2_gameBg34"));
		this.bg4Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.set_x(fw_Config.convertWidth(350));
		this.mat.set_y(fw_Config.convertHeight(395));
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat2_gameBg34"));
		this.bg4Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.set_x(fw_Config.convertWidth(550));
		this.mat.set_y(fw_Config.convertHeight(415));
		this.mat = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("mat2_gameBg34"));
		this.bg4Sprite.addChild(this.mat);
		this.mat.setSmoothing(true);
		this.mat.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.mat.set_x(fw_Config.convertWidth(470));
		this.mat.set_y(fw_Config.convertHeight(465));
		this.currentNode = this.grid.getNodeById("n1");
		this.hero.set_x(fw_Config.convertWidth(this.currentNode.x));
		this.hero.set_y(fw_Config.convertHeight(this.currentNode.y));
		if(this.gm1.heroState == "noTray") {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),15);
			this.hero.hero.gotoFrame(3);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),15);
			this.hero.hero.gotoFrame(0);
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmB.set_x(fw_Config.convertWidth(0));
			this.hero.itmB.set_visible(true);
			this.hero.itmF.set_visible(false);
			this.gm1.processQueue.push("n1");
			this.gm1.processQueue.push("put");
		}
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.hero.setSmoothing(true);
	}
	,addColoerYarns: function() {
		this.colorPos = [0,14,28,42,56,70,8,22,36,50,64,16,30,44,58,24,38,52,32,46,40,0,8,16,24,32,40,0,8,16,24,32,0,8,16,24,0,8,16,0,8,16];
		var _g1 = 0;
		var _g = GameSettings.color2Total;
		while(_g1 < _g) {
			var i = _g1++;
			this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color1"));
			this.color1Sprite.addChild(this.color);
			this.color.setSmoothing(true);
			this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.color.set_x(fw_Config.convertWidth(this.colorPos[i]));
			this.color.set_y(fw_Config.convertHeight(this.colorPos[i + 21]));
			this.color1Array.push(this.color);
		}
		var _g11 = 0;
		var _g2 = GameSettings.color3Total;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color2"));
			this.color2Sprite.addChild(this.color);
			this.color.setSmoothing(true);
			this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.color.set_x(fw_Config.convertWidth(this.colorPos[i1]));
			this.color.set_y(fw_Config.convertHeight(this.colorPos[i1 + 21]));
			this.color2Array.push(this.color);
		}
		var _g12 = 0;
		var _g3 = GameSettings.color4Total;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color3"));
			this.color3Sprite.addChild(this.color);
			this.color.setSmoothing(true);
			this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.color.set_x(fw_Config.convertWidth(this.colorPos[i2]));
			this.color.set_y(fw_Config.convertHeight(this.colorPos[i2 + 21]));
			this.color3Array.push(this.color);
		}
		var _g13 = 0;
		var _g4 = GameSettings.color5Total;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color4"));
			this.color4Sprite.addChild(this.color);
			this.color.setSmoothing(true);
			this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.color.set_x(fw_Config.convertWidth(this.colorPos[i3]));
			this.color.set_y(fw_Config.convertHeight(this.colorPos[i3 + 21]));
			this.color4Array.push(this.color);
		}
	}
	,clickOnBottle: function(e) {
		var nam = e.currentTarget.id;
		var k = Std.parseInt(nam.substring(6));
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		if(k == 1) {
			this.fillTray(this.bar1,this.bottle1);
			GameSettings.bar1Frame = this.bar1.obj.frameIndex;
		} else if(k == 2) {
			this.fillTray(this.bar2,this.bottle2);
			GameSettings.bar2Frame = this.bar2.obj.frameIndex;
		} else if(k == 3) {
			this.fillTray(this.bar3,this.bottle3);
			GameSettings.bar3Frame = this.bar3.obj.frameIndex;
		} else if(k == 4) {
			this.fillTray(this.bar4,this.bottle4);
			GameSettings.bar4Frame = this.bar4.obj.frameIndex;
		}
	}
	,fillTray: function(bar,bottle) {
		var k = bottle.indux;
		var frNo = bottle.obj.frameIndex;
		frNo++;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			if(this.trayArray[k] != null && this.trayArray[k].state == "idle" && bar.obj.frameIndex < 12) {
				this.trayArray[k].obj.gotoFrame(frNo);
				bar.obj.gotoFrame(bar.obj.frameIndex + 1);
				this.trayArray[k].state = "fill";
			}
			k++;
		}
		if(GameSettings.level == 0) {
			this.gm1.arrow.set_x(fw_Config.convertWidth(this.basketSprite.get_x() + 220));
			this.gm1.arrow.set_y(fw_Config.convertHeight(this.basketSprite.get_y() + 20));
			this.bottle1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.bottle1.buttonMode = false;
			this.basketSprite.buttonMode = true;
			this.basketSprite.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBusket));
		}
	}
	,clickOnBusket: function(e) {
		this.gm1.processQueue.push("n1");
		this.gm1.processQueue.push("busket");
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		if(GameSettings.level == 0) {
			this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[2].get_x()));
			this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[2].get_y() - 160));
			this.basketSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBusket));
			this.basketSprite.buttonMode = false;
			this.trayArray[2].buttonMode = true;
			this.trayArray[2].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
		}
	}
	,clickOnTray: function(e) {
		if(e.currentTarget.state != "idle" && e.currentTarget.state != "buy") {
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			var nam = e.currentTarget.id;
			var k = Std.parseInt(nam.substring(4));
			if(k <= 6) this.gm1.processQueue.push("n4"); else this.gm1.processQueue.push("n5");
			this.gm1.processQueue.push(nam);
		}
		if(GameSettings.level == 0) {
			this.gm1.arrow.stop();
			this.gm1.arrow.set_visible(false);
			if(this.trayArray[2].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
				this.trayArray[2].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
				this.trayArray[2].buttonMode = false;
			}
			if(this.trayArray[1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
				this.trayArray[1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
				this.trayArray[1].buttonMode = false;
			}
			if(this.trayArray[0].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
				this.trayArray[0].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
				this.trayArray[0].buttonMode = false;
			}
		}
	}
	,startItem: function(e) {
		e.currentTarget.startDrag();
	}
	,stopItem: function(e) {
		this.stopDrag();
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,loadGame4: function() {
		this.gm1.gameData.bar1Frame = GameSettings.bar1Frame;
		this.gm1.gameData.bar2Frame = GameSettings.bar2Frame;
		this.gm1.gameData.bar3Frame = GameSettings.bar3Frame;
		this.gm1.gameData.bar4Frame = GameSettings.bar4Frame;
		this.gm1.gameData.trayarray = [];
		var k;
		if(GameSettings.color1Up && this.bottle1 != null) {
			k = this.bottle1.indux;
			var _g = 0;
			while(_g < 3) {
				var i = _g++;
				this.gm1.gameData.trayarray.push(this.trayArray[k].obj.frameIndex);
				this.gm1.gameData.trayarray.push(this.trayArray[k].state);
				this.gm1.gameData.trayarray.push(this.trayArray[k].timer);
				this.gm1.gameData.trayarray.push(this.trayArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].obj.frameIndex);
				k++;
			}
		}
		if(GameSettings.color2Up && this.bottle2 != null) {
			k = this.bottle2.indux;
			var _g1 = 0;
			while(_g1 < 3) {
				var i1 = _g1++;
				this.gm1.gameData.trayarray.push(this.trayArray[k].obj.frameIndex);
				this.gm1.gameData.trayarray.push(this.trayArray[k].state);
				this.gm1.gameData.trayarray.push(this.trayArray[k].timer);
				this.gm1.gameData.trayarray.push(this.trayArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].obj.frameIndex);
				k++;
			}
		}
		if(GameSettings.color3Up && this.bottle3 != null) {
			k = this.bottle3.indux;
			var _g2 = 0;
			while(_g2 < 3) {
				var i2 = _g2++;
				this.gm1.gameData.trayarray.push(this.trayArray[k].obj.frameIndex);
				this.gm1.gameData.trayarray.push(this.trayArray[k].state);
				this.gm1.gameData.trayarray.push(this.trayArray[k].timer);
				this.gm1.gameData.trayarray.push(this.trayArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].obj.frameIndex);
				k++;
			}
		}
		if(GameSettings.color4Up && this.bottle4 != null) {
			k = this.bottle4.indux;
			var _g3 = 0;
			while(_g3 < 3) {
				var i3 = _g3++;
				this.gm1.gameData.trayarray.push(this.trayArray[k].obj.frameIndex);
				this.gm1.gameData.trayarray.push(this.trayArray[k].state);
				this.gm1.gameData.trayarray.push(this.trayArray[k].timer);
				this.gm1.gameData.trayarray.push(this.trayArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].get_visible());
				this.gm1.gameData.trayarray.push(this.trayColorArray[k].obj.frameIndex);
				k++;
			}
		}
	}
	,onUpdate: function(delta) {
		if(this.gm1.currentBg == "bg4") {
			if(this.hero != null) {
				this.heroMoving(delta);
				this.hero.hero.update();
			}
		}
		this.trayFunction(delta);
	}
	,heroMoving: function(delta) {
		if(!this.gm1.heroBusy && this.gm1.processQueue.length > 0) {
			if(this.gm1.processQueue[0] == "bg1" || this.gm1.processQueue[0] == "bg2" || this.gm1.processQueue[0] == "bg3" || this.gm1.processQueue[0] == "bg4") this.changeBg1(); else if(this.currentNode.id == this.gm1.processQueue[0]) {
				this.gm1.heroBusy = true;
				this.angleEngine(true);
			} else {
				this.path = this.grid.getPathPointsConverted(this.currentNode.id,this.gm1.processQueue[0]);
				this.pathIndex = 0;
				this.nextNode = this.path.shift();
				this.gm1.heroBusy = true;
				this.heroMove = true;
				this.angleEngine(false);
			}
		}
		if(this.heroMove) {
			var dx = this.nextNode.x - this.hero.get_x();
			var dy = this.nextNode.y - this.hero.get_y();
			var angle = Math.atan2(dy,dx);
			var dist = Math.sqrt(dx * dx + dy * dy);
			if(dist >= this.speed * delta) {
				var _g = this.hero;
				_g.set_x(_g.get_x() + fw_Config.convertWidth(Math.cos(angle) * this.speed * delta));
				var _g1 = this.hero;
				_g1.set_y(_g1.get_y() + fw_Config.convertHeight(Math.sin(angle) * this.speed * delta));
			} else {
				this.currentNode = this.nextNode;
				if(this.path.length > 0) {
					this.nextNode = this.path.shift();
					this.angleEngine(false);
				} else {
					this.currentNode = this.nextNode;
					this.heroMove = false;
					this.angleEngine(true);
				}
			}
		}
	}
	,angleEngine: function(turn) {
		if(!turn) {
			var delX = this.hero.get_x() - this.nextNode.x;
			var delY = this.hero.get_y() - this.nextNode.y;
			var state = "heroidle";
			if(delX > 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjB"; else state = "herowalkB";
			} else if(delX > 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjL"; else state = "herowalkL";
			} else if(delX < 0 && delY > 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjR"; else state = "herowalkR";
			} else if(delX < 0 && delY < 0) {
				if(this.gm1.heroState == "withTray") state = "herowalkobjF"; else state = "herowalkF";
			}
			if(this.gm1.heroState == "withTray") this.hero.hero.setFrames(GameSettings.d.getFrames(state),15); else this.hero.hero.setFrames(GameSettings.d.getFrames(state),15);
			this.hero.hero.play(0,true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			if(state == "herowalkobjF" || state == "herowalkobjL") {
				this.hero.itmF.set_visible(true);
				this.hero.itmB.set_visible(false);
				if(state == "herowalkobjF") this.hero.itmF.set_x(fw_Config.convertWidth(30)); else this.hero.itmF.set_x(fw_Config.convertWidth(0));
			} else if(state == "herowalkobjR" || state == "herowalkobjB") {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(true);
				if(state == "herowalkobjR") this.hero.itmB.set_x(fw_Config.convertWidth(30)); else this.hero.itmB.set_x(fw_Config.convertWidth(0));
			} else {
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			}
		} else if(this.currentNode.id == "n1") {
			this.hero.hero.stop();
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),15);
			this.hero.hero.gotoFrame(1);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.hero.hero.setSmoothing(true);
			this.checkMat();
			this.gm1.heroBusy = false;
			this.gm1.processQueue.splice(0,2);
		} else if(this.currentNode.id == "n4" || this.currentNode.id == "n5") {
			this.hero.hero.stop();
			if(this.gm1.heroState == "noTray") {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),15);
				this.hero.hero.gotoFrame(1);
				this.hero.hero.stop();
				this.hero.itmF.set_visible(false);
				this.hero.itmB.set_visible(false);
			} else {
				this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),15);
				this.hero.hero.gotoFrame(1);
				this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
				this.hero.itmB.set_x(fw_Config.convertWidth(30));
				this.hero.itmB.set_visible(true);
				this.hero.itmF.set_visible(false);
			}
			this.hero.hero.setSmoothing(true);
			this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
			this.checkTray();
			this.gm1.heroBusy = false;
			this.gm1.processQueue.splice(0,2);
		}
	}
	,trayFunction: function(delta) {
		var _g1 = 0;
		var _g = this.trayArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.trayArray[i] != null) {
				var _g2 = this.trayArray[i].state;
				switch(_g2) {
				case "idle":
					break;
				case "work":
					this.trayArray[i].timer += delta;
					if(GameSettings.level > 0) {
						if(this.trayArray[i].timer >= 2500) {
							this.trayColorArray[i].obj.gotoFrame(this.trayArray[i].obj.frameIndex);
							this.trayArray[i].obj.gotoFrame(0);
							this.trayArray[i].state = "done";
						}
					} else {
						if(this.trayArray[2].timer >= 700 && this.trayArray[1].state == "work" && this.trayArray[0].state == "work" && this.trayArray[2].state == "work") {
							this.trayColorArray[2].obj.gotoFrame(this.trayArray[2].obj.frameIndex);
							this.trayArray[2].obj.gotoFrame(0);
							this.trayArray[2].state = "done";
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[2].get_x()));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[2].get_y() - 160));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.trayArray[2].buttonMode = true;
							this.trayArray[2].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						}
						if(this.trayArray[1].timer >= 700 && this.trayArray[2].state == "idle" && this.trayArray[0].state == "work" && this.trayArray[1].state == "work") {
							this.trayColorArray[1].obj.gotoFrame(this.trayArray[1].obj.frameIndex);
							this.trayArray[1].obj.gotoFrame(0);
							this.trayArray[1].state = "done";
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[1].get_x()));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[1].get_y() - 160));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.trayArray[1].buttonMode = true;
							this.trayArray[1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						}
						if(this.trayArray[0].timer >= 700 && this.trayArray[1].state == "idle" && this.trayArray[0].state == "work") {
							this.trayColorArray[0].obj.gotoFrame(this.trayArray[0].obj.frameIndex);
							this.trayArray[0].obj.gotoFrame(0);
							this.trayArray[0].state = "done";
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[0].get_x()));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[0].get_y() - 160));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.trayArray[0].buttonMode = true;
							this.trayArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						}
					}
					break;
				}
			}
		}
	}
	,checkTray: function() {
		var nam = this.gm1.processQueue[1];
		var k1 = Std.parseInt(nam.substring(4));
		k1--;
		var _g1 = 0;
		var _g = this.trayArray.length;
		while(_g1 < _g) {
			var k = _g1++;
			if(this.trayArray[k] != null && this.trayArray[k].id == nam) {
				if(this.trayArray[k].state == "fill") {
					if(GameSettings.level == 0) {
						if(this.gm1.currentItem == 17) {
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[1].get_x()));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[1].get_y() - 160));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.trayArray[1].buttonMode = true;
							this.trayArray[1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						} else if(this.gm1.currentItem == 16) {
							this.gm1.arrow.set_x(fw_Config.convertWidth(this.trayArray[0].get_x()));
							this.gm1.arrow.set_y(fw_Config.convertHeight(this.trayArray[0].get_y() - 160));
							this.gm1.arrow.play(0,true);
							this.gm1.arrow.set_visible(true);
							this.trayArray[0].buttonMode = true;
							this.trayArray[0].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						}
					}
					if(this.gm1.currentItem > 14) {
						this.trayColorArray[k].obj.gotoFrame(0);
						this.trayColorArray[k].set_visible(true);
						this.trayArray[k].state = "work";
						this.trayArray[k].timer = 0;
						if(GameSettings.level == 0) this.trayArray[k].timer = 500;
						GameSettings.score += GameSettings.bonus + 5;
						this.gm1.currentItem--;
						if(this.gm1.currentItem == 14) {
							this.gm1.heroState = "noTray";
							this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),15);
							this.hero.hero.gotoFrame(1);
							this.hero.hero.stop();
							this.hero.itmF.set_visible(false);
							this.hero.itmB.set_visible(false);
							this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.hero.hero.setSmoothing(true);
							GameSettings.availableBasket2++;
							if(GameSettings.availableBasket2 <= this.gm1.gameBg3.basket3Array.length && !this.gm1.gameBg3.basket3Array[this.gm1.gameBg3.basket3Array.length - 1].get_visible()) {
								var _g3 = 0;
								var _g2 = this.gm1.gameBg3.basket3Array.length;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!this.gm1.gameBg3.basket3Array[i].get_visible()) {
										this.gm1.gameBg3.basket3Array[i].set_visible(true);
										break;
									}
								}
							} else {
								k1 = GameSettings.availableBasket2 - 1;
								this.gm1.gameBg3.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
								this.gm1.gameBg3.mat2Sprite.addChild(this.gm1.gameBg3.basket);
								this.gm1.gameBg3.basket.set_x(fw_Config.convertWidth(this.gm1.gameBg3.bkt3Pos[k1]));
								this.gm1.gameBg3.basket.set_y(fw_Config.convertHeight(this.gm1.gameBg3.bkt3Pos[k1 + 12]));
								this.gm1.gameBg3.basket.set_scaleX(this.gm1.gameBg3.basket.set_scaleY(.8));
								this.gm1.gameBg3.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
								this.gm1.gameBg3.basket.setSmoothing(true);
								this.gm1.gameBg3.basket3Array.push(this.gm1.gameBg3.basket);
							}
							this.gm1.currentItem = 0;
							GameSettings.whiteTotal--;
						} else {
							this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),15);
							this.hero.hero.setSmoothing(true);
							this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
							this.hero.hero.gotoFrame(1);
							this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
							this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
							this.hero.itmB.set_x(fw_Config.convertWidth(30));
							this.hero.itmB.set_visible(true);
							this.hero.itmF.set_visible(false);
							GameSettings.whiteTotal--;
						}
					}
				} else if(this.trayArray[k].state == "done") {
					this.trayArray[k].state = "idle";
					this.trayColorArray[k].set_visible(false);
					k1 = this.trayColorArray[k].obj.frameIndex;
					if(k1 == 1) {
						GameSettings.color2Total++;
						if(GameSettings.color2Total < 21) this.checkcolorArray(1);
					} else if(k1 == 2) {
						GameSettings.color3Total++;
						if(GameSettings.color3Total < 21) this.checkcolorArray(2);
					} else if(k1 == 3) {
						GameSettings.color4Total++;
						if(GameSettings.color4Total < 21) this.checkcolorArray(3);
					} else if(k1 == 4) {
						GameSettings.color5Total++;
						if(GameSettings.color5Total < 21) this.checkcolorArray(4);
					}
					GameSettings.score += GameSettings.bonus + 5;
					this.checkBottle();
					if(GameSettings.level == 0) {
						if(this.trayArray[0].state == "idle") {
							this.gm1.arrow1.set_x(fw_Config.convertWidth(this.gm1.common.hudIcon4.get_x() + 30));
							this.gm1.arrow1.set_y(fw_Config.convertHeight(this.gm1.common.hudIcon4.get_y() - 50));
							this.gm1.arrow1.play(0,true);
							this.gm1.arrow1.set_visible(true);
							this.gm1.common.hudIcon4.buttonMode = true;
							this.gm1.common.hudIcon4.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this.gm1.common,$bind($_,$_.gotoBg3)));
						}
					}
				}
			}
		}
	}
	,checkBottle: function() {
		var index = 0;
		var flag = false;
		var k = 0;
		var tray = null;
		if(GameSettings.color1Up) {
			if(this.bar1.obj.frameIndex >= 12 && this.bottle1.state == "idle") {
				k = this.bottle1.indux;
				var _g = 0;
				while(_g < 3) {
					var i = _g++;
					if(this.trayArray[k].state != "idle") {
						flag = true;
						break;
					}
					k++;
				}
				if(!flag) {
					this.bottle1.state = "buy";
					this.bottle1.set_visible(false);
					GameSettings.color1Up = false;
					this.bar1.set_visible(false);
					k = this.bottle1.indux;
					index = this.bottle1.indux;
					this.bottle1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
					this.obj4Sprite.removeChild(this.bottle1);
					this.bottle1 = null;
					this.obj4Sprite.removeChild(this.bar1);
					this.bar1 = null;
					var _g1 = 0;
					while(_g1 < 3) {
						var i1 = _g1++;
						this.trayArray[k].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						tray = this.trayColorArray[k];
						HxOverrides.remove(this.trayColorArray,tray);
						this.trayArray[k].removeChild(tray);
						tray = this.trayArray[k];
						HxOverrides.remove(this.trayArray,tray);
						this.obj4Sprite.removeChild(tray);
					}
					this.updateIndex(index);
				}
			}
		}
		flag = false;
		if(GameSettings.color2Up) {
			if(this.bar2.obj.frameIndex >= 12 && this.bottle2.state == "idle") {
				k = this.bottle2.indux;
				var _g2 = 0;
				while(_g2 < 3) {
					var i2 = _g2++;
					if(this.trayArray[k].state != "idle") {
						flag = true;
						break;
					}
					k++;
				}
				if(!flag) {
					this.bottle2.state = "buy";
					this.bottle2.set_visible(false);
					GameSettings.color2Up = false;
					this.bar2.set_visible(false);
					k = this.bottle2.indux;
					index = this.bottle2.indux;
					this.bottle2.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
					this.obj4Sprite.removeChild(this.bottle2);
					this.bottle2 = null;
					this.obj4Sprite.removeChild(this.bar2);
					this.bar2 = null;
					var _g3 = 0;
					while(_g3 < 3) {
						var i3 = _g3++;
						this.trayArray[k].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						tray = this.trayColorArray[k];
						HxOverrides.remove(this.trayColorArray,tray);
						this.trayArray[k].removeChild(tray);
						tray = this.trayArray[k];
						HxOverrides.remove(this.trayArray,tray);
						this.obj4Sprite.removeChild(tray);
					}
					this.updateIndex(index);
				}
			}
		}
		flag = false;
		if(GameSettings.color3Up) {
			if(this.bar3.obj.frameIndex >= 12 && this.bottle3.state == "idle") {
				k = this.bottle3.indux;
				var _g4 = 0;
				while(_g4 < 3) {
					var i4 = _g4++;
					if(this.trayArray[k].state != "idle") {
						flag = true;
						break;
					}
					k++;
				}
				if(!flag) {
					this.bottle3.state = "buy";
					this.bottle3.set_visible(false);
					GameSettings.color3Up = false;
					this.bar3.set_visible(false);
					k = this.bottle3.indux;
					index = this.bottle3.indux;
					this.bottle3.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
					this.obj4Sprite.removeChild(this.bottle3);
					this.bottle3 = null;
					this.obj4Sprite.removeChild(this.bar3);
					this.bar3 = null;
					var _g5 = 0;
					while(_g5 < 3) {
						var i5 = _g5++;
						this.trayArray[k].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						tray = this.trayColorArray[k];
						HxOverrides.remove(this.trayColorArray,tray);
						this.trayArray[k].removeChild(tray);
						tray = this.trayArray[k];
						HxOverrides.remove(this.trayArray,tray);
						this.obj4Sprite.removeChild(tray);
					}
					this.updateIndex(index);
				}
			}
		}
		flag = false;
		if(GameSettings.color4Up) {
			if(this.bar4.obj.frameIndex >= 12 && this.bottle4.state == "idle") {
				k = this.bottle4.indux;
				var _g6 = 0;
				while(_g6 < 3) {
					var i6 = _g6++;
					if(this.trayArray[k].state != "idle") {
						flag = true;
						break;
					}
					k++;
				}
				if(!flag) {
					this.bottle4.state = "buy";
					this.bottle4.set_visible(false);
					GameSettings.color4Up = false;
					this.bar4.set_visible(false);
					k = this.bottle4.indux;
					index = this.bottle4.indux;
					this.bottle4.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
					this.obj4Sprite.removeChild(this.bottle4);
					this.bottle4 = null;
					this.obj4Sprite.removeChild(this.bar4);
					this.bar4 = null;
					var _g7 = 0;
					while(_g7 < 3) {
						var i7 = _g7++;
						this.trayArray[k].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
						tray = this.trayColorArray[k];
						HxOverrides.remove(this.trayColorArray,tray);
						this.trayArray[k].removeChild(tray);
						tray = this.trayArray[k];
						HxOverrides.remove(this.trayArray,tray);
						this.obj4Sprite.removeChild(tray);
					}
					this.updateIndex(index);
				}
			}
		}
	}
	,updateIndex: function(index) {
		if(GameSettings.color1Up) {
			if(this.bottle1.indux > index) this.bottle1.indux -= 3;
		}
		if(GameSettings.color2Up) {
			if(this.bottle2.indux > index) this.bottle2.indux -= 3;
		}
		if(GameSettings.color3Up) {
			if(this.bottle3.indux > index) this.bottle3.indux -= 3;
		}
		if(GameSettings.color4Up) {
			if(this.bottle4.indux > index) this.bottle4.indux -= 3;
		}
	}
	,checkcolorArray: function(no) {
		var k;
		if(no == 1) {
			if(GameSettings.color2Total <= this.color1Array.length) {
				var _g1 = 0;
				var _g = this.color1Array.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(!this.color1Array[i].get_visible()) {
						this.color1Array[i].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.color2Total - 1;
				this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color1"));
				this.color1Sprite.addChild(this.color);
				this.color.setSmoothing(true);
				this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.color.set_x(fw_Config.convertWidth(this.colorPos[k]));
				this.color.set_y(fw_Config.convertHeight(this.colorPos[k + 21]));
				this.color1Array.push(this.color);
			}
		} else if(no == 2) {
			if(GameSettings.color3Total <= this.color2Array.length) {
				var _g11 = 0;
				var _g2 = this.color2Array.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(!this.color2Array[i1].get_visible()) {
						this.color2Array[i1].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.color3Total - 1;
				this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color2"));
				this.color2Sprite.addChild(this.color);
				this.color.setSmoothing(true);
				this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.color.set_x(fw_Config.convertWidth(this.colorPos[k]));
				this.color.set_y(fw_Config.convertHeight(this.colorPos[k + 21]));
				this.color2Array.push(this.color);
			}
		} else if(no == 3) {
			if(GameSettings.color4Total <= this.color3Array.length) {
				var _g12 = 0;
				var _g3 = this.color3Array.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					if(!this.color3Array[i2].get_visible()) {
						this.color3Array[i2].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.color4Total - 1;
				this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color3"));
				this.color3Sprite.addChild(this.color);
				this.color.setSmoothing(true);
				this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.color.set_x(fw_Config.convertWidth(this.colorPos[k]));
				this.color.set_y(fw_Config.convertHeight(this.colorPos[k + 21]));
				this.color3Array.push(this.color);
			}
		} else if(no == 4) {
			if(GameSettings.color5Total <= this.color4Array.length) {
				var _g13 = 0;
				var _g4 = this.color4Array.length;
				while(_g13 < _g4) {
					var i3 = _g13++;
					if(!this.color4Array[i3].get_visible()) {
						this.color4Array[i3].set_visible(true);
						break;
					}
				}
			} else {
				k = GameSettings.color5Total - 1;
				this.color = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("color4"));
				this.color4Sprite.addChild(this.color);
				this.color.setSmoothing(true);
				this.color.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				this.color.set_x(fw_Config.convertWidth(this.colorPos[k]));
				this.color.set_y(fw_Config.convertHeight(this.colorPos[k + 21]));
				this.color4Array.push(this.color);
			}
		}
	}
	,checkMat: function() {
		var k;
		if(this.gm1.processQueue[1] == "put") {
			var m = Math.floor(GameSettings.whiteTotal / 3);
			var m1 = Math.floor(GameSettings.whiteTotal % 3);
			if(m1 > 0) m++;
			k = this.gm1.currentItem - 14;
			GameSettings.whiteTotal += k;
			k = Math.floor(GameSettings.whiteTotal / 3);
			var k1 = GameSettings.whiteTotal % 3;
			if(k1 > 0) k++;
			if(m >= k) {
				GameSettings.availableBasket2++;
				if(GameSettings.availableBasket2 <= this.gm1.gameBg3.basket3Array.length && !this.gm1.gameBg3.basket3Array[this.gm1.gameBg3.basket3Array.length - 1].get_visible()) {
					var _g1 = 0;
					var _g = this.gm1.gameBg3.basket3Array.length;
					while(_g1 < _g) {
						var i = _g1++;
						if(!this.gm1.gameBg3.basket3Array[i].get_visible()) {
							this.gm1.gameBg3.basket3Array[i].set_visible(true);
							break;
						}
					}
				} else {
					var k2 = GameSettings.availableBasket2 - 1;
					this.gm1.gameBg3.basket = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
					this.gm1.gameBg3.mat2Sprite.addChild(this.gm1.gameBg3.basket);
					this.gm1.gameBg3.basket.set_x(fw_Config.convertWidth(this.gm1.gameBg3.bkt3Pos[k2]));
					this.gm1.gameBg3.basket.set_y(fw_Config.convertHeight(this.gm1.gameBg3.bkt3Pos[k2 + 12]));
					this.gm1.gameBg3.basket.set_scaleX(this.gm1.gameBg3.basket.set_scaleY(.8));
					this.gm1.gameBg3.basket.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
					this.gm1.gameBg3.basket.setSmoothing(true);
					this.gm1.gameBg3.basket3Array.push(this.gm1.gameBg3.basket);
				}
			}
			if(k < this.basketArray.length) {
				var _g11 = 0;
				var _g2 = this.basketArray.length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(!this.basketArray[i1].get_visible()) {
						this.basketArray[i1].set_visible(true);
						if(i1 > 0) this.basketArray[i1 - 1].obj.gotoFrame(17);
						k = k1 + 14;
						if(k1 > 0) k = k1 + 14; else k = 17;
						this.basketArray[i1].obj.gotoFrame(k);
						break;
					}
				}
			} else if(k == this.basketArray.length) {
				if(k1 > 0) k1 = k1 + 14; else k1 = 17;
				this.basketArray[k - 1].obj.gotoFrame(k1);
				this.basketArray[k - 1].set_visible(true);
			} else {
				if(k > 0) k--;
				this.basket = new game_scenes_ObjGame("sack");
				this.basket.obj.setFrames(GameSettings.d.getFrames("tray"),5);
				this.basketSprite.addChild(this.basket);
				this.basket.obj.gotoFrame(17);
				this.basket.set_x(fw_Config.convertWidth(this.bktPos[k]));
				this.basket.set_y(fw_Config.convertHeight(this.bktPos[k + 6]));
				this.basket.set_scaleX(this.basket.set_scaleY(.8));
				if(this.basketArray.length > 0) this.basketArray[this.basketArray.length - 1].obj.gotoFrame(17);
				this.basketArray.push(this.basket);
				this.basket.obj.setSmoothing(true);
				this.basket.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
				if(k1 > 0) k = k1 + 14; else k = 17;
				this.basket.obj.gotoFrame(k);
			}
			this.gm1.heroState = "noTray";
			this.gm1.currentItem = 0;
			if(GameSettings.level == 0) {
				this.gm1.arrow.set_x(fw_Config.convertWidth(this.bottle1.get_x()));
				this.gm1.arrow.set_y(fw_Config.convertHeight(this.bottle1.get_y() - 160));
				this.gm1.arrow.play(0,true);
				this.gm1.arrow.set_visible(true);
				this.bottle1.buttonMode = true;
				this.bottle1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			}
		} else if(this.gm1.heroState == "noTray") {
			k = this.basketArray.length;
			var _g12 = 0;
			var _g3 = this.basketArray.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				k--;
				if(this.basketArray[k].get_visible()) {
					this.basketArray[k].set_visible(false);
					this.gm1.heroState = "withTray";
					this.gm1.currentItem = this.basketArray[k].obj.frameIndex;
					break;
				}
			}
		}
		if(this.gm1.heroState == "noTray") {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidle"),15);
			this.hero.hero.gotoFrame(1);
			this.hero.hero.stop();
			this.hero.itmF.set_visible(false);
			this.hero.itmB.set_visible(false);
		} else {
			this.hero.hero.setFrames(GameSettings.d.getFrames("heroidleobj"),15);
			this.hero.hero.gotoFrame(3);
			this.hero.itmB.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmF.obj.gotoFrame(this.gm1.currentItem);
			this.hero.itmB.set_visible(false);
			this.hero.itmF.set_x(fw_Config.convertWidth(30));
			this.hero.itmF.set_visible(true);
		}
		this.hero.hero.setSmoothing(true);
		this.hero.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
	}
	,checkItem: function() {
		if(this.gm1.currentItem > 14) {
			var _g1 = 0;
			var _g = this.basketArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(!this.basketArray[i].get_visible()) {
					this.basketArray[i].obj.gotoFrame(this.gm1.currentItem);
					this.basketArray[i].set_visible(true);
					this.gm1.currentItem = 0;
					this.gm1.heroState = "noTray";
					break;
				}
			}
		}
	}
	,changeBg1: function() {
		if(this.gm1.currentBg == "bg4") {
			this.checkItem();
			this.removeBg4Items();
			this.gm1.changeBg();
		}
	}
	,removeBg4Items: function() {
		this.bg4Sprite.removeChild(this.bg4);
		this.bg4 = null;
		var k;
		if(this.bg4Sprite.get_numChildren() > 0) {
			k = this.bg4Sprite.get_numChildren();
			var _g = 0;
			while(_g < k) {
				var i = _g++;
				this.bg4Sprite.removeChildAt(0);
			}
		}
	}
	,onExit: function() {
		var k;
		if(GameSettings.level > 0) {
			this.bottle1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.bottle2.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.bottle3.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.bottle4.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBottle));
			this.basketSprite.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnBusket));
			var _g1 = 0;
			var _g = this.trayArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.trayArray[i].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickOnTray));
			}
		}
		if(this.bg4 != null) {
			this.bg4Sprite.removeChild(this.bg4);
			this.bg4 = null;
		}
		if(this.bg4Sprite.get_numChildren() > 0) {
			k = this.bg4Sprite.get_numChildren();
			var _g2 = 0;
			while(_g2 < k) {
				var i1 = _g2++;
				this.bg4Sprite.removeChildAt(0);
			}
		}
		this.removeChild(this.bg4Sprite);
		this.bg4Sprite = null;
		if(this.hero != null) {
			this.removeChild(this.hero);
			this.hero = null;
		}
		if(this.basketSprite.get_numChildren() > 0) {
			k = this.basketSprite.get_numChildren();
			var _g3 = 0;
			while(_g3 < k) {
				var i2 = _g3++;
				this.basketSprite.removeChildAt(0);
			}
		}
		this.obj4Sprite.removeChild(this.basketSprite);
		if(this.color1Sprite.get_numChildren() > 0) {
			k = this.color1Sprite.get_numChildren();
			var _g4 = 0;
			while(_g4 < k) {
				var i3 = _g4++;
				this.color1Sprite.removeChildAt(0);
			}
		}
		if(this.color2Sprite.get_numChildren() > 0) {
			k = this.color2Sprite.get_numChildren();
			var _g5 = 0;
			while(_g5 < k) {
				var i4 = _g5++;
				this.color2Sprite.removeChildAt(0);
			}
		}
		if(this.color3Sprite.get_numChildren() > 0) {
			k = this.color3Sprite.get_numChildren();
			var _g6 = 0;
			while(_g6 < k) {
				var i5 = _g6++;
				this.color3Sprite.removeChildAt(0);
			}
		}
		if(this.color4Sprite.get_numChildren() > 0) {
			k = this.color4Sprite.get_numChildren();
			var _g7 = 0;
			while(_g7 < k) {
				var i6 = _g7++;
				this.color4Sprite.removeChildAt(0);
			}
		}
		this.obj4Sprite.removeChild(this.color1Sprite);
		this.color1Sprite = null;
		this.obj4Sprite.removeChild(this.color2Sprite);
		this.color2Sprite = null;
		this.obj4Sprite.removeChild(this.color3Sprite);
		this.color3Sprite = null;
		this.obj4Sprite.removeChild(this.color4Sprite);
		this.color4Sprite = null;
		this.obj4Sprite.removeChild(this.bottle1);
		this.bottle1 = null;
		this.obj4Sprite.removeChild(this.bar1);
		this.bar1 = null;
		this.obj4Sprite.removeChild(this.bottle2);
		this.bottle2 = null;
		this.obj4Sprite.removeChild(this.bar2);
		this.bar2 = null;
		this.obj4Sprite.removeChild(this.bottle3);
		this.bottle3 = null;
		this.obj4Sprite.removeChild(this.bar3);
		this.bar3 = null;
		this.obj4Sprite.removeChild(this.bottle4);
		this.bottle4 = null;
		this.obj4Sprite.removeChild(this.bar4);
		this.bar4 = null;
		if(this.obj4Sprite.get_numChildren() > 0) {
			k = this.obj4Sprite.get_numChildren();
			var _g8 = 0;
			while(_g8 < k) {
				var i7 = _g8++;
				this.obj4Sprite.removeChildAt(0);
			}
		}
		this.removeChild(this.obj4Sprite);
		this.obj4Sprite = null;
		this.removeChild(this.bord);
		this.bord = null;
		this.removeChild(this.color1Text);
		this.color1Text = null;
		this.removeChild(this.color2Text);
		this.color2Text = null;
		this.removeChild(this.color3Text);
		this.color3Text = null;
		this.removeChild(this.color4Text);
		this.color4Text = null;
		this.removeChild(this.color5Text);
		this.color5Text = null;
	}
	,__class__: game_scenes_Game4
});
var game_scenes_GameBackground = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["game.scenes.GameBackground"] = game_scenes_GameBackground;
game_scenes_GameBackground.__name__ = ["game","scenes","GameBackground"];
game_scenes_GameBackground.__super__ = openfl_display_Sprite;
game_scenes_GameBackground.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function(gm) {
		this.gm1 = gm;
		var fontXML = Xml.parse(openfl_Assets.getText("static/font60.fnt"));
		var fontImage = openfl_Assets.getBitmapData("static/font60.png");
		var angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
		this.effect = null;
		this.lightup = new openfl_display_Sprite();
		this.lightup.get_graphics().lineStyle(10,16777215,1);
		this.lightup.get_graphics().beginFill(0,1);
		this.lightup.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.lightup.get_graphics().endFill();
		this.lightup.set_scaleX(this.lightup.set_scaleY(fw_Config.scaleRatio));
		fw_managers_SceneManager.addToHUD(this.lightup);
		this.lightup.mouseEnabled = false;
		this.lightup.mouseChildren = false;
		this.lightup.set_alpha(0);
		this.hud = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudBottom"));
		fw_managers_SceneManager.addToHUD(this.hud);
		this.hud.mouseChildren = false;
		this.hud.mouseEnabled = false;
		this.hud.setSmoothing(true);
		this.hud.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hudIcon1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon1"));
		fw_managers_SceneManager.addToHUD(this.hudIcon1);
		this.hudIcon1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 3.6);
		this.hudIcon1.set_y(this.hud.get_y());
		this.hudIcon1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hudIcon1.setSmoothing(true);
		this.hudIcon2 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("HudIcon"));
		fw_managers_SceneManager.addToHUD(this.hudIcon2);
		this.hudIcon2.gotoFrame(0);
		this.hudIcon2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 4.5);
		this.hudIcon2.set_y(this.hud.get_y());
		this.hudIcon2.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hudIcon2.setSmoothing(true);
		this.hudIcon2.set_visible(false);
		this.hudIcon2.gotoFrame(1);
		this.hudIcon3 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("HudIcon"));
		fw_managers_SceneManager.addToHUD(this.hudIcon3);
		this.hudIcon3.gotoFrame(2);
		this.hudIcon3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 6);
		this.hudIcon3.set_y(this.hud.get_y());
		this.hudIcon3.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hudIcon3.setSmoothing(true);
		this.hudIcon3.set_visible(false);
		this.hudIcon4 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("HudIcon"));
		fw_managers_SceneManager.addToHUD(this.hudIcon4);
		this.hudIcon4.gotoFrame(2);
		this.hudIcon4.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 9);
		this.hudIcon4.set_y(this.hud.get_y());
		this.hudIcon4.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hudIcon4.setSmoothing(true);
		this.hudIcon4.set_visible(false);
		if(GameSettings.level > 1) {
			this.hudIcon1.buttonMode = true;
			this.hudIcon1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoMarket));
			if(GameSettings.bg2played) {
				this.hudIcon2.buttonMode = true;
				this.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg));
				this.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
				this.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
				this.hudIcon1.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
				this.hudIcon1.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
			}
			if(GameSettings.bg3played) {
				this.hudIcon3.buttonMode = true;
				this.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg));
				this.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
				this.hudIcon3.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
			}
		}
		this.level = new bitmapFont_BitmapTextField(angelCodeFont);
		this.level.set_autoSize(true);
		this.level.set_wrapByWord(true);
		this.level.mouseEnabled = false;
		this.level.mouseChildren = false;
		this.level.set_smoothing(true);
		this.level.set_text("Day");
		fw_managers_SceneManager.addToHUD(this.level);
		this.levelText = new bitmapFont_BitmapTextField(angelCodeFont);
		this.levelText.set_autoSize(true);
		this.levelText.set_wrapByWord(true);
		this.levelText.mouseEnabled = false;
		this.levelText.mouseChildren = false;
		this.levelText.set_smoothing(true);
		this.levelText.set_text(Std.string(GameSettings.level));
		fw_managers_SceneManager.addToHUD(this.levelText);
		this.target = new bitmapFont_BitmapTextField(angelCodeFont);
		this.target.set_autoSize(true);
		this.target.set_wrapByWord(true);
		this.target.mouseEnabled = false;
		this.target.mouseChildren = false;
		this.target.set_smoothing(true);
		this.target.set_text("Target");
		fw_managers_SceneManager.addToHUD(this.target);
		this.starb1 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb1);
		this.starb1.mouseChildren = false;
		this.starb1.mouseEnabled = false;
		this.starb2 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb2);
		this.starb2.mouseChildren = false;
		this.starb2.mouseEnabled = false;
		this.starb3 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb3);
		this.starb3.mouseChildren = false;
		this.starb3.mouseEnabled = false;
		this.star1 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star1);
		this.star1.set_visible(false);
		this.star1.mouseChildren = false;
		this.star1.mouseEnabled = false;
		this.star1.set_alpha(0);
		this.star2 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star2);
		this.star2.set_visible(false);
		this.star2.mouseChildren = false;
		this.star2.mouseEnabled = false;
		this.star2.set_alpha(0);
		this.star3 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star3);
		this.star3.set_visible(false);
		this.star3.mouseChildren = false;
		this.star3.mouseEnabled = false;
		this.star3.set_alpha(0);
		this.effect = new game_scenes_Starlup("star_fx_");
		fw_managers_SceneManager.addToHUD(this.effect);
		this.effect.star.stop();
		this.effect.set_visible(false);
		this.effect.set_alpha(0);
		this.effect.mouseChildren = false;
		this.effect.mouseEnabled = false;
		this.cash = new bitmapFont_BitmapTextField(angelCodeFont);
		this.cash.set_autoSize(true);
		this.cash.set_wrapByWord(true);
		this.cash.mouseEnabled = false;
		this.cash.mouseChildren = false;
		this.cash.set_smoothing(true);
		this.cash.set_text("Cash");
		fw_managers_SceneManager.addToHUD(this.cash);
		this.cashText = new bitmapFont_BitmapTextField(angelCodeFont);
		this.cashText.set_autoSize(true);
		this.cashText.set_wrapByWord(true);
		this.cashText.mouseEnabled = false;
		this.cashText.mouseChildren = false;
		this.cashText.set_smoothing(true);
		this.cashText.set_text(Std.string(GameSettings.cash));
		fw_managers_SceneManager.addToHUD(this.cashText);
		this.clock = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/loaderLoop.png"),GameSettings.loader.getFrames("timer_"));
		fw_managers_SceneManager.addToHUD(this.clock);
		this.clock.stop();
		this.clock.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 12);
		this.clock.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight);
		this.clock.mouseEnabled = false;
		this.clock.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.clock.setSmoothing(true);
		this.pauseBtn = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("pause"));
		fw_managers_SceneManager.addToHUD(this.pauseBtn);
		this.pauseBtn.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 7.5);
		this.pauseBtn.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.013);
		this.pauseBtn.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.pauseBtn.setSmoothing(true);
		this.pauseBtn.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPause));
		this.pauseBtn.buttonMode = true;
		this.pauseBtn.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
		this.pauseBtn.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
		this.border = new openfl_display_Sprite();
		this.border.get_graphics().lineStyle(10,16777215,1);
		this.border.get_graphics().beginFill(0,0);
		this.border.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.border.get_graphics().endFill();
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		fw_managers_SceneManager.addToHUD(this.border);
		this.border.mouseEnabled = false;
		this.border.mouseChildren = false;
		this.oldScaleX = fw_Config.scaleRatio;
		this.newScaleX = fw_Config.scaleRatio + .05;
		this.oldScaleX1 = fw_Config.scaleRatio * .9;
		this.resize();
	}
	,gotoMarket: function(e) {
		if(GameSettings.isPaused == false && this.gm1.marketEnabled && !this.gm1.restrictForTut2 && !this.gm1.restrictForTut3) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			GameSettings.totalDryWool = GameSettings.dryWoolTotal + GameSettings.tailorWool;
			if(GameSettings.level == 1) {
				this.gm1.arrow.stop();
				this.gm1.arrow1.stop();
				this.gm1.arrow.set_visible(false);
				this.gm1.arrow1.set_visible(false);
				this.gm1.tutorial1.set_visible(false);
			}
			GameSettings.isPlaying = false;
			fw_managers_SceneManager.suspendScene();
			fw_managers_SceneManager.changeScene(game_scenes_SellShop);
		}
	}
	,gotoBg: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			var bg = "bg1";
			if(e.currentTarget.frameIndex == 0) bg = "bg1"; else if(e.currentTarget.frameIndex == 1) bg = "bg2"; else if(e.currentTarget.frameIndex == 2) bg = "bg3";
			this.gm1.processQueue.push(bg);
			this.gm1.processQueue.push(bg);
			if(GameSettings.level == 1 || !GameSettings.bg2played || !GameSettings.bg3played) {
				this.gm1.arrow1.stop();
				this.gm1.arrow1.set_visible(false);
				this.gm1.tutorial1.set_visible(false);
				this.hudIcon2.buttonMode = false;
				if(GameSettings.level > 1 && !GameSettings.bg3played && this.gm1.TutNo == 3) {
					GameSettings.bg3played = true;
					this.gm1.restrictForTut3 = false;
					this.gm1.gameBg3.addListeners();
					if(GameSettings.bg2played) {
						this.hudIcon2.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg));
						this.gm1.gameBg2.addListeners();
					}
				}
				if(GameSettings.level == 1 || this.gm1.restrictForTut2 || this.gm1.restrictForTut3) {
					if(this.hudIcon2.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) this.hudIcon2.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg)); else if(this.hudIcon3.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) this.hudIcon3.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg));
				}
			}
		}
	}
	,gotoBg2: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
			if(this.gm1.currentBg != "bg2") {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				this.gm1.processQueue.push("bg2");
				this.gm1.processQueue.push("bg2");
				if(GameSettings.level == 1) {
					this.gm1.arrow1.stop();
					this.gm1.arrow1.set_visible(false);
				}
			}
		}
	}
	,gotoBg3: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
			if(this.gm1.currentBg != "bg3") {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				this.gm1.processQueue.push("bg3");
				this.gm1.processQueue.push("bg3");
				if(GameSettings.level == 1) {
					this.gm1.arrow1.stop();
					this.gm1.arrow1.set_visible(false);
				}
			}
		}
	}
	,gotoBg4: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
			if(this.gm1.currentBg != "bg4") {
				if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
				this.gm1.processQueue.push("bg4");
				this.gm1.processQueue.push("bg4");
				if(GameSettings.level == 1) {
					this.gm1.arrow1.stop();
					this.gm1.arrow1.set_visible(false);
					var _g = this.gm1.arrow1;
					_g.set_scaleX(_g.get_scaleX() * -1);
				}
			}
		}
	}
	,onPause: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1));
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			GameSettings.isPlaying = false;
			this.gm1.addPausedBox();
		}
	}
	,onMenu: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1));
			if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
			GameSettings.isPaused = true;
			GameSettings.isPlaying = false;
			this.gm1.addMenuBox();
		}
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOut1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1));
	}
	,onMouseOver: function(e) {
		if(!this.gm1.restrictForTut2 && !this.gm1.restrictForTut3) {
			if(GameSettings.isPaused == false) {
				var sprite;
				sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
				this.oldScaleX = sprite.get_scaleX();
				this.oldScaleY = sprite.get_scaleY();
				if(this.oldScaleX >= this.newScaleX) this.oldScaleX = this.newScaleX - 0.05;
				sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX + 0.05));
			}
		}
	}
	,onMouseOver1: function(e) {
		if(GameSettings.isPaused == false) {
			var sprite;
			sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
			this.oldScaleX1 = sprite.get_scaleX();
			this.oldScaleY = sprite.get_scaleY();
			sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1 + 0.05));
		}
	}
	,onExitVersion: function() {
		fw_managers_SceneManager.removeFromHUD(this.versionText);
	}
	,onExit: function() {
		if(GameSettings.level > 1) {
			this.hudIcon1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoMarket));
			if(this.hudIcon2.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
				this.hudIcon2.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBg));
				this.hudIcon2.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
				this.hudIcon2.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
			}
			this.hudIcon1.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
			this.hudIcon1.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		}
		this.pauseBtn.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPause));
		this.pauseBtn.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
		this.pauseBtn.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
		fw_managers_SceneManager.removeFromHUD(this.level);
		fw_managers_SceneManager.removeFromHUD(this.levelText);
		fw_managers_SceneManager.removeFromHUD(this.target);
		fw_managers_SceneManager.removeFromHUD(this.targetText);
		fw_managers_SceneManager.removeFromHUD(this.cash);
		fw_managers_SceneManager.removeFromHUD(this.cashText);
		fw_managers_SceneManager.removeFromHUD(this.hud);
		fw_managers_SceneManager.removeFromHUD(this.hudIcon1);
		fw_managers_SceneManager.removeFromHUD(this.hudIcon2);
		fw_managers_SceneManager.removeFromHUD(this.hudIcon3);
		fw_managers_SceneManager.removeFromHUD(this.hudIcon4);
		fw_managers_SceneManager.removeFromHUD(this.clock);
		fw_managers_SceneManager.removeFromHUD(this.pauseBtn);
		fw_managers_SceneManager.removeFromHUD(this.border);
		fw_managers_SceneManager.removeFromHUD(this.lightup);
		fw_managers_SceneManager.removeFromHUD(this.starb1);
		fw_managers_SceneManager.removeFromHUD(this.starb2);
		fw_managers_SceneManager.removeFromHUD(this.starb3);
		fw_managers_SceneManager.removeFromHUD(this.star1);
		fw_managers_SceneManager.removeFromHUD(this.star2);
		fw_managers_SceneManager.removeFromHUD(this.star3);
		fw_managers_SceneManager.removeFromHUD(this.effect);
		this.removeChildren();
	}
	,resize: function() {
		this.oldScaleX = fw_Config.scaleRatio;
		this.newScaleX = fw_Config.scaleRatio + .05;
		this.oldScaleX1 = fw_Config.scaleRatio * .9;
		this.lightup.set_scaleX(this.lightup.set_scaleY(fw_Config.scaleRatio));
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		this.hud.set_scaleX(fw_Config.scaleRatio);
		this.hud.set_scaleY(fw_Config.scaleRatio);
		this.hud.set_y(openfl_Lib.current.stage.stageHeight - this.hud.get_height());
		this.hud.set_scaleY(fw_Config.scaleRatio * .6);
		this.hud.set_y(openfl_Lib.current.stage.stageHeight - this.hud.get_height() * .95);
		this.hudIcon1.set_scaleX(this.hudIcon1.set_scaleY(fw_Config.scaleRatio));
		this.hudIcon1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 12);
		this.hudIcon1.set_y(this.hud.get_y());
		this.hudIcon1.set_scaleX(this.hudIcon1.set_scaleY(fw_Config.scaleRatio * .8));
		this.hudIcon1.set_y(this.hud.get_y() - 10);
		this.hudIcon2.set_scaleX(this.hudIcon2.set_scaleY(fw_Config.scaleRatio));
		this.hudIcon2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 6.2);
		this.hudIcon2.set_y(this.hud.get_y());
		this.hudIcon3.set_scaleX(this.hudIcon3.set_scaleY(fw_Config.scaleRatio));
		this.hudIcon3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 4.15);
		this.hudIcon3.set_y(this.hud.get_y());
		this.hudIcon4.set_scaleX(this.hudIcon4.set_scaleY(fw_Config.scaleRatio));
		this.hudIcon4.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 3.12);
		this.hudIcon4.set_y(this.hud.get_y());
		this.level.set_scaleX(this.level.set_scaleY(fw_Config.scaleRatio * .6));
		this.level.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.01);
		this.level.set_y(this.hud.get_y() + 15);
		this.level.set_scaleX(this.level.set_scaleY(fw_Config.scaleRatio * .5));
		this.level.set_y(this.hud.get_y() + 10);
		this.levelText.set_scaleX(this.levelText.set_scaleY(fw_Config.scaleRatio * .6));
		this.levelText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.095);
		this.levelText.set_y(this.hud.get_y() + 15);
		this.levelText.set_y(this.hud.get_y() + 10);
		this.levelText.set_scaleX(this.levelText.set_scaleY(fw_Config.scaleRatio * .5));
		this.target.set_scaleX(this.target.set_scaleY(fw_Config.scaleRatio * .6));
		this.target.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.195);
		this.target.set_y(this.hud.get_y() + 15);
		this.target.set_scaleX(this.target.set_scaleY(fw_Config.scaleRatio * .5));
		this.target.set_y(this.hud.get_y() + 10);
		this.starb1.set_scaleX(this.starb1.set_scaleY(fw_Config.scaleRatio * .45));
		this.starb1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.472);
		this.starb1.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb2.set_scaleX(this.starb2.set_scaleY(fw_Config.scaleRatio * .45));
		this.starb2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.58);
		this.starb2.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb3.set_scaleX(this.starb3.set_scaleY(fw_Config.scaleRatio * .45));
		this.starb3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.706);
		this.starb3.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star1.set_scaleX(this.star1.set_scaleY(fw_Config.scaleRatio * .45));
		this.star1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.472);
		this.star1.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star2.set_scaleX(this.star2.set_scaleY(fw_Config.scaleRatio * .45));
		this.star2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.58);
		this.star2.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star3.set_scaleX(this.star3.set_scaleY(fw_Config.scaleRatio * .45));
		this.star3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.706);
		this.star3.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb1.set_scaleX(this.starb1.set_scaleY(fw_Config.scaleRatio * .35));
		this.starb2.set_scaleX(this.starb2.set_scaleY(fw_Config.scaleRatio * .35));
		this.starb3.set_scaleX(this.starb3.set_scaleY(fw_Config.scaleRatio * .35));
		this.star1.set_scaleX(this.star1.set_scaleY(fw_Config.scaleRatio * .35));
		this.star2.set_scaleX(this.star2.set_scaleY(fw_Config.scaleRatio * .35));
		this.star3.set_scaleX(this.star3.set_scaleY(fw_Config.scaleRatio * .35));
		this.starb1.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb2.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb3.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star1.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star2.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.star3.set_y(this.hud.get_y() + this.starb1.get_height() / 1.5);
		this.starb1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.442);
		this.starb2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.55);
		this.starb3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.676);
		this.star1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.442);
		this.star2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.55);
		this.star3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.676);
		this.cash.set_scaleX(this.cash.set_scaleY(fw_Config.scaleRatio * .6));
		this.cash.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.8);
		this.cash.set_y(this.hud.get_y() + 15);
		this.cash.set_scaleX(this.cash.set_scaleY(fw_Config.scaleRatio * .5));
		this.cash.set_y(this.hud.get_y() + 10);
		this.cashText.set_scaleX(this.cashText.set_scaleY(fw_Config.scaleRatio * .6));
		this.cashText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.18);
		this.cashText.set_y(this.hud.get_y() + 15);
		this.cashText.set_scaleX(this.cashText.set_scaleY(fw_Config.scaleRatio * .5));
		this.cashText.set_y(this.hud.get_y() + 10);
		this.clock.set_scaleX(this.clock.set_scaleY(fw_Config.scaleRatio * .75));
		this.clock.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 6.5);
		this.clock.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight);
		this.pauseBtn.set_scaleX(this.pauseBtn.set_scaleY(fw_Config.scaleRatio * .9));
		this.pauseBtn.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 14);
		this.pauseBtn.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.015);
	}
	,__class__: game_scenes_GameBackground
});
var game_scenes_Hero = function(gm) {
	openfl_display_Sprite.call(this);
	this.gm1 = gm;
	this.onInit();
};
$hxClasses["game.scenes.Hero"] = game_scenes_Hero;
game_scenes_Hero.__name__ = ["game","scenes","Hero"];
game_scenes_Hero.__super__ = openfl_display_Sprite;
game_scenes_Hero.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.itmB = new game_scenes_ObjGame("sack");
		this.itmB.obj.setFrames(GameSettings.d.getFrames("tray"),1);
		this.itmB.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.itmB.obj.setSmoothing(true);
		this.addChild(this.itmB);
		this.itmB.set_y(fw_Config.convertHeight(10));
		this.itmB.set_scaleX(this.itmB.set_scaleY(.8));
		this.hero = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("heroidle"));
		this.addChild(this.hero);
		this.hero.setFrames(GameSettings.d.getFrames("heroidle"),1);
		this.hero.gotoFrame(2);
		this.hero.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.hero.setSmoothing(true);
		this.hero.set_scaleX(this.hero.set_scaleY(.8));
		this.hero.set_name("hero");
		this.hero.set_x(-this.hero.get_width() / 2);
		this.hero.set_y(-this.hero.get_height() + 10);
		this.hero.set_name("hero");
		this.itmF = new game_scenes_ObjGame("sack");
		this.itmF.obj.setFrames(GameSettings.d.getFrames("tray"),1);
		this.itmF.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.itmF.obj.setSmoothing(true);
		this.addChild(this.itmF);
		this.itmF.set_x(fw_Config.convertWidth(10));
		this.itmF.set_y(fw_Config.convertHeight(20));
		this.itmF.set_scaleX(this.itmF.set_scaleY(.8));
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
	}
	,onExit: function() {
	}
	,__class__: game_scenes_Hero
});
var game_scenes_InmobiAdd = function() { };
$hxClasses["game.scenes.InmobiAdd"] = game_scenes_InmobiAdd;
game_scenes_InmobiAdd.__name__ = ["game","scenes","InmobiAdd"];
game_scenes_InmobiAdd.init = function() {
	haxe_Log.trace("App start",{ fileName : "InmobiAdd.hx", lineNumber : 31, className : "game.scenes.InmobiAdd", methodName : "init"});
};
game_scenes_InmobiAdd.onAdLoaded = function() {
	haxe_Log.trace("AD LOADED!!!!",{ fileName : "InmobiAdd.hx", lineNumber : 35, className : "game.scenes.InmobiAdd", methodName : "onAdLoaded"});
	game_scenes_InmobiAdd.isShow = false;
	game_scenes_InmobiAdd.isLoad = true;
};
game_scenes_InmobiAdd.onAdFailed = function(status) {
	haxe_Log.trace("AD LOAD FAILED - " + status,{ fileName : "InmobiAdd.hx", lineNumber : 41, className : "game.scenes.InmobiAdd", methodName : "onAdFailed"});
	game_scenes_InmobiAdd.failedCount++;
	game_scenes_InmobiAdd.delay = 0;
	if(game_scenes_InmobiAdd.failedCount < 2) game_scenes_InmobiAdd.loadInterstitial();
};
game_scenes_InmobiAdd.onAdDisplayed = function() {
	haxe_Log.trace("AD DISPLAYED",{ fileName : "InmobiAdd.hx", lineNumber : 51, className : "game.scenes.InmobiAdd", methodName : "onAdDisplayed"});
	game_scenes_InmobiAdd.isDisplay = true;
	game_scenes_InmobiAdd.isClosed = true;
	game_scenes_InmobiAdd.isLoad = false;
	game_scenes_InmobiAdd.loadInterstitial();
};
game_scenes_InmobiAdd.onAdDismissed = function() {
	haxe_Log.trace("AD DISMISSED",{ fileName : "InmobiAdd.hx", lineNumber : 59, className : "game.scenes.InmobiAdd", methodName : "onAdDismissed"});
};
game_scenes_InmobiAdd.showifLoaded = function() {
	if(game_scenes_InmobiAdd.isLoad) {
		game_scenes_InmobiAdd.isShow = true;
		game_scenes_InmobiAdd.isDisplay = false;
		haxe_Log.trace("load ompleted",{ fileName : "InmobiAdd.hx", lineNumber : 70, className : "game.scenes.InmobiAdd", methodName : "showifLoaded"});
		game_scenes_InmobiAdd.showInterstitial();
	}
};
game_scenes_InmobiAdd.loadInterstitial = function() {
	haxe_Log.trace("Loading....",{ fileName : "InmobiAdd.hx", lineNumber : 76, className : "game.scenes.InmobiAdd", methodName : "loadInterstitial"});
};
game_scenes_InmobiAdd.showInterstitial = function() {
	haxe_Log.trace("Showing......",{ fileName : "InmobiAdd.hx", lineNumber : 83, className : "game.scenes.InmobiAdd", methodName : "showInterstitial"});
};
game_scenes_InmobiAdd.IAdLeftApplication = function() {
	haxe_Log.trace("user left",{ fileName : "InmobiAdd.hx", lineNumber : 92, className : "game.scenes.InmobiAdd", methodName : "IAdLeftApplication"});
};
game_scenes_InmobiAdd.onIAdInteraction = function() {
	haxe_Log.trace("click on ad",{ fileName : "InmobiAdd.hx", lineNumber : 97, className : "game.scenes.InmobiAdd", methodName : "onIAdInteraction"});
};
var game_scenes_Levelup = function() {
	this.doAction = false;
	this.submitTime = 60;
	this.alphainc = 0;
	openfl_display_Sprite.call(this);
	this.submitTime = 90;
	var fontXML = Xml.parse(openfl_Assets.getText("static/font60.fnt"));
	var fontImage = openfl_Assets.getBitmapData("static/font60.png");
	this.angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
};
$hxClasses["game.scenes.Levelup"] = game_scenes_Levelup;
game_scenes_Levelup.__name__ = ["game","scenes","Levelup"];
game_scenes_Levelup.__interfaces__ = [fw_display_IScene];
game_scenes_Levelup.__super__ = openfl_display_Sprite;
game_scenes_Levelup.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.alphainc = 0;
		this.border = new openfl_display_Sprite();
		this.border.get_graphics().lineStyle(10,16777215,1);
		this.border.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.border.get_graphics().endFill();
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		fw_managers_SceneManager.addToHUD(this.border);
		var g = new openfl_display_Sprite();
		g.get_graphics().beginFill(2228224,1);
		g.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		g.get_graphics().endFill();
		this.addChild(g);
		this.levelupbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bglevelUp.png"));
		this.addChild(this.levelupbg);
		this.levelupbg.smoothing = true;
		this.doAction = false;
		this.bordSprite = new openfl_display_Sprite();
		this.addChild(this.bordSprite);
		this.bordSprite.set_y(fw_Config.convertHeight(800));
		this.msgBox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("msgBox"));
		this.bordSprite.addChild(this.msgBox);
		this.msgBox.set_x(fw_Config.convertWidth(280));
		this.msgBox.setSmoothing(true);
		this.msgBox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.msgBox.set_visible(false);
		this.playButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_nextDay"));
		fw_managers_SceneManager.addToHUD(this.playButton);
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.playButton.buttonMode = true;
		this.playButton.set_visible(false);
		this.playButton.set_scaleX(this.playButton.set_scaleY(fw_Config.scaleRatio));
		this.playButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.73);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.56);
		this.playButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.playButton.setSmoothing(true);
		GameSettings.scoreSubmitted = false;
		this.submitText = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.submitText.set_autoSize(true);
		this.submitText.set_wrapByWord(true);
		this.submitText.mouseEnabled = false;
		this.submitText.mouseChildren = false;
		this.submitText.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.submitText);
		this.submitText.set_scaleX(this.submitText.set_scaleY(fw_Config.scaleRatio * .4));
		this.submitText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.38);
		this.submitText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 10);
		this.submitText.set_text("Your score submitted successfully.");
		this.submitText.set_visible(false);
		this.level = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.level.set_autoSize(true);
		this.level.set_wrapByWord(true);
		this.level.mouseEnabled = false;
		this.level.mouseChildren = false;
		this.level.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.level);
		this.level.set_scaleX(this.level.set_scaleY(fw_Config.scaleRatio * .8));
		this.level.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.7);
		this.level.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.32);
		this.level.set_text("Day  ");
		this.level.set_visible(false);
		this.levelText = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.levelText.set_autoSize(true);
		this.levelText.set_wrapByWord(true);
		this.levelText.mouseEnabled = false;
		this.levelText.mouseChildren = false;
		this.levelText.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.levelText);
		this.levelText.set_scaleX(this.levelText.set_scaleY(fw_Config.scaleRatio * .8));
		this.levelText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.levelText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.32);
		this.levelText.set_text(Std.string(GameSettings.level));
		this.levelText.set_visible(false);
		this.starb1 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb1);
		this.starb1.set_visible(false);
		this.starb1.mouseChildren = false;
		this.starb1.mouseEnabled = false;
		this.starb1.set_scaleX(this.starb1.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.82);
		this.starb1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.starb2 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb2);
		this.starb2.set_visible(false);
		this.starb2.mouseChildren = false;
		this.starb2.mouseEnabled = false;
		this.starb2.set_scaleX(this.starb2.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.05);
		this.starb2.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.starb3 = new game_scenes_Starlup("star_holder");
		fw_managers_SceneManager.addToHUD(this.starb3);
		this.starb3.set_visible(false);
		this.starb3.mouseChildren = false;
		this.starb3.mouseEnabled = false;
		this.starb3.set_scaleX(this.starb3.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.35);
		this.starb3.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star1 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star1);
		this.star1.set_visible(false);
		this.star1.mouseChildren = false;
		this.star1.mouseEnabled = false;
		this.star1.set_alpha(0);
		this.star1.set_scaleX(this.star1.set_scaleY(fw_Config.scaleRatio * .7));
		this.star1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.82);
		this.star1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star2 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star2);
		this.star2.set_visible(false);
		this.star2.mouseChildren = false;
		this.star2.mouseEnabled = false;
		this.star2.set_alpha(0);
		this.star2.set_scaleX(this.star2.set_scaleY(fw_Config.scaleRatio * .7));
		this.star2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.05);
		this.star2.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star3 = new game_scenes_Starlup("Star_2");
		fw_managers_SceneManager.addToHUD(this.star3);
		this.star3.set_visible(false);
		this.star3.mouseChildren = false;
		this.star3.mouseEnabled = false;
		this.star3.set_alpha(0);
		this.star3.set_scaleX(this.star3.set_scaleY(fw_Config.scaleRatio * .7));
		this.star3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.35);
		this.star3.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.score = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.score.set_autoSize(true);
		this.score.set_wrapByWord(true);
		this.score.mouseEnabled = false;
		this.score.mouseChildren = false;
		this.score.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.score);
		this.score.set_scaleX(this.score.set_scaleY(fw_Config.scaleRatio * .6));
		this.score.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.682);
		this.score.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.133);
		this.score.set_text("Score  :");
		this.score.set_visible(false);
		this.scoreText = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.scoreText.set_autoSize(true);
		this.scoreText.set_wrapByWord(true);
		this.scoreText.mouseEnabled = false;
		this.scoreText.mouseChildren = false;
		this.scoreText.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.scoreText);
		this.scoreText.set_scaleX(this.scoreText.set_scaleY(fw_Config.scaleRatio * .6));
		this.scoreText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.scoreText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.133);
		this.scoreText.set_text(Std.string(GameSettings.total));
		this.scoreText.set_visible(false);
		this.cash = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cash.set_autoSize(true);
		this.cash.set_wrapByWord(true);
		this.cash.mouseEnabled = false;
		this.cash.mouseChildren = false;
		this.cash.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.cash);
		this.cash.set_scaleX(this.cash.set_scaleY(fw_Config.scaleRatio * .6));
		this.cash.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.706);
		this.cash.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.56);
		this.cash.set_text("Cash  :");
		this.cash.set_visible(false);
		this.cashText = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cashText.set_autoSize(true);
		this.cashText.set_wrapByWord(true);
		this.cashText.mouseEnabled = false;
		this.cashText.mouseChildren = false;
		this.cashText.set_smoothing(true);
		fw_managers_SceneManager.addToHUD(this.cashText);
		this.cashText.set_scaleX(this.cashText.set_scaleY(fw_Config.scaleRatio * .6));
		this.cashText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.cashText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.56);
		this.cashText.set_text(Std.string(GameSettings.cash));
		this.cashText.set_visible(false);
		this.oldScaleX = fw_Config.scaleRatio;
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onBack1));
		this.addLevelups();
		this.onResize();
	}
	,addLevelups: function() {
		mobConfig.stop();
		this.doAction = true;
		this.msgBox.set_visible(true);
		motion_Actuate.tween(this.bordSprite,.5,{ y : fw_Config.convertHeight(120)}).ease(motion_easing_Back.get_easeOut()).onComplete($bind(this,this.tweenComplete));
	}
	,onBack1: function(e) {
	}
	,onYes: function(e) {
		this.clearItems();
		GameSettings.addTimer = 7000;
		fw_managers_SceneManager.changeScene(game_scenes_Menu);
	}
	,onNo: function(e) {
	}
	,tweenComplete: function() {
		this.playButton.set_visible(true);
		this.alphainc = 1;
		this.effect = new game_scenes_Starlup("star_fx_");
		fw_managers_SceneManager.addToHUD(this.effect);
		this.effect.set_scaleX(this.effect.set_scaleY(fw_Config.scaleRatio * 2));
		this.effect.set_x(this.star1.get_x());
		this.effect.set_y(this.star1.get_y());
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
		this.level.set_visible(true);
		this.levelText.set_visible(true);
		this.starb1.set_visible(true);
		this.starb2.set_visible(true);
		this.starb3.set_visible(true);
		this.star1.set_visible(true);
		this.star2.set_visible(true);
		this.star3.set_visible(true);
		this.score.set_visible(true);
		this.scoreText.set_visible(true);
		this.cash.set_visible(true);
		this.cashText.set_visible(true);
		if(GameSettings.scoreSubmitted) this.submitText.set_visible(true);
	}
	,onLoad: function(e) {
		this.clearItems();
		GameSettings.savedData = game_scenes_LoadGame.loadGame();
		GameSettings.gameLoaded = true;
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,onPlay: function(e) {
		this.clearItems();
		GameSettings.savedData = game_scenes_LoadGame.loadGame();
		GameSettings.gameLoaded = true;
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,clearItems: function() {
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeChild(this.levelupbg);
		fw_managers_SceneManager.removeFromHUD(this.playButton);
		this.bordSprite.removeChild(this.msgBox);
		this.removeChild(this.bordSprite);
		fw_managers_SceneManager.removeFromHUD(this.level);
		fw_managers_SceneManager.removeFromHUD(this.levelText);
		fw_managers_SceneManager.removeFromHUD(this.starb1);
		fw_managers_SceneManager.removeFromHUD(this.starb2);
		fw_managers_SceneManager.removeFromHUD(this.starb3);
		fw_managers_SceneManager.removeFromHUD(this.star1);
		fw_managers_SceneManager.removeFromHUD(this.star2);
		fw_managers_SceneManager.removeFromHUD(this.star3);
		fw_managers_SceneManager.removeFromHUD(this.score);
		fw_managers_SceneManager.removeFromHUD(this.scoreText);
		fw_managers_SceneManager.removeFromHUD(this.cash);
		fw_managers_SceneManager.removeFromHUD(this.cashText);
		fw_managers_SceneManager.removeFromHUD(this.border);
	}
	,ontYes: function(e) {
		this.clearItems();
		GameSettings.gameLoaded = false;
		GameSettings.level = 1;
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOver: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX + 0.05));
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
		this.oldScaleX = fw_Config.scaleRatio;
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		this.submitText.set_scaleX(this.submitText.set_scaleY(fw_Config.scaleRatio * .4));
		this.submitText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.38);
		this.submitText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 10);
		this.level.set_scaleX(this.level.set_scaleY(fw_Config.scaleRatio * .8));
		this.level.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.66);
		this.level.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.32);
		this.levelText.set_scaleX(this.levelText.set_scaleY(fw_Config.scaleRatio * .8));
		this.levelText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.levelText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.32);
		this.score.set_scaleX(this.score.set_scaleY(fw_Config.scaleRatio * .6));
		this.score.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.62);
		this.score.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.133);
		this.scoreText.set_scaleX(this.scoreText.set_scaleY(fw_Config.scaleRatio * .6));
		this.scoreText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.scoreText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.133);
		this.cash.set_scaleX(this.cash.set_scaleY(fw_Config.scaleRatio * .6));
		this.cash.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.65);
		this.cash.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.56);
		this.cashText.set_scaleX(this.cashText.set_scaleY(fw_Config.scaleRatio * .6));
		this.cashText.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.133);
		this.cashText.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.56);
		this.starb1.set_scaleX(this.starb1.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.82);
		this.starb1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.starb2.set_scaleX(this.starb2.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.05);
		this.starb2.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.starb3.set_scaleX(this.starb3.set_scaleY(fw_Config.scaleRatio * .7));
		this.starb3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.35);
		this.starb3.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star1.set_scaleX(this.star1.set_scaleY(fw_Config.scaleRatio * .7));
		this.star1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.82);
		this.star1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star2.set_scaleX(this.star2.set_scaleY(fw_Config.scaleRatio * .7));
		this.star2.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.05);
		this.star2.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.star3.set_scaleX(this.star3.set_scaleY(fw_Config.scaleRatio * .7));
		this.star3.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.35);
		this.star3.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.7);
		this.playButton.set_scaleX(this.playButton.set_scaleY(fw_Config.scaleRatio));
		this.playButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.73);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.56);
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		if(GameSettings.scoreSubmitted) {
			this.submitTime -= delta;
			if(this.submitText.get_visible() && this.submitTime <= 0) {
				var _g = this.submitText;
				_g.set_alpha(_g.get_alpha() - .01);
				if(this.submitText.get_alpha() <= 0) this.submitText.set_visible(false);
			}
		}
		if(this.alphainc == 1) {
			this.effect.star.update();
			if(this.effect.star.frameIndex > 8) {
				var _g1 = this.star1;
				_g1.set_alpha(_g1.get_alpha() + .1);
			}
			if(this.effect.star.frameIndex >= 14) {
				this.alphainc = 2;
				this.star1.set_alpha(1);
				this.effect.set_visible(false);
				this.effect.set_x(this.star2.get_x());
				this.effect.set_y(this.star2.get_y());
				this.effect.star.gotoFrame(0);
				if(GameSettings.score >= GameSettings.medtarget) {
					this.effect.set_visible(true);
					if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
				}
			}
		} else if(this.alphainc == 2) {
			if(GameSettings.score >= GameSettings.medtarget) {
				this.effect.star.update();
				if(this.effect.star.frameIndex > 8) {
					var _g2 = this.star2;
					_g2.set_alpha(_g2.get_alpha() + .1);
				}
				if(this.effect.star.frameIndex >= 14) {
					this.alphainc = 3;
					this.star2.set_alpha(1);
					this.effect.set_visible(false);
					this.effect.set_x(this.star3.get_x());
					this.effect.set_y(this.star3.get_y());
					this.effect.star.gotoFrame(0);
					if(GameSettings.score >= GameSettings.maxtarget) {
						this.effect.set_visible(true);
						if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("pickup7");
					}
				}
			}
		} else if(this.alphainc == 3) {
			if(GameSettings.score >= GameSettings.maxtarget) {
				this.effect.star.update();
				if(this.effect.star.frameIndex > 8) {
					var _g3 = this.star3;
					_g3.set_alpha(_g3.get_alpha() + .1);
				}
				if(this.effect.star.frameIndex >= 14) {
					this.alphainc = 4;
					this.star3.set_alpha(1);
					this.effect.set_visible(false);
					this.effect.star.gotoFrame(0);
				}
			}
		}
	}
	,onExit: function() {
		fw_managers_SceneManager.removeFromHUD(this.effect);
		fw_managers_SceneManager.removeFromHUD(this.submitText);
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onBack1));
		this.levelupbg = null;
		this.playButton = null;
		this.removeChildren();
		haxe_Log.trace("mmmmmExit",{ fileName : "Levelup.hx", lineNumber : 867, className : "game.scenes.Levelup", methodName : "onExit"});
	}
	,__class__: game_scenes_Levelup
});
var game_scenes_LoadGame = function() {
	var storage = openfl_net_SharedObject.getLocal(game_scenes_LoadGame.SheepFarm);
};
$hxClasses["game.scenes.LoadGame"] = game_scenes_LoadGame;
game_scenes_LoadGame.__name__ = ["game","scenes","LoadGame"];
game_scenes_LoadGame.saveGame = function(saveData) {
	var storage = openfl_net_SharedObject.getLocal(game_scenes_LoadGame.SheepFarm);
	storage.data.savedData = saveData;
	try {
		storage.flush();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		haxe_Log.trace(e,{ fileName : "LoadGame.hx", lineNumber : 27, className : "game.scenes.LoadGame", methodName : "saveGame"});
	}
};
game_scenes_LoadGame.loadGame = function() {
	var storage = openfl_net_SharedObject.getLocal(game_scenes_LoadGame.SheepFarm);
	var getData = storage.data.savedData;
	if(getData == null) getData = null;
	return getData;
};
game_scenes_LoadGame.prototype = {
	__class__: game_scenes_LoadGame
};
var game_scenes_Matsp = function() {
	openfl_display_Sprite.call(this);
	this.onInit();
};
$hxClasses["game.scenes.Matsp"] = game_scenes_Matsp;
game_scenes_Matsp.__name__ = ["game","scenes","Matsp"];
game_scenes_Matsp.__super__ = openfl_display_Sprite;
game_scenes_Matsp.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.mat = new openfl_display_Sprite();
		this.mat.get_graphics().beginFill(2228224,0);
		this.mat.get_graphics().drawRect(0,0,fw_Config.convertWidth(178),fw_Config.convertHeight(178));
		this.mat.get_graphics().endFill();
		this.addChild(this.mat);
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
	}
	,onExit: function() {
	}
	,__class__: game_scenes_Matsp
});
var game_scenes_Menu = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["game.scenes.Menu"] = game_scenes_Menu;
game_scenes_Menu.__name__ = ["game","scenes","Menu"];
game_scenes_Menu.__interfaces__ = [fw_display_IScene];
game_scenes_Menu.__super__ = openfl_display_Sprite;
game_scenes_Menu.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function() {
		GameSettings.cash = 0;
		GameSettings.score = 0;
		GameSettings.level = 1;
		GameSettings.total = 0;
		GameSettings.dryWoolTotal = 0;
		GameSettings.color1Total = 0;
		GameSettings.color2Total = 0;
		GameSettings.color3Total = 0;
		GameSettings.color4Total = 0;
		GameSettings.color5Total = 0;
		GameSettings.waterTotal = 0;
		GameSettings.foodFrame = 0;
		GameSettings.totalDryWool = 0;
		GameSettings.fromMarket = false;
		GameSettings.woolTrayCount = 0;
		GameSettings.availableSack = 2;
		GameSettings.medicineTotal = 21;
		GameSettings.milkTotal = 0;
		GameSettings.flushTotal = 0;
		GameSettings.woolTotal = 0;
		GameSettings.woolPlaceTotal = 6;
		GameSettings.grassTotal = 15;
		GameSettings.foodTotal = 15;
		GameSettings.grassBundle = 5;
		GameSettings.foodFrame = 3;
		GameSettings.bucketFrame = 0;
		GameSettings.sheepTotal = 3;
		GameSettings.wetWoolTotal = 0;
		GameSettings.availableBasket = 3;
		GameSettings.grassBundle2 = 0;
		GameSettings.availableSack2 = 0;
		GameSettings.availableBasket2 = 0;
		GameSettings.tailorWool = 0;
		GameSettings.whiteTotal = 0;
		GameSettings.gameLoaded = false;
		GameSettings.vehicleUp = false;
		GameSettings.vehicleUped = false;
		GameSettings.color1Up = true;
		GameSettings.color2Up = false;
		GameSettings.color3Up = false;
		GameSettings.color4Up = false;
		GameSettings.sellFlag = false;
		GameSettings.buyFlag = false;
		GameSettings.sellWoolCount = 0;
		GameSettings.selldryWoolCount = 0;
		GameSettings.buysheepCount = 0;
		GameSettings.clr1 = 1;
		GameSettings.clr2 = 0;
		GameSettings.clr3 = 0;
		GameSettings.clr4 = 0;
		GameSettings.bar1Frame = 0;
		GameSettings.bar2Frame = -1;
		GameSettings.bar3Frame = -1;
		GameSettings.bar4Frame = -1;
		GameSettings.matTotal = 1;
		GameSettings.sackTotal = 2;
		GameSettings.basketTotal = 3;
		GameSettings.nextAction = false;
		GameSettings.bg2played = false;
	}
	,onInit: function() {
		this.init();
		this.border = new openfl_display_Sprite();
		this.border.get_graphics().lineStyle(10,16777215,1);
		this.border.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.border.get_graphics().endFill();
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		fw_managers_SceneManager.addToHUD(this.border);
		var g = new openfl_display_Sprite();
		g.get_graphics().beginFill(2228224,1);
		g.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		g.get_graphics().endFill();
		this.addChild(g);
		GameSettings.a = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/image.json"),"typeJsonHash",0);
		GameSettings.b = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/gameObj.json"),"typeJsonHash",0);
		GameSettings.c = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/gameLoop.json"),"typeJsonHash",4);
		GameSettings.d = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/sheepLoop.json"),"typeJsonHash",4);
		GameSettings.loader = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/loaderLoop.json"),"typeJsonHash",4);
		GameSettings.fx = new fw_def_AtlasDefinition(openfl_Assets.getText( fw_Config.screen + "/gameObj.json"),"typeJsonHash",4);
		this.menubg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bgmenu.png"));
		this.addChild(this.menubg);
		this.menubg.smoothing = true;
		this.title = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("titlemenu"));
		this.addChild(this.title);
		this.title.set_x(fw_Config.convertWidth(280));
		this.title.set_y(fw_Config.convertHeight(600));
		this.title.set_scaleX(this.title.set_scaleY(.85));
		this.title.setSmoothing(true);
		this.title.set_visible(false);
		this.heromenu = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("heromenu"));
		this.addChild(this.heromenu);
		this.heromenu.set_x(fw_Config.convertWidth(1000));
		this.heromenu.set_y(fw_Config.convertHeight(160));
		this.heromenu.set_scaleX(this.heromenu.set_scaleY(.8));
		this.heromenu.setSmoothing(true);
		this.heromenu.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.heromenu.set_visible(false);
		this.grassmenu = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("grass_menu"));
		this.addChild(this.grassmenu);
		this.grassmenu.set_x(fw_Config.convertWidth(0));
		this.grassmenu.set_y(fw_Config.convertHeight(450));
		this.grassmenu.setSmoothing(true);
		this.grassmenu.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		GameSettings.savedData = game_scenes_LoadGame.loadGame();
		this.playButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_startGame"));
		fw_managers_SceneManager.addToHUD(this.playButton);
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.playButton.buttonMode = true;
		this.playButton.set_visible(false);
		this.playButton.set_x(fw_Config.convertWidth(300));
		this.playButton.set_y(fw_Config.convertHeight(560));
		this.playButton.setSmoothing(true);
		this.playButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		if(GameSettings.musicPlaying) this.soundButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_soundOff")); else this.soundButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_soundOn"));
		fw_managers_SceneManager.addToHUD(this.soundButton);
		this.soundButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.soundMuted));
		this.soundButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.soundButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.soundButton.buttonMode = true;
		this.soundButton.set_visible(false);
		this.soundButton.set_x(fw_Config.convertWidth(300));
		this.soundButton.set_y(fw_Config.convertHeight(560));
		this.soundButton.setSmoothing(true);
		this.soundButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.moreButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_moreGames"));
		this.moreButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.moreButton.setSmoothing(true);
		fw_managers_SceneManager.addToHUD(this.moreButton);
		this.moreButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMousemore));
		this.moreButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.moreButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.moreButton.set_visible(false);
		this.moreButton.buttonMode = true;
		this.leaderButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_leaderboard"));
		this.leaderButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.leaderButton.setSmoothing(true);
		fw_managers_SceneManager.addToHUD(this.leaderButton);
		this.leaderButton.set_visible(false);
		this.leaderButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onLeaderBoard));
		this.leaderButton.buttonMode = true;
		this.faceBookButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("fb"));
		fw_managers_SceneManager.addToHUD(this.faceBookButton);
		this.faceBookButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.faceBookButton.setSmoothing(true);
		this.faceBookButton.buttonMode = true;
		this.faceBookButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onFaceBook));
		this.faceBookButton.set_visible(false);
		this.Logo = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("cs_logo"));
		this.Logo.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.Logo.setSmoothing(true);
		fw_managers_SceneManager.addToHUD(this.Logo);
		this.Logo.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onLogo));
		this.Logo.buttonMode = true;
		this.Logo.set_visible(false);
		this.boxMenu = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("targetBox"));
		fw_managers_SceneManager.addToHUD(this.boxMenu);
		this.boxMenu.set_visible(false);
		this.boxMenu.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.boxMenu.setSmoothing(true);
		this.boxMenu.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.74);
		this.dayButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_newGame"));
		fw_managers_SceneManager.addToHUD(this.dayButton);
		this.dayButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onDay1));
		this.dayButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.dayButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.dayButton.buttonMode = true;
		this.dayButton.set_visible(false);
		this.dayButton.set_x(fw_Config.convertWidth(300));
		this.dayButton.set_y(fw_Config.convertHeight(560));
		this.dayButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.dayButton.setSmoothing(true);
		this.loadButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_loadGame"));
		fw_managers_SceneManager.addToHUD(this.loadButton);
		this.loadButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onLoad));
		this.loadButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.loadButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.loadButton.buttonMode = true;
		this.loadButton.set_visible(false);
		this.loadButton.set_x(fw_Config.convertWidth(300));
		this.loadButton.set_y(fw_Config.convertHeight(560));
		this.loadButton.setSmoothing(true);
		this.loadButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.funLogo = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/funLogo.png"));
		fw_managers_SceneManager.addToHUD(this.funLogo);
		this.funLogo.smoothing = true;
		this.backgd = new openfl_display_Sprite();
		this.backgd.get_graphics().beginFill(2228224,1);
		this.backgd.get_graphics().drawRect(0,0,1440,960);
		this.backgd.set_scaleX(this.backgd.set_scaleY(fw_Config.scaleRatio));
		this.backgd.get_graphics().endFill();
		fw_managers_SceneManager.addToHUD(this.backgd);
		this.backgd.set_alpha(.1);
		this.backgd.set_visible(false);
		this.boxMenu1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("targetBox"));
		fw_managers_SceneManager.addToHUD(this.boxMenu1);
		this.boxMenu1.set_visible(false);
		this.boxMenu1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.boxMenu1.setSmoothing(true);
		this.exitMsg1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("exitWarning2"));
		fw_managers_SceneManager.addToHUD(this.exitMsg1);
		this.exitMsg1.set_visible(false);
		this.exitMsg1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.exitMsg1.setSmoothing(true);
		this.yesButton1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_yes"));
		fw_managers_SceneManager.addToHUD(this.yesButton1);
		this.yesButton1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onYes1));
		this.yesButton1.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.yesButton1.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.yesButton1.buttonMode = true;
		this.yesButton1.set_visible(false);
		this.yesButton1.setSmoothing(true);
		this.yesButton1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.noButton1 = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_no"));
		fw_managers_SceneManager.addToHUD(this.noButton1);
		this.noButton1.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNo1));
		this.noButton1.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.noButton1.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.noButton1.buttonMode = true;
		this.noButton1.set_visible(false);
		this.noButton1.setSmoothing(true);
		this.noButton1.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.box = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("targetBox"));
		fw_managers_SceneManager.addToHUD(this.box);
		this.box.set_visible(false);
		this.box.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.box.setSmoothing(true);
		this.exitMsg = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("exitWarning"));
		fw_managers_SceneManager.addToHUD(this.exitMsg);
		this.exitMsg.set_visible(false);
		this.exitMsg.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.exitMsg.setSmoothing(true);
		this.yesButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_yes"));
		fw_managers_SceneManager.addToHUD(this.yesButton);
		this.yesButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onYes));
		this.yesButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.yesButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.yesButton.buttonMode = true;
		this.yesButton.set_visible(false);
		this.yesButton.setSmoothing(true);
		this.yesButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.noButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_no"));
		fw_managers_SceneManager.addToHUD(this.noButton);
		this.noButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNo));
		this.noButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.noButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.noButton.buttonMode = true;
		this.noButton.set_visible(false);
		this.noButton.setSmoothing(true);
		this.noButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.oldScaleX = fw_Config.scaleRatio;
		if(GameSettings.musicPlaying) fw_managers_MusicManager.playMusic("music",300,5);
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
		this.doActions();
		this.onResize();
	}
	,doActions: function() {
		GameSettings.actionFlag = true;
		this.title.set_visible(true);
		var width = 50;
		width = 90;
		motion_Actuate.tween(this.title,.5,{ y : fw_Config.convertHeight(width)}).ease(motion_easing_Back.get_easeOut()).onComplete($bind(this,this.tweenComplete));
		this.heromenu.set_visible(true);
		this.faceBookButton.set_visible(true);
		this.Logo.set_visible(true);
	}
	,handlekeyDown: function(e) {
	}
	,onYes: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onNo: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		this.backgd.set_visible(false);
		this.box.set_visible(false);
		this.exitMsg.set_visible(false);
		this.yesButton.set_visible(false);
		this.noButton.set_visible(false);
	}
	,onYes1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		this.removeButtons();
		GameSettings.level = 1;
		GameSettings.gameLoaded = false;
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,onNo1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		this.backgd.set_visible(false);
		this.boxMenu1.set_visible(false);
		this.exitMsg1.set_visible(false);
		this.yesButton1.set_visible(false);
		this.noButton1.set_visible(false);
		this.boxMenu.set_visible(true);
		this.dayButton.set_visible(true);
		this.loadButton.set_visible(true);
	}
	,tweenComplete: function() {
		motion_Actuate.tween(this.heromenu,.5,{ x : fw_Config.convertWidth(600)}).ease(motion_easing_Back.get_easeOut()).onComplete($bind(this,this.tweenComplete1));
	}
	,tweenComplete1: function() {
		this.playButton.set_visible(true);
		this.soundButton.set_visible(true);
		this.leaderButton.set_visible(true);
		this.moreButton.set_visible(true);
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOver: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX + 0.05));
	}
	,soundMuted: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		if(GameSettings.musicPlaying == false) {
			this.soundButton.setFrames(GameSettings.a.getFrames("btn_soundOn"),0);
			fw_managers_MusicManager.playMusic("music",300,5);
			GameSettings.musicPlaying = true;
		} else {
			fw_managers_MusicManager.stopMusic("music",1);
			this.soundButton.setFrames(GameSettings.a.getFrames("btn_soundOff"),0);
			GameSettings.musicPlaying = false;
		}
	}
	,onLogo: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		openfl_Lib.getURL(new openfl_net_URLRequest("http://www.csharks.com"));
	}
	,onFaceBook: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		openfl_Lib.getURL(new openfl_net_URLRequest("https://www.facebook.com/pages/Csharks-Games-Solutions-Pvt-Ltd/110443232363200"));
	}
	,onMousemore: function(e) {
		window.open(mobConfig.mainpage);
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		openfl_Lib.getURL(new openfl_net_URLRequest("https://play.google.com/store/apps/developer?id=Csharks+Games+and+Solutions+Pvt+Ltd&hl=en"));
	}
	,onLeaderBoard: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,gotoTutorial: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		GameSettings.level = 1;
		GameSettings.gameLoaded = false;
		this.removeButtons();
		this.init();
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,onPlay: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		if(GameSettings.savedData == null || GameSettings.savedData != null && GameSettings.savedData.level == null) {
			GameSettings.level = 1;
			GameSettings.gameLoaded = false;
			this.removeButtons();
			this.init();
			fw_managers_SceneManager.changeScene(game_scenes_Game);
		} else if(GameSettings.savedData != null && GameSettings.savedData.level <= 1) {
			GameSettings.level = 1;
			GameSettings.gameLoaded = false;
			this.removeButtons();
			this.init();
			fw_managers_SceneManager.changeScene(game_scenes_Game);
		} else if(GameSettings.savedData != null && GameSettings.savedData.level > 1) {
			this.boxMenu.set_visible(true);
			this.dayButton.set_visible(true);
			this.loadButton.set_visible(true);
		}
	}
	,onDay1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		if(this.loadButton.get_visible()) {
			this.backgd.set_visible(true);
			this.boxMenu1.set_visible(true);
			this.exitMsg1.set_visible(true);
			this.yesButton1.set_visible(true);
			this.noButton1.set_visible(true);
			this.boxMenu.set_visible(false);
			this.dayButton.set_visible(false);
			this.loadButton.set_visible(false);
		} else {
			this.removeButtons();
			GameSettings.level = 1;
			GameSettings.gameLoaded = false;
			fw_managers_SceneManager.changeScene(game_scenes_Game);
		}
	}
	,onLoad: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		this.removeButtons();
		GameSettings.gameLoaded = true;
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,removeButtons: function() {
		this.yesButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onYes1));
		this.yesButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.yesButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.noButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNo1));
		this.noButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.noButton1.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.yesButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onYes));
		this.yesButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.yesButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.noButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onNo));
		this.noButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.noButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.soundButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.soundMuted));
		this.soundButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.soundButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.loadButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onLoad));
		this.loadButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.loadButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.dayButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onDay1));
		this.dayButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.dayButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeChild(this.menubg);
		fw_managers_SceneManager.removeFromHUD(this.Logo);
		fw_managers_SceneManager.removeFromHUD(this.moreButton);
		fw_managers_SceneManager.removeFromHUD(this.leaderButton);
		fw_managers_SceneManager.removeFromHUD(this.faceBookButton);
		fw_managers_SceneManager.removeFromHUD(this.exitMsg);
		fw_managers_SceneManager.removeFromHUD(this.backgd);
		fw_managers_SceneManager.removeFromHUD(this.box);
		fw_managers_SceneManager.removeFromHUD(this.playButton);
		fw_managers_SceneManager.removeFromHUD(this.noButton);
		fw_managers_SceneManager.removeFromHUD(this.yesButton);
		this.removeChild(this.title);
		fw_managers_SceneManager.removeFromHUD(this.soundButton);
		fw_managers_SceneManager.removeFromHUD(this.loadButton);
		fw_managers_SceneManager.removeFromHUD(this.boxMenu);
		fw_managers_SceneManager.removeFromHUD(this.dayButton);
		fw_managers_SceneManager.removeFromHUD(this.boxMenu1);
		fw_managers_SceneManager.removeFromHUD(this.exitMsg1);
		fw_managers_SceneManager.removeFromHUD(this.noButton1);
		fw_managers_SceneManager.removeFromHUD(this.yesButton1);
		fw_managers_SceneManager.removeFromHUD(this.funLogo);
		this.removeChild(this.heromenu);
		this.removeChild(this.grassmenu);
		fw_managers_SceneManager.removeFromHUD(this.border);
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
		this.oldScaleX = fw_Config.scaleRatio;
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		this.playButton.set_scaleX(this.playButton.set_scaleY(fw_Config.scaleRatio));
		this.soundButton.set_scaleX(this.soundButton.set_scaleY(fw_Config.scaleRatio));
		this.playButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.65);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.7);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3);
		this.soundButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.65);
		this.soundButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 6.4);
		this.yesButton.set_scaleX(this.yesButton.set_scaleY(fw_Config.scaleRatio));
		this.yesButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.325);
		this.yesButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.5);
		this.noButton.set_scaleX(this.noButton.set_scaleY(fw_Config.scaleRatio));
		this.noButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.7);
		this.noButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.5);
		this.box.set_scaleX(this.box.set_scaleY(fw_Config.scaleRatio * .8));
		this.box.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.25);
		this.box.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.3);
		this.backgd.set_scaleX(this.backgd.set_scaleY(fw_Config.scaleRatio));
		this.exitMsg.set_scaleX(this.exitMsg.set_scaleY(fw_Config.scaleRatio * 1.25));
		this.exitMsg.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.45);
		this.exitMsg.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.6);
		this.boxMenu.set_scaleX(this.boxMenu.set_scaleY(fw_Config.scaleRatio * .6));
		this.boxMenu.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.38);
		this.boxMenu.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.8);
		this.boxMenu.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.74);
		this.dayButton.set_scaleX(this.dayButton.set_scaleY(fw_Config.scaleRatio));
		this.dayButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.65);
		this.dayButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.1);
		this.loadButton.set_scaleX(this.loadButton.set_scaleY(fw_Config.scaleRatio));
		this.loadButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.65);
		this.loadButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.9);
		this.dayButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.2);
		this.loadButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.9);
		this.faceBookButton.set_scaleX(this.faceBookButton.set_scaleY(fw_Config.scaleRatio * 0.9));
		this.faceBookButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.075);
		this.faceBookButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 5.55);
		this.moreButton.set_scaleX(this.moreButton.set_scaleY(fw_Config.scaleRatio));
		this.moreButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.575);
		this.moreButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 6.4);
		this.leaderButton.set_scaleX(this.leaderButton.set_scaleY(fw_Config.scaleRatio));
		this.leaderButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.21);
		this.leaderButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 6.4);
		this.Logo.set_scaleX(this.Logo.set_scaleY(fw_Config.scaleRatio * 0.9));
		this.Logo.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 5.8);
		this.Logo.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 5);
		this.funLogo.set_scaleX(this.funLogo.set_scaleY(fw_Config.scaleRatio * 0.12));
		this.funLogo.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.01);
		this.funLogo.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.02);
		this.yesButton1.set_scaleX(this.yesButton.set_scaleY(fw_Config.scaleRatio));
		this.yesButton1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.325);
		this.yesButton1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.5);
		this.noButton1.set_scaleX(this.noButton.set_scaleY(fw_Config.scaleRatio));
		this.noButton1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 2.7);
		this.noButton1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 2.5);
		this.boxMenu1.set_scaleX(this.box.set_scaleY(fw_Config.scaleRatio * .8));
		this.boxMenu1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.25);
		this.boxMenu1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.3);
		this.exitMsg1.set_scaleX(this.exitMsg1.set_scaleY(fw_Config.scaleRatio * 1.25));
		this.exitMsg1.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.42);
		this.exitMsg1.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 1.6);
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
	}
	,onExit: function() {
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.handlekeyDown));
		this.menubg = null;
		this.title = null;
		this.playButton = null;
		this.heromenu = null;
		this.removeChildren();
	}
	,__class__: game_scenes_Menu
});
var game_scenes_ObjGame = function(nam) {
	openfl_display_Sprite.call(this);
	this.onInit(nam);
};
$hxClasses["game.scenes.ObjGame"] = game_scenes_ObjGame;
game_scenes_ObjGame.__name__ = ["game","scenes","ObjGame"];
game_scenes_ObjGame.__super__ = openfl_display_Sprite;
game_scenes_ObjGame.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function(nam) {
		this.obj = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames(nam));
		this.addChild(this.obj);
		this.obj.setFrames(GameSettings.d.getFrames(nam),15);
		this.obj.play(0,true);
		this.obj.gotoFrame(0);
		this.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.obj.setSmoothing(true);
		this.obj.set_x(-this.obj.get_width() / 2);
		this.obj.set_y(-this.obj.get_height());
		if(nam == "popupTimer") {
			this.obj.set_x(-this.obj.get_width() / 2);
			this.obj.set_y(-this.obj.get_height() / 2);
		}
		this.obj.set_name("obj");
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		this.obj.update();
	}
	,onExit: function() {
	}
	,__class__: game_scenes_ObjGame
});
var game_scenes_ObjMat = function() {
	openfl_display_Sprite.call(this);
	this.onInit();
};
$hxClasses["game.scenes.ObjMat"] = game_scenes_ObjMat;
game_scenes_ObjMat.__name__ = ["game","scenes","ObjMat"];
game_scenes_ObjMat.__super__ = openfl_display_Sprite;
game_scenes_ObjMat.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.obj = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("mat_drying_"));
		this.addChild(this.obj);
		this.obj.setFrames(GameSettings.c.getFrames("mat_drying_"),15);
		this.obj.play(0,true);
		this.obj.gotoFrame(0);
		this.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.obj.setSmoothing(true);
		this.obj.set_x(-this.obj.get_width() / 2);
		this.obj.set_y(-this.obj.get_height());
		this.obj.set_name("obj");
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		this.obj.update();
	}
	,onExit: function() {
	}
	,__class__: game_scenes_ObjMat
});
var game_scenes_Over = function() {
	this.startOverFlag = false;
	openfl_display_Sprite.call(this);
};
$hxClasses["game.scenes.Over"] = game_scenes_Over;
game_scenes_Over.__name__ = ["game","scenes","Over"];
game_scenes_Over.__interfaces__ = [fw_display_IScene];
game_scenes_Over.__super__ = openfl_display_Sprite;
game_scenes_Over.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.border = new openfl_display_Sprite();
		this.border.get_graphics().lineStyle(10,16777215,1);
		this.border.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		this.border.get_graphics().endFill();
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		fw_managers_SceneManager.addToHUD(this.border);
		haxe_Log.trace("Menu init",{ fileName : "Over.hx", lineNumber : 90, className : "game.scenes.Over", methodName : "onInit"});
		var g = new openfl_display_Sprite();
		g.get_graphics().beginFill(2228224,1);
		g.get_graphics().drawRect(0,0,fw_Config.convertWidth(fw_Config.logicWidth),fw_Config.convertHeight(fw_Config.logicHeight));
		g.get_graphics().endFill();
		this.addChild(g);
		var fontXML = Xml.parse(openfl_Assets.getText("static/font28b.fnt"));
		var fontImage = openfl_Assets.getBitmapData("static/font28b.png");
		var angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
		if(GameSettings.lightup > .2) this.gameoverbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bglevelUp.png")); else this.gameoverbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bgmenu.png"));
		this.addChild(this.gameoverbg);
		this.gameoverbg.smoothing = true;
		this.bordSprite = new openfl_display_Sprite();
		this.addChild(this.bordSprite);
		this.bordSprite.set_y(fw_Config.convertHeight(800));
		this.startOverFlag = false;
		this.msgBox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("msgBox"));
		this.bordSprite.addChild(this.msgBox);
		this.msgBox.set_x(fw_Config.convertWidth(280));
		this.msgBox.setSmoothing(true);
		this.msgBox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.msgBox.set_visible(false);
		this.title = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("gameOver_title"));
		this.bordSprite.addChild(this.title);
		this.title.set_x(fw_Config.convertWidth(380));
		this.title.set_y(fw_Config.convertHeight(30));
		this.title.set_scaleX(this.title.set_scaleY(.8));
		this.title.setSmoothing(true);
		this.title.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.title.set_visible(false);
		this.tutMsg = new bitmapFont_BitmapTextField(angelCodeFont);
		this.tutMsg.set_autoSize(true);
		this.tutMsg.set_wrapByWord(true);
		this.tutMsg.mouseEnabled = false;
		this.tutMsg.mouseChildren = false;
		this.tutMsg.set_smoothing(true);
		if(GameSettings.overMsg == 1) {
			this.tutMsg.set_text("\tYou lost all sheep,\r\nand you have no money \r\n\tto buy a new one.");
			this.tutMsg.set_y(fw_Config.convertWidth(300));
		} else {
			this.tutMsg.set_text("  You failed to meet the\r\n\t target for the day.");
			this.tutMsg.set_y(fw_Config.convertWidth(320));
		}
		this.tutMsg.set_x(fw_Config.convertWidth(333));
		this.tutMsg.set_visible(false);
		this.addChild(this.tutMsg);
		this.playButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_playAgain"));
		fw_managers_SceneManager.addToHUD(this.playButton);
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.playButton.buttonMode = true;
		this.playButton.set_visible(false);
		this.playButton.set_x(fw_Config.convertWidth(300));
		this.playButton.set_y(fw_Config.convertHeight(560));
		this.playButton.set_scaleX(this.playButton.set_scaleY(fw_Config.scaleRatio));
		haxe_Log.trace(openfl_Lib.current.stage.stageWidth,{ fileName : "Over.hx", lineNumber : 196, className : "game.scenes.Over", methodName : "onInit"});
		this.playButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.745);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.2);
		this.playButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.playButton.setSmoothing(true);
		this.menuButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_menu"));
		fw_managers_SceneManager.addToHUD(this.menuButton);
		this.menuButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.menuButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.menuButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.menuButton.buttonMode = true;
		this.menuButton.set_visible(false);
		this.menuButton.set_x(fw_Config.convertWidth(300));
		this.menuButton.set_y(fw_Config.convertHeight(560));
		this.menuButton.set_scaleX(this.menuButton.set_scaleY(fw_Config.scaleRatio));
		this.menuButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.745);
		this.menuButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 5.3);
		this.menuButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.menuButton.setSmoothing(true);
		this.oldScaleX = fw_Config.scaleRatio;
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onBack1));
		this.addGameOver();
		this.onResize();
	}
	,addGameOver: function() {
		this.startOverFlag = true;
		this.msgBox.set_visible(true);
		this.title.set_visible(true);
		motion_Actuate.tween(this.bordSprite,.5,{ y : fw_Config.convertHeight(120)}).ease(motion_easing_Back.get_easeOut()).onComplete($bind(this,this.tweenComplete));
	}
	,onBack1: function(e) {
	}
	,onYes: function(e) {
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeChild(this.gameoverbg);
		fw_managers_SceneManager.removeFromHUD(this.playButton);
		this.bordSprite.removeChild(this.msgBox);
		this.bordSprite.removeChild(this.title);
		this.removeChild(this.bordSprite);
		fw_managers_SceneManager.removeFromHUD(this.menuButton);
		fw_managers_SceneManager.removeFromHUD(this.border);
		this.removeChild(this.tutMsg);
		GameSettings.addTimer = 7000;
		fw_managers_SceneManager.changeScene(game_scenes_Menu);
	}
	,onNo: function(e) {
	}
	,tweenComplete: function() {
		this.playButton.set_visible(true);
		this.tutMsg.set_visible(true);
		this.menuButton.set_visible(true);
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOver: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX + 0.05));
	}
	,onMenu: function(e) {
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeChild(this.gameoverbg);
		fw_managers_SceneManager.removeFromHUD(this.playButton);
		this.bordSprite.removeChild(this.msgBox);
		this.bordSprite.removeChild(this.title);
		this.removeChild(this.bordSprite);
		fw_managers_SceneManager.removeFromHUD(this.menuButton);
		fw_managers_SceneManager.removeFromHUD(this.border);
		GameSettings.addTimer = 7000;
		fw_managers_SceneManager.changeScene(game_scenes_Menu);
	}
	,onPlay: function(e) {
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onPlay));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.playButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMenu));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
		this.menuButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeChild(this.gameoverbg);
		fw_managers_SceneManager.removeFromHUD(this.playButton);
		this.bordSprite.removeChild(this.msgBox);
		this.bordSprite.removeChild(this.title);
		this.removeChild(this.bordSprite);
		fw_managers_SceneManager.removeFromHUD(this.menuButton);
		this.menuButton = null;
		GameSettings.woolTrayCount = 0;
		GameSettings.availableSack = 2;
		GameSettings.medicineTotal = 21;
		GameSettings.milkTotal = 0;
		GameSettings.flushTotal = 0;
		GameSettings.woolTotal = 0;
		GameSettings.woolPlaceTotal = 6;
		GameSettings.grassTotal = 15;
		GameSettings.foodTotal = 15;
		GameSettings.grassBundle = 5;
		GameSettings.foodFrame = 1;
		GameSettings.bucketFrame = 0;
		GameSettings.sheepTotal = 3;
		GameSettings.wetWoolTotal = 0;
		GameSettings.availableBasket = 3;
		GameSettings.grassBundle2 = 0;
		GameSettings.availableSack2 = 0;
		GameSettings.availableBasket2 = 0;
		GameSettings.tailorWool = 0;
		GameSettings.whiteTotal = 0;
		GameSettings.gameLoaded = false;
		GameSettings.vehicleUp = false;
		GameSettings.vehicleUped = false;
		GameSettings.color1Up = true;
		GameSettings.color2Up = false;
		GameSettings.color3Up = false;
		GameSettings.color4Up = false;
		GameSettings.sellFlag = false;
		GameSettings.buyFlag = false;
		GameSettings.sellWoolCount = 0;
		GameSettings.selldryWoolCount = 0;
		GameSettings.buysheepCount = 0;
		GameSettings.clr1 = 1;
		GameSettings.clr2 = 0;
		GameSettings.clr3 = 0;
		GameSettings.clr4 = 0;
		GameSettings.bar1Frame = 0;
		GameSettings.bar2Frame = -1;
		GameSettings.bar3Frame = -1;
		GameSettings.bar4Frame = -1;
		GameSettings.matTotal = 1;
		GameSettings.color1Total = 0;
		GameSettings.color2Total = 0;
		GameSettings.color3Total = 0;
		GameSettings.color4Total = 0;
		GameSettings.color5Total = 0;
		GameSettings.totalDryWool = 0;
		GameSettings.sackTotal = 2;
		GameSettings.basketTotal = 3;
		GameSettings.nextAction = false;
		GameSettings.cash = 0;
		GameSettings.total = 0;
		if(GameSettings.level > 1) GameSettings.gameLoaded = true;
		fw_managers_SceneManager.removeFromHUD(this.border);
		fw_managers_SceneManager.changeScene(game_scenes_Game);
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
		this.oldScaleX = fw_Config.scaleRatio;
		this.border.set_scaleX(this.border.set_scaleY(fw_Config.scaleRatio));
		this.menuButton.set_scaleX(this.menuButton.set_scaleY(fw_Config.scaleRatio * 0.8));
		this.menuButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.745);
		this.menuButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 5.3);
		this.menuButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 5.5);
		this.playButton.set_scaleX(this.playButton.set_scaleY(fw_Config.scaleRatio * 0.8));
		this.playButton.set_x(openfl_Lib.current.stage.stageWidth - openfl_Lib.current.stage.stageWidth / 1.745);
		this.playButton.set_y(openfl_Lib.current.stage.stageHeight - openfl_Lib.current.stage.stageHeight / 3.2);
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
	}
	,onExit: function() {
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onBack1));
		this.gameoverbg = null;
		this.title = null;
		this.playButton = null;
		this.removeChildren();
		haxe_Log.trace("mmmmmExit",{ fileName : "Over.hx", lineNumber : 698, className : "game.scenes.Over", methodName : "onExit"});
	}
	,__class__: game_scenes_Over
});
var game_scenes_SellShop = function() {
	this.limit = 0;
	this.itemCount = (function($this) {
		var $r;
		var _g = new haxe_ds_IntMap();
		_g.h[1] = GameSettings.milkTotal;
		_g.h[2] = GameSettings.flushTotal;
		_g.h[3] = GameSettings.woolTrayCount;
		_g.h[4] = GameSettings.woolTotal;
		_g.h[5] = GameSettings.availableSack;
		_g.h[6] = GameSettings.availableBasket;
		_g.h[7] = GameSettings.totalDryWool;
		_g.h[8] = GameSettings.color1Total;
		_g.h[9] = GameSettings.color2Total;
		_g.h[10] = GameSettings.color3Total;
		_g.h[11] = GameSettings.color4Total;
		_g.h[12] = GameSettings.color5Total;
		$r = _g;
		return $r;
	}(this));
	openfl_display_Sprite.call(this);
	var fontXML = Xml.parse(openfl_Assets.getText("static/font60.fnt"));
	var fontImage = openfl_Assets.getBitmapData("static/font60.png");
	this.angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
	var fontXML1 = Xml.parse(openfl_Assets.getText("static/font24.fnt"));
	var fontImage1 = openfl_Assets.getBitmapData("static/font24.png");
	this.angelCodeFont24 = bitmapFont_BitmapFont.fromAngelCode(fontImage1,fontXML1);
};
$hxClasses["game.scenes.SellShop"] = game_scenes_SellShop;
game_scenes_SellShop.__name__ = ["game","scenes","SellShop"];
game_scenes_SellShop.__interfaces__ = [fw_display_IScene];
game_scenes_SellShop.__super__ = openfl_display_Sprite;
game_scenes_SellShop.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.limit = 6;
		if(GameSettings.bg2played) this.limit = 8;
		if(GameSettings.bg3played) this.limit = 9;
		this.priceArray = [];
		this.shopbg = new openfl_display_Bitmap(openfl_Assets.getBitmapData( fw_Config.screen + "/bgmenu.png"));
		this.addChild(this.shopbg);
		this.shopbg.smoothing = true;
		this.box = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shop_bg"));
		this.addChild(this.box);
		this.box.set_scaleX(this.box.set_scaleY(.7));
		this.box.set_scaleY(.65);
		this.box.set_x(fw_Config.convertWidth(240));
		this.box.set_y(fw_Config.convertHeight(145));
		this.box.setSmoothing(true);
		this.box.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.box.set_scaleX(this.box.set_scaleY(.5));
		this.box.set_x(fw_Config.convertWidth(300));
		this.box.set_y(fw_Config.convertHeight(180));
		this.buttonbox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shopTab_sell"));
		this.addChild(this.buttonbox);
		this.buttonbox.set_scaleX(this.buttonbox.set_scaleY(.8));
		this.buttonbox.set_x(fw_Config.convertWidth(305));
		this.buttonbox.set_y(fw_Config.convertHeight(115));
		this.buttonbox.setSmoothing(true);
		this.buttonbox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.buttonbox.set_scaleX(this.buttonbox.set_scaleY(.6));
		this.buttonbox.set_x(fw_Config.convertWidth(340));
		this.buttonbox.set_y(fw_Config.convertHeight(160));
		this.buyButton = new openfl_display_Sprite();
		this.buyButton.get_graphics().beginFill(2228224,0);
		this.buyButton.get_graphics().drawRect(0,0,155,40);
		this.buyButton.get_graphics().endFill();
		this.addChild(this.buyButton);
		this.buyButton.set_x(fw_Config.convertWidth(320));
		this.buyButton.set_y(fw_Config.convertHeight(115));
		this.buyButton.set_scaleX(this.buyButton.set_scaleY(.8));
		this.buyButton.set_x(fw_Config.convertWidth(350));
		this.buyButton.set_y(fw_Config.convertHeight(160));
		if(GameSettings.level > 1) {
			this.buyButton.buttonMode = true;
			this.buyButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBuy));
		}
		this.cashTxt = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cashTxt.set_autoSize(true);
		this.cashTxt.set_wrapByWord(true);
		this.cashTxt.mouseEnabled = false;
		this.cashTxt.mouseChildren = false;
		this.cashTxt.set_smoothing(true);
		this.addChild(this.cashTxt);
		this.cashTxt.set_x(fw_Config.convertWidth(290));
		this.cashTxt.set_y(fw_Config.convertHeight(490));
		this.cashTxt.set_text("Cash :");
		this.cashTxt.set_scaleX(this.cashTxt.set_scaleY(.6));
		this.cashTxt.set_scaleX(this.cashTxt.set_scaleY(.4));
		this.cashTxt.set_x(fw_Config.convertWidth(330));
		this.cashTxt.set_y(fw_Config.convertHeight(450));
		this.cash = new bitmapFont_BitmapTextField(this.angelCodeFont);
		this.cash.set_autoSize(true);
		this.cash.set_wrapByWord(true);
		this.cash.mouseEnabled = false;
		this.cash.mouseChildren = false;
		this.cash.set_smoothing(true);
		this.addChild(this.cash);
		this.cash.set_x(fw_Config.convertWidth(400));
		this.cash.set_y(fw_Config.convertHeight(490));
		this.cash.set_text(Std.string(GameSettings.cash));
		this.cash.set_scaleX(this.cash.set_scaleY(.6));
		this.cash.set_scaleX(this.cash.set_scaleY(.4));
		this.cash.set_x(fw_Config.convertWidth(400));
		this.cash.set_y(fw_Config.convertHeight(450));
		this.backButton = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/image.png"),GameSettings.a.getFrames("btn_back"));
		this.addChild(this.backButton);
		if(GameSettings.level > 1) {
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.backtoGame));
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
			this.backButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
			this.backButton.buttonMode = true;
		}
		this.backButton.set_scaleX(this.backButton.set_scaleY(0.7));
		this.backButton.set_x(fw_Config.convertWidth(550));
		this.backButton.set_y(fw_Config.convertHeight(490));
		this.backButton.set_scaleX(this.backButton.set_scaleY(0.6));
		this.backButton.set_x(fw_Config.convertWidth(500));
		this.backButton.set_y(fw_Config.convertHeight(445));
		this.backButton.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.backButton.setSmoothing(true);
		this.countArray = [];
		this.itemArray = [];
		this.addSprite(340,210,1);
		this.addSprite(410,210,2);
		this.addSprite(480,210,3);
		this.addSprite(550,210,4);
		this.addSprite(340,290,5);
		this.addSprite(410,290,6);
		this.addSprite(480,290,7);
		this.addSprite(550,290,8);
		this.addSprite(340,370,9);
		this.addSprite(410,370,10);
		this.addSprite(480,370,11);
		this.addSprite(550,370,12);
		if(GameSettings.level == 1) {
			this.arrow = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameLoop.png"),GameSettings.c.getFrames("arrow"));
			this.addChild(this.arrow);
			this.arrow.setFrames(GameSettings.c.getFrames("arrow"),15);
			this.arrow.set_x(fw_Config.convertWidth(240));
			this.arrow.set_y(fw_Config.convertHeight(460));
			this.arrow.set_scaleX(this.arrow.set_scaleY(.7));
			this.arrow.stop();
			this.arrow.set_visible(false);
			this.arrow.setSmoothing(true);
			this.arrow.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		}
		this.oldScaleX = 1;
		this.oldScaleX1 = .7;
		this.oldScaleX1 = .6;
		this.updateItems();
		openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onGame));
	}
	,onMouseOut: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
	}
	,onMouseOut1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1));
	}
	,onMouseOver: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX - 0.03));
	}
	,onMouseOver1: function(e) {
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		this.oldScaleX1 = sprite.get_scaleX();
		this.oldScaleY = sprite.get_scaleY();
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX1 + 0.05));
	}
	,onGame: function(e) {
		if(GameSettings.level > 1) {
			e.stopImmediatePropagation();
			e.stopPropagation();
			this.removeCurrentBg();
			GameSettings.isPlaying = true;
			fw_managers_SceneManager.resumeScene(game_scenes_Game);
		}
	}
	,addSprite: function(xpos,ypos,no) {
		this.item = new openfl_display_Sprite();
		this.item.get_graphics().beginFill(2228224,0);
		this.item.get_graphics().drawRect(0,0,80,80);
		this.item.get_graphics().endFill();
		this.addChild(this.item);
		this.item.set_x(fw_Config.convertWidth(xpos));
		this.item.set_y(fw_Config.convertHeight(ypos));
		this.itemArray.push(this.item);
		this.itemBox = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("shopItem_box"));
		this.item.addChild(this.itemBox);
		this.itemBox.set_scaleX(this.itemBox.set_scaleY(.7));
		this.itemBox.set_scaleX(this.itemBox.set_scaleY(.5));
		this.itemBox.setSmoothing(true);
		this.itemBox.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.sell = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sell"));
		this.item.addChild(this.sell);
		this.sell.set_scaleX(this.sell.set_scaleY(.7));
		this.sell.set_x(fw_Config.convertWidth(2));
		this.sell.set_y(fw_Config.convertHeight(1));
		this.sell.setSmoothing(true);
		this.sell.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.sell.set_scaleX(this.sell.set_scaleY(.5));
		var counts = this.itemCount.h[no];
		this.count = new bitmapFont_BitmapTextField(this.angelCodeFont24);
		this.count.set_autoSize(true);
		this.count.set_wrapByWord(true);
		this.count.mouseEnabled = false;
		this.count.mouseChildren = false;
		this.count.set_smoothing(true);
		this.item.addChild(this.count);
		this.count.set_x(fw_Config.convertWidth(50));
		this.count.set_y(fw_Config.convertHeight(-3));
		this.count.set_text(counts == null?"null":"" + counts);
		this.count.set_scaleX(this.count.set_scaleY(.8));
		this.count.set_scaleX(this.count.set_scaleY(.6));
		this.count.set_x(fw_Config.convertWidth(40));
		this.countArray.push(this.count);
		this.money = new bitmapFont_BitmapTextField(this.angelCodeFont24);
		this.money.set_autoSize(true);
		this.money.set_wrapByWord(true);
		this.money.mouseEnabled = false;
		this.money.mouseChildren = false;
		this.money.set_smoothing(true);
		this.item.addChild(this.money);
		this.money.set_x(fw_Config.convertWidth(15));
		this.money.set_y(fw_Config.convertHeight(83));
		this.money.set_text(Std.string(GameSettings.itemCost.h[no]) + ".00");
		this.money.set_scaleX(this.money.set_scaleY(.8));
		this.money.set_scaleX(this.money.set_scaleY(.6));
		this.money.set_x(fw_Config.convertWidth(0));
		this.money.set_y(fw_Config.convertHeight(60));
		this.object = this.sell;
		if(no == 1) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("milkBottle2"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(30));
			this.object.set_y(fw_Config.convertHeight(25));
			this.object.set_scaleX(this.object.set_scaleY(.6));
			this.object.set_x(fw_Config.convertWidth(22));
			this.object.set_y(fw_Config.convertHeight(20));
		} else if(no == 2) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("tray0022"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(7));
			this.object.set_y(fw_Config.convertHeight(10));
			this.object.set_scaleX(this.object.set_scaleY(.55));
			this.object.set_x(fw_Config.convertWidth(4));
			this.object.set_y(fw_Config.convertHeight(8));
		} else if(no == 3) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("wool"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(30));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(20));
		} else if(no == 4) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack0004"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(20));
			this.object.set_scaleX(this.object.set_scaleY(.3));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(17));
		} else if(no == 5) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("sack"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(10));
			this.object.set_y(fw_Config.convertHeight(35));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(8));
			this.object.set_y(fw_Config.convertHeight(25));
		} else if(no == 6) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket1"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(25));
			this.object.set_y(fw_Config.convertHeight(20));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(15));
		} else if(no == 7) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("basket2"));
			this.item.addChild(this.object);
			this.object.set_scaleX(this.object.set_scaleY(.5));
			this.object.set_x(fw_Config.convertWidth(25));
			this.object.set_y(fw_Config.convertHeight(25));
			this.object.set_scaleX(this.object.set_scaleY(.4));
			this.object.set_x(fw_Config.convertWidth(15));
			this.object.set_y(fw_Config.convertHeight(18));
		} else if(no == 8) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon10"));
			this.item.addChild(this.object);
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(15));
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(14));
			this.object.set_y(fw_Config.convertHeight(10));
		} else if(no == 9) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon11"));
			this.item.addChild(this.object);
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(15));
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(14));
			this.object.set_y(fw_Config.convertHeight(10));
		} else if(no == 10) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon12"));
			this.item.addChild(this.object);
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(15));
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(14));
			this.object.set_y(fw_Config.convertHeight(10));
		} else if(no == 11) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon13"));
			this.item.addChild(this.object);
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(15));
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(14));
			this.object.set_y(fw_Config.convertHeight(10));
		} else if(no == 12) {
			this.object = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames("HudIcon14"));
			this.item.addChild(this.object);
			this.object.set_x(fw_Config.convertWidth(20));
			this.object.set_y(fw_Config.convertHeight(15));
			this.object.set_scaleX(this.object.set_scaleY(.8));
			this.object.set_x(fw_Config.convertWidth(14));
			this.object.set_y(fw_Config.convertHeight(10));
		}
		this.object.setSmoothing(true);
		this.object.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		if(no >= this.limit) {
			this.object.set_visible(false);
			this.count.set_visible(false);
			this.money.set_visible(false);
			this.sell.set_visible(false);
			this.itemBox.set_alpha(.3);
		}
	}
	,updateItems: function() {
		var count = 0;
		var _g1 = 1;
		var _g = this.limit;
		while(_g1 < _g) {
			var i = _g1++;
			count = this.itemCount.h[i];
			if(count == 0) {
				this.itemArray[i - 1].set_alpha(.3);
				if(GameSettings.level > 1) {
					if(this.itemArray[i - 1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
						this.itemArray[i - 1].buttonMode = false;
						this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
						this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
						this.itemArray[i - 1].removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
					}
				}
			} else {
				this.itemArray[i - 1].set_alpha(1);
				if(GameSettings.level > 1) {
					if(!this.itemArray[i - 1].hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) {
						this.itemArray[i - 1].buttonMode = true;
						this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
						this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
						this.itemArray[i - 1].addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
					}
				}
			}
		}
		if(GameSettings.level == 1) {
			this.itemArray[1].set_alpha(1);
			this.itemArray[1].buttonMode = true;
			this.itemArray[1].addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
			this.itemArray[1].addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
			this.itemArray[1].addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
			this.arrow.set_x(fw_Config.convertWidth(this.itemArray[1].get_x() + 50));
			this.arrow.set_y(fw_Config.convertHeight(this.itemArray[1].get_y() - 30));
			this.arrow.play(0,true);
			this.arrow.set_visible(true);
		}
	}
	,clickonItem: function(e) {
		var k;
		var sprite;
		sprite = js_Boot.__cast(e.currentTarget , openfl_display_Sprite);
		sprite.set_scaleX(sprite.set_scaleY(this.oldScaleX));
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		var _g1 = 0;
		var _g = this.itemArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.itemArray[i] == e.currentTarget) {
				k = i + 1;
				GameSettings.cash += GameSettings.itemCost.h[k];
				this.price = new bitmapFont_BitmapTextField(this.angelCodeFont24);
				this.price.set_autoSize(true);
				this.price.set_wrapByWord(true);
				this.price.mouseEnabled = false;
				this.price.mouseChildren = false;
				this.price.set_smoothing(true);
				this.addChild(this.price);
				this.price.set_x(fw_Config.convertWidth(this.itemArray[i].get_x() + this.itemArray[i].get_width() / 4));
				this.price.set_y(fw_Config.convertHeight(this.itemArray[i].get_y() + this.itemArray[i].get_height() / 4));
				this.price.set_text("+" + Std.string(GameSettings.itemCost.h[k]));
				motion_Actuate.tween(this.price,.5,{ x : fw_Config.convertWidth(390), y : fw_Config.convertHeight(490)}).ease(motion_easing_Back.get_easeIn()).onComplete($bind(this,this.tweenComplete));
				this.priceArray.push(this.price);
				this.price.set_scaleX(this.price.set_scaleY(.9));
				this.cash.set_text(Std.string(GameSettings.cash));
				if(k == 1) GameSettings.milkTotal--; else if(k == 2) GameSettings.flushTotal--; else if(k == 3) GameSettings.woolTrayCount--; else if(k == 4) {
					GameSettings.woolTotal--;
					GameSettings.sackTotal--;
					GameSettings.sellWoolCount++;
				} else if(k == 5) {
					GameSettings.availableSack--;
					GameSettings.sackTotal--;
				} else if(k == 6) {
					GameSettings.availableBasket--;
					GameSettings.basketTotal--;
				} else if(k == 7) {
					if(GameSettings.dryWoolTotal == 0) GameSettings.tailorWool--;
					if(GameSettings.dryWoolTotal > 0) GameSettings.dryWoolTotal--;
					GameSettings.totalDryWool--;
					GameSettings.basketTotal--;
					GameSettings.selldryWoolCount++;
				} else if(k == 8) {
					var r = GameSettings.color1Total % 3;
					GameSettings.color1Total--;
				} else if(k == 9) GameSettings.color2Total--; else if(k == 10) GameSettings.color3Total--; else if(k == 11) GameSettings.color4Total--; else if(k == 12) GameSettings.color5Total--;
				this.itemCount.h[1] = GameSettings.milkTotal;
				this.itemCount.h[2] = GameSettings.flushTotal;
				this.itemCount.h[3] = GameSettings.woolTrayCount;
				this.itemCount.h[4] = GameSettings.woolTotal;
				this.itemCount.h[5] = GameSettings.availableSack;
				this.itemCount.h[6] = GameSettings.availableBasket;
				this.itemCount.h[7] = GameSettings.totalDryWool;
				this.itemCount.h[8] = GameSettings.color1Total;
				this.itemCount.h[9] = GameSettings.color2Total;
				this.itemCount.h[10] = GameSettings.color3Total;
				this.itemCount.h[11] = GameSettings.color4Total;
				this.itemCount.h[12] = GameSettings.color5Total;
				var counts = this.itemCount.h[k];
				this.countArray[i].set_text(counts == null?"null":"" + counts);
				GameSettings.sellFlag = true;
				if(GameSettings.level == 1) {
					this.itemArray[1].set_alpha(.3);
					this.itemArray[1].buttonMode = false;
					this.itemArray[1].removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.clickonItem));
					this.itemArray[1].removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
					this.itemArray[1].removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
					this.arrow.set_x(fw_Config.convertWidth(this.buyButton.get_x() + 50));
					this.arrow.set_y(fw_Config.convertHeight(this.buyButton.get_y() - 50));
					this.arrow.play(0,true);
					this.arrow.set_visible(true);
					this.buyButton.buttonMode = true;
					this.buyButton.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.gotoBuy));
					this.buyButton.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver));
					this.buyButton.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
				} else this.updateItems();
				break;
			}
		}
	}
	,tweenComplete: function() {
		this.removeChild(this.priceArray[0]);
		this.priceArray.splice(0,1);
	}
	,gotoBuy: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removeCurrentBg();
		fw_managers_SceneManager.changeScene(game_scenes_BuyShop);
	}
	,backtoGame: function(e) {
		if(GameSettings.musicPlaying) fw_managers_SFXManager.playSound("scissor");
		this.removeCurrentBg();
		GameSettings.isPlaying = true;
		fw_managers_SceneManager.resumeScene(game_scenes_Game);
	}
	,removeCurrentBg: function() {
		var k = this.priceArray.length;
		var _g = 0;
		while(_g < k) {
			var i = _g++;
			if(this.priceArray.length > 0) {
				this.removeChild(this.priceArray[this.priceArray.length - 1]);
				this.priceArray.pop();
			} else break;
		}
		if(GameSettings.level == 1) this.removeChild(this.arrow);
		this.removeChild(this.shopbg);
		this.shopbg = null;
		this.removeChild(this.box);
		this.box = null;
		this.removeChild(this.buttonbox);
		this.buttonbox = null;
		this.removeChild(this.buyButton);
		this.buyButton = null;
		this.removeChild(this.cashTxt);
		this.cashTxt = null;
		this.removeChild(this.cash);
		this.cash = null;
		openfl_Lib.current.stage.removeEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onGame));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.backtoGame));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseOver1));
		this.backButton.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut1));
		this.removeChild(this.backButton);
		this.backButton = null;
		this.removeItem();
	}
	,removeItem: function() {
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			this.itemArray[i].removeChild(this.itemBox);
			this.itemArray[i].removeChild(this.sell);
			this.itemArray[i].removeChild(this.count);
			this.itemArray[i].removeChild(this.money);
			this.itemArray[i].removeChild(this.object);
			this.removeChild(this.itemArray[i]);
		}
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		if(GameSettings.level == 1) this.arrow.update();
	}
	,onExit: function() {
	}
	,__class__: game_scenes_SellShop
});
var game_scenes_Services = function() { };
$hxClasses["game.scenes.Services"] = game_scenes_Services;
game_scenes_Services.__name__ = ["game","scenes","Services"];
game_scenes_Services.playerID = null;
game_scenes_Services.init = function() {
};
game_scenes_Services.displayScoreboard = function() {
};
game_scenes_Services.submitScoresAndAchievements = function() {
};
var game_scenes_Sheep = function(gm) {
	openfl_display_Sprite.call(this);
	this.gm1 = gm;
	this.onInit();
};
$hxClasses["game.scenes.Sheep"] = game_scenes_Sheep;
game_scenes_Sheep.__name__ = ["game","scenes","Sheep"];
game_scenes_Sheep.__super__ = openfl_display_Sprite;
game_scenes_Sheep.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function() {
		this.sheep = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("bodyNormal"));
		this.addChild(this.sheep);
		this.sheep.setFrames(GameSettings.d.getFrames("bodyNormal"),15);
		this.sheep.stop();
		this.sheep.gotoFrame(0);
		this.sheep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.sheep.setSmoothing(true);
		this.sheep.set_x(-this.sheep.get_width() / 2);
		this.sheep.set_y(-this.sheep.get_height());
		this.sheep.set_name("sheep");
		this.sleep = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("zzz"));
		this.addChild(this.sleep);
		this.sleep.setFrames(GameSettings.d.getFrames("zzz"),15);
		this.sleep.stop();
		this.sleep.gotoFrame(0);
		this.sleep.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.sleep.setSmoothing(true);
		this.sleep.set_x(-this.sleep.get_width() / 2);
		this.sleep.set_y(-this.sleep.get_height());
		this.sleep.set_name("sleep");
		this.sleep.set_visible(false);
		this.scissor = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("woolCutting_scissor"));
		this.addChild(this.scissor);
		this.scissor.setFrames(GameSettings.d.getFrames("woolCutting_scissor"),15);
		this.scissor.stop();
		this.scissor.gotoFrame(0);
		this.scissor.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.scissor.setSmoothing(true);
		this.scissor.set_x(-this.scissor.get_width() / 2);
		this.scissor.set_y(-this.scissor.get_height() + 10);
		this.scissor.set_name("scissor");
		this.scissor.set_visible(false);
		this.tray = new game_scenes_ObjGame("sack");
		this.tray.obj.setFrames(GameSettings.d.getFrames("tray"),15);
		this.tray.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.tray.obj.setSmoothing(true);
		this.addChild(this.tray);
		this.tray.set_x(fw_Config.convertWidth(-15));
		this.tray.set_y(fw_Config.convertHeight(62));
		this.tray.set_scaleX(this.tray.set_scaleY(.8));
		this.tray.set_scaleX(this.tray.set_scaleY(.8));
		this.tray.obj.stop();
		this.head = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/sheepLoop.png"),GameSettings.d.getFrames("sheepHeadidle"));
		this.addChild(this.head);
		this.head.setFrames(GameSettings.d.getFrames("sheepHeadidle"),15);
		this.head.play(0,true);
		this.head.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.head.setSmoothing(true);
		this.head.set_x(-this.head.get_width() / 2);
		this.head.set_y(-this.head.get_height());
		this.head.set_name("head");
		this.head.set_x(fw_Config.convertWidth(-30));
		this.head.set_y(fw_Config.convertHeight(-60));
		this.popupTimer = new game_scenes_ObjGame("popupTimer");
		this.popupTimer.obj.setFrames(GameSettings.d.getFrames("popupTimer"),15);
		this.popupTimer.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.popupTimer.obj.setSmoothing(true);
		this.addChild(this.popupTimer);
		this.popupTimer.set_x(fw_Config.convertWidth(-22));
		this.popupTimer.set_y(fw_Config.convertHeight(-80));
		this.popupTimer.set_scaleX(this.popupTimer.set_scaleY(.65));
		this.popupTimer.obj.stop();
		this.popupItem = new game_scenes_ObjGame("sack");
		this.popupItem.obj.setFrames(GameSettings.d.getFrames("tray"),15);
		this.popupItem.obj.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.popupItem.obj.setSmoothing(true);
		this.addChild(this.popupItem);
		this.popupItem.set_x(fw_Config.convertWidth(-10));
		this.popupItem.set_y(fw_Config.convertHeight(-10));
		this.popupItem.set_scaleX(this.popupItem.set_scaleY(.8));
		this.popupItem.obj.stop();
	}
	,clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
		this.sheep.update();
		this.sleep.update();
	}
	,onExit: function() {
	}
	,__class__: game_scenes_Sheep
});
var game_scenes_Starlup = function(nam) {
	openfl_display_Sprite.call(this);
	if(nam == "star_fx_") {
		this.star = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.fx.getFrames(nam));
		this.addChild(this.star);
		this.star.setFrames(GameSettings.fx.getFrames(nam),20);
		this.star.play(0,true);
		this.star.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.star.setSmoothing(true);
		this.star.set_x(-this.star.get_width() / 2.1);
		this.star.set_y(-this.star.get_height() / 1.65);
	} else {
		this.star = new fw_display_AtlasSprite(openfl_Assets.getBitmapData( fw_Config.screen + "/gameObj.png"),GameSettings.b.getFrames(nam));
		this.addChild(this.star);
		this.star.setPixelSnapping(openfl_display_PixelSnapping.ALWAYS);
		this.star.setSmoothing(true);
		this.star.set_x(-this.star.get_width() / 2);
		this.star.set_y(-this.star.get_height() / 2);
	}
};
$hxClasses["game.scenes.Starlup"] = game_scenes_Starlup;
game_scenes_Starlup.__name__ = ["game","scenes","Starlup"];
game_scenes_Starlup.__super__ = openfl_display_Sprite;
game_scenes_Starlup.prototype = $extend(openfl_display_Sprite.prototype,{
	clicked: function(e) {
	}
	,onSuspend: function() {
	}
	,onResume: function() {
	}
	,onResize: function() {
	}
	,onFixedUpdate: function(step) {
	}
	,onUpdate: function(delta) {
	}
	,onExit: function() {
	}
	,__class__: game_scenes_Starlup
});
var game_scenes_TutMessages = function() {
	openfl_display_Sprite.call(this);
	var fontXML = Xml.parse(openfl_Assets.getText("static/font28b.fnt"));
	var fontImage = openfl_Assets.getBitmapData("static/font28b.png");
	var angelCodeFont = bitmapFont_BitmapFont.fromAngelCode(fontImage,fontXML);
	this.msgBox = new openfl_display_Sprite();
	this.msgBox.get_graphics().lineStyle(2,14776851,1);
	this.msgBox.get_graphics().beginFill(15510308,.8);
	this.msgBox.get_graphics().drawRoundRect(0,0,240,45,30,30);
	this.msgBox.get_graphics().endFill();
	this.addChild(this.msgBox);
	this.msgBox.mouseEnabled = false;
	this.msgBox.mouseChildren = false;
	this.messageText = new bitmapFont_BitmapTextField(angelCodeFont);
	this.messageText.set_autoSize(true);
	this.messageText.set_wrapByWord(true);
	this.messageText.mouseEnabled = false;
	this.messageText.mouseChildren = false;
	this.messageText.set_smoothing(true);
	this.messageText.set_y(8);
	this.addChild(this.messageText);
};
$hxClasses["game.scenes.TutMessages"] = game_scenes_TutMessages;
game_scenes_TutMessages.__name__ = ["game","scenes","TutMessages"];
game_scenes_TutMessages.__super__ = openfl_display_Sprite;
game_scenes_TutMessages.prototype = $extend(openfl_display_Sprite.prototype,{
	addMessages: function(nam) {
		if(nam == "food") {
			this.messageText.set_text("Feed the sheep");
			this.messageText.set_x(20);
		} else if(nam == "food_sheep") {
			this.messageText.set_text("Feed me");
			this.messageText.set_x(60);
		} else if(nam == "well") {
			this.messageText.set_text("Fill the bucket");
			this.messageText.set_x(25);
		} else if(nam == "bucket") {
			this.messageText.set_text("Sheep is thirsty");
			this.messageText.set_x(20);
		} else if(nam == "water_sheep") {
			this.messageText.set_text("I'm thirsty");
			this.messageText.set_x(50);
		} else if(nam == "grass") {
			this.messageText.set_text("Sheep is hungry");
			this.messageText.set_x(16);
		} else if(nam == "grass_sheep") {
			this.messageText.set_text("I'm hungry");
			this.messageText.set_x(50);
		} else if(nam == "medicine") {
			this.messageText.set_text("Sheep is sick");
			this.messageText.set_x(25);
		} else if(nam == "medicine_sheep") {
			this.messageText.set_text("I'm sick");
			this.messageText.set_x(60);
		} else if(nam == "scissor") {
			this.messageText.set_text("Shear the sheep");
			this.messageText.set_x(20);
		} else if(nam == "scissor_sheep") {
			this.messageText.set_text("Shear me");
			this.messageText.set_x(50);
		} else if(nam == "EmptySack") {
			this.messageText.set_text("Pick a sack");
			this.messageText.set_x(40);
		} else if(nam == "FillSack") {
			this.messageText.set_text("Collect the wool");
			this.messageText.set_x(15);
		} else if(nam == "milk") {
			this.messageText.set_text("Milk the sheep");
			this.messageText.set_x(20);
		} else if(nam == "milk_sheep") {
			this.messageText.set_text("Milk me");
			this.messageText.set_x(60);
		} else if(nam == "vehicle") {
			this.messageText.set_text("Take to market");
			this.messageText.set_x(20);
		} else if(nam == "sheep") {
			this.messageText.set_text("Sell me");
			this.messageText.set_x(60);
		} else if(nam == "Market") {
			this.messageText.set_text("Go to market");
			this.messageText.set_x(40);
		} else if(nam == "gotobg2") {
			this.messageText.set_text("Go to cleaning unit");
			this.messageText.set_x(5);
			this.messageText.set_scaleX(this.messageText.set_scaleY(.925));
		} else if(nam == "gotobg21") {
			this.messageText.set_text("Go back");
			this.messageText.set_x(60);
		} else if(nam == "sack") {
			this.messageText.set_text("Pick the wool");
			this.messageText.set_x(30);
		} else if(nam == "tank") {
			this.messageText.set_text("Fill the tank");
			this.messageText.set_x(50);
		} else if(nam == "tank1") {
			this.messageText.set_text("Wash the wool");
			this.messageText.set_x(20);
		} else if(nam == "barrel") {
			this.messageText.set_text("Pick the barrel");
			this.messageText.set_x(25);
		} else if(nam == "mat") {
			this.messageText.set_text("Dry the wool");
			this.messageText.set_x(35);
		} else if(nam == "Grassfield") {
			this.messageText.set_text("Cut the grass");
			this.messageText.set_x(32);
		} else if(nam == "grass2") {
			this.messageText.set_text("Pick the grass");
			this.messageText.set_x(28);
		} else if(nam == "gotobg1") {
			this.messageText.set_text("Take it to pen");
			this.messageText.set_x(30);
		} else if(nam == "mat1") {
			this.messageText.set_text("Collect clean wool");
			this.messageText.set_x(8);
			this.messageText.set_scaleX(this.messageText.set_scaleY(.94));
		} else if(nam == "sack2") {
			this.messageText.set_text("Pick the sack");
			this.messageText.set_x(30);
		} else if(nam == "gotobg3") {
			this.messageText.set_text("Go to yarning unit");
			this.messageText.set_x(5);
			this.messageText.set_scaleX(this.messageText.set_scaleY(.925));
		}
	}
	,onExit: function() {
		this.removeChild(this.msgBox);
		this.removeChild(this.messageText);
		this.removeChildren();
	}
	,resize: function() {
	}
	,__class__: game_scenes_TutMessages
});
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.prototype = {
	__class__: haxe_Utf8
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) return;
		var _g = from + 1;
		while(_g < to) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) haxe_ds_ArraySort.swap(a,j - 1,j); else break;
				j--;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) return;
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) haxe_ds_ArraySort.swap(a,pivot,from);
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) return;
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) p2 += shift; else p2 = from + (shift - (to - p2));
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) len = half; else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else len = half;
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) xname = "Document"; else xname = this.__x.get_nodeName();
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		var v = this.__x.get(name);
		if(v == null) throw new js__$Boot_HaxeError(this.__x.get_nodeName() + " is missing attribute " + name);
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	resolve: function(name) {
		var l = new List();
		var $it0 = this.__x.elementsNamed(name);
		while( $it0.hasNext() ) {
			var x = $it0.next();
			l.add(new haxe_xml_Fast(x));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	__class__: haxe_xml_Fast
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) strict = false;
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				buf.addSub(str,start,p - start);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--"); else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw new js__$Boot_HaxeError("Expected node name");
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw new js__$Boot_HaxeError("Expected node name");
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				nsubs++;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw new js__$Boot_HaxeError("Expected attribute name");
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected =");
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected \"");
			}
			break;
		case 8:
			switch(c) {
			case 38:
				buf.addSub(str,start,p - start);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 62:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			case 60:
				if(strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value"); else if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					buf.addSub(str,start,p - start);
					var val2 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val2);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw new js__$Boot_HaxeError("Expected >");
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw new js__$Boot_HaxeError("Expected node name");
				var v = HxOverrides.substr(str,start,p - start);
				if(v != (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					$r = parent.nodeName;
					return $r;
				}(this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
					var $r;
					if(parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
					$r = parent.nodeName;
					return $r;
				}(this)) + ">");
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				var xml1 = Xml.createComment(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				var xml2 = Xml.createDocType(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml2);
				nsubs++;
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				var xml3 = Xml.createProcessingInstruction(str1);
				parent.addChild(xml3);
				nsubs++;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1;
					if(s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else c1 = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else if(!haxe_xml_Parser.escapes.exists(s)) {
					if(strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
					buf.b += Std.string("&" + s + ";");
				} else buf.add(haxe_xml_Parser.escapes.get(s));
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
				buf.b += "&";
				buf.addSub(str,start,p - start);
				p--;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			buf.addSub(str,start,p - start);
			var xml4 = Xml.createPCData(buf.b);
			parent.addChild(xml4);
			nsubs++;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		buf.addSub(str,start,p - start);
		var xml5 = Xml.createPCData(buf.b);
		parent.addChild(xml5);
		nsubs++;
		return p;
	}
	throw new js__$Boot_HaxeError("Unexpected end");
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) pretty = false;
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			this.write(StringTools.trim((function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this))));
			this.output.b += "]]>";
			if(this.pretty) this.output.b += "";
			break;
		case 3:
			var commentContent;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			commentContent = value.nodeValue;
			commentContent = new EReg("[\n\r\t]+","g").replace(commentContent,"");
			commentContent = "<!--" + commentContent + "-->";
			if(tabs == null) this.output.b += "null"; else this.output.b += "" + tabs;
			this.write(StringTools.trim(commentContent));
			if(this.pretty) this.output.b += "";
			break;
		case 6:
			var $it0 = (function($this) {
				var $r;
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				$r = HxOverrides.iter(value.children);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var child = $it0.next();
				this.writeNode(child,tabs);
			}
			break;
		case 0:
			this.output.b += Std.string(tabs + "<");
			this.write((function($this) {
				var $r;
				if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				$r = value.nodeName;
				return $r;
			}(this)));
			var $it1 = value.attributes();
			while( $it1.hasNext() ) {
				var attribute = $it1.next();
				this.output.b += Std.string(" " + attribute + "=\"");
				this.write(StringTools.htmlEscape(value.get(attribute),true));
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
				var $it2 = (function($this) {
					var $r;
					if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
					$r = HxOverrides.iter(value.children);
					return $r;
				}(this));
				while( $it2.hasNext() ) {
					var child1 = $it2.next();
					this.writeNode(child1,this.pretty?tabs + "\t":tabs);
				}
				this.output.b += Std.string(tabs + "</");
				this.write((function($this) {
					var $r;
					if(value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
					$r = value.nodeName;
					return $r;
				}(this)));
				this.output.b += ">";
				if(this.pretty) this.output.b += "";
			} else {
				this.output.b += "/>";
				if(this.pretty) this.output.b += "";
			}
			break;
		case 1:
			var nodeValue;
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				this.write(tabs + StringTools.htmlEscape(nodeValue));
				if(this.pretty) this.output.b += "";
			}
			break;
		case 5:
			this.write("<?" + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + "?>");
			break;
		case 4:
			this.write("<!DOCTYPE " + (function($this) {
				var $r;
				if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
				$r = value.nodeValue;
				return $r;
			}(this)) + ">");
			break;
		}
	}
	,write: function(input) {
		if(input == null) this.output.b += "null"; else this.output.b += "" + input;
	}
	,hasChildren: function(value) {
		var $it0 = (function($this) {
			var $r;
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			$r = HxOverrides.iter(value.children);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var child = $it0.next();
			var _g = child.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(StringTools.ltrim((function($this) {
					var $r;
					if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + child.nodeType);
					$r = child.nodeValue;
					return $r;
				}(this))).length != 0) return true;
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
				lime_Assets.cache.audio.set(id,audio1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) promise.completeWith(library.loadBytes(symbolName)); else promise.error("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) promise.completeWith(library.loadFont(symbolName)); else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
				lime_Assets.cache.image.set(id,image1);
			});
			promise.completeWith(future);
		} else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) promise.completeWith(library.loadText(symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) {
		if(lime_Assets.libraries.get(name) == library) return; else lime_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_Assets.library_onChange);
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier); else this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				break;
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			default:
			}
		} else this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (data.clientY - rect.top) * (this.parent.__height / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / this.setWidth,y / this.setHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / this.setWidth;
					touch.y = y / this.setHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / this.setWidth;
					touch1.y = y / this.setHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / this.setWidth;
					touch2.y = y / this.setHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) module.onPreloadComplete();
		}
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,createWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onEnter.add((function(f4,a14) {
			return function() {
				f4(a14);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f8,a18) {
			return function(a2,a3) {
				f8(a18,a2,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f9,a19) {
			return function(a21,a31) {
				f9(a19,a21,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f10,a110) {
			return function() {
				f10(a110);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f12,a112) {
			return function(x,y,a22) {
				f12(a112,x,y,a22);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f13,a113) {
			return function(x1,y1) {
				f13(a113,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f14,a114) {
			return function(x2,y2) {
				f14(a114,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f15,a115) {
			return function(x3,y3,a23) {
				f15(a115,x3,y3,a23);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f16,a116) {
			return function(a24,a32) {
				f16(a116,a24,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f17,a117) {
			return function(x4,y4) {
				f17(a117,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f18,a118) {
			return function(a25,a33) {
				f18(a118,a25,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f19,a119) {
			return function() {
				f19(a119);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f20,a120) {
			return function(a26,a34,a4) {
				f20(a120,a26,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f21,a121) {
			return function(a27) {
				f21(a121,a27);
			};
		})($bind(this,this.onTextInput),window));
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) this.window = null;
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.__name__ = ["lime","app","Event_lime_net_URLLoader_Int_Int_Void"];
lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Int_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Int_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Int_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.__name__ = ["lime","app","Event_lime_net_URLLoader_Int_Void"];
lime_app_Event_$lime_$net_$URLLoader_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Int_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$String_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_String_Void"] = lime_app_Event_$lime_$net_$URLLoader_$String_$Void;
lime_app_Event_$lime_$net_$URLLoader_$String_$Void.__name__ = ["lime","app","Event_lime_net_URLLoader_String_Void"];
lime_app_Event_$lime_$net_$URLLoader_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$String_$Void
};
var lime_app_Event_$lime_$net_$URLLoader_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_net_URLLoader_Void"] = lime_app_Event_$lime_$net_$URLLoader_$Void;
lime_app_Event_$lime_$net_$URLLoader_$Void.__name__ = ["lime","app","Event_lime_net_URLLoader_Void"];
lime_app_Event_$lime_$net_$URLLoader_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$net_$URLLoader_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.listeners[i],listener)) {
			this.listeners.splice(i,1);
			this.priorities.splice(i,1);
			this.repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		var listeners = this.listeners;
		var repeat = this.repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) listener(this.value); else if(!this.__errored) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) listener(this.__errorMessage); else if(!this.__completed) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) return next(this.value); else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		return this.__completed || this.__errored;
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url;
					this.total++;
				}
				break;
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_URLLoader();
					loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_URLLoader();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.onProgress.dispatch(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.onProgress.dispatch(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url)); else {
		var loader = new lime_net_URLLoader();
		loader.onComplete.add(function(_) {
			var bytes = haxe_io_Bytes.ofString(loader.data);
			handler(lime_audio_AudioBuffer.fromBytes(lime_utils_ByteArray.fromBytes(bytes)));
		});
		loader.onIOError.add(function(_1,msg) {
			handler(null);
		});
		loader.load(new lime_net_URLRequest(url));
	}
};
lime_audio_AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.__loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					{
						var argb = byteArray.readUnsignedInt();
						var bgra = 0;
						bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
						color = bgra;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt(color);
				}
				byteArray.position = 0;
				break;
			default:
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					{
						var argb1 = byteArray.readUnsignedInt();
						var rgba = 0;
						rgba = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
						color1 = rgba;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra1 = 0;
						bgra1 = (color1 >> 8 & 255 & 255) << 24 | (color1 >> 16 & 255 & 255) << 16 | (color1 >> 24 & 255 & 255) << 8 | color1 & 255 & 255;
						$r = bgra1;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			} else {
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					{
						var argb2 = byteArray.readUnsignedInt();
						var rgba1 = 0;
						rgba1 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
						color2 = rgba1;
					}
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((function($this) {
						var $r;
						var bgra2 = 0;
						bgra2 = (color2 >> 8 & 255 & 255) << 24 | (color2 >> 16 & 255 & 255) << 16 | (color2 >> 24 & 255 & 255) << 8 | color2 & 255 & 255;
						$r = bgra2;
						return $r;
					}(this)));
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format != null) switch(format) {
			case 1:
				break;
			case 2:
				var srcData = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color , Int));
				}
				srcData.position = 0;
				byteArray.position = 0;
				break;
			default:
				var srcData1 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color1;
				var length1 = byteArray.length / 4 | 0;
				var _g11 = 0;
				while(_g11 < length1) {
					var i1 = _g11++;
					color1 = srcData1.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color1 , Int));
				}
				srcData1.position = 0;
				byteArray.position = 0;
			} else {
				var srcData2 = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color2;
				var length2 = byteArray.length / 4 | 0;
				var _g12 = 0;
				while(_g12 < length2) {
					var i2 = _g12++;
					color2 = srcData2.readUnsignedInt();
					byteArray.writeUnsignedInt(js_Boot.__cast(color2 , Int));
				}
				srcData2.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime_graphics_format_BMPType.RGB?24:32);
	data.writeInt(type == lime_graphics_format_BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime_utils_ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var byteArray = new lime_utils_ByteArray(buffer.length);
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			byteArray.byteView[i] = HxOverrides.cca(buffer,i);
		}
		return byteArray;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) fillColor = 0;
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) fillColor = 0;
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime_utils_ByteArray(length * 4);
	byteArray.position = 0;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			byteArray.__set(destPosition++,pixel >> 24 & 255);
			byteArray.__set(destPosition++,pixel >> 16 & 255);
			byteArray.__set(destPosition++,pixel >> 8 & 255);
			byteArray.__set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = byteArray.readUnsignedInt();
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table;
	var this2;
	this2 = new Uint8Array(256);
	table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
	this.onProgress = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Int_$Void();
	this.onOpen = new lime_app_Event_$lime_$net_$URLLoader_$Void();
	this.onIOError = new lime_app_Event_$lime_$net_$URLLoader_$String_$Void();
	this.onHTTPStatus = new lime_app_Event_$lime_$net_$URLLoader_$Int_$Void();
	this.onComplete = new lime_app_Event_$lime_$net_$URLLoader_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = ["lime","net","URLLoader"];
lime_net_URLLoader.prototype = {
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onHTTPStatus.dispatch(_g,s);
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) self.onIOError.dispatch(_g,"Failed to connect or resolve host"); else if(s == 12029) self.onIOError.dispatch(_g,"Failed to connect to host"); else if(s == 12007) self.onIOError.dispatch(_g,"Unknown host"); else if(s == 0) {
				self.onIOError.dispatch(_g,"Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError.dispatch(_g,"Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onIOError.dispatch(_g,"Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onIOError.dispatch(this,e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen.dispatch(this);
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		this.onComplete.dispatch(this);
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		this.onProgress.dispatch(this,this.bytesLoaded,this.bytesTotal);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : ["lime","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = ["lime","net","URLRequest"];
lime_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime_net_URLRequestHeader.prototype = {
	__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = ["lime","net","URLVariables"];
lime_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime_net_URLVariables
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) this.onProgress.dispatch(message);
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.available = null;
lime_system_CFFI.enabled = null;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.endianness = null;
lime_system_System.fontsDirectory = null;
lime_system_System.numDisplays = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.prototype = {
	get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,get_numAxes: function() {
		return 0;
	}
	,get_numButtons: function() {
		return 0;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = ["lime","utils","ByteArray"];
lime_utils_ByteArray.fromBytes = function(bytes) {
	var result = new lime_utils_ByteArray();
	result.byteView = new Uint8Array(bytes.b.bufferValue);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime_utils_ByteArray.readFile = function(path) {
	return null;
};
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_ByteArray.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_ByteArray.lime_bytes_read_file = function(path) {
	return lime_utils_ByteArray.cffi_lime_bytes_read_file(path);
};
lime_utils_ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 603, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if(_$UInt_UInt_$Impl_$.gt(0,offset) || _$UInt_UInt_$Impl_$.gt(0,length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b.bufferValue);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : ["lime","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils_IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
lime_utils_IDataInput.__name__ = ["lime","utils","IDataInput"];
lime_utils_IDataInput.prototype = {
	__class__: lime_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
lime_utils_IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime_utils_IMemoryRange.prototype = {
	__class__: lime_utils_IMemoryRange
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
	if(len == null) return new Uint16Array(bytes.b.bufferValue,byteOffset);
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener(openfl_events_Event.ENTER_FRAME,motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) start = 0;
				if(value == null) value = 0;
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion_Actuate.targetLibraries.set(target,[]);
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var $it0 = motion_Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion_Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion_Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) motion_Actuate.targetLibraries.remove(target);
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion_RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = [];
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl_media_SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Back = function() { };
$hxClasses["motion.easing.Back"] = motion_easing_Back;
motion_easing_Back.__name__ = ["motion","easing","Back"];
motion_easing_Back.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Back.get_easeIn = function() {
	return new motion_easing_BackEaseIn(1.70158);
};
motion_easing_Back.get_easeInOut = function() {
	return new motion_easing_BackEaseInOut(1.70158);
};
motion_easing_Back.get_easeOut = function() {
	return new motion_easing_BackEaseOut(1.70158);
};
var motion_easing_BackEaseIn = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseIn"] = motion_easing_BackEaseIn;
motion_easing_BackEaseIn.__name__ = ["motion","easing","BackEaseIn"];
motion_easing_BackEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseIn.prototype = {
	calculate: function(k) {
		return k * k * ((this.s + 1) * k - this.s);
	}
	,ease: function(t,b,c,d) {
		return c * (t /= d) * t * ((this.s + 1) * t - this.s) + b;
	}
	,__class__: motion_easing_BackEaseIn
};
var motion_easing_BackEaseInOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseInOut"] = motion_easing_BackEaseInOut;
motion_easing_BackEaseInOut.__name__ = ["motion","easing","BackEaseInOut"];
motion_easing_BackEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseInOut.prototype = {
	calculate: function(k) {
		if((k /= 0.5) < 1) return 0.5 * (k * k * (((this.s *= 1.525) + 1) * k - this.s));
		return 0.5 * ((k -= 2) * k * (((this.s *= 1.525) + 1) * k + this.s) + 2);
	}
	,ease: function(t,b,c,d) {
		if((t /= d / 2) < 1) return c / 2 * (t * t * (((this.s *= 1.525) + 1) * t - this.s)) + b;
		return c / 2 * ((t -= 2) * t * (((this.s *= 1.525) + 1) * t + this.s) + 2) + b;
	}
	,__class__: motion_easing_BackEaseInOut
};
var motion_easing_BackEaseOut = function(s) {
	this.s = s;
};
$hxClasses["motion.easing.BackEaseOut"] = motion_easing_BackEaseOut;
motion_easing_BackEaseOut.__name__ = ["motion","easing","BackEaseOut"];
motion_easing_BackEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_BackEaseOut.prototype = {
	calculate: function(k) {
		return (k = k - 1) * k * ((this.s + 1) * k + this.s) + 1;
	}
	,ease: function(t,b,c,d) {
		return c * ((t = t / d - 1) * t * ((this.s + 1) * t + this.s) + 1) + b;
	}
	,__class__: motion_easing_BackEaseOut
};
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return lime_Assets.getBytes(id);
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getSound(id,useCache);
	});
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[index] = method;
			haxe_Log.trace("added script index " + index,{ fileName : "MovieClip.hx", lineNumber : 149, className : "openfl.display.MovieClip", methodName : "addFrameScript"});
		} else if(this.__frameScripts != null) this.__frameScripts.remove(index);
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function(target) {
	openfl_events_EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {

};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 113, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 144, className : "openfl.Lib", methodName : "trace"});
};
var openfl_Memory = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.data.getInt8(addr);
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	if(inBytes != null) openfl_Memory.len = inBytes.length; else openfl_Memory.len = 0;
};
openfl_Memory.setByte = function(addr,v) {
	openfl_Memory.gcRef.data.setUint8(addr,v);
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c2 = data;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.o[c2.oPos + 4]);
				break;
			case 3:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c3 = data;
				this.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5],c3.buffer.f[c3.fPos + 6]);
				break;
			case 4:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c4 = data;
				this.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 5:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c5 = data;
				this.drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 6:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c6 = data;
				this.drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 7:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c7 = data;
				this.drawPath(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.o[c7.oPos + 2]);
				break;
			case 8:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c8 = data;
				this.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 9:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c9 = data;
				this.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.f[c9.fPos + 5]);
				break;
			case 10:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c10 = data;
				this.drawTiles(c10.buffer.ts[c10.tsPos],c10.buffer.ff[c10.ffPos],c10.buffer.b[c10.bPos],c10.buffer.i[c10.iPos],c10.buffer.i[c10.iPos + 1]);
				break;
			case 11:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c11 = data;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.o[c11.oPos + 4],c11.buffer.i[c11.iPos]);
				break;
			case 12:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c12 = data;
				this.endFill();
				break;
			case 13:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c13 = data;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 14:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c14 = data;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.o[c14.oPos + 4]);
				break;
			case 15:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c15 = data;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.o[c15.oPos + 4],c15.buffer.o[c15.oPos + 5],c15.buffer.o[c15.oPos + 6],c15.buffer.o[c15.oPos + 7]);
				break;
			case 16:
				var c16;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c16 = data;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 17:
				var c17;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c17 = data;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 18:
				var c18;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c18 = data;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
		this.ts = null;
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(rx);
		this.f.push(ry);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
		this.o.push(colors);
		this.i.push(blendMode);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.o.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.o.push(color);
		this.o.push(alpha);
		this.o.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.o.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 6;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			break;
		case 11:
			this.oPos += 5;
			this.iPos += 1;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 5;
			this.iiPos += 2;
			this.ffPos += 1;
			break;
		case 15:
			this.oPos += 8;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return this;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return this;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return this;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return this;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return this;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return this;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return this;
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return this;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return this;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return this;
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return this;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return this;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return this;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return this;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return this;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return this;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return this;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return this;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return this;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 6];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ry:"get_ry",get_rx:"get_rx",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_rx = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ry = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.buffer.ts[this1.tsPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1.buffer.i[this1.iPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_blendMode:"get_blendMode",get_colors:"get_colors",get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_blendMode = function(this1) {
	return this1.buffer.i[this1.iPos];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 5];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 6];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.o[this1.oPos + 7];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "PolyK.hx", lineNumber : 104, className : "openfl._internal.renderer.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 3] - offsetX,c.buffer.f[c.fPos + 4] - offsetY,c.buffer.f[c.fPos + 5] - offsetX,c.buffer.f[c.fPos + 6] - offsetY);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 8:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c3 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(c3.buffer.f[c3.fPos] - offsetX,c3.buffer.f[c3.fPos + 1] - offsetY,c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 6:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c4 = data;
				hasPath = true;
				var x = c4.buffer.f[c4.fPos];
				var y = c4.buffer.f[c4.fPos + 1];
				var width = c4.buffer.f[c4.fPos + 2];
				var height = c4.buffer.f[c4.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				closeGap = true;
				startX = c7.buffer.f[c7.fPos];
				startY = c7.buffer.f[c7.fPos + 1];
				break;
			case 15:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c8 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(c8.buffer.o[c8.oPos] == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(c8.buffer.o[c8.oPos] > 0?c8.buffer.o[c8.oPos]:1);
					if(c8.buffer.o[c8.oPos + 6] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = c8.buffer.o[c8.oPos + 6];
						$r = (function($this) {
							var $r;
							switch(_g2[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(c8.buffer.o[c8.oPos + 5] == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = c8.buffer.o[c8.oPos + 5];
						$r = (function($this) {
							var $r;
							switch(_g21[1]) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(c8.buffer.o[c8.oPos + 7] == null?3:c8.buffer.o[c8.oPos + 7]);
					if(c8.buffer.o[c8.oPos + 1] != null) {
						var r = ((c8.buffer.o[c8.oPos + 1] & 16711680) >>> 16) / 255;
						var g = ((c8.buffer.o[c8.oPos + 1] & 65280) >>> 8) / 255;
						var b = (c8.buffer.o[c8.oPos + 1] & 255) / 255;
						if(c8.buffer.o[c8.oPos + 2] == 1 || c8.buffer.o[c8.oPos + 2] == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,c8.buffer.o[c8.oPos + 2]);
					}
				}
				break;
			case 14:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c9 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c9.buffer.o[c9.oPos],c9.buffer.ii[c9.iiPos],c9.buffer.ff[c9.ffPos],c9.buffer.ii[c9.iiPos + 1],c9.buffer.o[c9.oPos + 1],c9.buffer.o[c9.oPos + 2],c9.buffer.o[c9.oPos + 3],c9.buffer.o[c9.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c10 = data;
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c11 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.b[c11.bPos]);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = c11.buffer.o[c11.oPos];
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = c11.buffer.b[c11.bPos];
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c12 = data;
				if(c12.buffer.f[c12.fPos] < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((c12.buffer.i[c12.iPos] & 16711680) >>> 16) / 255,((c12.buffer.i[c12.iPos] & 65280) >>> 8) / 255,(c12.buffer.i[c12.iPos] & 255) / 255,c12.buffer.f[c12.fPos]);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				c13 = data;
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.o[c13.oPos + 4]);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 11:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c14 = data;
				var v = c14.buffer.o[c14.oPos];
				var ind = c14.buffer.o[c14.oPos + 1];
				var uvt = c14.buffer.o[c14.oPos + 2];
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				if(!colorFill) {
					if(uvt == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvt = this1;
						var _g3 = 0;
						var _g22 = v.length / 2 | 0;
						while(_g3 < _g22) {
							var i1 = _g3++;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data1;
									var this3;
									this3 = new Array(uvt.data.length + 10);
									data1 = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
									uvt.data = data1;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvt.length;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var data2;
									var this4;
									this4 = new Array(uvt.data.length + 10);
									data2 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
									uvt.data = data2;
								}
								uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvt.length;
						}
					}
					var skipT = c14.buffer.o[c14.oPos + 2].length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.data[a_] * 2;
					iay = ind.data[a_] * 2 + 1;
					ibx = ind.data[b_] * 2;
					iby = ind.data[b_] * 2 + 1;
					icx = ind.data[c_] * 2;
					icy = ind.data[c_] * 2 + 1;
					x1 = v.data[iax];
					y1 = v.data[iay];
					x2 = v.data[ibx];
					y2 = v.data[iby];
					x3 = v.data[icx];
					y3 = v.data[icy];
					var _g23 = c14.buffer.o[c14.oPos + 3];
					switch(_g23[1]) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width1;
					uvx2 = uvt.data[ibx] * width1;
					uvx3 = uvt.data[icx] * width1;
					uvy1 = uvt.data[iay] * height1;
					uvy2 = uvt.data[iby] * height1;
					uvy3 = uvt.data[icy] * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					var matrix = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 10:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c15 = data;
				var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
				var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
				var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
				var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
				var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
				var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
				var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
				var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
				var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
				var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
				var useBlendOverlay = (c15.buffer.i[c15.iPos] & 4194304) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = c15.buffer.ff[c15.ffPos].length;
				if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				c15.buffer.ts[c15.tsPos].__bitmap.__sync();
				surface = c15.buffer.ts[c15.tsPos].__bitmap.getSurface();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				if(useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
				while(index < totalCount) {
					var i2 = c15.buffer.ff[c15.ffPos][index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
						center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = c15.buffer.ts[c15.tsPos].__rectTile;
						rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
						center = c15.buffer.ts[c15.tsPos].__point;
						if(useOrigin) {
							center.x = c15.buffer.ff[c15.ffPos][index + 6];
							center.y = c15.buffer.ff[c15.ffPos][index + 7];
						} else {
							center.x = 0;
							center.y = 0;
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix1 = new lime_math_Matrix3(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(c15.buffer.ff[c15.ffPos][index] - offsetX1,c15.buffer.ff[c15.ffPos][index + 1] - offsetY1);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
						if(useScale) {
							var scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) {
							if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(c15.buffer.ff[c15.ffPos][index + alphaIndex]);
						} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix2.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix2.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				cairo.curveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 3] - offsetX,c.buffer.f[c.fPos + 4] - offsetY,c.buffer.f[c.fPos + 5] - offsetX,c.buffer.f[c.fPos + 6] - offsetY);
				positionX = c.buffer.f[c.fPos + 5];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				cairo.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				cairo.rectangle(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				cairo.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				cairo.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getWorldTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,renderDisplayObject: function(object) {
		this.cairo.identityMatrix();
		object.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5],c.buffer.f[c.fPos + 6]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5],c.buffer.f[c.fPos + 6]);
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
				break;
			case 16:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
				break;
			case 17:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c3 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
				break;
			case 14:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c4.buffer.o[c4.oPos],c4.buffer.ii[c4.iiPos],c4.buffer.ff[c4.ffPos],c4.buffer.ii[c4.iiPos + 1],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4]);
				break;
			case 13:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c5.buffer.o[c5.oPos],c5.buffer.o[c5.oPos + 1],c5.buffer.b[c5.bPos],c5.buffer.b[c5.bPos + 1]);
				break;
			case 15:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],1,c6.buffer.o[c6.oPos + 3],c6.buffer.o[c6.oPos + 4],c6.buffer.o[c6.oPos + 5],c6.buffer.o[c6.oPos + 6],c6.buffer.o[c6.oPos + 7]);
				break;
			case 12:
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					c7 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					c8 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
				} else {
					var c9;
					data.advance();
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					c9 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],1);
				}
				break;
			case 5:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c10 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
				break;
			case 6:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
				break;
			case 8:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c12 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
				break;
			case 9:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c13 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
			c = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 3] - offsetX,c.buffer.f[c.fPos + 4] - offsetY,c.buffer.f[c.fPos + 5] - offsetX,c.buffer.f[c.fPos + 6] - offsetY);
			break;
		case 4:
			var c1;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
			c1 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
			break;
		case 5:
			var c2;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
			c2 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c2.buffer.f[c2.fPos] - offsetX + c2.buffer.f[c2.fPos + 2],c2.buffer.f[c2.fPos + 1] - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
			break;
		case 6:
			var c3;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
			c3 = data;
			var x = c3.buffer.f[c3.fPos];
			var y = c3.buffer.f[c3.fPos + 1];
			var width = c3.buffer.f[c3.fPos + 2];
			var height = c3.buffer.f[c3.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 9:
			var c4;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
			c4 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
			break;
		case 16:
			var c5;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
			c5 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY);
			positionX = c5.buffer.f[c5.fPos];
			positionY = c5.buffer.f[c5.fPos + 1];
			break;
		case 17:
			var c6;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
			c6 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
			positionX = c6.buffer.f[c6.fPos];
			positionY = c6.buffer.f[c6.fPos + 1];
			closeGap = true;
			startX = c6.buffer.f[c6.fPos];
			startY = c6.buffer.f[c6.fPos + 1];
			break;
		case 15:
			var c7;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
			c7 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c7.buffer.o[c7.oPos] == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(c7.buffer.o[c7.oPos] > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c7.buffer.o[c7.oPos]; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(c7.buffer.o[c7.oPos + 6] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(c7.buffer.o[c7.oPos + 6]).toLowerCase();
				if(c7.buffer.o[c7.oPos + 5] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = c7.buffer.o[c7.oPos + 5];
					switch(_g2[1]) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(c7.buffer.o[c7.oPos + 5]).toLowerCase();
					}
				}
				if(c7.buffer.o[c7.oPos + 7] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c7.buffer.o[c7.oPos + 7];
				if(c7.buffer.o[c7.oPos + 2] == 1 || c7.buffer.o[c7.oPos + 2] == null) if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(c7.buffer.o[c7.oPos + 1] & 16777215,6); else {
					var r = (c7.buffer.o[c7.oPos + 1] & 16711680) >>> 16;
					var g = (c7.buffer.o[c7.oPos + 1] & 65280) >>> 8;
					var b = c7.buffer.o[c7.oPos + 1] & 255;
					if(c7.buffer.o[c7.oPos + 1] == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c7.buffer.o[c7.oPos + 2] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var c8;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
			c8 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var c9;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
			c9 = data;
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c9.buffer.o[c9.oPos],c9.buffer.b[c9.bPos]);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			c10 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c10.buffer.o[c10.oPos],true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(c10.buffer.o[c10.oPos + 1] != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c10.buffer.o[c10.oPos + 1];
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c10.buffer.o[c10.oPos + 1].clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
			c11 = data;
			if(c11.buffer.f[c11.fPos] < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(c11.buffer.f[c11.fPos] == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(c11.buffer.i[c11.iPos],6); else {
					var r1 = (c11.buffer.i[c11.iPos] & 16711680) >>> 16;
					var g1 = (c11.buffer.i[c11.iPos] & 65280) >>> 8;
					var b1 = c11.buffer.i[c11.iPos] & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + c11.buffer.f[c11.fPos] + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
			c12 = data;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c12.buffer.o[c12.oPos],c12.buffer.ii[c12.iiPos],c12.buffer.ff[c12.ffPos],c12.buffer.ii[c12.iiPos + 1],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.o[c12.oPos + 4]);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 8:
			var c13;
			data.advance();
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
			c13 = data;
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3]));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c13.buffer.f[c13.fPos + 1];
					sl = c13.buffer.f[c13.fPos];
					sb = c13.buffer.f[c13.fPos + 1] + c13.buffer.f[c13.fPos + 3];
					sr = c13.buffer.f[c13.fPos] + c13.buffer.f[c13.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c13.buffer.f[c13.fPos] - offsetX,c13.buffer.f[c13.fPos + 1] - offsetY,c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3]);
			break;
		default:
			data.advance();
			data.prev = type;
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
						c = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5],c.buffer.f[c.fPos + 6]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c.buffer.f[c.fPos],c.buffer.f[c.fPos + 1],c.buffer.f[c.fPos + 3],c.buffer.f[c.fPos + 4],c.buffer.f[c.fPos + 5],c.buffer.f[c.fPos + 6]);
						break;
					case 4:
						var c1;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
						c1 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c1.buffer.f[c1.fPos],c1.buffer.f[c1.fPos + 1],c1.buffer.f[c1.fPos + 2],c1.buffer.f[c1.fPos + 3]);
						break;
					case 16:
						var c2;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
						c2 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1]);
						break;
					case 17:
						var c3;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
						c3 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1]);
						break;
					case 12:
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
						data;
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 15:
						var c4;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
						c4 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c4.buffer.o[c4.oPos],c4.buffer.o[c4.oPos + 1],c4.buffer.o[c4.oPos + 2],c4.buffer.o[c4.oPos + 3],c4.buffer.o[c4.oPos + 4],c4.buffer.o[c4.oPos + 5],c4.buffer.o[c4.oPos + 6],c4.buffer.o[c4.oPos + 7]);
						break;
					case 14:
						var c5;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
						c5 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c5.buffer.o[c5.oPos],c5.buffer.ii[c5.iiPos],c5.buffer.ff[c5.ffPos],c5.buffer.ii[c5.iiPos + 1],c5.buffer.o[c5.oPos + 1],c5.buffer.o[c5.oPos + 2],c5.buffer.o[c5.oPos + 3],c5.buffer.o[c5.oPos + 4]);
						break;
					case 13:
						var c6;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
						c6 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c6.buffer.o[c6.oPos],c6.buffer.o[c6.oPos + 1],c6.buffer.b[c6.bPos],c6.buffer.b[c6.bPos + 1]);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
							c7 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c7.buffer.o[c7.oPos],c7.buffer.o[c7.oPos + 1],c7.buffer.b[c7.bPos],c7.buffer.b[c7.bPos + 1]);
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
							c8 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c8.buffer.o[c8.oPos],c8.buffer.ii[c8.iiPos],c8.buffer.ff[c8.ffPos],c8.buffer.ii[c8.iiPos + 1],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2],c8.buffer.o[c8.oPos + 3],c8.buffer.o[c8.oPos + 4]);
						} else {
							var c9;
							data.advance();
							data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
							c9 = data;
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c9.buffer.i[c9.iPos],c9.buffer.f[c9.fPos]);
						}
						break;
					case 5:
						var c10;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
						c10 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2]);
						break;
					case 6:
						var c11;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
						c11 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c11.buffer.f[c11.fPos],c11.buffer.f[c11.fPos + 1],c11.buffer.f[c11.fPos + 2],c11.buffer.f[c11.fPos + 3]);
						break;
					case 8:
						var c12;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						c12 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1],c12.buffer.f[c12.fPos + 2],c12.buffer.f[c12.fPos + 3]);
						break;
					case 9:
						var c13;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
						c13 = data;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1],c13.buffer.f[c13.fPos + 2],c13.buffer.f[c13.fPos + 3],c13.buffer.f[c13.fPos + 4],c13.buffer.f[c13.fPos + 5]);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
						c14 = data;
						var v = c14.buffer.o[c14.oPos];
						var ind = c14.buffer.o[c14.oPos + 1];
						var uvt = c14.buffer.o[c14.oPos + 2];
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data1;
											var this3;
											this3 = new Array(uvt.data.length + 10);
											data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvt.length;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var data2;
											var this4;
											this4 = new Array(uvt.data.length + 10);
											data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvt.length;
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = c14.buffer.o[c14.oPos + 3];
							switch(_g21[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 10:
						var c15;
						data.advance();
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
						c15 = data;
						var useScale = (c15.buffer.i[c15.iPos] & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (c15.buffer.i[c15.iPos] & 2) > 0;
						var useTransform = (c15.buffer.i[c15.iPos] & 16) > 0;
						var useRGB = (c15.buffer.i[c15.iPos] & 4) > 0;
						var useAlpha = (c15.buffer.i[c15.iPos] & 8) > 0;
						var useRect = (c15.buffer.i[c15.iPos] & 32) > 0;
						var useOrigin = (c15.buffer.i[c15.iPos] & 64) > 0;
						var useBlendAdd = (c15.buffer.i[c15.iPos] & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = c15.buffer.ff[c15.ffPos].length;
						if(c15.buffer.i[c15.iPos + 1] >= 0 && totalCount > c15.buffer.i[c15.iPos + 1]) totalCount = c15.buffer.i[c15.iPos + 1];
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						c15.buffer.ts[c15.tsPos].__bitmap.__sync();
						surface = c15.buffer.ts[c15.tsPos].__bitmap.image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = c15.buffer.ff[c15.ffPos][index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = c15.buffer.ts[c15.tsPos].__tileRects[tileID];
								center = c15.buffer.ts[c15.tsPos].__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = c15.buffer.ts[c15.tsPos].__rectTile;
								rect.setTo(c15.buffer.ff[c15.ffPos][index + 2],c15.buffer.ff[c15.ffPos][index + 3],c15.buffer.ff[c15.ffPos][index + 4],c15.buffer.ff[c15.ffPos][index + 5]);
								center = c15.buffer.ts[c15.tsPos].__point;
								if(useOrigin) {
									center.x = c15.buffer.ff[c15.ffPos][index + 6];
									center.y = c15.buffer.ff[c15.ffPos][index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(c15.buffer.ff[c15.ffPos][index] - offsetX,c15.buffer.ff[c15.ffPos][index + 1] - offsetY);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(c15.buffer.ff[c15.ffPos][index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = c15.buffer.ff[c15.ffPos][index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(c15.buffer.ff[c15.ffPos][index + transformIndex],c15.buffer.ff[c15.ffPos][index + transformIndex + 1],c15.buffer.ff[c15.ffPos][index + transformIndex + 2],c15.buffer.ff[c15.ffPos][index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = c15.buffer.ff[c15.ffPos][index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						data.advance();
						data.prev = type;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 3] - offsetX,c.buffer.f[c.fPos + 4] - offsetY,c.buffer.f[c.fPos + 5] - offsetX,c.buffer.f[c.fPos + 6] - offsetY);
				positionX = c.buffer.f[c.fPos + 5];
				positionY = c.buffer.f[c.fPos + 6];
				break;
			case 4:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c1 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 5:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c2 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 6:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c3 = data;
				var x = c3.buffer.f[c3.fPos];
				var y = c3.buffer.f[c3.fPos + 1];
				var width = c3.buffer.f[c3.fPos + 2];
				var height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c4 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 9:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c5 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.f[c5.fPos + 5]);
				break;
			case 16:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c6 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 17:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c7 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__worldTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				if(shape.__mask != null) renderSession.maskManager.popMask();
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || textEngine.gridFitType != openfl_text_GridFitType.PIXEL) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g1 < _g2) {
					var i1 = _g1++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g3 < _g11.length) {
					var group = _g11[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) break;
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == openfl_text_TextFieldType.INPUT) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == openfl_text_TextFieldType.INPUT;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__renderTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.pixelSnapping);
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) smooth = true;
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe_Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	init: function() {
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "uSampler0" + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec3 " + "uColor" + ";","uniform bool " + "uUseTexture" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "uUseTexture" + ") {","       tmp = texture2D(" + "uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColor" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "uColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform mat3 " + "uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "uPatternMatrix" + " * vec3(" + "aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "uAlpha" + ";","uniform vec2 " + "uPatternTL" + ";","uniform vec2 " + "uPatternBR" + ";","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "uPatternTL" + ", " + "uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","uniform float " + "uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "aColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		switch(blendMode[1]) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 13:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) makeArray = true;
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) this.points = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0; else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				c = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c.buffer.o[c.oPos] != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				c1 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(c1.buffer.f[c1.fPos] > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(c1.buffer.i[c1.iPos] & 16777215,c1.buffer.f[c1.fPos]); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				c2 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c2.buffer.f[c2.fPos],c2.buffer.f[c2.fPos + 1],c2.buffer.f[c2.fPos + 3],c2.buffer.f[c2.fPos + 4],c2.buffer.f[c2.fPos + 5],c2.buffer.f[c2.fPos + 6]);
				break;
			case 4:
				var c3;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				c3 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3]);
				break;
			case 5:
				var c4;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				c4 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				c5 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var c6;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				c6 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c7;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				c7 = data;
				var x = c7.buffer.f[c7.fPos];
				var y = c7.buffer.f[c7.fPos + 1];
				var width = c7.buffer.f[c7.fPos + 2];
				var height = c7.buffer.f[c7.fPos + 3];
				var rx = c7.buffer.f[c7.fPos + 4];
				var ry = c7.buffer.f[c7.fPos + 5];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) rx = width / 2;
				if(ry > height / 2) ry = height / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x,y,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c8;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				c8 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c9;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				c9 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(c9.buffer.o[c9.oPos] == null || isNaN(c9.buffer.o[c9.oPos]) || c9.buffer.o[c9.oPos] < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(c9.buffer.o[c9.oPos] == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = c9.buffer.o[c9.oPos];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(c9.buffer.o[c9.oPos + 1] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = c9.buffer.o[c9.oPos + 1];
				if(c9.buffer.o[c9.oPos + 2] == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = c9.buffer.o[c9.oPos + 2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = c9.buffer.o[c9.oPos + 4];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = c9.buffer.o[c9.oPos + 5];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = c9.buffer.o[c9.oPos + 6];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = c9.buffer.o[c9.oPos + 7];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c10;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				c10 = data;
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1]);
				break;
			case 17:
				var c11;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				c11 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(c11.buffer.f[c11.fPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c12;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				c12 = data;
				var uvtData = c12.buffer.o[c12.oPos + 2];
				var vertices = c12.buffer.o[c12.oPos];
				var indices = c12.buffer.o[c12.oPos + 1];
				var culling = c12.buffer.o[c12.oPos + 3];
				var colors = c12.buffer.o[c12.oPos + 4];
				var blendMode = c12.buffer.i[c12.iPos];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data1 = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data2;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data2 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
										uvtData.data = data2;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c13;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
				c13 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(c13.buffer.ts[c13.tsPos],c13.buffer.ff[c13.ffPos],c13.buffer.b[c13.bPos],c13.buffer.i[c13.iPos],c13.buffer.i[c13.iPos + 1]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c14;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
				c14 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(c14.buffer.o[c14.oPos + 2]) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx;
				var cy;
				var cx2;
				var cy2;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = c14.buffer.o[c14.oPos].length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command = c14.buffer.o[c14.oPos].data[i1];
					switch(command) {
					case 1:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = c14.buffer.o[c14.oPos + 1].data[idx];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,ax,ay);
						break;
					case 6:
						cx = c14.buffer.o[c14.oPos + 1].data[idx];
						cy = c14.buffer.o[c14.oPos + 1].data[idx + 1];
						cx2 = c14.buffer.o[c14.oPos + 1].data[idx + 2];
						cy2 = c14.buffer.o[c14.oPos + 1].data[idx + 3];
						ax = c14.buffer.o[c14.oPos + 1].data[idx + 4];
						ay = c14.buffer.o[c14.oPos + 1].data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,cx2,cy2,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var c15;
				data.advance();
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				c15 = data;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(c15.buffer.o[c15.oPos]);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.advance();
				data.prev = type;
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		this.vertexArray = this1;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		var this2;
		if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
		this.uvArray = this2;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		var this3;
		if(array2 != null) this3 = new Float32Array(array2); else this3 = null;
		this.colorArray = this3;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,(function($this) {
			var $r;
			var array3 = [0,1,2,1,3,2];
			var this4;
			if(array3 != null) this4 = new Uint16Array(array3); else this4 = null;
			$r = this4;
			return $r;
		}(this)),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl__$internal_renderer_opengl_utils_FilterTexture;
openfl__$internal_renderer_opengl_utils_FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl__$internal_renderer_opengl_utils_FilterTexture.prototype = {
	clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterTexture
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	destroy: function() {
		this.gl = null;
	}
	,pushRect: function(rect,transform) {
		if(rect == null) return;
		var m = new openfl_geom_Matrix(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m,this.renderSession.renderer.viewport.height);
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) clip = this.currentClip.intersection(clip);
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		var this1;
		if(components != null) this1 = new Float32Array(components); else this1 = null;
		this.defaultValue = this1;
	} else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry;
	if(rectData.length == 3) ry = rx; else ry = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		openfl__$internal_renderer_GraphicsPaths.ellipse(path.points,x,y,rx,ry,totalSegs);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 406, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	colorAttrib.defaultValue = this1;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		var this2;
		if(vertsLength != null) this2 = new Float32Array(vertsLength); else this2 = null;
		verts = this2;
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors;
	var buffer = verts.buffer;
	var this3;
	if(buffer != null) this3 = new Uint32Array(buffer,0); else this3 = null;
	glColors = this3;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		var idx1 = idx++;
		verts[idx1] = a * x0 + c * y0 + tx;
		var idx2 = idx++;
		verts[idx2] = b * x0 + d * y0 + ty;
		var idx3 = idx++;
		verts[idx3] = uvtData.data[v0];
		var idx4 = idx++;
		verts[idx4] = uvtData.data[v0 + 1];
		if(hasColors) {
			var idx5 = idx++;
			glColors[idx5] = colors.data[i0];
		}
		var idx6 = idx++;
		verts[idx6] = a * x1 + c * y1 + tx;
		var idx7 = idx++;
		verts[idx7] = b * x1 + d * y1 + ty;
		var idx8 = idx++;
		verts[idx8] = uvtData.data[v1];
		var idx9 = idx++;
		verts[idx9] = uvtData.data[v1 + 1];
		if(hasColors) {
			var idx10 = idx++;
			glColors[idx10] = colors.data[i1];
		}
		var idx11 = idx++;
		verts[idx11] = a * x2 + c * y2 + tx;
		var idx12 = idx++;
		verts[idx12] = b * x2 + d * y2 + ty;
		var idx13 = idx++;
		verts[idx13] = uvtData.data[v2];
		var idx14 = idx++;
		verts[idx14] = uvtData.data[v2 + 1];
		if(hasColors) {
			var idx15 = idx++;
			glColors[idx15] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) return;
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),(function($this) {
			var $r;
			var array = bucket.color;
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),(function($this) {
				var $r;
				var array1 = bucket.color;
				var this2;
				if(array1 != null) this2 = new Float32Array(array1); else this2 = null;
				$r = this2;
				return $r;
			}(this)));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		var this1;
		if(array != null) this1 = new Int16Array(array); else this1 = null;
		this.glTile = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				var this1;
				if(array != null) this1 = new Float32Array(array); else this1 = null;
				this.glVerts = this1;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) {
				var array1 = this.indices;
				var this2;
				if(array1 != null) this2 = new Uint16Array(array1); else this2 = null;
				this.glIndices = this2;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		var this1;
		if(elements != null) this1 = new Float32Array(elements); else this1 = null;
		this.glData = this1;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		var this2;
		if(elements1 != null) this2 = new Uint16Array(elements1); else this2 = null;
		this.glIndices = this2;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.uvs = new openfl_display_TextureUvs();
	this.matrix = new openfl_geom_Matrix();
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor"));
	var array = [1,1,1,1];
	var this1;
	if(array != null) this1 = new Float32Array(array); else this1 = null;
	this.attributes[2].defaultValue = this1;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	var this2;
	if(buffer != null) this2 = new Float32Array(buffer,0); else this2 = null;
	this.positions = this2;
	var buffer1 = this.vertexArray.buffer;
	var this3;
	if(buffer1 != null) this3 = new Uint32Array(buffer1,0); else this3 = null;
	this.colors = this3;
	var elements = this.indexArraySize;
	var this4;
	if(elements != null) this4 = new Uint16Array(elements); else this4 = null;
	this.indices = this4;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) this.stop();
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			var _g1 = flags & 15728640;
			switch(_g1) {
			case 1048576:
				blendMode = openfl_display_BlendMode.DARKEN;
				break;
			case 2097152:
				blendMode = openfl_display_BlendMode.LIGHTEN;
				break;
			case 4194304:
				blendMode = openfl_display_BlendMode.OVERLAY;
				break;
			case 8388608:
				blendMode = openfl_display_BlendMode.HARDLIGHT;
				break;
			default:
				var _g2 = flags & 251658240;
				switch(_g2) {
				case 16777216:
					blendMode = openfl_display_BlendMode.DIFFERENCE;
					break;
				case 33554432:
					blendMode = openfl_display_BlendMode.INVERT;
					break;
				default:
					blendMode = openfl_display_BlendMode.NORMAL;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		this.matrix.identity();
		var oMatrix = object.__worldTransform;
		this.uvs.reset();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				this.matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				this.matrix.a = a * oMatrix.a + b * oMatrix.c;
				this.matrix.b = a * oMatrix.b + b * oMatrix.d;
				this.matrix.c = c * oMatrix.a + d * oMatrix.c;
				this.matrix.d = c * oMatrix.b + d * oMatrix.d;
				this.matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				this.matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				this.uvs.x0 = tileUV.x;
				this.uvs.y0 = tileUV.y;
				this.uvs.x1 = tileUV.width;
				this.uvs.y1 = tileUV.y;
				this.uvs.x2 = tileUV.width;
				this.uvs.y2 = tileUV.height;
				this.uvs.x3 = tileUV.x;
				this.uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,this.matrix,this.uvs,null,color,openfl_display_PixelSnapping.NEVER);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl_display_TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(object.__graphics.__bounds.x,object.__graphics.__bounds.y);
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color,null);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color,pixelSnapping) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		if(pixelSnapping == null) pixelSnapping = openfl_display_PixelSnapping.NEVER;
		var snap = pixelSnapping != openfl_display_PixelSnapping.NEVER;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		if(!snap) {
			var idx = index++;
			this.positions[idx] = a * w1 + c * h1 + tx;
			var idx1 = index++;
			this.positions[idx1] = d * h1 + b * w1 + ty;
		} else {
			var idx2 = index++;
			var val = Math.round(a * w1 + c * h1 + tx);
			this.positions[idx2] = val;
			var idx3 = index++;
			var val1 = Math.round(d * h1 + b * w1 + ty);
			this.positions[idx3] = val1;
		}
		var idx4 = index++;
		this.positions[idx4] = uvs.x0;
		var idx5 = index++;
		this.positions[idx5] = uvs.y0;
		if(this.enableColor) {
			var idx6 = index++;
			this.colors[idx6] = color;
		}
		if(!snap) {
			var idx7 = index++;
			this.positions[idx7] = a * w0 + c * h1 + tx;
			var idx8 = index++;
			this.positions[idx8] = d * h1 + b * w0 + ty;
		} else {
			var idx9 = index++;
			var val2 = Math.round(a * w0 + c * h1 + tx);
			this.positions[idx9] = val2;
			var idx10 = index++;
			var val3 = Math.round(d * h1 + b * w0 + ty);
			this.positions[idx10] = val3;
		}
		var idx11 = index++;
		this.positions[idx11] = uvs.x1;
		var idx12 = index++;
		this.positions[idx12] = uvs.y1;
		if(this.enableColor) {
			var idx13 = index++;
			this.colors[idx13] = color;
		}
		if(!snap) {
			var idx14 = index++;
			this.positions[idx14] = a * w0 + c * h0 + tx;
			var idx15 = index++;
			this.positions[idx15] = d * h0 + b * w0 + ty;
		} else {
			var idx16 = index++;
			var val4 = Math.round(a * w0 + c * h0 + tx);
			this.positions[idx16] = val4;
			var idx17 = index++;
			var val5 = Math.round(d * h0 + b * w0 + ty);
			this.positions[idx17] = val5;
		}
		var idx18 = index++;
		this.positions[idx18] = uvs.x2;
		var idx19 = index++;
		this.positions[idx19] = uvs.y2;
		if(this.enableColor) {
			var idx20 = index++;
			this.colors[idx20] = color;
		}
		if(!snap) {
			var idx21 = index++;
			this.positions[idx21] = a * w1 + c * h0 + tx;
			var idx22 = index++;
			this.positions[idx22] = d * h0 + b * w1 + ty;
		} else {
			var idx23 = index++;
			var val6 = Math.round(a * w1 + c * h0 + tx);
			this.positions[idx23] = val6;
			var idx24 = index++;
			var val7 = Math.round(d * h0 + b * w1 + ty);
			this.positions[idx24] = val7;
		}
		var idx25 = index++;
		this.positions[idx25] = uvs.x3;
		var idx26 = index++;
		this.positions[idx26] = uvs.y3;
		if(this.enableColor) {
			var idx27 = index++;
			this.colors[idx27] = color;
		}
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.ceil(this.clipRect.x),Math.ceil(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = openfl_text_TextFieldType.DYNAMIC;
	this.autoSize = openfl_text_TextFieldAutoSize.NONE;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.length + 1) return null;
		if(this.lineBreaks.length == 0) return this.text; else return this.text.substring(index > 0?this.lineBreaks[index - 1]:0,this.lineBreaks[index]);
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.length - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges[rangeIndex];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				lineIndex++;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			lineIndex++;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.length - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g11 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != openfl_text_TextFormatAlign.JUSTIFY) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == openfl_text_TextFormatAlign.JUSTIFY) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.length - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
			}
		} else {
			if(textIndex >= formatRange.end) break;
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var advances4 = [];
			var _g6 = textIndex;
			while(_g6 < formatRange.end) {
				var i4 = _g6++;
				advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances4;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances5 = layoutGroup.advances;
			var width2 = 0.0;
			var _g7 = 0;
			while(_g7 < advances5.length) {
				var advance2 = advances5[_g7];
				++_g7;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _g.textFormatRanges.length - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2[1]) {
				case 3:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2); else offsetX = 0;
					break;
				case 1:
					if(this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.length;
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups[j].lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getWorldTransform();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.pixelSnapping);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	reset: function() {
		this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
	}
	,__class__: openfl_display_TextureUvs
};
var openfl_display_BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
openfl_display_BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	appendText: function(text) {
		this.__textEngine.text += text;
		this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var index = this.__textEngine.text.indexOf("\n");
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.text.indexOf("\n",index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 3:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__textEngine.text.length;
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.text.indexOf("\n",charIndex) + 1;
		if(endIndex == 0) endIndex = this.__textEngine.text.length;
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1]; else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var px = this.__worldTransform.__transformInverseX(x,y);
		var py = this.__worldTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		if(this.__textEngine.antiAliasType == openfl_text_AntiAliasType.ADVANCED && this.__textEngine.gridFitType == openfl_text_GridFitType.PIXEL) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != openfl_text_AntiAliasType.ADVANCED || this.__textEngine.gridFitType != openfl_text_GridFitType.PIXEL);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
		if(this.__scrollRect != null) renderSession.maskManager.popRect();
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != openfl_text_TextFieldAutoSize.NONE) {
				var cacheWidth = this.__textEngine.width;
				var cacheHeight = this.__textEngine.height;
				var _g = this.__textEngine.autoSize;
				switch(_g[1]) {
				case 1:case 3:case 0:
					if(!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1[1]) {
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) this.__dirty = true;
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) this.__dirty = true;
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__textEngine.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__textEngine.displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.displayAsPassword = value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) return this.__textEngine.text.length;
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) this.__dirty = true;
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) this.__dirty = true;
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == openfl_text_TextFieldType.INPUT) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) this.__dirty = true;
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == openfl_text_TextFieldType.INPUT) {
				this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
				this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
				this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == openfl_text_TextFieldType.INPUT && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
				}
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) this.replaceSelectedText(text); else this.replaceSelectedText("");
				this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) color = 0;
	if(y == null) y = 10;
	if(x == null) x = 10;
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	this_onEnterFrame: function(event) {
		var currentTime = haxe_Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) this.set_text("FPS: " + this.currentFPS);
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.length) {
			var graphics = graphicsData.data[_g];
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) this.endFill();
		}
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.length) {
				var command = commands.data[_g];
				++_g;
				if(command != null) switch(command) {
				case 1:
					this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
					dataIndex += 6;
					break;
				default:
				} else {
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,rx,ry);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) totalCount = tileData.length;
		if(useTransform || useScale || useRotation || useRGB || useAlpha) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
			if(useScale) {
				scaleIndex = numValues;
				numValues++;
			}
			if(useRotation) {
				rotationIndex = numValues;
				numValues++;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) numValues += 3;
			if(useAlpha) numValues++;
			var itemCount = totalCount / numValues | 0;
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) id = tileData[index + 2] | 0; else id = -1;
				scale = 1.0;
				rotation = 0.0;
				if(useScale) scale = tileData[index + scaleIndex];
				if(useRotation) rotation = tileData[index + rotationIndex];
				if(id < 0) tile = null; else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.x = tileData[index + 6] / tile.width;
						tilePoint.y = tileData[index + 7] / tile.height;
					} else {
						tilePoint.x = 0;
						tilePoint.y = 0;
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * tile.width;
						originY = tilePoint.y * tile.height;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) id1 = Std["int"](tileData[index1++]); else id1 = -1;
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl_display_TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) {
			if(joints == openfl_display_JointStyle.MITER) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = openfl_display_GradientType.LINEAR;
	if(spreadMethod == null) spreadMethod = openfl_display_SpreadMethod.PAD;
	if(interpolationMethod == null) interpolationMethod = openfl_display_InterpolationMethod.RGB;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = openfl_display_GraphicsPathWinding.EVEN_ODD;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 3;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = anchorX;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = anchorY;
			}
			this5.length;
			var this7 = this.data;
			if(!this7.fixed) {
				this7.length++;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
				this7.data[this7.length - 1] = controlX;
			}
			this7.length;
			var this9 = this.data;
			if(!this9.fixed) {
				this9.length++;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
				this9.data[this9.length - 1] = controlY;
			}
			this9.length;
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			this1.length;
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
				this3.data[this3.length - 1] = x;
			}
			this3.length;
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
				this5.data[this5.length - 1] = y;
			}
			this5.length;
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
openfl_display_GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = openfl_display_CapsStyle.NONE;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_Sprite.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_Sprite;
openfl_display_Loader.prototype = $extend(openfl_display_Sprite.prototype,{
	close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			var path = request.url;
			var index = path.indexOf("?");
			if(index > -1) path = path.substring(0,index);
			openfl_display_BitmapData.fromFile(path,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError(openfl_events_IOErrorEvent.IO_ERROR);
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	return false;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width;
	this.stageHeight = window.__height;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				var gl = _g[2];
				this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				var element = _g[2];
				this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
				break;
			case 4:
				var cairo = _g[2];
				this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
				break;
			case 5:
				var ctx = _g[2];
				this.__renderer = new openfl__$internal_renderer_console_ConsoleRenderer(this.stageWidth,this.stageHeight,ctx);
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		this.__dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			{
				var _g = renderer.context;
				switch(_g[1]) {
				case 4:
					var cairo = _g[2];
					(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
					this.__renderer.renderSession.cairo = cairo;
					break;
				default:
				}
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) {
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.__dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(touch.x,touch.y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value[1]) {
		case 0:
			if(this.window.__fullscreen) {
				this.window.set_fullscreen(false);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,false,true));
			}
			break;
		default:
			if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.dispatchEvent(new openfl_events_FullScreenEvent(openfl_events_FullScreenEvent.FULL_SCREEN,false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		var _g = this;
		if(openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function() {
			_g.context3D = new openfl_display3D_Context3D();
			_g.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
		},1); else haxe_Timer.delay(function() {
			_g.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
		},1);
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(this,lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl_display3D_IndexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(this,lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,__deleteTexture: function(texture) {
		if(texture.glTexture == null) return;
		HxOverrides.remove(this.texturesCreated,texture);
		lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
		texture.glTexture = null;
	}
	,__deleteVertexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.vertexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteIndexBuffer: function(buffer) {
		if(buffer.glBuffer == null) return;
		HxOverrides.remove(this.indexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteProgram: function(program) {
		if(program.glProgram == null) return;
		HxOverrides.remove(this.programsCreated,program);
		lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
		program.glProgram = null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,(function($this) {
			var $r;
			var array;
			{
				var this2 = matrix.rawData;
				var value = [];
				var _g1 = 0;
				var _g = this2.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this2.data[i]);
				}
				array = value;
			}
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			if(openfl_display3D_Context3D.supportsAnisotropy) {
				openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
				lime_graphics_opengl_GL.context.texParameteri(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,openfl_display3D_Context3D.maxSupportedAnisotropy);
			}
			openfl_display3D_Context3D.anisotropySupportTested = true;
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var tex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				tex.mipmapsGenerated = true;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var cubetex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(34067);
				cubetex.mipmapsGenerated = true;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(context,glBuffer,numIndices) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	dispose: function() {
		this.context.__deleteIndexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		var this1;
		if(length != null) this1 = new Int16Array(length); else this1 = null;
		indices = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			indices[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		indices = this1;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context,program) {
	this.context = context;
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	dispose: function() {
		this.context.__deleteProgram(this);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(context,glBuffer,numVertices,data32PerVertex) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	dispose: function() {
		this.context.__deleteVertexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			var val = byteArray.readUnsignedByte();
			float32Array[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		var this1;
		if(length != null) this1 = new Float32Array(length); else this1 = null;
		float32Array = this1;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.context = context;
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispose: function() {
		this.context.__deleteTexture(this);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,size,size);
	this.size = size;
	this.mipmapsGenerated = false;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime_utils_ByteArray.__ofBuffer(bitmapData.image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source;
		var elements = data.length;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	this.mipmapsGenerated = false;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source;
		var elements = data.length;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		source = this1;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			var val = data.readUnsignedByte();
			source[i] = val;
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl_events_Event
};
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=\"" + this.text + "\"]";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	clone: function() {
		return new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_Event;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FullscreenEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " fullscreen=" + Std.string(this.fullScreen) + " interactive=" + Std.string(this.interactive) + "]";
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
	}
	,toString: function() {
		return "[GameInputEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " device=" + Std.string(this.device) + "]";
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		return new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + this.keyLocation + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		return new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=\"" + this.type + "\" bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,local.x,local.y,1,1,null,false,false,false,false,0,false,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]"));
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + row + " out of bounds [0, ..., 3]"));
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = new openfl_geom_Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl_geom_Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl_geom_Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl_geom_Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : ["openfl","geom","Orientation3D"], __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.QUATERNION = ["QUATERNION",2];
openfl_geom_Orientation3D.QUATERNION.toString = $estr;
openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5],value.rawData.data[4]) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.data[0];
			this.__displayObject.__transform.b = value.rawData.data[1];
			this.__displayObject.__transform.c = value.rawData.data[5];
			this.__displayObject.__transform.d = value.rawData.data[6];
			this.__displayObject.__transform.tx = value.rawData.data[12];
			this.__displayObject.__transform.ty = value.rawData.data[13];
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
	var lb = Math.sqrt(b.x * b.x + b.y * b.y + b.z * b.z);
	var dot = a.x * b.x + a.y * b.y + a.z * b.z;
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var pan = sndTransform.pan;
		if(pan == 0) pan = -0.0000001;
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR)); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		this.dispatchEvent(new openfl_events_NetStatusEvent(openfl_events_NetStatusEvent.NET_STATUS,false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
	openfl_Lib.application.onExit.add($bind(this,this.application_onExit));
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) secure = false;
	if(localPath == null) localPath = window.location.href;
	var so = new openfl_net_SharedObject();
	so.data = { };
	so.__localPath = localPath;
	so.__name = name;
	var encodedData = null;
	try {
		var storage = js_Browser.getLocalStorage();
		if(storage != null) encodedData = storage.getItem(localPath + ":" + name);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
	}
	if(encodedData != null && encodedData != "") try {
		var unserializer = new haxe_Unserializer(encodedData);
		unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
		so.data = unserializer.unserialize();
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
	}
	return so;
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) secure = false;
	if(persistence == null) persistence = false;
	openfl_Lib.notImplemented("SharedObject.getRemote");
	return null;
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) name = StringTools.replace(name,"neash.","openfl.");
		if(StringTools.startsWith(name,"native.")) name = StringTools.replace(name,"native.","openfl.");
		if(StringTools.startsWith(name,"flash.")) name = StringTools.replace(name,"flash.","openfl.");
		if(StringTools.startsWith(name,"openfl._v2.")) name = StringTools.replace(name,"openfl._v2.","openfl.");
		if(StringTools.startsWith(name,"openfl._legacy.")) name = StringTools.replace(name,"openfl._legacy.","openfl.");
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) storage.removeItem(this.__localPath + ":" + this.__name);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented("SharedObject.connect");
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) minDiskSpace = 0;
		if(Reflect.fields(this.data).length == 0) return openfl_net_SharedObjectFlushStatus.FLUSHED;
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return openfl_net_SharedObjectFlushStatus.PENDING;
		}
		return openfl_net_SharedObjectFlushStatus.FLUSHED;
	}
	,send: function($arguments) {
		openfl_Lib.notImplemented("SharedObject.send");
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) this.data[propertyName] = value;
	}
	,application_onExit: function(_) {
		this.flush();
	}
	,get_size: function() {
		try {
			var d = haxe_Serializer.run(this.data);
			return haxe_io_Bytes.ofString(d).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net_SharedObjectFlushStatus = $hxClasses["openfl.net.SharedObjectFlushStatus"] = { __ename__ : ["openfl","net","SharedObjectFlushStatus"], __constructs__ : ["FLUSHED","PENDING"] };
openfl_net_SharedObjectFlushStatus.FLUSHED = ["FLUSHED",0];
openfl_net_SharedObjectFlushStatus.FLUSHED.toString = $estr;
openfl_net_SharedObjectFlushStatus.FLUSHED.__enum__ = openfl_net_SharedObjectFlushStatus;
openfl_net_SharedObjectFlushStatus.PENDING = ["PENDING",1];
openfl_net_SharedObjectFlushStatus.PENDING.toString = $estr;
openfl_net_SharedObjectFlushStatus.PENDING.__enum__ = openfl_net_SharedObjectFlushStatus;
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event(openfl_events_Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event(openfl_events_Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent(openfl_events_ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent(openfl_events_SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent(openfl_events_HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net_URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : ["openfl","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl_net_URLLoaderDataFormat.BINARY.toString = $estr;
openfl_net_URLLoaderDataFormat.BINARY.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl_net_URLLoaderDataFormat.TEXT.toString = $estr;
openfl_net_URLLoaderDataFormat.TEXT.__enum__ = openfl_net_URLLoaderDataFormat;
openfl_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl_net_URLLoaderDataFormat.VARIABLES.__enum__ = openfl_net_URLLoaderDataFormat;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.totalMemory = null;
openfl_system_System.vmVersion = null;
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented("System.pause");
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented("System.resume");
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return window.performance.memory;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(bytes);
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : ["openfl","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl_text_FontStyle.REGULAR = ["REGULAR",0];
openfl_text_FontStyle.REGULAR.toString = $estr;
openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.ITALIC = ["ITALIC",1];
openfl_text_FontStyle.ITALIC.toString = $estr;
openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD = ["BOLD",3];
openfl_text_FontStyle.BOLD.toString = $estr;
openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : ["openfl","text","FontType"], __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl_text_FontType.DEVICE = ["DEVICE",0];
openfl_text_FontType.DEVICE.toString = $estr;
openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED = ["EMBEDDED",1];
openfl_text_FontType.EMBEDDED.toString = $estr;
openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(lime_ui_Gamepad.devices.h.hasOwnProperty(index)) {
		var key = lime_ui_Gamepad.devices.h[index];
		return openfl_ui_GameInput.__devices.h[key.__id__];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.id == null?"null":"" + gamepad.id,null);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		openfl_ui_GameInput.__devices.remove(gamepad);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var ru_zzzzzzerg_linden_FlurryFallback = function() { };
$hxClasses["ru.zzzzzzerg.linden.FlurryFallback"] = ru_zzzzzzerg_linden_FlurryFallback;
ru_zzzzzzerg_linden_FlurryFallback.__name__ = ["ru","zzzzzzerg","linden","FlurryFallback"];
ru_zzzzzzerg_linden_FlurryFallback.onStartSession = function(flurryKey) {
	ru_zzzzzzerg_linden_FlurryFallback.write("On start Flurry session");
};
ru_zzzzzzerg_linden_FlurryFallback.onEndSession = function() {
	ru_zzzzzzerg_linden_FlurryFallback.write("On end Flurry session");
};
ru_zzzzzzerg_linden_FlurryFallback.setVersionName = function(versionName) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setVersionName",versionName]);
};
ru_zzzzzzerg_linden_FlurryFallback.setReportLocation = function(reportLocation) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setReportLocation",reportLocation]);
};
ru_zzzzzzerg_linden_FlurryFallback.setLogEnabled = function(logEnabled) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setLogEnabled",logEnabled]);
};
ru_zzzzzzerg_linden_FlurryFallback.setLogLevel = function(logLevel) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setLogLevel",logLevel]);
};
ru_zzzzzzerg_linden_FlurryFallback.setContinueSessionMillis = function(millis) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setContinueSessionMillis",millis]);
};
ru_zzzzzzerg_linden_FlurryFallback.setLogEvents = function(logEvents) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setLogEvents",logEvents]);
};
ru_zzzzzzerg_linden_FlurryFallback.setUseHttps = function(useHttps) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setUseHttps",useHttps]);
};
ru_zzzzzzerg_linden_FlurryFallback.setCaptureUncaughtExceptions = function(isEnabled) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setCaptureUncaughtExceptions",isEnabled]);
};
ru_zzzzzzerg_linden_FlurryFallback.logEvent = function(eventId,params,timed) {
	if(timed == null) timed = false;
	ru_zzzzzzerg_linden_FlurryFallback.write(["logEvent",eventId,params,timed]);
};
ru_zzzzzzerg_linden_FlurryFallback.endTimedEvent = function(eventId,params) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["endTimedEvent",eventId,params]);
};
ru_zzzzzzerg_linden_FlurryFallback.onError = function(errorId,message,errorClass) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["onError",errorId,message,errorClass]);
};
ru_zzzzzzerg_linden_FlurryFallback.onPageView = function() {
	ru_zzzzzzerg_linden_FlurryFallback.write("onPageView");
};
ru_zzzzzzerg_linden_FlurryFallback.setAge = function(age) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setAge",age]);
};
ru_zzzzzzerg_linden_FlurryFallback.setGender = function(gender) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setGender",gender]);
};
ru_zzzzzzerg_linden_FlurryFallback.setUserId = function(userId) {
	ru_zzzzzzerg_linden_FlurryFallback.write(["setUserId",userId]);
};
ru_zzzzzzerg_linden_FlurryFallback.write = function(m) {
};
var timer_Clock = function(tick) {
	this.isPlaying = false;
	openfl_display_Sprite.call(this);
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
	this.frame = tick;
};
$hxClasses["timer.Clock"] = timer_Clock;
timer_Clock.__name__ = ["timer","Clock"];
timer_Clock.__super__ = openfl_display_Sprite;
timer_Clock.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function(e) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
		this.clockbmp = openfl_Assets.getBitmapData("static/timercircle.png");
		this.clock = new openfl_display_Bitmap(this.clockbmp,openfl_display_PixelSnapping.ALWAYS,true);
		this.addChild(this.clock);
		this.w = this.clock.get_width() / 2;
		this.h = this.clock.get_height() / 2;
		this.w += 0.5;
		this.h += 0.5;
		haxe_Log.trace("this",{ fileName : "Clock.hx", lineNumber : 53, className : "timer.Clock", methodName : "init"});
		this.dial = new timer_Sector();
		this.dial.tick(35,360 / this.frame);
		this.dial.set_x(this.w);
		this.dial.set_y(this.h);
		this.addChild(this.dial);
		this.resume();
	}
	,update: function() {
		if(this.isPlaying == false) return;
		this.dial.update();
	}
	,pause: function() {
		this.isPlaying = false;
	}
	,resume: function() {
		this.isPlaying = true;
	}
	,setTimer: function() {
	}
	,reset: function() {
		this.dial.reset();
	}
	,__class__: timer_Clock
});
var timer_Sector = function() {
	this.circleY = 0;
	this.circleX = 0;
	this.circleR = 0;
	this.degChange = 1;
	this.degree = 0;
	openfl_display_Sprite.call(this);
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
};
$hxClasses["timer.Sector"] = timer_Sector;
timer_Sector.__name__ = ["timer","Sector"];
timer_Sector.__super__ = openfl_display_Sprite;
timer_Sector.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function(e) {
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
	}
	,setup: function() {
		this.spBoard = new openfl_display_Sprite();
		this.spBoard.set_x(this.circleX);
		this.spBoard.set_y(this.circleY);
		this.addChild(this.spBoard);
		this.shFill = new openfl_display_Shape();
		this.shFill.get_graphics().lineStyle(1,0,1.0);
		this.shFill.get_graphics().moveTo(0,0);
		this.shFill.get_graphics().lineTo(this.circleR,0);
		this.shFill.set_x(0);
		this.shFill.set_y(0);
		this.spBoard.addChild(this.shFill);
		this.radMul = Math.PI / 180;
	}
	,update: function() {
		this.degree -= this.degChange;
		if(this.degree < 0) this.degree = 360 - this.degChange;
		this.updatePicture(this.degree);
	}
	,updatePicture: function(t) {
		this.radianAngle = t * this.radMul;
		this.i = 0;
		this.shFill.get_graphics().clear();
		this.shFill.get_graphics().moveTo(0,0);
		this.shFill.get_graphics().beginFill(16777215,0.7);
		while(this.i <= t) {
			this.shFill.get_graphics().lineTo(this.circleR * Math.cos((this.i + 90) * this.radMul),-this.circleR * Math.sin((this.i + 90) * this.radMul));
			this.i = this.i + this.degChange;
		}
		this.shFill.get_graphics().lineTo(0,0);
		this.shFill.get_graphics().endFill();
	}
	,tick: function(radius,tock) {
		if(tock == null) tock = 1.0;
		if(radius == null) radius = 20;
		this.circleR = radius;
		this.degChange = tock;
		this.degree = 360;
		this.setup();
		this.updatePicture(this.degree);
	}
	,tock: function(radius,frames,time) {
		if(time == null) time = 90;
		if(frames == null) frames = 40;
		if(radius == null) radius = 20;
		this.circleR = radius;
		this.timer = time;
		this.sectors = frames;
		this.timeStep = time / frames;
		this.setup();
	}
	,reset: function() {
		this.degree = 0;
		this.setup();
		this.updatePicture(this.degree);
	}
	,__class__: timer_Sector
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:bitmap_game_preloader_Logo", data : ""}];
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.00392156862745);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
GameSettings.inMobiAccount_Id = "9cb45469b1744e2e9ae9bc24b71f9fe0";
GameSettings.inMobiPlacement_id = "1441917629415";
GameSettings.addClosed = false;
GameSettings.addShow = false;
GameSettings.addLoaded = false;
GameSettings.addTimer = 0;
GameSettings.scoreSubmitted = false;
GameSettings.cash = 0;
GameSettings.score = 0;
GameSettings.total = 0;
GameSettings.level = 1;
GameSettings.gamelevel = 0;
GameSettings.time = 100;
GameSettings.target = 1000;
GameSettings.medtarget = 1000;
GameSettings.maxtarget = 1000;
GameSettings.bonus = 1;
GameSettings.maxLevel = 16;
GameSettings.musicPlaying = true;
GameSettings.maxCustomer = 4;
GameSettings.isPlaying = false;
GameSettings.isPaused = false;
GameSettings.isStart = false;
GameSettings.actionFlag = false;
GameSettings.milkTotal = 0;
GameSettings.woolPlaceTotal = 6;
GameSettings.woolTotal = 0;
GameSettings.flushTotal = 0;
GameSettings.dryWoolTotal = 0;
GameSettings.color1Total = 0;
GameSettings.color2Total = 0;
GameSettings.color3Total = 0;
GameSettings.color4Total = 0;
GameSettings.color5Total = 0;
GameSettings.sackTotal = 0;
GameSettings.basketTotal = 0;
GameSettings.medicineTotal = 0;
GameSettings.foodTotal = 0;
GameSettings.grassTotal = 0;
GameSettings.waterTotal = 0;
GameSettings.woolTrayCount = 0;
GameSettings.availableSack = 0;
GameSettings.grassBundle = 0;
GameSettings.foodFrame = 0;
GameSettings.bucketFrame = 0;
GameSettings.sheepTotal = 0;
GameSettings.matTotal = 1;
GameSettings.lightup = 0;
GameSettings.vehicleUp = false;
GameSettings.vehicleUped = false;
GameSettings.color1Up = false;
GameSettings.color2Up = false;
GameSettings.color3Up = false;
GameSettings.color4Up = false;
GameSettings.nextAction = false;
GameSettings.fromMarket = false;
GameSettings.wetWoolTotal = 0;
GameSettings.availableBasket = 0;
GameSettings.grassBundle2 = 0;
GameSettings.availableSack2 = 0;
GameSettings.availableBasket2 = 0;
GameSettings.tailorWool = 0;
GameSettings.whiteTotal = 0;
GameSettings.gameLoaded = false;
GameSettings.sellFlag = false;
GameSettings.buyFlag = false;
GameSettings.sellWoolCount = 0;
GameSettings.selldryWoolCount = 0;
GameSettings.buysheepCount = 0;
GameSettings.clr1 = 0;
GameSettings.clr2 = 0;
GameSettings.clr3 = 0;
GameSettings.clr4 = 0;
GameSettings.bar1Frame = 0;
GameSettings.bar2Frame = 0;
GameSettings.bar3Frame = 0;
GameSettings.bar4Frame = 0;
GameSettings.totalDryWool = 0;
GameSettings.overMsg = 0;
GameSettings.versionName = "SheepFarmAlpha_v1.00";
GameSettings.firstdiesheep = false;
GameSettings.bg2played = false;
GameSettings.bg3played = false;
GameSettings.bg4played = false;
GameSettings.itemCost = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[1] = 30;
	_g.h[2] = 320;
	_g.h[3] = 50;
	_g.h[4] = 200;
	_g.h[5] = 20;
	_g.h[6] = 30;
	_g.h[7] = 300;
	_g.h[8] = 120;
	_g.h[9] = 105;
	_g.h[10] = 130;
	_g.h[11] = 155;
	_g.h[12] = 180;
	$r = _g;
	return $r;
}(this));
GameSettings.buyCost = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[1] = 15;
	_g.h[2] = 30;
	_g.h[3] = 400;
	_g.h[4] = 8;
	_g.h[5] = 6;
	_g.h[6] = 50;
	_g.h[7] = 550;
	_g.h[8] = 1200;
	_g.h[9] = 210;
	_g.h[10] = 250;
	_g.h[11] = 290;
	_g.h[12] = 330;
	$r = _g;
	return $r;
}(this));
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
bitmapFont_BitmapFont.spaceCode = 32;
bitmapFont_BitmapFont.tabCode = 9;
bitmapFont_BitmapFont.newLineCode = 10;
bitmapFont_BitmapFont.defaultFontKey = "defaultFontKey";
bitmapFont_BitmapFont.defaultFontData = " 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000";
bitmapFont_BitmapFont.fonts = new haxe_ds_StringMap();
bitmapFont_BitmapFont.DEFAULT_GLYPHS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
bitmapFont_BitmapFont.POINT = new openfl_geom_Point();
bitmapFont_BitmapFont.MATRIX = new openfl_geom_Matrix();
bitmapFont_BitmapFont.COLOR_TRANSFORM = new openfl_geom_ColorTransform();
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
fw_Config.logicWidth = 800;
fw_Config.logicHeight = 480;
fw_Config.scaleRatio = 1;
fw_Config.viewport = new openfl_geom_Rectangle();
fw_Config.SMALL = "small";
fw_Config.NORMAL = "normal";
fw_Config.LARGE = "large";
fw_Config.XLARGE = "xlarge";
fw_Config.XXLARGE = "xxlarge";
fw_Config.screen = "normal";
fw_Config.PORTRAIT = 0;
fw_Config.LANDSCAPE = 1;
fw_Config.MULTI_ASSET = "multiAsset";
fw_Config.SINGLE_ASSET = "singleAsset";
fw_Config.assetMode = "singleAsset";
fw_Config.singleAssetgameWidth = 960;
fw_Config.singleAssetScreen = "xlarge";
fw_Config.useFixedStep = false;
fw_Config.html5AudioSpriteData = [];
fw_Config.html5MusicData = [];
fw_Config.showFPS = true;
fw_def_AtlasDefinition.TYPE_JSON_HASH = "typeJsonHash";
fw_managers_MusicManager.inited = false;
fw_managers_SFXManager.inited = false;
fw_managers_SFXManager.html5JumpStartDone = false;
fw_managers_SceneManager.scale = 1;
fw_managers_SceneManager.x = 0;
fw_managers_SceneManager.y = 0;
fw_utils_html5utils_Device.desktop = false;
fw_utils_html5utils_Device.iOS = false;
fw_utils_html5utils_Device.android = false;
fw_utils_html5utils_Device.chromeOS = false;
fw_utils_html5utils_Device.linux = false;
fw_utils_html5utils_Device.macOS = false;
fw_utils_html5utils_Device.windows = false;
fw_utils_html5utils_Device.canvas = false;
fw_utils_html5utils_Device.webgl = false;
fw_utils_html5utils_Device.quirksMode = false;
fw_utils_html5utils_Device.touch = false;
fw_utils_html5utils_Device.mspointer = false;
fw_utils_html5utils_Device.arora = false;
fw_utils_html5utils_Device.chrome = false;
fw_utils_html5utils_Device.epiphany = false;
fw_utils_html5utils_Device.firefox = false;
fw_utils_html5utils_Device.ie = false;
fw_utils_html5utils_Device.ieVersion = "0";
fw_utils_html5utils_Device.trident = false;
fw_utils_html5utils_Device.tridentVersion = "0";
fw_utils_html5utils_Device.mobileSafari = false;
fw_utils_html5utils_Device.midori = false;
fw_utils_html5utils_Device.opera = false;
fw_utils_html5utils_Device.safari = false;
fw_utils_html5utils_Device.webApp = false;
fw_utils_html5utils_Device.silk = false;
fw_utils_html5utils_Device.webAudio = false;
fw_utils_html5utils_Device.iPhone = false;
fw_utils_html5utils_Device.iPhone4 = false;
fw_utils_html5utils_Device.iPad = false;
fw_utils_html5utils_Device.vita = false;
fw_utils_html5utils_Device.kindle = false;
fw_utils_html5utils_Device.windowsPhone = false;
game_preloader_Logo.resourceType = "image/png";
game_preloader_Logo.resourceName = "__ASSET__:bitmap_game_preloader_Logo";
game_scenes_InmobiAdd.isLoad = false;
game_scenes_InmobiAdd.isClosed = false;
game_scenes_InmobiAdd.isShow = false;
game_scenes_InmobiAdd.isDisplay = false;
game_scenes_InmobiAdd.failedCount = 0;
game_scenes_InmobiAdd.delay = 0;
game_scenes_LoadGame.SheepFarm = "savedData";
game_scenes_Menu.SheepFarm = "savedData";
game_scenes_Services.loggedIn = false;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) h.setReserved("lt","<"); else h.h["lt"] = "<";
	if(__map_reserved.gt != null) h.setReserved("gt",">"); else h.h["gt"] = ">";
	if(__map_reserved.amp != null) h.setReserved("amp","&"); else h.h["amp"] = "&";
	if(__map_reserved.quot != null) h.setReserved("quot","\""); else h.h["quot"] = "\"";
	if(__map_reserved.apos != null) h.setReserved("apos","'"); else h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_CFFI.__moduleNames = null;
lime_system_CFFI.lime_cffi_set_finalizer = lime_system_CFFI.load("lime","lime_cffi_set_finalizer",1,false);
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_ByteArray.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_ByteArray.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils_ByteArray.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_display_BitmapDataChannel.ALPHA = 8;
openfl_display_BitmapDataChannel.BLUE = 4;
openfl_display_BitmapDataChannel.GREEN = 2;
openfl_display_BitmapDataChannel.RED = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
openfl_display_GraphicsPathCommand.LINE_TO = 2;
openfl_display_GraphicsPathCommand.MOVE_TO = 1;
openfl_display_GraphicsPathCommand.CURVE_TO = 3;
openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl_display_GraphicsPathCommand.NO_OP = 0;
openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text_Font.__registeredFonts = [];
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
