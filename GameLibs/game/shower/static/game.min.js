var resolution = 2;
var isPrivate = false;
var gamePaused = false;
var dist_swipe = 30;
var taille = 40 * resolution;
var Music = {
	enableMisic : true,
	music : null
};
var sauvegarde = [];
var level;
var nombre_levels = 50;
function Save_setItem(name, value) {
	if (!isPrivate)
		localStorage.setItem(name, value)
}
function Save_getItem(name, pardefaut) {
	if (!isPrivate)
		return localStorage.getItem(name);
	else
		return pardefaut
}
function save_lire(str1) {
	sauvegarde = [];
	var str = str1.split(",");
	var ligne = 0;
	var taille;
	var ii = 0;
	while (ii < str.length) {
		sauvegarde[ii] = {
			numetoile : 0
		};
		sauvegarde[ii].numetoile = +str[ii++]
	}
}
function save_ecrit() {
	var str = "";
	for (var i = 0; i < nombre_levels; i++) {
		str += "" + sauvegarde[i].numetoile;
		if (i < nombre_levels - 1)
			str += ","
	}
	Save_setItem("block_sauvegarde", str)
}
blockway = {};
blockway.Boot = function (game) {};
blockway.Boot.prototype = {
	preload : function () {
		this.game.load.image("preloadSprite", "static/load_bar" + resolution + ".png");
		this.game.load.image("preloadSprite01", "static/loaded_bar" + resolution + ".png");
		this.game.load.image("bgMenu", "static/bgMenu.png")
	},
	create : function () {
		if (this.game.device.desktop) {
			this.game.stage.scaleMode = Phaser.ScaleManager.SHOW_ALL;
			this.game.scale.setShowAll();
			this.game.scale.refresh();
			this.game.scale.pageAlignHorizontally = true;
			this.game.scale.pageAlignVertically = true
		} else
			this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
		this.game.scale.setScreenSize(true);
		var SpilData = {
			id : "576742227280292474"
		};
		this.game.state.start("preload")
	}
};
function continueGame() {}

text = {
	texteTuto1 : "Swipe the screen to move.\nGet the block to \nthe alligator to win.\nYou lose when you fall\n from the edges",
	texteTuto2 : "The Block will fall if\nit stands up vertically\non the cracked tiles",
	texteTuto3 : "the red and yellow gates\nare teleporters",
	texteTuto4 : "Stand the block on the\nred button to fill the\nholes in red tiles",
	texteTuto5 : "Stand the block vertically\non the green button to\nfill the holes in green tiles",
	textCongratulations : "Congratulations \nyou finished \nall levels",
	youwin : "You Win",
	txtPause : "Game paused",
	txtgameover : "Game\nOver",
	txtlevel : "level"
};
//console.log(level);
blockway.Preload = function (game) {
	this.bgmenu = null
};
blockway.Preload.prototype = {
	preload : function () {
		this.bgmenu = game.add.image(0, 0, "bgMenu");
		var progressBar = game.add.sprite(0, 150 * resolution, "preloadSprite");
		progressBar.x = (320 * resolution - progressBar.width) / 2;
		progressBar = game.add.sprite(0, 150 * resolution, "preloadSprite01");

		progressBar.x = (320 * resolution - progressBar.width) / 2;
		game.load.setPreloadSprite(progressBar);
		game.load.image("rotate", "static/rotate.png");
		game.load.image("bgPlay", "static/bgPlay.png");
		game.load.image("buttonPlay", "static/playbtn.png");
		game.load.image("musicbnt", "static/musicbnt.png");
		game.load.image("Mutemusicbnt", "static/Mutemusicbnt.png");
		game.load.image("big_bubble", "static/big_bubble.png");
		game.load.image("moregames", "static/more_games" + resolution + ".png");
		game.load.image("bgLevel", "static/bgLevel.png");
		game.load.image("homebnt", "static/menubnt.png");
		game.load.spritesheet("levelbnt", "static/levelbnt.png", 170, 150);
		game.load.image("jaurje", "static/bar2.png");
		game.load.tilemap("game-levels", "static/game-levels-F.json", null, Phaser.Tilemap.TILED_JSON);
		game.load.image("tilesjeu", "static/tiles.png");
		game.load.image("h", "static/h.png");
		game.load.spritesheet("cube", "static/cube.png", 240, 320);
		game.load.spritesheet("tile2", "static/tiles2.png", 80, 103);
		game.load.spritesheet("effet-buddle", "static/effet-buddle.png", 96, 138);
		game.load.image("pausebnt", "static/pausebnt.png");
		game.load.image("replaybnt", "static/replaybnt.png");
		game.load.image("resumebnt", "static/resumebnt.png");
		game.load.image("levelsbnt", "static/levelsbnt.png");
		game.load.image("levelsbnt", "static/levelsbnt.png");
		game.load.image("bgPause", "static/bgPause.png");
		game.load.image("down", "static/downbnt.png");
		game.load.image("up", "static/upbnt.png");
		game.load.image("creditsBnt", "static/creditsBnt.png");
		game.load.bitmapFont("fontb01", "static/fontb01.png", "static/fontb01.xml");
		game.load.bitmapFont("font", "static/font.png", "static/font.xml");
		game.load.audio("song17", ["static/A_monotonic_day.ogg", "static/A_monotonic_day.mp3"]);
		game.load.audio("sounds", ["static/sounds.ogg", "static/sounds.mp3", "static/sounds.m4a", "static/sounds.ac3"]);
		game.load.image("logo_black", "static/logo_black.png");
		game.load.image("logo_away", "static/logo_away.png");
		game.load.image("bubble", "static/bubble.png");
		this.ready = false
	},
	create : function () {
		if (!this.game.device.desktop)
			this.game.scale.forceOrientation(false, true, "rotate");
		if (game.device.localStorage) {
			this.TestPrivate();
			var str = Save_getItem("block_sauvegarde", null);
			level = Save_getItem("block_level", 0);
//            console.log(level);
			if (str == null || str == "null" || level == null || level == "null") {
				sauvegarde = [];
				for (var i = 0; i < nombre_levels; i++) {
					sauvegarde[i] = {
						numetoile : 0
					}
				}
				save_ecrit();
				Save_setItem("block_level", 0);
				level = 0
			} else {
				save_lire(str)
			}
		}
	},
	TestPrivate : function () {
		var testKey = "qeTest",
		storage = window.sessionStorage;
		try {
			storage.setItem(testKey, "1");
			storage.removeItem(testKey)
		} catch (error) {
			if (error.code === DOMException.QUOTA_EXCEEDED_ERR && storage.length === 0) {
				isPrivate = true
			} else {
				isPrivate = false
			}
		}
	},
	update : function () {
		if (game.cache.isSoundDecoded("song17") && game.cache.isSoundDecoded("sounds") && this.ready == false) {
			this.ready = true;
			game.onPause.add(function () {
				gamePaused = true;
				Music.music.pause()
			}, this);
			game.onResume.add(function () {
				gamePaused = false;
				if (Music.enableMisic || !play.pausePlay)
					Music.music.resume();
				if (!Music.enableMisic || play.pausePlay)
					this.sound.setMute()
			}, this);
//			console.log(logoData);
			
			game.state.start("menu");
			play.numLevel = parseInt(level) + 1;
			Music.music = this.game.add.audio("song17");
			Music.sounds = this.game.add.audio("sounds");
			Music.sounds.addMarker("block_move", 0, .5496371882086167);
			Music.sounds.addMarker("button_click", 2, .02718820861678);
			Music.sounds.addMarker("button_push", 4, .197006802721089);
			Music.sounds.addMarker("naufrage", 6, 2.351020408163265);
			Music.sounds.addMarker("teleportation", 10, .549637188208617);
			Music.sounds.addMarker("win", 12, 3.297256235827664);
			Music.music.play();
			Music.music.onStop.add(function () {
				if (gamePaused)
					return;
				if (Music.enableMisic)
					Music.music.play()
			}, this)
		}
	}
};
var Bouton = function (game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame) {
	Phaser.Button.call(this, game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame);
	var h = this.height;
	var w = this.width;
	this.anchor.setTo(.5, .5);
	this.onInputDown.add(function () {
		this.anchor.setTo(.5, .5);
		this.scale.setTo(1.3, 1.3);
		if (this.txt) {
			game.world.bringToTop(this.txt)
		}
		if (Music.enableMisic)
			Music.sounds.play("button_click")
	}, this);
	this.onInputUp.add(function () {
		this.anchor.setTo(.5, .5);
		this.scale.setTo(1, 1);
		if (this.txt) {
			game.world.bringToTop(this.txt);
			this.txt.scale.setTo(1, 1)
		}
	}, this);
	this.onInputOver.add(function () {
		if (this.key != "buttonPlay")
			game.add.tween(this.scale).to({
				x : 1,
				y : 1.2
			}, 400, Phaser.Easing.Quadratic.InOut, true).to({
				x : 1,
				y : .8
			}, 400, Phaser.Easing.Quadratic.InOut, true).to({
				x : 1,
				y : 1
			}, 400, Phaser.Easing.Quadratic.InOut, true);
		if (this.txt) {
			game.add.tween(this.txt.scale).to({
				y : 1.2
			}, 400, Phaser.Easing.Quadratic.InOut, true).to({
				y : .8
			}, 400, Phaser.Easing.Quadratic.InOut, true).to({
				y : 1
			}, 400, Phaser.Easing.Quadratic.InOut, true)
		}
	}, this)
};
Bouton.prototype = Object.create(Phaser.Button.prototype);
Bouton.prototype.constructor = Bouton;
blockway.Menu = function (game) {
	this.musicbnt = null;
	this.bnt_play = null;
	this.bnt_credits = null;
	this.logo_black = null;
	this.tween_black = null;
	this.logo_away = null;
	this.tween_away = null;
	this.tween_play = null;
	this.group_bubbles = null
};
blockway.Menu.prototype = {
	
	create : function () {
		this.add.image(0, 0, "bgMenu");
		this.logo_black = game.add.sprite(-200, 80, "logo_black");
		this.logo_black.anchor.setTo(.5, .5);
		this.logo_away = game.add.sprite(game.width + 150, 210, "logo_away");
		this.logo_away.anchor.setTo(.5, .5);
		this.tween_black = game.add.tween(this.logo_black.scale).to({
				x : 1.7,
				y : 1.1
			}, 600, Phaser.Easing.Quadratic.InOut, false, 2e3).to({
				x : .9,
				y : .5
			}, 600, Phaser.Easing.Quadratic.InOut, false).to({
				x : 1,
				y : 1
			}, 600, Phaser.Easing.Quadratic.InOut, false);
		this.tween_black.loop();
		this.tween_black.start();
		this.tween_away = game.add.tween(this.logo_away.scale).to({
				x : 1.1,
				y : 1.7
			}, 600, Phaser.Easing.Quadratic.InOut, false, 2e3).to({
				x : .5,
				y : .9
			}, 600, Phaser.Easing.Quadratic.InOut, false).to({
				x : 1,
				y : 1
			}, 600, Phaser.Easing.Quadratic.InOut, false);
		this.tween_away.loop();
		this.tween_away.start();
		this.bnt_play = new Bouton(this.game, 0, 370, "buttonPlay", this.actionPlay, this);
		this.bnt_play.x = game.width / 2;
		this.bnt_play.scale.setTo(.2, .2);
		this.world.add(this.bnt_play);
		this.tween_play = game.add.tween(this.bnt_play.scale).to({
				x : 1.1,
				y : 1.1
			}, 800, Phaser.Easing.Quadratic.InOut, false).to({
				x : .9,
				y : .9
			}, 800, Phaser.Easing.Quadratic.InOut, false);
		this.tween_play.loop();
		this.tween_play.start();
		this.musicbnt = new Bouton(this.game, -130, 755, "musicbnt", this.actionMusic, this);
		this.world.add(this.musicbnt);
		this.bnt_credits = new Bouton(this.game, -5, 800, "creditsBnt", this.funccredits, this);
		this.world.add(this.bnt_credits);
//		this.world.add(new Bouton(this.game, 40 * resolution, 310 * resolution, "moregames", this.herf, this, 0, 0));
//		this.world.add(new Bouton(this.game, game.width - 60 * resolution, game.height - 30 * resolution, "zibbo_logo", this.herf, this, 0, 0));
		if (Music.enableMisic) {
			this.musicbnt.loadTexture("musicbnt")
		} else {
			this.musicbnt.loadTexture("Mutemusicbnt")
		}
		this.group_bubbles = game.add.group();
		for (var i = 0; i < 8; i++) {
			var bubble = new Phaser.Image(this.game, Math.random() * game.width, 250, "bubble");
			bubble.alive = true;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5;
			this.group_bubbles.add(bubble)
		}
	},
	actionMusic : function () {
		Music.enableMisic = !Music.enableMisic;
		if (Music.enableMisic) {
			this.musicbnt.loadTexture("musicbnt");
			Music.music.resume();
			this.sound.unsetMute()
		} else {
			this.musicbnt.loadTexture("Mutemusicbnt");
			Music.music.pause();
			this.sound.setMute()
		}
	},
	actionPlay : function () {
		this.game.state.start("levels", true)
	},
	funccredits : function () {
		this.game.state.start("credits", true)
	},
	startBounceTween : function () {
		ball.y = 0;
		var bounce = game.add.tween(test);
		bounce.to({
			y : game.world.height - ball.height
		}, 1e3 + Math.random() * 3e3, Phaser.Easing.Bounce.In);
		bounce.onComplete.add(startBounceTween, this);
		bounce.start()
	},
	update : function () {
		if (this.bnt_credits.x <= 185) {
			this.bnt_credits.x += 5
		}
		if (this.musicbnt.x <= 70) {
			this.musicbnt.x += 5
		}
		if (this.bnt_play.scale.x < 1 || this.bnt_play.scale.y < 1) {
			this.bnt_play.scale.x += .03;
			this.bnt_play.scale.y += .03
		}
		if (this.logo_black.x < 320)
			this.logo_black.x += 10;
		if (this.logo_away.x > 337)
			this.logo_away.x -= 10;
		this.group_bubbles.forEachAlive(this.monter_bubbles, this)
	},
	monter_bubbles : function (bubble) {
		bubble.y -= bubble.vitesse;
		if (bubble.y <= game.height / 2 - bubble.vitesse * 100) {
			bubble.x = Math.random() * game.width;
			bubble.y = game.height;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5
		}
	}
};
blockway.Credits = function (game) {
	this.bnt_home = null
};
blockway.Credits.prototype = {
	create : function () {
		this.add.image(0, 0, "bgPlay");
		this.add.image(0, 0, "bgPause");
		this.add.bitmapText(50, 170, "fontb01", "Design and Programming:", 55);
		this.add.bitmapText(140, 210, "font", "Cirta Games", 100);
		this.add.bitmapText(205, 330, "fontb01", "Contact us:", 50);
		this.add.bitmapText(110, 370, "font", "cirta-games.com", 80);
		this.add.bitmapText(70, 480, "fontb01", "Ali Kolai\nOussama Beddiaf\nMohamed Deghdegh\nLatreche Imed Eddine\nMenasria Mohamed Lamine", 50).align = "center";
		this.add.bitmapText(30, 800, "fontb01", "Graphics By:\n Dayman Games", 45).align = "center";
		this.add.bitmapText(350, 800, "fontb01", "Music By:\n Roald Strauss", 45).align = "center";
		this.bnt_home = new Bouton(this.game, 0, 90, "homebnt", function () {
				this.game.state.start("menu")
			}, this);
		this.world.add(this.bnt_home)
	},
	update : function () {
		if (this.bnt_home.x <= 310) {
			this.bnt_home.x += 10
		}
	}
};
blockway.Levels = function (game) {
	this.groupBnt = null;
	this.Groupe_courant = null;
	this.All_buttons = [];
	this.Gr_buttons = [];
	this.translatTween = {
		y : 0
	};
	this.velocityY = 0;
	this.tween = null;
	this.mouve = false;
	this.isDown = null;
	this.MaxNbrBnt = null;
	this.bnt_home = null;
	this.group_bubbles = null
};
blockway.Levels.prototype = {
	create : function () {
		this.initProprties();
		this.BntColone = 3;
		this.BntLine = 3;
		this.AnimationLeftRight = true;
		this.vectPose = [];
		var debutX = 134;
		var debutY = 270;
		var espaceX = 18;
		var espaceY = 18;
		var widthBnt = 170;
		var heightnbt = 150;
		var maxX = this.BntColone * (widthBnt + espaceX) + debutX;
		var dx = widthBnt + espaceX;
		var maxY = this.BntLine * (heightnbt + espaceY) + debutY;
		var dy = heightnbt + espaceY;
		for (var y = debutY; y < maxY; y += dy)
			for (var x = debutX; x < maxX; x += dx)
				this.vectPose.push({
					x : x,
					y : y
				});
		this.BntTotale = this.BntColone * this.BntLine;
		this.mouve = false;
		this.add.image(0, 0, "bgLevel");
		this.game.input.maxPointers = 1;
		this.groupBnt = this.game.add.group();
		var framebnt;
		this.MaxNbrBnt = nombre_levels;
		this.Groupe_courant = Math.floor((play.numLevel - 1) / this.BntTotale);
		var numtxt = 0;
		while (numtxt < this.BntTotale * 2) {
			numtxt++;
			var button = new Bouton(this.game, 0, 0, "levelbnt", null, null, framebnt, framebnt);
			button.onInputUp.add(function () {
				if (this.txt.visible) {
					play.numLevel = parseInt(this.txt.text);
					this.game.state.start("play", true)
				}
			}, button);
			button.txt = new Phaser.BitmapText(this.game, 0, 0, "fontb01", numtxt + this.Groupe_courant * this.BntTotale + "", 100);
			button.txt.align = "center";
			button.kill();
			button.txt.visible = false;
			this.groupBnt.add(button);
			this.groupBnt.add(button.txt);
			this.Gr_buttons.push(button);
			if (numtxt % this.BntTotale == 0) {
				this.All_buttons.push(this.Gr_buttons);
				this.Gr_buttons = []
			}
		}
		this.positionnreBnts(this.All_buttons[0], 0, this.Groupe_courant);
		jaurje = game.add.sprite(167, 712, "jaurje");
		cropBar = {
			x : 0,
			y : 0,
			width : (this.Groupe_courant + 1) * 64,
			height : 76
		};
		jaurje.crop(cropBar);
		var tt = new Phaser.BitmapText(this.game, 100 * resolution, 10 * resolution, "fontb01", text.levelsSelection, 55);
		game.world.add(tt);
		this.bnt_home = new Bouton(this.game, 320, 440 * resolution, "homebnt", this.funcHome, this, 0, 0);
		this.world.add(this.bnt_home);
		this.bntPrecedent = new Bouton(this.game, 65 * resolution, 430 * resolution, "up", this.funcGrPrecedent, this, 1, 1);
		this.world.add(this.bntPrecedent);
		this.bntSuivant = new Bouton(this.game, 260 * resolution, 430 * resolution, "down", this.funcGrSuivant, this, 1, 1);
		this.world.add(this.bntSuivant);
		this.group_bubbles = game.add.group();
		for (var i = 0; i < 8; i++) {
			var bubble = new Phaser.Image(this.game, Math.random() * game.width, 250, "bubble");
			bubble.alive = true;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5;
			this.group_bubbles.add(bubble)
		}
//		this.world.add(new Bouton(this.game, game.width - 60 * resolution, game.height - 20 * resolution, "zibbo_logo",  this.herf, this, 0, 0))
	},
	initProprties : function () {
		this.groupBnt = null;
		this.All_buttons = [];
		this.Gr_buttons = [];
		this.translatTween = {
			y : 0
		};
		this.velocityY = 0;
		this.tween = null;
		this.mouve = false;
		this.isDown = null
	},
	funcHome : function () {
		this.game.state.start("menu", true)
	},
	positionnreBnts : function (groupBnts, tr, numG) {
		var endBnt = false;
		var debutX = 50;
		var debutY = 50;
		var x = debutX;
		var y = debutY;
		var dx = 65;
		var dy = 75;
		for (var jj = 0; jj < groupBnts.length; jj++) {
			if (endBnt) {
				groupBnts[jj].kill();
				groupBnts[jj].txt.visible = false;
				continue
			}
			if (!groupBnts[jj].exists)
				groupBnts[jj].revive();
			groupBnts[jj].x = this.vectPose[jj].x;
			groupBnts[jj].y = this.vectPose[jj].y;
			if (this.AnimationLeftRight)
				groupBnts[jj].x += tr;
			else
				groupBnts[jj].y += tr;
			if (numG * this.BntTotale + jj <= level) {
				framebnt = 0;
				groupBnts[jj].txt.visible = true
			} else {
				framebnt = 1;
				groupBnts[jj].txt.visible = false
			}
			var numtext = numG * this.BntTotale + jj + 1;
			groupBnts[jj].txt.setText(numtext + "");
			if (numtext < 10)
				groupBnts[jj].txt.x = groupBnts[jj].x - groupBnts[jj].width / 4 + 13 * resolution;
			else
				groupBnts[jj].txt.x = groupBnts[jj].x - groupBnts[jj].width / 4 + 2 * resolution;
			groupBnts[jj].txt.y = groupBnts[jj].y - groupBnts[jj].height / 4 - 22 * resolution;
			groupBnts[jj].frame = framebnt;
			if (numtext == this.MaxNbrBnt)
				endBnt = true
		}
	},
	funcGrSuivant : function () {
		if (!this.mouve && this.Groupe_courant < Math.ceil(this.MaxNbrBnt / this.BntTotale) - 1) {
			this.Groupe_courant++;
			cropBar.width = (this.Groupe_courant + 1) * 64;
			jaurje.crop(cropBar);
			this.setAnimation();
			this.isDown = true
		}
	},
	setAnimation : function () {
		this.mouve = true;
		if (this.AnimationLeftRight)
			this.translatTween.y = this.world.width;
		else
			this.translatTween.y = this.world.height;
		this.velocityY = -800 * resolution
	},
	funcGrPrecedent : function () {
		if (!this.mouve && this.Groupe_courant > 0) {
			this.Groupe_courant--;
			cropBar.width = (this.Groupe_courant + 1) * 64;
			jaurje.crop(cropBar);
			this.setAnimation();
			this.isDown = false
		}
	},
	killBnt : function (obj) {
		obj.kill();
		obj.txt.visible = false
	},
	animation : function () {
		this.translatTween.y += this.velocityY * this.game.time.elapsed * .001;
		if (this.isDown) {
			this.positionnreBnts(this.All_buttons[0], this.translatTween.y, this.Groupe_courant);
			this.positionnreBnts(this.All_buttons[1], this.translatTween.y - this.world.height, this.Groupe_courant - 1)
		} else {
			this.positionnreBnts(this.All_buttons[0], this.translatTween.y * -1, this.Groupe_courant);
			this.positionnreBnts(this.All_buttons[1], this.translatTween.y * -1 + this.world.height, this.Groupe_courant + 1)
		}
		if (this.translatTween.y <= 0) {
			this.positionnreBnts(this.All_buttons[0], 0, this.Groupe_courant);
			this.translatTween.y = 0;
			this.All_buttons[1].forEach(this.killBnt, this);
			this.mouve = false
		}
	},
	update : function () {
		if (this.mouve) {
			this.animation()
		}
		this.group_bubbles.forEachAlive(this.monter_bubbles, this)
	},
	monter_bubbles : function (bubble) {
		bubble.y -= bubble.vitesse;
		if (bubble.y <= game.height / 2 - bubble.vitesse * 100) {
			bubble.x = Math.random() * game.width;
			bubble.y = game.height;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5
		}
	}
};
blockway.Play = function (game) {
	this.numLevel = null;
	this.gameOver = false;
	this.next_level = null;
	this.bnt_pause = null;
	this.bnt_actualiser = null;
	this.bnt_replay = null;
	this.bnt_moreg = null;
	this.bgPause = null;
	this.container_pause = null;
	this.start = null;
	this.groupPause = null;
	this.groupNexLevel = null;
	this.txt_numLevel = null;
	this.textPause = null;
	this.textPauseLevel = null;
	this.etoilEnd1 = null;
	this.timerEndLevel = null;
	this.timerEndLevelAndLose = null;
	this.istimerEndLevel = null;
	this.istimerEndLevelAndLose = null;
	this.stateMusic = null;
	this.Xmouse;
	this.Ymouse;
	this.Xmouse2;
	this.Ymouse2;
	this.test_player;
	this.test_player2;
	this.map = null;
	this.mat;
	this.deraction = null;
	this.align = null;
	this.timeDebutSwip;
	this.pausePlay = false;
	this.testTeleportation = null;
	this.player = null;
	this.player2 = null;
	this.telepor2 = null;
	this.groupEffetrouge = null;
	this.groupEffetvert = null;
	this.groupObj = null;
	this.DebuSwap = null;
	this.mouve = null;
	this.case  = null;
	this.tuto = null;
	this.tween_pause = null;
	this.tween_win = null;
	this.group_bubbles = null;
	this.clique = null;
	this.debug_key_u = null;
	this.debug_key_d = null;
	this.debug_key_r = null;
	this.debug_key_l = null
};
blockway.Play.prototype = {
	create : function () {
		this.initAtributs();
		game.add.image(0, 0, "bgPlay");
		if (this.numLevel > nombre_levels) {
			this.createCongratulations();
			return
		}
		this.tuto = null;
		if (this.numLevel === 1) {
			this.tuto = this.game.add.bitmapText(80, 200, "font", text.texteTuto1, 57);
			this.tuto.align = "center";
			this.hand = this.game.add.sprite(280, 680, "h");
			game.physics.enable(this.hand, Phaser.Physics.ARCADE);
			this.hand.body.velocity.x = 80
		} else if (this.numLevel === 9) {
			this.tuto = this.game.add.bitmapText(110, 180, "font", text.texteTuto2, 60);
			this.tuto.align = "center"
		} else if (this.numLevel === 15) {
			this.tuto = this.game.add.bitmapText(90, 200, "font", text.texteTuto3, 60);
			this.tuto.align = "center"
		} else if (this.numLevel === 24) {
			this.tuto = this.game.add.bitmapText(100, 180, "font", text.texteTuto4, 60);
			this.tuto.align = "center"
		} else if (this.numLevel === 25) {
			this.tuto = this.game.add.bitmapText(75, 160, "font", text.texteTuto5, 60);
			this.tuto.align = "center"
		}
		this.map = new Phaser.Tilemap(this.game, "game-levels", 80, 80, 8, 12);
		this.map.currentLayer = this.numLevel - 1;
		this.layer = this.map.createLayer(this.numLevel - 1);
		this.arriver = true;
		poseDebutSwip = {};
		game.inputEnabled = true;
		game.input.useHandCursor = true;
		game.input.onDown.add(this.detecterSwipe, this);
		game.input.onUp.add(this.Deplacer, this);
		this.debug_key_u = game.input.keyboard.addKey(Phaser.Keyboard.UP);
		this.debug_key_d = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
		this.debug_key_r = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
		this.debug_key_l = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
		this.debug_key_u.onDown.add(this.deplacer_U, this);
		this.debug_key_d.onDown.add(this.deplacer_D, this);
		this.debug_key_r.onDown.add(this.deplacer_R, this);
		this.debug_key_l.onDown.add(this.deplacer_L, this);
		this.teleporter_rouge = [];
		this.teleporter_jaune = [];
		this.map.currentLayer = this.numLevel - 1;
		this.actualiser_map();
		this.testTeleportation = false;
		this.cube = game.add.sprite(0, 0, "cube");
		this.telepor2 = game.add.sprite(-400, -400, "cube");
		this.telepor2.animations.add("telepor2", [24, 25, 26, 27, 29]);
		this.cube.animations.add("anim3-3H", [1, 2, 3]);
		this.cube.animations.add("anim3-3L", [2, 1, 0]);
		this.cube.animations.add("anim3-1D", [9, 8, 10]);
		this.cube.animations.add("anim1-3G", [8, 9, 0]);
		this.cube.animations.add("anim3-1G", [6, 5, 4]);
		this.cube.animations.add("anim1-3D", [5, 6, 7]);
		this.cube.animations.add("anim2-2G", [19, 20, 11]);
		this.cube.animations.add("anim2-2D", [20, 19, 21]);
		this.cube.animations.add("anim2-1H", [12, 13, 14]);
		this.cube.animations.add("anim2-1L", [22, 23, 4]);
		this.cube.animations.add("anim1-2H", [17, 16, 15]);
		this.cube.animations.add("anim1-2L", [13, 12, 11]);
		this.cube.animations.add("telepor", [27, 26, 25, 24, 28]);
		this.alignement();
		if (this.align === 1) {
			this.cube.x = this.player.x;
			this.cube.y = this.player.y - 240;
			this.cube.frame = 18
		} else if (this.align === 2) {
			this.cube.x = this.player.x;
			this.cube.y = this.player.y > this.player2.y ? this.player.y - 80 : this.player2.y - 80;
			this.cube.frame = 15
		} else if (this.align === 3) {
			this.cube.x = this.player.x < this.player2.x ? this.player.x : this.player2.x;
			this.cube.y = this.player.y - 240;
			this.cube.frame = 0
		}
		this.group_bubbles = game.add.group();
		for (var i = 0; i < 8; i++) {
			var bubble = new Phaser.Image(this.game, Math.random() * game.width, 250, "bubble");
			bubble.alive = true;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5;
			this.group_bubbles.add(bubble)
		}
//		this.world.add(new Bouton(this.game, game.width / 2, game.height - 30 * resolution, "zibbo_logo",  this.herf, this, 0, 0));
		this.createButtonsPlay();
		this.createPause();
		this.effet_map()
	},
	deplacer_R : function () {
		if (this.istimerEndLevelAndLose || this.istimerEndLevel)
			return;
		if (play.arriver && !play.pausePlay) {
			this.Xmouse = this.player.x + 80;
			this.Ymouse = this.player.y;
			this.Xmouse2 = this.player.x + 160;
			this.Ymouse2 = this.player.y;
			this.deraction = 0;
			if (Music.enableMisic && this.istimerEndLevelAndLose == false)
				Music.sounds.play("block_move");
			this.moveplayer()
		}
	},
	deplacer_L : function () {
		if (this.istimerEndLevelAndLose || this.istimerEndLevel)
			return;
		if (play.arriver && !play.pausePlay) {
			this.Xmouse = this.player.x - 80;
			this.Ymouse = this.player.y;
			this.Xmouse2 = this.player.x - 160;
			this.Ymouse2 = this.player.y;
			this.deraction = 2;
			if (Music.enableMisic && this.istimerEndLevelAndLose == false)
				Music.sounds.play("block_move");
			this.moveplayer()
		}
	},
	deplacer_U : function () {
		if (this.istimerEndLevelAndLose || this.istimerEndLevel)
			return;
		if (play.arriver && !play.pausePlay) {
			this.Xmouse = this.player.x;
			this.Ymouse = this.player.y - 80;
			this.Xmouse2 = this.player.x;
			this.Ymouse2 = this.player.y - 160;
			this.deraction = 3;
			if (Music.enableMisic && this.istimerEndLevelAndLose == false)
				Music.sounds.play("block_move");
			this.moveplayer()
		}
	},
	deplacer_D : function () {
		if (this.istimerEndLevelAndLose || this.istimerEndLevel)
			return;
		if (play.arriver && !play.pausePlay) {
			this.Xmouse = this.player.x;
			this.Ymouse = this.player.y + 80;
			this.Xmouse2 = this.player.x;
			this.Ymouse2 = this.player.y + 160;
			this.deraction = 1;
			if (Music.enableMisic && this.istimerEndLevelAndLose == false)
				Music.sounds.play("block_move");
			this.moveplayer()
		}
	},
	detecter_swipe : function () {
		if (this.istimerEndLevelAndLose || this.istimerEndLevel)
			return;
		if (this.gameOver || this.pausePlay)
			return;
		if (this.arriver) {
			this.time_debut_swip = game.time.now;
			this.debut_swip.x = game.input.activePointer.x;
			this.debut_swip.y = game.input.activePointer.y
		}
	},
	actualiser_map : function () {
		this.mat = [];
		for (var i = 0; i < 12; i++) {
			this.mat[i] = [];
			for (var j = 0; j < 8; j++) {
				test = this.map.getTile(j, i).index;
				this.mat[i][j] = game.add.image(j * 80, i * 80 - 9, "tile2");
				this.mat[i][j].frame = test - 1;
				if (test === 4) {
					this.teleporter_rouge.push({
						x : j * taille,
						y : i * taille
					})
				} else if (test === 5) {
					this.teleporter_jaune.push({
						x : j * taille,
						y : i * taille
					})
				} else if (test === 11) {
					this.player = {
						x : j * 80,
						y : i * 80
					};
					this.mat[i][j].frame = 1
				} else if (test === 12) {
					this.player2 = {
						x : j * 80,
						y : i * 80
					};
					this.mat[i][j].frame = 1
				}
			}
		}
	},
	effet_map : function () {
		this.groupEffetrouge = game.add.group();
		this.groupEffetvert = game.add.group();
		for (var i = 0; i < 12; i++) {
			for (var j = 0; j < 8; j++) {
				test = this.map.getTile(j, i).index;
				if (test === 7 || test === 13) {
					effetR = new Phaser.Sprite(this.game, j * 80 - 10, i * 80 - 30, "effet-buddle");
					effetR.animations.add("animR", [0, 1, 2, 3, 4]);
					effetR.frame = 4;
					effetR.alive = true;
					this.groupEffetrouge.add(effetR)
				} else if (test === 9 || test === 14) {
					effetV = new Phaser.Sprite(this.game, j * 80 - 10, i * 80 - 30, "effet-buddle");
					effetV.animations.add("animV", [0, 1, 2, 3, 4]);
					effetV.frame = 4;
					effetV.alive = true;
					this.groupEffetvert.add(effetV)
				}
			}
		}
	},
	initAtributs : function () {
		this.stateMusic = Music.enableMisic;
		this.timerEndLevel = null;
		this.timerEndLevelAndLose = null;
		this.istimerEndLevel = false;
		this.istimerEndLevelAndLose = false;
		this.gameOver = false;
		this.pausePlay = false;
		this.gameOver = false;
		this.taillecase = 50 * resolution;
		this.DebuSwap = {
			x : 0,
			y : 0
		};
		this.mouve = false;
		this.obj = null;
		this.nbrBut = null
	},
	createButtonsPlay : function () {
		this.bnt_pause = new Bouton(this.game, 640, 870, "pausebnt", this.funcPause, this, 0, 1);
		this.game.world.add(this.bnt_pause);
		this.bnt_actualiser = new Bouton(this.game, 0, 870, "replaybnt", this.funReplay, this, 0, 1);
		this.game.world.add(this.bnt_actualiser);
		this.txt_numLevel = new Phaser.BitmapText(this.game, 210, 15, "font", "Level " + this.numLevel, 104);
		this.game.world.add(this.txt_numLevel)
	},
	game_over : function () {
		this.bnt_pause.visible = false;
		this.bnt_actualiser.visible = false;
		this.txt_numLevel.visible = false;
		this.bgPause.visible = true;
		this.groupPause.forEachAlive(function (obj) {
			obj.visible = true
		}, this);
		this.resumebtn.visible = false;
		this.menubntt.x = this.resumebtn.x + 20 * resolution;
		this.menubntt.y = this.resumebtn.y;
		this.bnt_replay.x = this.bnt_replay.x - 25 * resolution;
		this.bnt_moreg.x = this.bnt_replay.x + 70 * resolution;
		this.textPauseLevel.visible = false;
		this.textPause.setText(text.txtgameover);
		this.textPause.scale.setTo(1.5, 1.5);
		this.textPause.x = 100 * resolution;
		this.textPause.y = 125 * resolution;
		this.tween_pause.loop();
		this.tween_pause.start();
		if (this.tuto)
			this.tuto.visible = false;
		if (this.hand)
			this.hand.visible = false;
		this.pausePlay = true;
	},
	createPause : function () {
		this.bgPause = new Phaser.Sprite(this.game, 0, 0, "bgPause");
		this.bgPause.alive = true;
		this.bgPause.visible = false;
		this.container_pause = new Phaser.Sprite(this.game, 155 * resolution, 250 * resolution, "big_bubble");
		this.container_pause.alive = true;
		this.container_pause.anchor.setTo(.5, .5);
		this.resumebtn = new Bouton(this.game, 70 * resolution, 370 * resolution, "resumebnt", this.funcResume, this, 0, 1);
		this.resumebtn.alive = true;
		this.menubntt = new Bouton(this.game, this.resumebtn.x + 60 * resolution, 370 * resolution, "levelsbnt", this.funcBack, this, 0, 1);
		this.menubntt.alive = true;
		this.bnt_replay = new Bouton(this.game, this.menubntt.x + 60 * resolution, 370 * resolution, "replaybnt", this.funReplay, this, 1, 1);
		this.bnt_replay.alive = true;
		this.world.add(this.bgPause);
    	this.bnt_moreg = new Bouton(this.game, this.bnt_replay.x + 60 * resolution, 370 * resolution, "moregames", this.herf, this, 0, 0);
		this.bnt_moreg.alive = true;
		this.groupPause = this.game.add.group();
		this.groupPause.add(this.container_pause);
		this.groupPause.add(this.resumebtn);
		this.groupPause.add(this.menubntt);
		this.groupPause.add(this.bnt_replay);
		this.groupPause.add(this.bnt_moreg);
		this.textPause = new Phaser.BitmapText(this.game, 120, 320, "font", text.txtPause, 100);
		this.textPause.align = "center";
		this.textPause.alive = true;
		this.textPauseLevel = new Phaser.BitmapText(this.game, 210, 430, "font", text.txtlevel + " " + this.numLevel, 100);
		this.textPauseLevel.alive = true;
		this.groupPause.add(this.textPause);
		this.groupPause.add(this.textPauseLevel);
//		var logo_spil = new Bouton(this.game, 165 * resolution, 140 * resolution, "zibbo_logo",  this.herf, this, 0, 0);
//		logo_spil.alive = true;
//		this.groupPause.add(logo_spil);
		this.groupPause.forEachAlive(function (obj) {
			obj.visible = false
		}, this);
		this.tween_pause = game.add.tween(this.groupPause).to({
				y : 20
			}, 1e3, Phaser.Easing.Quadratic.InOut).to({
				y : -20
			}, 1e3, Phaser.Easing.Quadratic.InOut)
	},
	createCongratulations : function () {
		this.numLevel = nombre_levels;
		level = sauvegarde.length - 1;
		Save_setItem("block_level", sauvegarde.length - 1);
		this.game.add.sprite(0, 0, "bgPause");
		this.game.add.sprite(0, 180, "big_bubble");
		var b = new Bouton(this.game, 155 * resolution, 730, "resumebnt", function () {
				this.game.state.start("menu")
			}, this, 1, 1);
	var moreg = new Bouton(this.game, b.x + 70 * resolution, 350 * resolution, "moregames",  this.herf, this, 0, 0);
		var tt = new Phaser.BitmapText(this.game, 130, 335, "font", text.textCongratulations, 82);
		tt.align = "center";
//		this.world.add(new Bouton(this.game, 165 * resolution, 120 * resolution, "zibbo_logo",  this.herf, this, 0, 0));
		this.world.add(tt);
		this.world.add(b);
		this.world.add(moreg);
		if (this.tuto)
			this.tuto.visible = false;
		if (this.hand)
			this.hand.visible = false
	},
	createNextLevel : function () {
		this.gameOver = true;
        console.log(level);
        var insertAds=setTimeout("mobConfig.stop()",500);
        
		this.bnt_pause.visible = false;
		this.bnt_actualiser.visible = false;
		this.txt_numLevel.visible = false;
		this.bgPause.visible = true;
		this.groupNexLevel = this.game.add.group();
		this.next_level = new Bouton(this.game, 70 * resolution, 365 * resolution, "resumebnt", this.funcnextlevel, this, 1, 1);
		this.etoilEnd1 = new Phaser.Sprite(this.game, 50 * resolution, 170 * resolution, "start");
		this.etoilEnd1.alpha = 0;
		this.groupNexLevel.add(this.etoilEnd1);
		this.world.add(this.bgPause);
		this.groupNexLevel.add(this.container_pause);
		this.groupNexLevel.add(this.next_level);
		this.groupNexLevel.add(new Bouton(this.game, this.bnt_replay.x + 60 * resolution, 365 * resolution, "moregames", this.herf, this, 0, 0));
		this.groupNexLevel.add(this.menubntt);
		this.groupNexLevel.add(this.bnt_replay);
//		this.groupNexLevel.add(new Bouton(this.game, 165 * resolution, 140 * resolution, "zibbo_logo",  this.herf, this, 0, 0));
		var tween1 = this.add.tween(this.etoilEnd1).to({
				y : this.etoilEnd1.y - 150 * resolution
			}, 500, Phaser.Easing.Linear.None);
		tween1.onComplete.add(this.firstTween, this);
		tween1.start();
		var tt;
		tt = new Phaser.BitmapText(this.game, 160, 170 * resolution, "font", text.youwin, 130);
		this.groupNexLevel.add(tt);
		this.groupNexLevel.forEachAlive(function (obj) {
			obj.visible = true
		}, this);
		this.tween_win = game.add.tween(this.groupNexLevel).to({
				y : 20
			}, 1e3, Phaser.Easing.Quadratic.InOut).to({
				y : -20
			}, 1e3, Phaser.Easing.Quadratic.InOut);
		this.tween_win.loop();
		this.tween_win.start();
		if (this.tuto)
			this.tuto.visible = false;
		if (this.hand)
			this.hand.visible = false;
		this.pausePlay = true
	},
	firstTween : function () {
		this.etoilEnd1.bringToTop();
		var tween2 = this.add.tween(this.etoilEnd1).to({
				y : 170 * resolution
			}, 800, Phaser.Easing.Bounce.Out);
		tween2.start()
	},
	Spil_pause : function () {
		if (play.stateMusic) {
			Music.enableMisic = false;
			Music.music.pause()
		}
		this.pausePlay = true
	},
	Spil_resume : function () {
		if (play.stateMusic) {
			Music.enableMisic = true;
			Music.music.resume()
		}
		this.pausePlay = false
	},
	funcnextlevel : function () {
		if (this.numLevel <= nombre_levels) {
			this.numLevel++
		}
		this.pausePlay = false;
		this.game.state.start("play")
	},
	cacherPause : function () {
		this.bnt_pause.visible = false;
		this.bnt_actualiser.visible = false;
		this.txt_numLevel.visible = false;
		this.bgPause.visible = true;
		this.groupPause.forEachAlive(function (obj) {
			obj.visible = true
		}, this)
	},
	funcPause : function () {
		if (this.istimerEndLevel || this.istimerEndLevelAndLose)
			return;
		if (this.stateMusic) {
			Music.enableMisic = false;
			Music.music.pause();
			this.sound.setMute()
		}
		this.cacherPause();
		this.pausePlay = true;
		this.tween_pause.loop();
		this.tween_pause.start();
		if (this.tuto)
			this.tuto.visible = false;
		if (this.hand)
			this.hand.visible = false
	},
	funcResume : function () {
		if (this.stateMusic) {
			Music.enableMisic = true;
			Music.music.resume();
			this.sound.unsetMute()
		}
		this.afficherPause();
		this.pausePlay = false;
		if (this.tuto)
			this.tuto.visible = true;
		if (this.hand)
			this.hand.visible = true
	},
	afficherPause : function () {
		this.bnt_pause.visible = true;
		this.bnt_actualiser.visible = true;
		this.txt_numLevel.visible = true;
		this.bgPause.visible = false;
		this.groupPause.forEachAlive(function (obj) {
			obj.visible = false
		}, this)
	},
	funReplay : function () {
		if (this.stateMusic && this.pausePlay) {
			Music.enableMisic = true;
			Music.music.resume();
			this.sound.unsetMute()
		}
		this.pausePlay = false;
		this.game.state.start("play", true)
	},
	funcBack : function () {
		if (this.stateMusic) {
			Music.enableMisic = true;
			Music.music.resume();
			this.sound.unsetMute()
		}
		this.pausePlay = false;
		this.game.state.start("levels", true)
	},
    herf:function(){
        window.location.href=mobConfig.mainpage;
    },
	calculer_etoiles : function () {},
	Fin_level : function () {
		play.createNextLevel();
		if (this.numLevel > level) {
			level = this.numLevel;
			Save_setItem("block_level", level)
		}
		if (this.calculer_etoiles() > sauvegarde[this.numLevel - 1].numetoile) {
			sauvegarde[this.numLevel - 1].numetoile = this.calculer_etoiles();
			save_ecrit()
		}
	},
	TestElapsedMusic : function () {
		if (game.time.elapsed > 300) {
			if (this.stateMusic) {
				Music.enableMisic = false;
				Music.music.pause();
				this.sound.setMute()
			}
			return
		} else if (!this.pausePlay) {
			if (this.stateMusic) {
				Music.enableMisic = true;
				Music.music.resume();
				this.sound.unsetMute()
			}
		}
	},
	update : function () {
		this.TestElapsedMusic();
		if (this.gameOver)
			return;
		if (this.bnt_actualiser.x <= 80) {
			this.bnt_actualiser.x += 5
		}
		if (this.bnt_pause.x >= 560) {
			this.bnt_pause.x -= 5
		}
		if (this.istimerEndLevel) {
			this.timerEndLevel -= this.game.time.elapsed;
			if (this.timerEndLevel < 0) {
				this.istimerEndLevel = false;
				this.Fin_level()
			}
			return
		}
		if (this.istimerEndLevelAndLose) {
			this.timerEndLevelAndLose -= this.game.time.elapsed;
			if (this.timerEndLevelAndLose < 0) {
				if (Music.enableMisic)
					Music.sounds.play("naufrage");
				this.game_over();
				this.istimerEndLevelAndLose = false
			}
			return
		}
		if (this.numLevel == 1 && this.hand != null) {
			if (this.hand.x >= 370) {
				this.hand.x = 260
			}
		}
		if (this.testTeleportation && game.time.elapsedSince(this.timeDebutSwip) > 500) {
			this.timeDebutSwip = game.time.now;
			this.testTeleportation = false;
			play.arriver = true;
			this.teleportation()
		}
		this.group_bubbles.forEachAlive(this.monter_bubbles, this)
	},
	monter_bubbles : function (bubble) {
		bubble.y -= bubble.vitesse;
		if (bubble.y <= game.height / 2 - bubble.vitesse * 100) {
			bubble.x = Math.random() * game.width;
			bubble.y = game.height;
			var scale_val = Math.random() * .9 + .1;
			bubble.scale.setTo(scale_val, scale_val);
			bubble.vitesse = Math.random() * 2.5 + .5
		}
	},
	detecterSwipe : function () {
		if (this.pausePlay)
			return;
		if (play.arriver) {
			this.timeDebutSwip = game.time.now;
			poseDebutSwip.x = game.input.activePointer.x;
			poseDebutSwip.y = game.input.activePointer.y
		}
	},
	Deplacer : function () {
		if (this.pausePlay)
			return;
		if (!game.stage.scale.incorrectOrientation) {
			var dx = game.input.activePointer.x - poseDebutSwip.x;
			var dy = game.input.activePointer.y - poseDebutSwip.y;
			var dist = Math.sqrt(dx * dx + dy * dy);
			if (game.time.elapsedSince(this.timeDebutSwip) < 500 && dist > dist_swipe) {
				var anglevect = game.physics.arcade.angleBetween(poseDebutSwip, game.input.activePointer);
				anglevect = anglevect * 180 / Math.PI;
				if (anglevect < 0)
					anglevect += 360;
				if (anglevect <= 45 || anglevect > 315) {
					this.Xmouse = this.player.x + 80;
					this.Ymouse = this.player.y;
					this.Xmouse2 = this.player.x + 160;
					this.Ymouse2 = this.player.y;
					this.deraction = 0
				} else if (anglevect <= 225 && anglevect > 135) {
					this.Xmouse = this.player.x - 80;
					this.Ymouse = this.player.y;
					this.Xmouse2 = this.player.x - 160;
					this.Ymouse2 = this.player.y;
					this.deraction = 2
				} else if (anglevect <= 315 && anglevect > 225) {
					this.Xmouse = this.player.x;
					this.Ymouse = this.player.y - 80;
					this.Xmouse2 = this.player.x;
					this.Ymouse2 = this.player.y - 160;
					this.deraction = 3
				} else if (anglevect <= 135 && anglevect > 45) {
					this.Xmouse = this.player.x;
					this.Ymouse = this.player.y + 80;
					this.Xmouse2 = this.player.x;
					this.Ymouse2 = this.player.y + 160;
					this.deraction = 1
				}
				if (Music.enableMisic && this.istimerEndLevelAndLose == false)
					Music.sounds.play("block_move");
				this.moveplayer()
			}
		}
	},
	alignement : function () {
		if (play.player.x === play.player2.x && play.player.y === play.player2.y) {
			this.align = 1
		} else if (play.player.x === play.player2.x) {
			this.align = 2
		} else if (play.player.y === play.player2.y) {
			this.align = 3
		}
	},
	teleportation : function () {
		this.telepor2.x = play.player.x - 80;
		this.telepor2.y = play.player.y - 160;
		this.telepor2.animations.play("telepor2", 8);
		if (play.test_player === 3) {
			if (play.player.x === play.teleporter_rouge[0].x && play.player.y === play.teleporter_rouge[0].y) {
				play.cube.x = play.player.x = play.player2.x = play.teleporter_rouge[1].x;
				play.cube.y = play.player.y = play.player2.y = play.teleporter_rouge[1].y
			} else {
				play.cube.x = play.player.x = play.player2.x = play.teleporter_rouge[0].x;
				play.cube.y = play.player.y = play.player2.y = play.teleporter_rouge[0].y
			}
		} else if (play.test_player === 4) {
			if (play.player.x === play.teleporter_jaune[0].x && play.player.y === play.teleporter_jaune[0].y) {
				play.cube.x = play.player.x = play.player2.x = play.teleporter_jaune[1].x;
				play.cube.y = play.player.y = play.player2.y = play.teleporter_jaune[1].y
			} else {
				play.cube.x = play.player.x = play.player2.x = play.teleporter_jaune[0].x;
				play.cube.y = play.player.y = play.player2.y = play.teleporter_jaune[0].y
			}
		}
		play.cube.y -= 160;
		play.cube.x -= 80;
		play.cube.animations.play("telepor", 8);
		if (Music.enableMisic)
			Music.sounds.play("teleportation")
	},
	finDeplacer : function () {
		if (play.player.x < 0 || play.player.x >= 640 || play.player2.x < 0 || play.player2.x >= 640) {
			this.timerEndLevelAndLose = 500;
			this.istimerEndLevelAndLose = true
		}
		if (play.test_player2 === 0 || play.test_player2 === 6 || play.test_player2 === 8 || play.test_player === 0 || play.test_player === 6 || play.test_player === 8) {
			this.timerEndLevelAndLose = 500;
			this.istimerEndLevelAndLose = true
		} else if (play.test_player === 5 || play.test_player2 === 5) {
			play.appliquerBouton(1)
		}
		this.arriver = true;
		if (this.align === 1) {
			if (play.test_player === 9) {
				this.timerEndLevel = 800;
				this.istimerEndLevel = true;
				if (Music.enableMisic)
					Music.sounds.play("win")
			} else if (play.test_player2 === 7) {
				play.appliquerBouton(2)
			} else if (play.test_player === 3 || play.test_player === 4) {
				this.arriver = false;
				play.testTeleportation = true;
				this.timeDebutSwip = game.time.now
			} else if (play.test_player === 2) {
				this.timerEndLevelAndLose = 500;
				this.istimerEndLevelAndLose = true
			}
		}
	},
	moveplayer : function () {
		if (this.align === 1) {
			switch (play.deraction) {
			case 0:
				play.cube.x = play.player2.x;
				play.cube.y = play.player2.y - 240;
				play.cube.animations.play("anim1-3D", 8);
				break;
			case 1:
				play.cube.x = play.player2.x;
				play.cube.y = play.player2.y - 80;
				play.cube.animations.play("anim1-2L", 8);
				break;
			case 2:
				play.cube.x = play.player2.x - 160;
				play.cube.y = play.player2.y - 240;
				play.cube.animations.play("anim1-3G", 8);
				break;
			case 3:
				play.cube.x = play.player2.x;
				play.cube.y = play.player2.y - 160;
				play.cube.animations.play("anim1-2H", 8);
				break
			}
			play.player.x = play.Xmouse;
			play.player.y = play.Ymouse;
			play.player2.x = play.Xmouse2;
			play.player2.y = play.Ymouse2
		} else if (this.align === 3) {
			if (play.deraction === 1) {
				play.cube.x = play.player2.x < play.player.x ? play.player2.x : play.player.x;
				play.cube.y = play.player.y - 160;
				play.cube.animations.play("anim3-3L", 8);
				play.player.y = play.player2.y = play.Ymouse
			} else if (play.deraction === 3) {
				play.cube.x = play.player2.x < play.player.x ? play.player2.x : play.player.x;
				play.cube.y = play.player.y - 240;
				play.cube.animations.play("anim3-3H", 8);
				play.player.y = play.player2.y = play.Ymouse
			} else if (play.deraction === 0) {
				play.player.x = play.player2.x = play.player2.x > play.player.x ? play.player2.x + 80 : play.player.x + 80;
				play.cube.x = play.player.x - 160;
				play.cube.y = play.player.y - 240;
				play.cube.animations.play("anim3-1D", 8)
			} else if (play.deraction === 2) {
				play.player.x = play.player2.x = play.player2.x < play.player.x ? play.player2.x - 80 : play.player.x - 80;
				play.cube.x = play.player.x;
				play.cube.y = play.player.y - 240;
				play.cube.animations.play("anim3-1G", 8)
			}
		} else if (this.align === 2) {
			if (play.deraction === 0) {
				play.cube.y = play.player2.y < play.player.y ? play.player2.y - 160 : play.player.y - 160;
				play.cube.x = play.player.x;
				play.cube.animations.play("anim2-2D", 8);
				play.player.x = play.player2.x = play.Xmouse
			} else if (play.deraction === 2) {
				play.cube.y = play.player2.y < play.player.y ? play.player2.y - 160 : play.player.y - 160;
				play.cube.x = play.player.x - 80;
				play.cube.animations.play("anim2-2G", 8);
				play.player.x = play.player2.x = play.Xmouse
			} else if (play.deraction === 1) {
				play.player.y = play.player2.y = play.player2.y > play.player.y ? play.player2.y + 80 : play.player.y + 80;
				play.cube.x = play.player.x;
				play.cube.y = play.player.y - 240;
				play.cube.animations.play("anim2-1L", 8)
			} else if (play.deraction === 3) {
				play.player.y = play.player2.y = play.player2.y < play.player.y ? play.player2.y - 80 : play.player.y - 80;
				play.cube.x = play.player.x;
				play.cube.y = play.player.y - 80;
				play.cube.animations.play("anim2-1H", 8)
			}
		}
		if (play.player.y / 80 < 12 && play.player.y >= 0 && play.player.x / 80 < 8 && play.player.x >= 0) {
			play.test_player = play.mat[play.player.y / 80][play.player.x / 80].frame
		} else {
			play.test_player = 0
		}
		if (play.player2.y / 80 < 12 && play.player2.y >= 0 && play.player2.x / 80 < 8 && play.player2.x >= 0) {
			play.test_player2 = play.mat[play.player2.y / 80][play.player2.x / 80].frame
		} else {
			play.test_player = 0
		}
		play.alignement();
		play.finDeplacer()
	},
	appliquerBouton : function (type) {
		for (var i = 0; i < 12; i++) {
			for (var j = 0; j < 8; j++) {
				var test = play.mat[i][j].frame;
				if (type === 1) {
					if (test === 6) {
						play.mat[i][j].frame = 12
					} else if (test === 12) {
						play.mat[i][j].frame = 6
					}
				} else if (type === 2) {
					if (test === 8) {
						play.mat[i][j].frame = 13
					} else if (test === 13) {
						play.mat[i][j].frame = 8
					}
				}
			}
		}
		if (type === 1) {
			play.groupEffetrouge.forEachAlive(function (obj) {
				obj.animations.play("animR", 4)
			}, this)
		} else if (type === 2) {
			play.groupEffetvert.forEachAlive(function (obj) {
				obj.animations.play("animV", 4)
			}, this)
		}
		if (Music.enableMisic)
			Music.sounds.play("button_push")
	}
};
window.onload = function () {
	setTimeout(function () {
		window.scrollTo(0, 1)
	}, 10);
	game = new Phaser.Game(320 * resolution, 480 * resolution, Phaser.CANVAS);
	play = game.state.add("play", blockway.Play, false);
	game.state.add("credits", blockway.Credits, false);
	game.state.add("levels", blockway.Levels, false);
	game.state.add("menu", blockway.Menu, false);
	game.state.add("preload", blockway.Preload, false);
	game.state.add("boot", blockway.Boot, true)
};
