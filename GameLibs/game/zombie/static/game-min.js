var egret; (function(d) {
    d.egret_string_code = {};
    d.egret_string_code[ - 1] = "\u4e0d\u5b58\u5728\u7684stringId:{0}";
    d.egret_string_code[1E3] = "Browser.isMobile\u63a5\u53e3\u53c2\u6570\u5df2\u7ecf\u53d8\u66f4\uff0c\u8bf7\u5c3d\u5feb\u8c03\u6574\u7528\u6cd5\u4e3a egret.MainContext.deviceType == egret.MainContext.DEVICE_MOBILE";
    d.egret_string_code[1001] = "\u8be5\u65b9\u6cd5\u76ee\u524d\u4e0d\u5e94\u4f20\u5165 resolutionPolicy \u53c2\u6570\uff0c\u8bf7\u5728 docs/1.0_Final_ReleaseNote\u4e2d\u67e5\u770b\u5982\u4f55\u5347\u7ea7";
    d.egret_string_code[1002] = "egret.Ticker\u662f\u6846\u67b6\u5185\u90e8\u4f7f\u7528\u7684\u5355\u4f8b\uff0c\u4e0d\u5141\u8bb8\u5728\u5916\u90e8\u5b9e\u4f8b\u5316\uff0c\u8ba1\u65f6\u5668\u8bf7\u4f7f\u7528egret.Timer\u7c7b\uff01";
    d.egret_string_code[1003] = "Ticker#setTimeout\u65b9\u6cd5\u5373\u5c06\u5e9f\u5f03,\u8bf7\u4f7f\u7528egret.setTimeout";
    d.egret_string_code[1004] = "ExternalInterface\u8c03\u7528\u4e86js\u6ca1\u6709\u6ce8\u518c\u7684\u65b9\u6cd5: {0}";
    d.egret_string_code[1005] = "\u8bbe\u7f6e\u4e86\u5df2\u7ecf\u5b58\u5728\u7684blendMode: {0}";
    d.egret_string_code[1006] = "child\u4e0d\u5728\u5f53\u524d\u5bb9\u5668\u5185";
    d.egret_string_code[1007] = "\u63d0\u4f9b\u7684\u7d22\u5f15\u8d85\u51fa\u8303\u56f4";
    d.egret_string_code[1008] = "child\u672a\u88abaddChild\u5230\u8be5parent";
    d.egret_string_code[1009] = "\u8bbe\u7f6e\u4e86\u5df2\u7ecf\u5b58\u5728\u7684\u9002\u914d\u6a21\u5f0f:{0}";
    d.egret_string_code[1010] = "addEventListener\u4fa6\u542c\u51fd\u6570\u4e0d\u80fd\u4e3a\u7a7a";
    d.egret_string_code[1011] = 'BitmapText\u627e\u4e0d\u5230\u6587\u5b57\u6240\u5bf9\u5e94\u7684\u7eb9\u7406:"{0}"';
    d.egret_string_code[1012] = "egret.BitmapTextSpriteSheet\u5df2\u5e9f\u5f03\uff0c\u8bf7\u4f7f\u7528egret.BitmapFont\u4ee3\u66ff\u3002";
    d.egret_string_code[1013] = "TextField.setFocus \u6ca1\u6709\u5b9e\u73b0";
    d.egret_string_code[1014] = "Ease\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316";
    d.egret_string_code[1015] = "xml not found!";
    d.egret_string_code[1016] = "{0}\u5df2\u7ecf\u5e9f\u5f03";
    d.egret_string_code[1017] = "JSON\u6587\u4ef6\u683c\u5f0f\u4e0d\u6b63\u786e: {0}\ndata: {1}";
    d.egret_string_code[1018] = "egret_html5_localStorage.setItem\u4fdd\u5b58\u5931\u8d25,key={0}&value={1}";
    d.egret_string_code[1019] = "\u7f51\u7edc\u5f02\u5e38:{0}";
    d.egret_string_code[1020] = "\u65e0\u6cd5\u521d\u59cb\u5316\u7740\u8272\u5668";
    d.egret_string_code[1021] = "\u5f53\u524d\u6d4f\u89c8\u5668\u4e0d\u652f\u6301webgl";
    d.egret_string_code[1022] = "{0} ArgumentError";
    d.egret_string_code[1023] = "\u6b64\u65b9\u6cd5\u5728ScrollView\u5185\u4e0d\u53ef\u7528!";
    d.egret_string_code[1024] = "\u4f7f\u7528\u4e86\u5c1a\u672a\u5b9e\u73b0\u7684ScaleMode";
    d.egret_string_code[1025] = "\u9047\u5230\u6587\u4ef6\u5c3e";
    d.egret_string_code[1026] = "EncodingError! The code point {0} could not be encoded.";
    d.egret_string_code[1027] = "DecodingError";
    d.egret_string_code[1028] = "\u8c03\u7528\u4e86\u672a\u914d\u7f6e\u7684\u6ce8\u5165\u89c4\u5219:{0}\u3002 \u8bf7\u5148\u5728\u9879\u76ee\u521d\u59cb\u5316\u91cc\u914d\u7f6e\u6307\u5b9a\u7684\u6ce8\u5165\u89c4\u5219\uff0c\u518d\u8c03\u7528\u5bf9\u5e94\u5355\u4f8b\u3002";
    d.egret_string_code[1029] = "Function.prototype.bind - what is trying to be bound is not callable";
    d.egret_string_code[1030] = "\u8be5API\u5df2\u5e9f\u5f03";
    d.egret_string_code[2E3] = "RES.createGroup()\u4f20\u5165\u4e86\u914d\u7f6e\u4e2d\u4e0d\u5b58\u5728\u7684\u952e\u503c: {0}";
    d.egret_string_code[2001] = 'RES\u52a0\u8f7d\u4e86\u4e0d\u5b58\u5728\u6216\u7a7a\u7684\u8d44\u6e90\u7ec4:"{0}"';
    d.egret_string_code[3E3] = "\u4e3b\u9898\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u5931\u8d25: {0}";
    d.egret_string_code[3001] = "\u627e\u4e0d\u5230\u4e3b\u9898\u4e2d\u6240\u914d\u7f6e\u7684\u76ae\u80a4\u7c7b\u540d: {0}";
    d.egret_string_code[3002] = '\u7d22\u5f15:"{0}"\u8d85\u51fa\u96c6\u5408\u5143\u7d20\u7d22\u5f15\u8303\u56f4';
    d.egret_string_code[3003] = "\u5728\u6b64\u7ec4\u4ef6\u4e2d\u4e0d\u53ef\u7528\uff0c\u82e5\u6b64\u7ec4\u4ef6\u4e3a\u5bb9\u5668\u7c7b\uff0c\u8bf7\u4f7f\u7528";
    d.egret_string_code[3004] = "addChild(){0}addElement()\u4ee3\u66ff";
    d.egret_string_code[3005] = "addChildAt(){0}addElementAt()\u4ee3\u66ff";
    d.egret_string_code[3006] = "removeChild(){0}removeElement()\u4ee3\u66ff";
    d.egret_string_code[3007] = "removeChildAt(){0}removeElementAt()\u4ee3\u66ff";
    d.egret_string_code[3008] = "setChildIndex(){0}setElementIndex()\u4ee3\u66ff";
    d.egret_string_code[3009] = "swapChildren(){0}swapElements()\u4ee3\u66ff";
    d.egret_string_code[3010] = "swapChildrenAt(){0}swapElementsAt()\u4ee3\u66ff";
    d.egret_string_code[3011] = '\u7d22\u5f15:"{0}"\u8d85\u51fa\u53ef\u89c6\u5143\u7d20\u7d22\u5f15\u8303\u56f4';
    d.egret_string_code[3012] = "\u6b64\u65b9\u6cd5\u5728Scroller\u7ec4\u4ef6\u5185\u4e0d\u53ef\u7528!";
    d.egret_string_code[3013] = "UIStage\u662fGUI\u6839\u5bb9\u5668\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a\u6b64\u5b9e\u4f8b\u5728\u663e\u793a\u5217\u8868\u4e2d\uff01";
    d.egret_string_code[4E3] = "An Bone cannot be added as a child to itself or one of its children (or children's children, etc.)";
    d.egret_string_code[4001] = "Abstract class can not be instantiated!";
    d.egret_string_code[4002] = "Unnamed data!";
    d.egret_string_code[4003] = "Nonsupport version!";
    d.egret_string_code[3100] = "\u5f53\u524d\u6d4f\u89c8\u5668\u4e0d\u652f\u6301WebSocket";
    d.egret_string_code[3101] = "\u8bf7\u5148\u8fde\u63a5WebSocket";
    d.egret_string_code[3102] = "\u8bf7\u5148\u8bbe\u7f6etype\u4e3a\u4e8c\u8fdb\u5236\u7c7b\u578b"
})(egret || (egret = {}));
var __extends = this.__extends ||
function(d, f) {
    function g() {
        this.constructor = d
    }
    for (var e in f) f.hasOwnProperty(e) && (d[e] = f[e]);
    g.prototype = f.prototype;
    d.prototype = new g
}; (function(d) {
    function f(e) {
        for (var c = [], a = 1; a < arguments.length; a++) c[a - 1] = arguments[a];
        if (a = d.egret_string_code[e]) for (var b = c.length,
        h = 0; h < b; h++) a = a.replace("{" + h + "}", c[h]);
        return a
    }
    var g = function() {
        function e() {}
        e.openLogByType = function(c) {
            null == e.logFuncs && (e.logFuncs = {
                error: console.error,
                debug: console.debug,
                warn: console.warn,
                info: console.info,
                log: console.log
            });
            switch (c) {
            case e.OFF:
                console.error = function() {};
            case e.ERROR:
                console.warn = function() {};
            case e.WARN:
                console.info = function() {},
                console.log = function() {};
            case e.INFO:
                console.debug = function() {}
            }
            switch (c) {
            case e.ALL:
                console.debug = e.logFuncs.debug;
            case e.INFO:
                console.log = e.logFuncs.log,
                console.info = e.logFuncs.info;
            case e.WARN:
                console.warn = e.logFuncs.warn;
            case e.ERROR:
                console.error = e.logFuncs.error
            }
        };
        e.fatal = function(c, a) {
            void 0 === a && (a = null);
            d.Logger.traceToConsole("Fatal", c, a);
            throw Error(d.Logger.getTraceCode("Fatal", c, a));
        };
        e.info = function(c, a) {
            void 0 === a && (a = null);
            d.Logger.traceToConsole("Info", c, a)
        };
        e.warning = function(c, a) {
            void 0 === a && (a = null);
            d.Logger.traceToConsole("Warning", c, a)
        };
        e.fatalWithErrorId = function(c) {
            for (var a = [], b = 1; b < arguments.length; b++) a[b - 1] = arguments[b];
            a.unshift(c); (a = f.apply(null, a)) ? e.fatal(a) : e.warning(f( - 1, c))
        };
        e.infoWithErrorId = function(c) {
            for (var a = [], b = 1; b < arguments.length; b++) a[b - 1] = arguments[b];
            a.unshift(c); (a = f.apply(null, a)) ? e.info(a) : e.warning(f( - 1, c))
        };
        e.warningWithErrorId = function(c) {
            for (var a = [], b = 1; b < arguments.length; b++) a[b - 1] = arguments[b];
            a.unshift(c); (a = f.apply(null, a)) ? e.warning(a) : e.warning(f( - 1, c))
        };
        e.traceToConsole = function(c, a, b) {
            console.log(d.Logger.getTraceCode(c, a, b))
        };
        e.getTraceCode = function(c, a, b) {
            return "[" + c + "]" + a + (null == b ? "": ":" + b)
        };
        e.ALL = "all";
        e.DEBUG = "debug";
        e.INFO = "info";
        e.WARN = "warn";
        e.ERROR = "error";
        e.OFF = "off";
        return e
    } ();
    d.Logger = g;
    g.prototype.__class__ = "egret.Logger";
    d.getString = f
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {
            this._hashCode = d.hashCount++
        }
        Object.defineProperty(d.prototype, "hashCode", {
            get: function() {
                return this._hashCode
            },
            enumerable: !0,
            configurable: !0
        });
        d.hashCount = 1;
        return d
    } ();
    d.HashObject = f;
    f.prototype.__class__ = "egret.HashObject"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a) {
            void 0 === a && (a = 300);
            d.call(this);
            this.objectPool = [];
            this._length = 0;
            1 > a && (a = 1);
            this.autoDisposeTime = a;
            this.frameCount = 0
        }
        __extends(e, d);
        var c = e.prototype;
        c._checkFrame = function() {
            this.frameCount--;
            0 >= this.frameCount && this.dispose()
        };
        Object.defineProperty(c, "length", {
            get: function() {
                return this._length
            },
            enumerable: !0,
            configurable: !0
        });
        c.push = function(a) {
            var b = this.objectPool; - 1 == b.indexOf(a) && (b.push(a), a.__recycle && a.__recycle(), this._length++, 0 == this.frameCount && (this.frameCount = this.autoDisposeTime, e._callBackList.push(this)))
        };
        c.pop = function() {
            if (0 == this._length) return null;
            this._length--;
            return this.objectPool.pop()
        };
        c.dispose = function() {
            0 < this._length && (this.objectPool = [], this._length = 0);
            this.frameCount = 0;
            var a = e._callBackList,
            b = a.indexOf(this); - 1 != b && a.splice(b, 1)
        };
        e._callBackList = [];
        return e
    } (d.HashObject);
    d.Recycler = f;
    f.prototype.__class__ = "egret.Recycler"
})(egret || (egret = {})); (function(d) {
    d.__START_TIME;
    d.getTimer = function() {
        return Date.now() - d.__START_TIME
    }
})(egret || (egret = {})); (function(d) {
    d.__callLaterFunctionList = [];
    d.__callLaterThisList = [];
    d.__callLaterArgsList = [];
    d.callLater = function(f, g) {
        for (var e = [], c = 2; c < arguments.length; c++) e[c - 2] = arguments[c];
        d.__callLaterFunctionList.push(f);
        d.__callLaterThisList.push(g);
        d.__callLaterArgsList.push(e)
    };
    d.__callAsyncFunctionList = [];
    d.__callAsyncThisList = [];
    d.__callAsyncArgsList = [];
    d.__callAsync = function(f, g) {
        for (var e = [], c = 2; c < arguments.length; c++) e[c - 2] = arguments[c];
        d.__callAsyncFunctionList.push(f);
        d.__callAsyncThisList.push(g);
        d.__callAsyncArgsList.push(e)
    }
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {}
        var e = f.prototype;
        e.call = function(c) {
            this.callback && this.callback.call(this.thisObject, c)
        };
        e.dispose = function() {
            this.thisObject = this.callback = null;
            f.__freeList.push(this)
        };
        f.push = function(c, a) {
            var b;
            b = f.__freeList.length ? f.__freeList.pop() : new d.RenderCommand;
            b.callback = c;
            b.thisObject = a;
            d.MainContext.__DRAW_COMMAND_LIST.push(b)
        };
        f.__freeList = [];
        return f
    } ();
    d.RenderCommand = f;
    f.prototype.__class__ = "egret.RenderCommand"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b, h) {
            void 0 === b && (b = !1);
            void 0 === h && (h = !1);
            f.call(this);
            this.data = null;
            this._type = "";
            this._cancelable = this._bubbles = !1;
            this._eventPhase = 2;
            this._target = this._currentTarget = null;
            this._isPropagationImmediateStopped = this._isPropagationStopped = this._isDefaultPrevented = !1;
            this.isNew = !0;
            this._type = a;
            this._bubbles = b;
            this._cancelable = h
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "type", {
            get: function() {
                return this._type
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "bubbles", {
            get: function() {
                return this._bubbles
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "cancelable", {
            get: function() {
                return this._cancelable
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "eventPhase", {
            get: function() {
                return this._eventPhase
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "currentTarget", {
            get: function() {
                return this._currentTarget
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "target", {
            get: function() {
                return this._target
            },
            enumerable: !0,
            configurable: !0
        });
        c.isDefaultPrevented = function() {
            return this._isDefaultPrevented
        };
        c.preventDefault = function() {
            this._cancelable && (this._isDefaultPrevented = !0)
        };
        c.stopPropagation = function() {
            this._bubbles && (this._isPropagationStopped = !0)
        };
        c.stopImmediatePropagation = function() {
            this._bubbles && (this._isPropagationImmediateStopped = !0)
        };
        c._reset = function() {
            this.isNew ? this.isNew = !1 : (this._isPropagationImmediateStopped = this._isPropagationStopped = this._isDefaultPrevented = !1, this._currentTarget = this._target = null, this._eventPhase = 2)
        };
        c.__recycle = function() {
            this.data = this._target = this._currentTarget = null
        };
        e._dispatchByTarget = function(a, b, h, c, e, f) {
            void 0 === e && (e = !1);
            void 0 === f && (f = !1);
            var g = a.eventRecycler;
            g || (g = a.eventRecycler = new d.Recycler);
            var k = g.pop();
            k ? k._type = h: k = new a(h);
            k._bubbles = e;
            k._cancelable = f;
            if (c) for (var l in c) k[l] = c[l],
            null !== k[l] && (c[l] = null);
            a = b.dispatchEvent(k);
            g.push(k);
            return a
        };
        e._getPropertyData = function(a) {
            var b = a._props;
            b || (b = a._props = {});
            return b
        };
        e.dispatchEvent = function(a, b, h, c) {
            void 0 === h && (h = !1);
            var d = e._getPropertyData(e);
            void 0 != c && (d.data = c);
            e._dispatchByTarget(e, a, b, d, h)
        };
        e.ADDED_TO_STAGE = "addedToStage";
        e.REMOVED_FROM_STAGE = "removedFromStage";
        e.ADDED = "added";
        e.REMOVED = "removed";
        e.COMPLETE = "complete";
        e.LOOP_COMPLETE = "loopcomplete";
        e.ENTER_FRAME = "enterFrame";
        e.RENDER = "render";
        e.FINISH_RENDER = "finishRender";
        e.FINISH_UPDATE_TRANSFORM = "finishUpdateTransform";
        e.LEAVE_STAGE = "leaveStage";
        e.RESIZE = "resize";
        e.CHANGE = "change";
        e.ACTIVATE = "activate";
        e.DEACTIVATE = "deactivate";
        e.CLOSE = "close";
        e.CONNECT = "connect";
        return e
    } (d.HashObject);
    d.Event = f;
    f.prototype.__class__ = "egret.Event"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(c, a, b) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            d.call(this, c, a, b);
            this._status = 0
        }
        __extends(e, d);
        Object.defineProperty(e.prototype, "status", {
            get: function() {
                return this._status
            },
            enumerable: !0,
            configurable: !0
        });
        e.dispatchHTTPStatusEvent = function(c, a) {
            null == e.httpStatusEvent && (e.httpStatusEvent = new e(e.HTTP_STATUS));
            e.httpStatusEvent._status = a;
            c.dispatchEvent(e.httpStatusEvent)
        };
        e.HTTP_STATUS = "httpStatus";
        e.httpStatusEvent = null;
        return e
    } (d.Event);
    d.HTTPStatusEvent = f;
    f.prototype.__class__ = "egret.HTTPStatusEvent"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(c, a, b) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            f.call(this, c, a, b)
        }
        __extends(e, f);
        e.dispatchIOErrorEvent = function(c) {
            d.Event._dispatchByTarget(e, c, e.IO_ERROR)
        };
        e.IO_ERROR = "ioError";
        return e
    } (d.Event);
    d.IOErrorEvent = f;
    f.prototype.__class__ = "egret.IOErrorEvent"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b, h, c, e, d, p, k, l, m) {
            void 0 === b && (b = !0);
            void 0 === h && (h = !0);
            void 0 === c && (c = 0);
            void 0 === e && (e = 0);
            void 0 === d && (d = 0);
            void 0 === p && (p = !1);
            void 0 === k && (k = !1);
            void 0 === m && (m = !1);
            f.call(this, a, b, h);
            this._stageY = this._stageX = 0;
            this.touchPointID = NaN;
            this.touchDown = this.altKey = this.shiftKey = this.ctrlKey = !1;
            this.touchPointID = c;
            this._stageX = e;
            this._stageY = d;
            this.ctrlKey = p;
            this.altKey = k;
            this.touchDown = m
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "stageX", {
            get: function() {
                return this._stageX
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "stageY", {
            get: function() {
                return this._stageY
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "localX", {
            get: function() {
                return this._currentTarget.globalToLocal(this._stageX, this._stageY, d.Point.identity).x
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "localY", {
            get: function() {
                return this._currentTarget.globalToLocal(this._stageX, this._stageY, d.Point.identity).y
            },
            enumerable: !0,
            configurable: !0
        });
        e.dispatchTouchEvent = function(a, b, h, c, f, g, p, k, l) {
            void 0 === h && (h = 0);
            void 0 === c && (c = 0);
            void 0 === f && (f = 0);
            void 0 === g && (g = !1);
            void 0 === p && (p = !1);
            void 0 === k && (k = !1);
            void 0 === l && (l = !1);
            var m = d.Event._getPropertyData(e);
            m.touchPointID = h;
            m._stageX = c;
            m._stageY = f;
            m.ctrlKey = g;
            m.altKey = p;
            m.shiftKey = k;
            m.touchDown = l;
            d.Event._dispatchByTarget(e, a, b, m, !0, !0)
        };
        e.TOUCH_TAP = "touchTap";
        e.TOUCH_MOVE = "touchMove";
        e.TOUCH_BEGIN = "touchBegin";
        e.TOUCH_END = "touchEnd";
        e.TOUCH_RELEASE_OUTSIDE = "touchReleaseOutside";
        e.TOUCH_ROLL_OUT = "touchRollOut";
        e.TOUCH_ROLL_OVER = "touchRollOver";
        e.TOUCH_OUT = "touchOut";
        e.TOUCH_OVER = "touchOver";
        return e
    } (d.Event);
    d.TouchEvent = f;
    f.prototype.__class__ = "egret.TouchEvent"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(c, a, b) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            f.call(this, c, a, b)
        }
        __extends(e, f);
        e.dispatchTimerEvent = function(c, a) {
            d.Event._dispatchByTarget(e, c, a)
        };
        e.TIMER = "timer";
        e.TIMER_COMPLETE = "timerComplete";
        return e
    } (d.Event);
    d.TimerEvent = f;
    f.prototype.__class__ = "egret.TimerEvent"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(c, a, b, h) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            void 0 === h && (h = "");
            f.call(this, c, a, b);
            this.text = h
        }
        __extends(e, f);
        e.dispatchTextEvent = function(c, a, b) {
            var h = d.Event._getPropertyData(e);
            h.text = b;
            d.Event._dispatchByTarget(e, c, a, h)
        };
        e.LINK = "link";
        return e
    } (d.Event);
    d.TextEvent = f;
    f.prototype.__class__ = "egret.TextEvent"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(c, a, b, h, e) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            void 0 === h && (h = 0);
            void 0 === e && (e = 0);
            f.call(this, c, a, b);
            this.bytesTotal = this.bytesLoaded = 0;
            this.bytesLoaded = h;
            this.bytesTotal = e
        }
        __extends(e, f);
        e.dispatchProgressEvent = function(c, a, b, h) {
            void 0 === b && (b = 0);
            void 0 === h && (h = 0);
            d.Event._dispatchByTarget(e, c, a, {
                bytesLoaded: b,
                bytesTotal: h
            })
        };
        e.PROGRESS = "progress";
        e.SOCKET_DATA = "socketData";
        return e
    } (d.Event);
    d.ProgressEvent = f;
    f.prototype.__class__ = "egret.ProgressEvent"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.CAPTURING_PHASE = 1;
        d.AT_TARGET = 2;
        d.BUBBLING_PHASE = 3;
        return d
    } ();
    d.EventPhase = f;
    f.prototype.__class__ = "egret.EventPhase"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a) {
            void 0 === a && (a = null);
            f.call(this);
            this._captureEventsMap = this._eventsMap = this._eventTarget = null;
            this._eventTarget = a ? a: this
        }
        __extends(e, f);
        var c = e.prototype;
        c.addEventListener = function(a, b, h, c, e) {
            void 0 === c && (c = !1);
            void 0 === e && (e = 0);
            "undefined" === typeof c && (c = !1);
            "undefined" === typeof e && (e = 0);
            b || d.Logger.fatalWithErrorId(1010);
            c ? (this._captureEventsMap || (this._captureEventsMap = {}), c = this._captureEventsMap) : (this._eventsMap || (this._eventsMap = {}), c = this._eventsMap);
            var f = c[a];
            f || (f = c[a] = []);
            this._insertEventBin(f, b, h, e)
        };
        c._insertEventBin = function(a, b, h, c, e) {
            void 0 === e && (e = void 0);
            for (var d = -1,
            f = a.length,
            g = 0; g < f; g++) {
                var l = a[g];
                if (l.listener == b && l.thisObject == h && l.display == e) return ! 1; - 1 == d && l.priority < c && (d = g)
            }
            b = {
                listener: b,
                thisObject: h,
                priority: c
            };
            e && (b.display = e); - 1 != d ? a.splice(d, 0, b) : a.push(b);
            return ! 0
        };
        c.removeEventListener = function(a, b, h, c) {
            void 0 === c && (c = !1);
            if (c = c ? this._captureEventsMap: this._eventsMap) {
                var e = c[a];
                e && (this._removeEventBin(e, b, h), 0 == e.length && delete c[a])
            }
        };
        c._removeEventBin = function(a, b, h, c, e) {
            void 0 === c && (c = void 0);
            void 0 === e && (e = 0);
            for (var d = a.length; e < d; e++) {
                var f = a[e];
                if (f.listener == b && f.thisObject == h && f.display == c) return a.splice(e, 1),
                !0
            }
            return ! 1
        };
        c.hasEventListener = function(a) {
            return !! (this._eventsMap && this._eventsMap[a] || this._captureEventsMap && this._captureEventsMap[a])
        };
        c.willTrigger = function(a) {
            return this.hasEventListener(a)
        };
        c.dispatchEvent = function(a) {
            a._reset();
            a._target = this._eventTarget;
            a._currentTarget = this._eventTarget;
            return this._notifyListener(a)
        };
        c._notifyListener = function(a) {
            var b = 1 == a._eventPhase ? this._captureEventsMap: this._eventsMap;
            if (!b) return ! 0;
            b = b[a._type];
            if (!b) return ! 0;
            var h = b.length;
            if (0 == h) return ! 0;
            for (var b = b.concat(), c = 0; c < h; c++) {
                var e = b[c];
                e.listener.call(e.thisObject, a);
                if (a._isPropagationImmediateStopped) break
            }
            return ! a._isDefaultPrevented
        };
        c.dispatchEventWith = function(a, b, h) {
            void 0 === b && (b = !1);
            d.Event.dispatchEvent(this, a, b, h)
        };
        return e
    } (d.HashObject);
    d.EventDispatcher = f;
    f.prototype.__class__ = "egret.EventDispatcher"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.stage = this.deviceContext = this.netContext = this.touchContext = this.rendererContext = null;
            this.reuseEvent = new d.Event("")
        }
        __extends(e, f);
        var c = e.prototype;
        c.run = function() {
            d.Ticker.getInstance().run();
            d.Ticker.getInstance().register(this.renderLoop, this, Number.NEGATIVE_INFINITY);
            d.Ticker.getInstance().register(this.broadcastEnterFrame, this, Number.POSITIVE_INFINITY);
            this.touchContext.run();
            this._profileInstance = d.Profiler.getInstance()
        };
        c.renderLoop = function(a) {
            if (0 < d.__callLaterFunctionList.length) {
                var b = d.__callLaterFunctionList;
                d.__callLaterFunctionList = [];
                var h = d.__callLaterThisList;
                d.__callLaterThisList = [];
                var c = d.__callLaterArgsList;
                d.__callLaterArgsList = []
            }
            a = this.stage;
            var f = e.cachedEvent;
            f._type = d.Event.RENDER;
            this.dispatchEvent(f);
            d.Stage._invalidateRenderFlag && (this.broadcastRender(), d.Stage._invalidateRenderFlag = !1);
            b && this.doCallLaterList(b, h, c);
            0 < d.__callAsyncFunctionList.length && this.doCallAsyncList();
            b = this.rendererContext;
            b.onRenderStart();
            b.clearScreen();
            e.__DRAW_COMMAND_LIST = [];
            e._renderLoopPhase = "updateTransform";
            a._updateTransform();
            e._renderLoopPhase = "draw";
            f._type = d.Event.FINISH_UPDATE_TRANSFORM;
            this.dispatchEvent(f);
            e.__use_new_draw ? this._draw(b) : a._draw(b);
            f._type = d.Event.FINISH_RENDER;
            this.dispatchEvent(f);
            this._profileInstance._isRunning && this._profileInstance._drawProfiler(b);
            b.onRenderFinish()
        };
        c._draw = function(a) {
            for (var b = e.__DRAW_COMMAND_LIST,
            h = b.length,
            c = 0; c < h; c++) {
                var d = b[c];
                d.call(a);
                d.dispose()
            }
        };
        c.broadcastEnterFrame = function(a) {
            a = this.reuseEvent;
            a._type = d.Event.ENTER_FRAME;
            this.dispatchEvent(a);
            for (var b = d.DisplayObject._enterFrameCallBackList.concat(), h = b.length, c = 0; c < h; c++) {
                var e = b[c];
                a._target = e.display;
                a._currentTarget = e.display;
                e.listener.call(e.thisObject, a)
            }
            b = d.Recycler._callBackList;
            for (c = b.length - 1; 0 <= c; c--) b[c]._checkFrame()
        };
        c.broadcastRender = function() {
            var a = this.reuseEvent;
            a._type = d.Event.RENDER;
            for (var b = d.DisplayObject._renderCallBackList.concat(), h = b.length, c = 0; c < h; c++) {
                var e = b[c],
                f = e.display;
                a._target = f;
                a._currentTarget = f;
                e.listener.call(e.thisObject, a)
            }
        };
        c.doCallLaterList = function(a, b, h) {
            for (var c = a.length,
            e = 0; e < c; e++) {
                var d = a[e];
                null != d && d.apply(b[e], h[e])
            }
        };
        c.doCallAsyncList = function() {
            var a = d.__callAsyncFunctionList.concat(),
            b = d.__callAsyncThisList.concat(),
            h = d.__callAsyncArgsList.concat();
            d.__callAsyncFunctionList.length = 0;
            d.__callAsyncThisList.length = 0;
            for (var c = d.__callAsyncArgsList.length = 0; c < a.length; c++) {
                var e = a[c];
                null != e && e.apply(b[c], h[c])
            }
        };
        e.deviceType = null;
        e.DEVICE_PC = "web";
        e.DEVICE_MOBILE = "native";
        e.RUNTIME_HTML5 = "runtimeHtml5";
        e.RUNTIME_NATIVE = "runtimeNative";
        e.__DRAW_COMMAND_LIST = [];
        e.__use_new_draw = !0;
        e.cachedEvent = new d.Event("");
        return e
    } (d.EventDispatcher);
    d.MainContext = f;
    f.prototype.__class__ = "egret.MainContext"
})(egret || (egret = {}));
var testDeviceType = function() {
    if (!this.navigator) return ! 0;
    var d = navigator.userAgent.toLowerCase();
    return - 1 != d.indexOf("mobile") || -1 != d.indexOf("android")
},
testRuntimeType = function() {
    return this.navigator ? !0 : !1
};
egret.MainContext.instance = new egret.MainContext;
egret.MainContext.deviceType = testDeviceType() ? egret.MainContext.DEVICE_MOBILE: egret.MainContext.DEVICE_PC;
egret.MainContext.runtimeType = testRuntimeType() ? egret.MainContext.RUNTIME_HTML5: egret.MainContext.RUNTIME_NATIVE;
delete testDeviceType;
delete testRuntimeType; (function(d) {
    var f = function() {
        function f() {
            this._preDrawCount = this._updateTransformPerformanceCost = this._renderPerformanceCost = this._logicPerformanceCost = this._lastTime = 0;
            this._calculatePreDrawCount = !0;
            this._txt = null;
            this._tick = 0;
            this._maxDeltaTime = 500;
            this._totalDeltaTime = 0;
            this._isRunning = !1
        }
        var e = f.prototype;
        f.getInstance = function() {
            null == f.instance && (f.instance = new f);
            return f.instance
        };
        e.stop = function() {
            if (this._isRunning) {
                this._isRunning = !1;
                d.Ticker.getInstance().unregister(this.update, this);
                var c = d.MainContext.instance;
                c.removeEventListener(d.Event.ENTER_FRAME, this.onEnterFrame, this);
                c.removeEventListener(d.Event.RENDER, this.onStartRender, this);
                c.removeEventListener(d.Event.FINISH_RENDER, this.onFinishRender, this);
                c.removeEventListener(d.Event.FINISH_UPDATE_TRANSFORM, this.onFinishUpdateTransform, this)
            }
        };
        e.run = function() {
            null == this._txt && (this._txt = new d.TextField, this._txt.size = 28, this._txt.multiline = !0, this._txt._parent = new d.DisplayObjectContainer);
            if (!this._isRunning) {
                this._isRunning = !0;
                d.Ticker.getInstance().register(this.update, this);
                var c = d.MainContext.instance;
                c.addEventListener(d.Event.ENTER_FRAME, this.onEnterFrame, this);
                c.addEventListener(d.Event.RENDER, this.onStartRender, this);
                c.addEventListener(d.Event.FINISH_RENDER, this.onFinishRender, this);
                c.addEventListener(d.Event.FINISH_UPDATE_TRANSFORM, this.onFinishUpdateTransform, this)
            }
        };
        e._drawProfiler = function(c) {
            "_drawWebGL" in c && c._drawWebGL();
            this._calculatePreDrawCount = !1;
            this._txt._updateTransform();
            this._txt._draw(c)
        };
        e._setTxtFontSize = function(c) {
            this._txt.size = c
        };
        e.onEnterFrame = function(c) {
            this._lastTime = d.getTimer()
        };
        e.onStartRender = function(c) {
            c = d.getTimer();
            this._logicPerformanceCost = c - this._lastTime;
            this._lastTime = c
        };
        e.onFinishUpdateTransform = function(c) {
            c = d.getTimer();
            this._updateTransformPerformanceCost = c - this._lastTime;
            this._lastTime = c
        };
        e.onFinishRender = function(c) {
            c = d.getTimer();
            this._renderPerformanceCost = c - this._lastTime;
            this._lastTime = c
        };
        e.update = function(c) {
            this._tick++;
            this._totalDeltaTime += c;
            if (this._totalDeltaTime >= this._maxDeltaTime) {
                c = this._preDrawCount.toString();
                var a = Math.ceil(this._logicPerformanceCost).toString() + "," + Math.ceil(this._updateTransformPerformanceCost).toString() + "," + Math.ceil(this._renderPerformanceCost).toString() + "," + Math.ceil(d.MainContext.instance.rendererContext.renderCost).toString();
                this._txt.text = "draw:" + c + "\ncost:" + a + "\nFPS:" + Math.floor(1E3 * this._tick / this._totalDeltaTime).toString();
                this._tick = this._totalDeltaTime = 0
            }
            this._preDrawCount = 0;
            this._calculatePreDrawCount = !0
        };
        e.onDrawImage = function() {
            this._calculatePreDrawCount && this._preDrawCount++
        };
        return f
    } ();
    d.Profiler = f;
    f.prototype.__class__ = "egret.Profiler"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._timeScale = 1;
            this._paused = !1;
            this._callIndex = -1;
            this.callBackList = [];
            null != e.instance && d.Logger.fatalWithErrorId(1002)
        }
        __extends(e, f);
        var c = e.prototype;
        c.run = function() {
            d.__START_TIME = (new Date).getTime();
            d.MainContext.instance.deviceContext.executeMainLoop(this.update, this)
        };
        c.update = function(a) {
            if (!this._paused) {
                a *= this._timeScale;
                a *= this._timeScale;
                this._callList = this.callBackList.concat();
                for (this._callIndex = 0; this._callIndex < this._callList.length; this._callIndex++) {
                    var b = this._callList[this._callIndex];
                    b.listener.call(b.thisObject, a)
                }
                this._callIndex = -1;
                this._callList = null
            }
        };
        c.register = function(a, b, h) {
            void 0 === h && (h = 0);
            this._insertEventBin(this.callBackList, a, b, h)
        };
        c.unregister = function(a, b) {
            this._removeEventBin(this.callBackList, a, b);
            this._callList && -1 < this._callIndex && this._removeEventBin(this._callList, a, b, null, this._callIndex + 1)
        };
        c.setTimeout = function(a, b, h) {
            for (var c = [], e = 3; e < arguments.length; e++) c[e - 3] = arguments[e];
            d.Logger.warningWithErrorId(1003);
            d.setTimeout.apply(null, [a, b, h].concat(c))
        };
        c.setTimeScale = function(a) {
            this._timeScale = a
        };
        c.getTimeScale = function() {
            return this._timeScale
        };
        c.pause = function() {
            this._paused = !0
        };
        c.resume = function() {
            this._paused = !1
        };
        e.getInstance = function() {
            null == e.instance && (e.instance = new e);
            return e.instance
        };
        return e
    } (d.EventDispatcher);
    d.Ticker = f;
    f.prototype.__class__ = "egret.Ticker"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.LEFT = "left";
        d.RIGHT = "right";
        d.CENTER = "center";
        d.JUSTIFY = "justify";
        d.CONTENT_JUSTIFY = "contentJustify";
        return d
    } ();
    d.HorizontalAlign = f;
    f.prototype.__class__ = "egret.HorizontalAlign"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.TOP = "top";
        d.BOTTOM = "bottom";
        d.MIDDLE = "middle";
        d.JUSTIFY = "justify";
        d.CONTENT_JUSTIFY = "contentJustify";
        return d
    } ();
    d.VerticalAlign = f;
    f.prototype.__class__ = "egret.VerticalAlign"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b) {
            void 0 === b && (b = 0);
            f.call(this);
            this._currentCount = 0;
            this._running = !1;
            this.lastTime = 0;
            this.delay = a;
            this.repeatCount = b
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "currentCount", {
            get: function() {
                return this._currentCount
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "running", {
            get: function() {
                return this._running
            },
            enumerable: !0,
            configurable: !0
        });
        c.reset = function() {
            this.stop();
            this._currentCount = 0
        };
        c.start = function() {
            this._running || (this.lastTime = d.getTimer(), d.Ticker.getInstance().register(this.onEnterFrame, this), this._running = !0)
        };
        c.stop = function() {
            this._running && (d.Ticker.getInstance().unregister(this.onEnterFrame, this), this._running = !1)
        };
        c.onEnterFrame = function(a) {
            a = d.getTimer();
            a - this.lastTime > this.delay && (this.lastTime = a, this._currentCount++, d.TimerEvent.dispatchTimerEvent(this, d.TimerEvent.TIMER), 0 < this.repeatCount && this._currentCount >= this.repeatCount && (this.stop(), d.TimerEvent.dispatchTimerEvent(this, d.TimerEvent.TIMER_COMPLETE)))
        };
        return e
    } (d.EventDispatcher);
    d.Timer = f;
    f.prototype.__class__ = "egret.Timer"
})(egret || (egret = {})); (function(d) {
    function f(d) {
        d = d.prototype ? d.prototype: Object.getPrototypeOf(d);
        if (d.hasOwnProperty("__class__")) return d.__class__;
        var e = d.constructor.toString(),
        c = e.indexOf("("),
        e = e.substring(9, c);
        Object.defineProperty(d, "__class__", {
            value: e,
            enumerable: !1,
            writable: !0
        });
        return e
    }
    d.getQualifiedClassName = f;
    d.getQualifiedSuperclassName = function(d) {
        d = d.prototype ? d.prototype: Object.getPrototypeOf(d);
        if (d.hasOwnProperty("__superclass__")) return d.__superclass__;
        var e = Object.getPrototypeOf(d);
        if (null == e) return null;
        e = f(e.constructor);
        if (!e) return null;
        Object.defineProperty(d, "__superclass__", {
            value: e,
            enumerable: !1,
            writable: !0
        });
        return e
    }
})(egret || (egret = {})); (function(d) {
    var f = {};
    d.getDefinitionByName = function(d) {
        if (!d) return null;
        var e = f[d];
        if (e) return e;
        for (var c = d.split("."), a = c.length, e = __global, b = 0; b < a; b++) if (e = e[c[b]], !e) return null;
        return f[d] = e
    }
})(egret || (egret = {}));
var __global = __global || this; (function(d) {
    function f(c) {
        for (var a in g) {
            var b = g[a];
            b.delay -= c;
            0 >= b.delay && (b.listener.apply(b.thisObject, b.params), delete g[a])
        }
    }
    var g = {},
    e = 0;
    d.setTimeout = function(c, a, b) {
        for (var h = [], F = 3; F < arguments.length; F++) h[F - 3] = arguments[F];
        h = {
            listener: c,
            thisObject: a,
            delay: b,
            params: h
        };
        0 == e && d.Ticker.getInstance().register(f, null);
        e++;
        g[e] = h;
        return e
    };
    d.clearTimeout = function(c) {
        delete g[c]
    }
})(egret || (egret = {})); (function(d) {
    d.hasDefinition = function(f) {
        return d.getDefinitionByName(f) ? !0 : !1
    }
})(egret || (egret = {})); (function(d) {
    d.toColorString = function(d) {
        if (isNaN(d) || 0 > d) d = 0;
        16777215 < d && (d = 16777215);
        for (d = d.toString(16).toUpperCase(); 6 > d.length;) d = "0" + d;
        return "#" + d
    }
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b, h, c, e, d) {
            void 0 === a && (a = 1);
            void 0 === b && (b = 0);
            void 0 === h && (h = 0);
            void 0 === c && (c = 1);
            void 0 === e && (e = 0);
            void 0 === d && (d = 0);
            f.call(this);
            this.a = a;
            this.b = b;
            this.c = h;
            this.d = c;
            this.tx = e;
            this.ty = d
        }
        __extends(e, f);
        var c = e.prototype;
        c.prepend = function(a, b, h, c, e, d) {
            var f = this.tx;
            if (1 != a || 0 != b || 0 != h || 1 != c) {
                var g = this.a,
                l = this.c;
                this.a = g * a + this.b * h;
                this.b = g * b + this.b * c;
                this.c = l * a + this.d * h;
                this.d = l * b + this.d * c
            }
            this.tx = f * a + this.ty * h + e;
            this.ty = f * b + this.ty * c + d;
            return this
        };
        c.append = function(a, b, h, c, e, d) {
            var f = this.a,
            g = this.b,
            l = this.c,
            m = this.d;
            if (1 != a || 0 != b || 0 != h || 1 != c) this.a = a * f + b * l,
            this.b = a * g + b * m,
            this.c = h * f + c * l,
            this.d = h * g + c * m;
            this.tx = e * f + d * l + this.tx;
            this.ty = e * g + d * m + this.ty;
            return this
        };
        c.prependTransform = function(a, b, h, c, e, f, g, k, l) {
            if (e % 360) {
                var m = d.NumberUtils.cos(e);
                e = d.NumberUtils.sin(e)
            } else m = 1,
            e = 0;
            if (k || l) this.tx -= k,
            this.ty -= l;
            f || g ? (this.prepend(m * h, e * h, -e * c, m * c, 0, 0), this.prepend(d.NumberUtils.cos(g), d.NumberUtils.sin(g), -d.NumberUtils.sin(f), d.NumberUtils.cos(f), a, b)) : this.prepend(m * h, e * h, -e * c, m * c, a, b);
            return this
        };
        c.appendTransform = function(a, b, h, c, e, f, g, k, l) {
            if (e % 360) {
                var m = d.NumberUtils.cos(e);
                e = d.NumberUtils.sin(e)
            } else m = 1,
            e = 0;
            f || g ? (this.append(d.NumberUtils.cos(g), d.NumberUtils.sin(g), -d.NumberUtils.sin(f), d.NumberUtils.cos(f), a, b), this.append(m * h, e * h, -e * c, m * c, 0, 0)) : this.append(m * h, e * h, -e * c, m * c, a, b);
            if (k || l) this.tx -= k * this.a + l * this.c,
            this.ty -= k * this.b + l * this.d;
            return this
        };
        c.rotate = function(a) {
            var b = Math.cos(a);
            a = Math.sin(a);
            var h = this.a,
            c = this.c,
            e = this.tx;
            this.a = h * b - this.b * a;
            this.b = h * a + this.b * b;
            this.c = c * b - this.d * a;
            this.d = c * a + this.d * b;
            this.tx = e * b - this.ty * a;
            this.ty = e * a + this.ty * b;
            return this
        };
        c.skew = function(a, b) {
            this.append(d.NumberUtils.cos(b), d.NumberUtils.sin(b), -d.NumberUtils.sin(a), d.NumberUtils.cos(a), 0, 0);
            return this
        };
        c.scale = function(a, b) {
            this.a *= a;
            this.d *= b;
            this.c *= a;
            this.b *= b;
            this.tx *= a;
            this.ty *= b;
            return this
        };
        c.translate = function(a, b) {
            this.tx += a;
            this.ty += b;
            return this
        };
        c.identity = function() {
            this.a = this.d = 1;
            this.b = this.c = this.tx = this.ty = 0;
            return this
        };
        c.identityMatrix = function(a) {
            this.a = a.a;
            this.b = a.b;
            this.c = a.c;
            this.d = a.d;
            this.tx = a.tx;
            this.ty = a.ty;
            return this
        };
        c.invert = function() {
            var a = this.a,
            b = this.b,
            h = this.c,
            c = this.d,
            e = this.tx,
            d = a * c - b * h;
            this.a = c / d;
            this.b = -b / d;
            this.c = -h / d;
            this.d = a / d;
            this.tx = (h * this.ty - c * e) / d;
            this.ty = -(a * this.ty - b * e) / d;
            return this
        };
        e.transformCoords = function(a, b, h) {
            var c = d.Point.identity;
            c.x = a.a * b + a.c * h + a.tx;
            c.y = a.d * h + a.b * b + a.ty;
            return c
        };
        c.toArray = function(a) {
            this.array || (this.array = new Float32Array(9));
            a ? (this.array[0] = this.a, this.array[1] = this.b, this.array[2] = 0, this.array[3] = this.c, this.array[4] = this.d, this.array[5] = 0, this.array[6] = this.tx, this.array[7] = this.ty) : (this.array[0] = this.a, this.array[1] = this.b, this.array[2] = this.tx, this.array[3] = this.c, this.array[4] = this.d, this.array[5] = this.ty, this.array[6] = 0, this.array[7] = 0);
            this.array[8] = 1;
            return this.array
        };
        e.identity = new e;
        e.DEG_TO_RAD = Math.PI / 180;
        return e
    } (d.HashObject);
    d.Matrix = f;
    f.prototype.__class__ = "egret.Matrix"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a, b) {
            void 0 === a && (a = 0);
            void 0 === b && (b = 0);
            d.call(this);
            this.x = a;
            this.y = b
        }
        __extends(e, d);
        var c = e.prototype;
        c.clone = function() {
            return new e(this.x, this.y)
        };
        c.equals = function(a) {
            return this.x == a.x && this.y == a.y
        };
        e.distance = function(a, b) {
            return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y))
        };
        e.identity = new e(0, 0);
        return e
    } (d.HashObject);
    d.Point = f;
    f.prototype.__class__ = "egret.Point"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a, b, h, c) {
            void 0 === a && (a = 0);
            void 0 === b && (b = 0);
            void 0 === h && (h = 0);
            void 0 === c && (c = 0);
            d.call(this);
            this.x = a;
            this.y = b;
            this.width = h;
            this.height = c
        }
        __extends(e, d);
        var c = e.prototype;
        Object.defineProperty(c, "right", {
            get: function() {
                return this.x + this.width
            },
            set: function(a) {
                this.width = a - this.x
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "bottom", {
            get: function() {
                return this.y + this.height
            },
            set: function(a) {
                this.height = a - this.y
            },
            enumerable: !0,
            configurable: !0
        });
        c.initialize = function(a, b, h, c) {
            this.x = a;
            this.y = b;
            this.width = h;
            this.height = c;
            return this
        };
        c.contains = function(a, b) {
            return this.x <= a && this.x + this.width >= a && this.y <= b && this.y + this.height >= b
        };
        c.intersects = function(a) {
            return Math.max(this.x, a.x) <= Math.min(this.right, a.right) && Math.max(this.y, a.y) <= Math.min(this.bottom, a.bottom)
        };
        c.setEmpty = function() {
            this.height = this.width = this.y = this.x = 0
        };
        c.clone = function() {
            return new e(this.x, this.y, this.width, this.height)
        };
        c.containsPoint = function(a) {
            return this.x < a.x && this.x + this.width > a.x && this.y < a.y && this.y + this.height > a.y ? !0 : !1
        };
        e.identity = new e(0, 0, 0, 0);
        return e
    } (d.HashObject);
    d.Rectangle = f;
    f.prototype.__class__ = "egret.Rectangle"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._isSupportDOMParser = this._xmlDict = this._parser = null;
            this._xmlDict = {};
            window.DOMParser ? (this._isSupportDOMParser = !0, this._parser = new DOMParser) : this._isSupportDOMParser = !1
        }
        __extends(e, f);
        var c = e.prototype;
        e.getInstance = function() {
            e._instance || (e._instance = new e);
            return e._instance
        };
        c.parserXML = function(a) {
            for (var b = 0;
            "\n" == a.charAt(b) || "\t" == a.charAt(b) || "\r" == a.charAt(b) || " " == a.charAt(b);) b++;
            0 != b && (a = a.substring(b, a.length));
            this._isSupportDOMParser ? b = this._parser.parseFromString(a, "text/xml") : (b = new ActiveXObject("Microsoft.XMLDOM"), b.async = "false", b.loadXML(a));
            null == b && d.Logger.infoWithErrorId(1015);
            return b
        };
        e._instance = null;
        return e
    } (d.HashObject);
    d.SAXParser = f;
    f.prototype.__class__ = "egret.SAXParser"
})(egret || (egret = {})); (function(d) {
    var f = function(b) {
        function a() {
            b.call(this);
            this._designHeight = this._designWidth = 0;
            this._scaleY = this._scaleX = 1;
            this._stageHeight = this._stageWidth = this._offSetY = 0
        }
        __extends(a, b);
        var c = a.prototype;
        a.getInstance = function() {
            null == a.instance && (e.initialize(), a.instance = new a);
            return a.instance
        };
        c.setDesignSize = function(b, a, h) {
            this._designWidth = b;
            this._designHeight = a;
            h && (d.Logger.warningWithErrorId(1001), this._setResolutionPolicy(h))
        };
        c._setResolutionPolicy = function(b) {
            this._resolutionPolicy = b;
            b.init(this);
            b._apply(this, this._designWidth, this._designHeight)
        };
        c.getScaleX = function() {
            return this._scaleX
        };
        c.getScaleY = function() {
            return this._scaleY
        };
        c.getOffSetY = function() {
            return this._offSetY
        };
        a.canvas_name = "egretCanvas";
        a.egret_root_div = "gameDiv";
        a.canvas_div_name = "canvasDiv";
        return a
    } (d.HashObject);
    d.StageDelegate = f;
    f.prototype.__class__ = "egret.StageDelegate";
    var g = function() {
        function b(b, a) {
            this._containerStrategy = b;
            this._contentStrategy = a
        }
        var a = b.prototype;
        a.init = function(b) {
            this._containerStrategy.init(b);
            this._contentStrategy.init(b)
        };
        a._apply = function(b, a, h) {
            this._containerStrategy._apply(b, a, h);
            this._contentStrategy._apply(b, a, h)
        };
        return b
    } ();
    d.ResolutionPolicy = g;
    g.prototype.__class__ = "egret.ResolutionPolicy";
    var e = function() {
        function b() {}
        var a = b.prototype;
        b.initialize = function() {
            b.EQUAL_TO_FRAME = new c
        };
        a.init = function(b) {};
        a._apply = function(b, a, h) {};
        a._setupContainer = function() {
            var b = document.body,
            a;
            b && (a = b.style) && (a.paddingTop = a.paddingTop || "0px", a.paddingRight = a.paddingRight || "0px", a.paddingBottom = a.paddingBottom || "0px", a.paddingLeft = a.paddingLeft || "0px", a.borderTop = a.borderTop || "0px", a.borderRight = a.borderRight || "0px", a.borderBottom = a.borderBottom || "0px", a.borderLeft = a.borderLeft || "0px", a.marginTop = a.marginTop || "0px", a.marginRight = a.marginRight || "0px", a.marginBottom = a.marginBottom || "0px", a.marginLeft = a.marginLeft || "0px")
        };
        return b
    } ();
    d.ContainerStrategy = e;
    e.prototype.__class__ = "egret.ContainerStrategy";
    var c = function(b) {
        function a() {
            b.apply(this, arguments)
        }
        __extends(a, b);
        a.prototype._apply = function(b) {
            this._setupContainer()
        };
        return a
    } (e);
    d.EqualToFrame = c;
    c.prototype.__class__ = "egret.EqualToFrame";
    g = function() {
        function b() {}
        var a = b.prototype;
        a.init = function(b) {};
        a._apply = function(b, a, h) {};
        a.setEgretSize = function(b, a, h, c, e, g) {
            void 0 === g && (g = 0);
            d.StageDelegate.getInstance()._stageWidth = Math.round(b);
            d.StageDelegate.getInstance()._stageHeight = Math.round(a);
            b = document.getElementById(f.canvas_div_name);
            a = document.getElementById(f.egret_root_div);
            b || (b = d.Browser.getInstance().$new("div"), b.id = f.canvas_div_name, a.appendChild(b));
            b.style.width = h + "px";
            b.style.height = c + "px";
            a.style.width = h + "px";
            a.style.height = c + "px";
            a.style.top = g + "px"
        };
        a._getClientWidth = function() {
            return document.documentElement.clientWidth
        };
        a._getClientHeight = function() {
            return document.documentElement.clientHeight
        };
        return b
    } ();
    d.ContentStrategy = g;
    g.prototype.__class__ = "egret.ContentStrategy";
    var a = function(b) {
        function a(h) {
            void 0 === h && (h = 0);
            b.call(this);
            this.minWidth = NaN;
            this.minWidth = h
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            a = this._getClientWidth();
            var c = this._getClientHeight(),
            e = c / h,
            d = a / e,
            f = 1;
            0 != this.minWidth && (f = Math.min(1, d / this.minWidth));
            this.setEgretSize(d / f, h, a, c * f);
            b._scaleX = e * f;
            b._scaleY = e * f
        };
        return a
    } (g);
    d.FixedHeight = a;
    a.prototype.__class__ = "egret.FixedHeight";
    a = function(b) {
        function a(h) {
            void 0 === h && (h = 0);
            b.call(this);
            this.minHeight = NaN;
            this.minHeight = h
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            h = this._getClientWidth();
            var c = this._getClientHeight(),
            e = h / a,
            d = c / e,
            f = 1;
            0 != this.minHeight && (f = Math.min(1, d / this.minHeight));
            this.setEgretSize(a, d / f, h * f, c, h * (1 - f) / 2);
            b._scaleX = e * f;
            b._scaleY = e * f
        };
        return a
    } (g);
    d.FixedWidth = a;
    a.prototype.__class__ = "egret.FixedWidth";
    a = function(b) {
        function a(h, c) {
            b.call(this);
            this.width = h;
            this.height = c
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            h = this.width;
            var c = this.height,
            e = h / a;
            this.setEgretSize(a, c / e, h, c);
            b._scaleX = e;
            b._scaleY = e
        };
        return a
    } (g);
    d.FixedSize = a;
    a.prototype.__class__ = "egret.FixedSize";
    a = function(b) {
        function a() {
            b.call(this)
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            this.setEgretSize(a, h, a, h, Math.floor((a - a) / 2));
            b._scaleX = 1;
            b._scaleY = 1
        };
        return a
    } (g);
    d.NoScale = a;
    a.prototype.__class__ = "egret.NoScale";
    a = function(b) {
        function a() {
            b.call(this)
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            var c = this._getClientWidth(),
            e = this._getClientHeight(),
            d = c,
            f = e,
            g = d / a < f / h ? d / a: f / h,
            d = a * g,
            f = h * g,
            c = Math.floor((c - d) / 2);
            b._offSetY = Math.floor((e - f) / 2);
            this.setEgretSize(a, h / 1, 1 * d, f, c, b._offSetY);
            b._scaleX = 1 * g;
            b._scaleY = 1 * g
        };
        return a
    } (g);
    d.ShowAll = a;
    a.prototype.__class__ = "egret.ShowAll";
    g = function(b) {
        function a() {
            b.call(this)
        }
        __extends(a, b);
        a.prototype._apply = function(b, a, h) {
            var c = this._getClientWidth(),
            e = this._getClientHeight(),
            c = c / a,
            e = e / h;
            this.setEgretSize(a, h, a * c, h * e);
            b._scaleX = c;
            b._scaleY = e
        };
        return a
    } (g);
    d.FullScreen = g;
    g.prototype.__class__ = "egret.FullScreen"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._originalData = {};
            this._drawAreaList = []
        }
        __extends(e, f);
        var c = e.prototype;
        e.getInstance = function() {
            null == e.instance && (e.instance = new e);
            return e.instance
        };
        c.addDrawArea = function(a) {
            this._drawAreaList.push(a)
        };
        c.clearDrawArea = function() {
            this._drawAreaList = []
        };
        c.drawImage = function(a, b, h, c, f, g, p, k, l, m, n) {
            void 0 === n && (n = void 0);
            p = p || 0;
            k = k || 0;
            var q = b._texture_to_render;
            if (null != q && 0 != g && 0 != f && 0 != l && 0 != m) {
                var r = d.MainContext.instance.rendererContext._texture_scale_factor;
                f /= r;
                g /= r;
                if (0 != this._drawAreaList.length && d.MainContext.instance.rendererContext._cacheCanvasContext) {
                    r = d.DisplayObject.getTransformBounds(b._getSize(e.identityRectangle), b._worldTransform);
                    b._worldBounds.initialize(r.x, r.y, r.width, r.height);
                    r = this._originalData;
                    r.sourceX = h;
                    r.sourceY = c;
                    r.sourceWidth = f;
                    r.sourceHeight = g;
                    r.destX = p;
                    r.destY = k;
                    r.destWidth = l;
                    r.destHeight = m;
                    for (var w = this.getDrawAreaList(), y = 0; y < w.length; y++) if (!this.ignoreRender(b, w[y], r.destX, r.destY)) {
                        a.drawImage(q, h, c, f, g, p, k, l, m, n);
                        break
                    }
                } else a.drawImage(q, h, c, f, g, p, k, l, m, n)
            }
        };
        c.ignoreRender = function(a, b, h, c) {
            var e = a._worldBounds;
            h *= a._worldTransform.a;
            c *= a._worldTransform.d;
            return e.x + e.width + h <= b.x || e.x + h >= b.x + b.width || e.y + e.height + c <= b.y || e.y + c >= b.y + b.height ? !0 : !1
        };
        c.getDrawAreaList = function() {
            var a;
            0 == this._drawAreaList.length ? (this._defaultDrawAreaList || (this._defaultDrawAreaList = [new d.Rectangle(0, 0, d.MainContext.instance.stage.stageWidth, d.MainContext.instance.stage.stageHeight)], d.MainContext.instance.stage.addEventListener(d.Event.RESIZE, this.onResize, this)), a = this._defaultDrawAreaList) : a = this._drawAreaList;
            return a
        };
        c.onResize = function() {
            d.MainContext.instance.stage.removeEventListener(d.Event.RESIZE, this.onResize, this);
            this._defaultDrawAreaList = null
        };
        e.identityRectangle = new d.Rectangle;
        return e
    } (d.HashObject);
    d.RenderFilter = f;
    f.prototype.__class__ = "egret.RenderFilter"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {}
        f.mapClass = function(e, c, a) {
            void 0 === a && (a = "");
            e = this.getKey(e) + "#" + a;
            this.mapClassDic[e] = c
        };
        f.getKey = function(e) {
            return "string" == typeof e ? e: d.getQualifiedClassName(e)
        };
        f.mapValue = function(e, c, a) {
            void 0 === a && (a = "");
            e = this.getKey(e) + "#" + a;
            this.mapValueDic[e] = c
        };
        f.hasMapRule = function(e, c) {
            void 0 === c && (c = "");
            var a = this.getKey(e) + "#" + c;
            return this.mapValueDic[a] || this.mapClassDic[a] ? !0 : !1
        };
        f.getInstance = function(e, c) {
            void 0 === c && (c = "");
            var a = this.getKey(e) + "#" + c;
            if (this.mapValueDic[a]) return this.mapValueDic[a];
            var b = this.mapClassDic[a];
            if (b) return b = new b,
            this.mapValueDic[a] = b,
            delete this.mapClassDic[a],
            b;
            throw Error(d.getString(1028, a));
        };
        f.mapClassDic = {};
        f.mapValueDic = {};
        return f
    } ();
    d.Injector = f;
    f.prototype.__class__ = "egret.Injector"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        return function() {
            this.type = null
        }
    } ();
    d.Filter = f;
    f.prototype.__class__ = "egret.Filter"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(c, a) {
            d.call(this);
            this.blurX = c;
            this.blurY = a;
            this.type = "blur"
        }
        __extends(e, d);
        return e
    } (d.Filter);
    d.BlurFilter = f;
    f.prototype.__class__ = "egret.BlurFilter"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.NORMAL = "normal";
        d.ADD = "add";
        d.ERASE = "erase";
        d.ERASE_REVERSE = "eraseReverse";
        return d
    } ();
    d.BlendMode = f;
    f.prototype.__class__ = "egret.BlendMode"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.__hack_local_matrix = null;
            this._sizeDirty = this._normalDirty = !0;
            this._parent = this._texture_to_render = this.name = this._sizeChangeCallTarget = this._sizeChangeCallBack = null;
            this._y = this._x = 0;
            this._scaleY = this._scaleX = 1;
            this._anchorY = this._anchorX = this._anchorOffsetY = this._anchorOffsetX = 0;
            this._visible = !0;
            this._rotation = 0;
            this._alpha = 1;
            this._skewY = this._skewX = 0;
            this._touchEnabled = !1;
            this._scrollRect = this.blendMode = null;
            this._explicitHeight = this._explicitWidth = NaN;
            this._hasHeightSet = this._hasWidthSet = !1;
            this._worldBounds = this.mask = null;
            this.worldAlpha = 1;
            this.needDraw = this._isContainer = !1;
            this._hitTestPointTexture = null;
            this._rectH = this._rectW = 0;
            this._stage = null;
            this._cacheAsBitmap = !1;
            this.renderTexture = null;
            this._cacheDirty = !1;
            this._filter = this._colorTransform = null;
            this._worldTransform = new d.Matrix;
            this._worldBounds = new d.Rectangle(0, 0, 0, 0);
            this._cacheBounds = new d.Rectangle(0, 0, 0, 0)
        }
        __extends(e, f);
        var c = e.prototype;
        c._setDirty = function() {
            this._normalDirty = !0
        };
        c.getDirty = function() {
            return this._normalDirty || this._sizeDirty
        };
        c._setParentSizeDirty = function() {
            var a = this._parent; ! a || a._hasWidthSet || a._hasHeightSet || a._setSizeDirty()
        };
        c._setSizeDirty = function() {
            this._sizeDirty || (this._sizeDirty = !0, this._setDirty(), this._setCacheDirty(), this._setParentSizeDirty(), null != this._sizeChangeCallBack && (this._sizeChangeCallTarget == this._parent ? this._sizeChangeCallBack.call(this._sizeChangeCallTarget) : this._sizeChangeCallTarget = this._sizeChangeCallBack = null))
        };
        c._clearDirty = function() {
            this._normalDirty = !1
        };
        c._clearSizeDirty = function() {
            this._sizeDirty = !1
        };
        Object.defineProperty(c, "parent", {
            get: function() {
                return this._parent
            },
            enumerable: !0,
            configurable: !0
        });
        c._parentChanged = function(a) {
            this._parent = a
        };
        Object.defineProperty(c, "x", {
            get: function() {
                return this._x
            },
            set: function(a) {
                this._setX(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setX = function(a) {
            d.NumberUtils.isNumber(a) && this._x != a && (this._x = a, this._setDirty(), this._setParentSizeDirty())
        };
        Object.defineProperty(c, "y", {
            get: function() {
                return this._y
            },
            set: function(a) {
                this._setY(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setY = function(a) {
            d.NumberUtils.isNumber(a) && this._y != a && (this._y = a, this._setDirty(), this._setParentSizeDirty())
        };
        Object.defineProperty(c, "scaleX", {
            get: function() {
                return this._scaleX
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._scaleX != a && (this._scaleX = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "scaleY", {
            get: function() {
                return this._scaleY
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._scaleY != a && (this._scaleY = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "anchorOffsetX", {
            get: function() {
                return this._anchorOffsetX
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._anchorOffsetX != a && (this._anchorOffsetX = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "anchorOffsetY", {
            get: function() {
                return this._anchorOffsetY
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._anchorOffsetY != a && (this._anchorOffsetY = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "anchorX", {
            get: function() {
                return this._anchorX
            },
            set: function(a) {
                this._setAnchorX(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setAnchorX = function(a) {
            d.NumberUtils.isNumber(a) && this._anchorX != a && (this._anchorX = a, this._setDirty(), this._setParentSizeDirty())
        };
        Object.defineProperty(c, "anchorY", {
            get: function() {
                return this._anchorY
            },
            set: function(a) {
                this._setAnchorY(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setAnchorY = function(a) {
            d.NumberUtils.isNumber(a) && this._anchorY != a && (this._anchorY = a, this._setDirty(), this._setParentSizeDirty())
        };
        Object.defineProperty(c, "visible", {
            get: function() {
                return this._visible
            },
            set: function(a) {
                this._setVisible(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setVisible = function(a) {
            this._visible != a && (this._visible = a, this._setSizeDirty())
        };
        Object.defineProperty(c, "rotation", {
            get: function() {
                return this._rotation
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._rotation != a && (this._rotation = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "alpha", {
            get: function() {
                return this._alpha
            },
            set: function(a) {
                this._setAlpha(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setAlpha = function(a) {
            d.NumberUtils.isNumber(a) && this._alpha != a && (this._alpha = a, this._setDirty(), this._setCacheDirty())
        };
        Object.defineProperty(c, "skewX", {
            get: function() {
                return this._skewX
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._skewX != a && (this._skewX = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "skewY", {
            get: function() {
                return this._skewY
            },
            set: function(a) {
                d.NumberUtils.isNumber(a) && this._skewY != a && (this._skewY = a, this._setDirty(), this._setParentSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "touchEnabled", {
            get: function() {
                return this._touchEnabled
            },
            set: function(a) {
                this._setTouchEnabled(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setTouchEnabled = function(a) {
            this._touchEnabled = a
        };
        Object.defineProperty(c, "scrollRect", {
            get: function() {
                return this._scrollRect
            },
            set: function(a) {
                this._setScrollRect(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setScrollRect = function(a) {
            this._scrollRect = a;
            this._setSizeDirty()
        };
        Object.defineProperty(c, "measuredWidth", {
            get: function() {
                return this._measureBounds().width
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "measuredHeight", {
            get: function() {
                return this._measureBounds().height
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "explicitWidth", {
            get: function() {
                return this._explicitWidth
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "explicitHeight", {
            get: function() {
                return this._explicitHeight
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "width", {
            get: function() {
                return this._getWidth()
            },
            set: function(a) {
                this._setWidth(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._getWidth = function() {
            return this._getSize(d.Rectangle.identity).width
        };
        Object.defineProperty(c, "height", {
            get: function() {
                return this._getHeight()
            },
            set: function(a) {
                this._setHeight(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._getHeight = function() {
            return this._getSize(d.Rectangle.identity).height
        };
        c._setWidth = function(a) {
            this._setSizeDirty();
            this._setCacheDirty();
            this._explicitWidth = a;
            this._hasWidthSet = d.NumberUtils.isNumber(a)
        };
        c._setHeight = function(a) {
            this._setSizeDirty();
            this._setCacheDirty();
            this._explicitHeight = a;
            this._hasHeightSet = d.NumberUtils.isNumber(a)
        };
        c._draw = function(a) {
            if (this._visible && !this.drawCacheTexture(a)) {
                var b = d.MainContext.__use_new_draw && this._isContainer;
                this._filter && !b && a.setGlobalFilter(this._filter);
                this._colorTransform && !b && a.setGlobalColorTransform(this._colorTransform.matrix);
                a.setAlpha(this.worldAlpha, this.blendMode);
                a.setTransform(this._worldTransform);
                var h = this.mask || this._scrollRect;
                h && !b && a.pushMask(h);
                this._render(a);
                h && !b && a.popMask();
                this._colorTransform && !b && a.setGlobalColorTransform(null);
                this._filter && !b && a.setGlobalFilter(null)
            }
            this.destroyCacheBounds()
        };
        c._setGlobalFilter = function(a) {
            a.setGlobalFilter(this._filter)
        };
        c._removeGlobalFilter = function(a) {
            a.setGlobalFilter(null)
        };
        c._setGlobalColorTransform = function(a) {
            a.setGlobalColorTransform(this._colorTransform.matrix)
        };
        c._removeGlobalColorTransform = function(a) {
            a.setGlobalColorTransform(null)
        };
        c._pushMask = function(a) {
            a.setTransform(this._worldTransform);
            var b = this.mask || this._scrollRect;
            b && a.pushMask(b)
        };
        c._popMask = function(a) {
            a.popMask()
        };
        c.drawCacheTexture = function(a) {
            if (!1 == this._cacheAsBitmap) return ! 1;
            var b = this.getBounds(d.Rectangle.identity);
            if (this._cacheDirty || null == this._texture_to_render || 1 < b.width - this._texture_to_render._textureWidth || 1 < b.height - this._texture_to_render._textureHeight) this._cacheDirty = !this._makeBitmapCache();
            if (null == this._texture_to_render) return ! 1;
            var h = this._texture_to_render,
            b = h._offsetX,
            c = h._offsetY,
            e = h._textureWidth,
            h = h._textureHeight;
            this._updateTransform();
            a.setAlpha(this.worldAlpha, this.blendMode);
            a.setTransform(this._worldTransform);
            d.RenderFilter.getInstance().drawImage(a, this, 0, 0, e, h, b, c, e, h);
            return ! 0
        };
        c._updateTransform = function() {
            this._visible && (this._calculateWorldTransform(), "updateTransform" == d.MainContext._renderLoopPhase && (this.needDraw || this._texture_to_render || this._cacheAsBitmap) && d.RenderCommand.push(this._draw, this))
        };
        c._calculateWorldTransform = function() {
            var a = this._worldTransform,
            b = this._parent;
            a.identityMatrix(b._worldTransform);
            this._getMatrix(a);
            var h = this._scrollRect;
            h && a.append(1, 0, 0, 1, -h.x, -h.y);
            this.worldAlpha = b.worldAlpha * this._alpha
        };
        c._render = function(a) {};
        c.getBounds = function(a, b) {
            void 0 === b && (b = !0);
            var h = this._measureBounds(),
            c = this._hasWidthSet ? this._explicitWidth: h.width,
            e = this._hasHeightSet ? this._explicitHeight: h.height;
            this._rectW = h.width;
            this._rectH = h.height;
            this._clearSizeDirty();
            var f = h.x,
            h = h.y,
            g = 0,
            k = 0;
            b && (0 != this._anchorX || 0 != this._anchorY ? (g = c * this._anchorX, k = e * this._anchorY) : (g = this._anchorOffsetX, k = this._anchorOffsetY));
            this._cacheBounds.initialize(f - g, h - k, c, e);
            c = this._cacheBounds;
            a || (a = new d.Rectangle);
            return a.initialize(c.x, c.y, c.width, c.height)
        };
        c.destroyCacheBounds = function() {
            this._cacheBounds.x = 0;
            this._cacheBounds.y = 0;
            this._cacheBounds.width = 0;
            this._cacheBounds.height = 0
        };
        c._getConcatenatedMatrix = function() {
            for (var a = e.identityMatrixForGetConcatenated.identity(), b = this; null != b;) {
                if (0 != b._anchorX || 0 != b._anchorY) {
                    var h = b._getSize(d.Rectangle.identity);
                    a.prependTransform(b._x, b._y, b._scaleX, b._scaleY, b._rotation, b._skewX, b._skewY, h.width * b._anchorX, h.height * b._anchorY)
                } else a.prependTransform(b._x, b._y, b._scaleX, b._scaleY, b._rotation, b._skewX, b._skewY, b._anchorOffsetX, b._anchorOffsetY);
                b._scrollRect && a.prepend(1, 0, 0, 1, -b._scrollRect.x, -b._scrollRect.y);
                b = b._parent
            }
            return a
        };
        c.localToGlobal = function(a, b, h) {
            void 0 === a && (a = 0);
            void 0 === b && (b = 0);
            var c = this._getConcatenatedMatrix();
            c.append(1, 0, 0, 1, a, b);
            h || (h = new d.Point);
            h.x = c.tx;
            h.y = c.ty;
            return h
        };
        c.globalToLocal = function(a, b, h) {
            void 0 === a && (a = 0);
            void 0 === b && (b = 0);
            var c = this._getConcatenatedMatrix();
            c.invert();
            c.append(1, 0, 0, 1, a, b);
            h || (h = new d.Point);
            h.x = c.tx;
            h.y = c.ty;
            return h
        };
        c.hitTest = function(a, b, h) {
            void 0 === h && (h = !1);
            if (!this._visible || !h && !this._touchEnabled) return null;
            h = this.getBounds(d.Rectangle.identity, !1);
            a -= h.x;
            b -= h.y;
            return 0 <= a && a < h.width && 0 <= b && b < h.height ? this.mask || this._scrollRect ? this._scrollRect && a > this._scrollRect.x && b > this._scrollRect.y && a < this._scrollRect.x + this._scrollRect.width && b < this._scrollRect.y + this._scrollRect.height || this.mask && this.mask.x <= a && a < this.mask.x + this.mask.width && this.mask.y <= b && b < this.mask.y + this.mask.height ? this: null: this: null
        };
        c.hitTestPoint = function(a, b, h) {
            a = this.globalToLocal(a, b);
            return h ? (this._hitTestPointTexture || (this._hitTestPointTexture = new d.RenderTexture), h = this._hitTestPointTexture, h.drawToTexture(this), 0 != h.getPixel32(a.x - this._hitTestPointTexture._offsetX, a.y - this._hitTestPointTexture._offsetY)[3] ? !0 : !1) : !!this.hitTest(a.x, a.y, !0)
        };
        c._getMatrix = function(a) {
            a || (a = d.Matrix.identity.identity());
            var b, h;
            h = this._getOffsetPoint();
            b = h.x;
            h = h.y;
            var c = this.__hack_local_matrix;
            c ? (a.append(c.a, c.b, c.c, c.d, c.tx, c.ty), a.append(1, 0, 0, 1, -b, -h)) : a.appendTransform(this._x, this._y, this._scaleX, this._scaleY, this._rotation, this._skewX, this._skewY, b, h);
            return a
        };
        c._getSize = function(a) {
            if (this._hasHeightSet && this._hasWidthSet) return this._clearSizeDirty(),
            a.initialize(0, 0, this._explicitWidth, this._explicitHeight);
            this._measureSize(a);
            this._hasWidthSet && (a.width = this._explicitWidth);
            this._hasHeightSet && (a.height = this._explicitHeight);
            return a
        };
        c._measureSize = function(a) {
            this._sizeDirty ? (a = this._measureBounds(), this._rectW = a.width, this._rectH = a.height, this._clearSizeDirty()) : (a.width = this._rectW, a.height = this._rectH);
            a.x = 0;
            a.y = 0;
            return a
        };
        c._measureBounds = function() {
            return d.Rectangle.identity.initialize(0, 0, 0, 0)
        };
        c._getOffsetPoint = function() {
            var a = this._anchorOffsetX,
            b = this._anchorOffsetY;
            if (0 != this._anchorX || 0 != this._anchorY) b = this._getSize(d.Rectangle.identity),
            a = this._anchorX * b.width,
            b = this._anchorY * b.height;
            var h = d.Point.identity;
            h.x = a;
            h.y = b;
            return h
        };
        c._onAddToStage = function() {
            this._stage = d.MainContext.instance.stage;
            d.DisplayObjectContainer.__EVENT__ADD_TO_STAGE_LIST.push(this)
        };
        c._onRemoveFromStage = function() {
            d.DisplayObjectContainer.__EVENT__REMOVE_FROM_STAGE_LIST.push(this)
        };
        Object.defineProperty(c, "stage", {
            get: function() {
                return this._stage
            },
            enumerable: !0,
            configurable: !0
        });
        c.addEventListener = function(a, b, h, c, E) {
            void 0 === c && (c = !1);
            void 0 === E && (E = 0);
            f.prototype.addEventListener.call(this, a, b, h, c, E); ((c = a == d.Event.ENTER_FRAME) || a == d.Event.RENDER) && this._insertEventBin(c ? e._enterFrameCallBackList: e._renderCallBackList, b, h, E, this)
        };
        c.removeEventListener = function(a, b, h, c) {
            void 0 === c && (c = !1);
            f.prototype.removeEventListener.call(this, a, b, h, c); ((c = a == d.Event.ENTER_FRAME) || a == d.Event.RENDER) && this._removeEventBin(c ? e._enterFrameCallBackList: e._renderCallBackList, b, h, this)
        };
        c.dispatchEvent = function(a) {
            if (!a._bubbles) return f.prototype.dispatchEvent.call(this, a);
            for (var b = [], h = this; h;) b.push(h),
            h = h._parent;
            a._reset();
            this._dispatchPropagationEvent(a, b);
            return ! a._isDefaultPrevented
        };
        c._dispatchPropagationEvent = function(a, b, h) {
            h = b.length;
            for (var c = 1,
            e = h - 1; 0 <= e; e--) {
                var d = b[e];
                a._currentTarget = d;
                a._target = this;
                a._eventPhase = c;
                d._notifyListener(a);
                if (a._isPropagationStopped || a._isPropagationImmediateStopped) return
            }
            d = b[0];
            a._currentTarget = d;
            a._target = this;
            a._eventPhase = 2;
            d._notifyListener(a);
            if (!a._isPropagationStopped && !a._isPropagationImmediateStopped) for (c = 3, e = 1; e < h && (d = b[e], a._currentTarget = d, a._target = this, a._eventPhase = c, d._notifyListener(a), !a._isPropagationStopped && !a._isPropagationImmediateStopped); e++);
        };
        c.willTrigger = function(a) {
            for (var b = this; b;) {
                if (b.hasEventListener(a)) return ! 0;
                b = b._parent
            }
            return ! 1
        };
        Object.defineProperty(c, "cacheAsBitmap", {
            get: function() {
                return this._cacheAsBitmap
            },
            set: function(a) { (this._cacheAsBitmap = a) ? d.callLater(this._makeBitmapCache, this) : this._texture_to_render = null
            },
            enumerable: !0,
            configurable: !0
        });
        c._makeBitmapCache = function() {
            this.renderTexture || (this.renderTexture = new d.RenderTexture);
            var a = this.renderTexture.drawToTexture(this);
            this._texture_to_render = a ? this.renderTexture: null;
            return a
        };
        c._setCacheDirty = function(a) {
            void 0 === a && (a = !0);
            this._cacheDirty = a
        };
        e.getTransformBounds = function(a, b) {
            var h = a.x,
            c = a.y,
            e = a.width,
            d = a.height; (h || c) && b.appendTransform(0, 0, 1, 1, 0, 0, 0, -h, -c);
            var f = e * b.a,
            e = e * b.b,
            g = d * b.c,
            d = d * b.d,
            l = b.tx,
            m = b.ty,
            n = l,
            q = l,
            r = m,
            w = m; (h = f + l) < n ? n = h: h > q && (q = h); (h = f + g + l) < n ? n = h: h > q && (q = h); (h = g + l) < n ? n = h: h > q && (q = h); (c = e + m) < r ? r = c: c > w && (w = c); (c = e + d + m) < r ? r = c: c > w && (w = c); (c = d + m) < r ? r = c: c > w && (w = c);
            return a.initialize(n, r, q - n, w - r)
        };
        Object.defineProperty(c, "colorTransform", {
            get: function() {
                return this._colorTransform
            },
            set: function(a) {
                this._colorTransform = a
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "filter", {
            get: function() {
                return this._filter
            },
            set: function(a) {
                this._filter = a
            },
            enumerable: !0,
            configurable: !0
        });
        e.identityMatrixForGetConcatenated = new d.Matrix;
        e._enterFrameCallBackList = [];
        e._renderCallBackList = [];
        return e
    } (d.EventDispatcher);
    d.DisplayObject = f;
    f.prototype.__class__ = "egret.DisplayObject";
    f = function() {
        function d() {
            this.matrix = null
        }
        d.prototype.updateColor = function(e, c, a, b, h, d, f, g) {};
        return d
    } ();
    d.ColorTransform = f;
    f.prototype.__class__ = "egret.ColorTransform"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._touchChildren = !0;
            this._children = [];
            this._isContainer = !0
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "touchChildren", {
            get: function() {
                return this._touchChildren
            },
            set: function(a) {
                this._touchChildren = a
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "numChildren", {
            get: function() {
                return this._children.length
            },
            enumerable: !0,
            configurable: !0
        });
        c.setChildIndex = function(a, b) {
            this.doSetChildIndex(a, b)
        };
        c.doSetChildIndex = function(a, b) {
            var h = this._children.indexOf(a);
            0 > h && d.Logger.fatalWithErrorId(1006);
            this._children.splice(h, 1);
            0 > b || this._children.length <= b ? this._children.push(a) : this._children.splice(b, 0, a)
        };
        c.addChild = function(a) {
            var b = this._children.length;
            a._parent == this && b--;
            return this._doAddChild(a, b)
        };
        c.addChildAt = function(a, b) {
            return this._doAddChild(a, b)
        };
        c._doAddChild = function(a, b, h) {
            void 0 === h && (h = !0);
            if (a == this) return a;
            if (0 > b || b > this._children.length) return d.Logger.fatalWithErrorId(1007),
            a;
            var c = a._parent;
            if (c == this) return this.doSetChildIndex(a, b),
            a;
            if (c) {
                var f = c._children.indexOf(a);
                0 <= f && c._doRemoveChild(f)
            }
            this._children.splice(b, 0, a);
            a._parentChanged(this);
            h && a.dispatchEventWith(d.Event.ADDED, !0);
            if (this._stage) for (a._onAddToStage(), b = e.__EVENT__ADD_TO_STAGE_LIST; 0 < b.length;) c = b.shift(),
            h && c.dispatchEventWith(d.Event.ADDED_TO_STAGE);
            a._setDirty();
            this._setSizeDirty();
            return a
        };
        c.removeChild = function(a) {
            a = this._children.indexOf(a);
            if (0 <= a) return this._doRemoveChild(a);
            d.Logger.fatalWithErrorId(1008);
            return null
        };
        c.removeChildAt = function(a) {
            if (0 <= a && a < this._children.length) return this._doRemoveChild(a);
            d.Logger.fatalWithErrorId(1007);
            return null
        };
        c._doRemoveChild = function(a, b) {
            void 0 === b && (b = !0);
            var h = this._children,
            c = h[a];
            b && c.dispatchEventWith(d.Event.REMOVED, !0);
            if (this._stage) {
                c._onRemoveFromStage();
                for (var f = e.__EVENT__REMOVE_FROM_STAGE_LIST; 0 < f.length;) {
                    var g = f.shift();
                    b && g.dispatchEventWith(d.Event.REMOVED_FROM_STAGE);
                    g._stage = null
                }
            }
            c._parentChanged(null);
            h.splice(a, 1);
            this._setSizeDirty();
            return c
        };
        c.getChildAt = function(a) {
            if (0 <= a && a < this._children.length) return this._children[a];
            d.Logger.fatalWithErrorId(1007);
            return null
        };
        c.contains = function(a) {
            for (; a;) {
                if (a == this) return ! 0;
                a = a._parent
            }
            return ! 1
        };
        c.swapChildrenAt = function(a, b) {
            0 <= a && a < this._children.length && 0 <= b && b < this._children.length ? this._swapChildrenAt(a, b) : d.Logger.fatalWithErrorId(1007)
        };
        c.swapChildren = function(a, b) {
            var h = this._children.indexOf(a),
            c = this._children.indexOf(b); - 1 == h || -1 == c ? d.Logger.fatalWithErrorId(1008) : this._swapChildrenAt(h, c)
        };
        c._swapChildrenAt = function(a, b) {
            if (a != b) {
                var h = this._children,
                c = h[a];
                h[a] = h[b];
                h[b] = c
            }
        };
        c.getChildIndex = function(a) {
            return this._children.indexOf(a)
        };
        c.removeChildren = function() {
            for (var a = this._children.length - 1; 0 <= a; a--) this._doRemoveChild(a)
        };
        c._updateTransform = function() {
            if (this._visible) {
                this._filter && d.RenderCommand.push(this._setGlobalFilter, this);
                this._colorTransform && d.RenderCommand.push(this._setGlobalColorTransform, this);
                var a = this.mask || this._scrollRect;
                a && d.RenderCommand.push(this._pushMask, this);
                f.prototype._updateTransform.call(this);
                if (!this._cacheAsBitmap || !this._texture_to_render) for (var b = 0,
                h = this._children,
                c = h.length; b < c; b++) h[b]._updateTransform();
                a && d.RenderCommand.push(this._popMask, this);
                this._colorTransform && d.RenderCommand.push(this._removeGlobalColorTransform, this);
                this._filter && d.RenderCommand.push(this._removeGlobalFilter, this)
            }
        };
        c._render = function(a) {
            if (!d.MainContext.__use_new_draw) for (var b = 0,
            h = this._children,
            c = h.length; b < c; b++) h[b]._draw(a)
        };
        c._measureBounds = function() {
            for (var a = 0,
            b = 0,
            h = 0,
            c = 0,
            e = this._children,
            f = e.length,
            g = 0; g < f; g++) {
                var k = e[g];
                if (k._visible) {
                    var l = k.getBounds(d.Rectangle.identity, !1),
                    m = l.x,
                    n = l.y,
                    q = l.width,
                    l = l.height,
                    k = k._getMatrix(),
                    k = d.DisplayObject.getTransformBounds(d.Rectangle.identity.initialize(m, n, q, l), k),
                    m = k.x,
                    n = k.y,
                    q = k.width + k.x,
                    k = k.height + k.y;
                    if (m < a || 0 == g) a = m;
                    if (q > b || 0 == g) b = q;
                    if (n < h || 0 == g) h = n;
                    if (k > c || 0 == g) c = k
                }
            }
            return d.Rectangle.identity.initialize(a, h, b - a, c - h)
        };
        c.hitTest = function(a, b, h) {
            void 0 === h && (h = !1);
            var c;
            if (!this._visible) return null;
            if (this._scrollRect) {
                if (a < this._scrollRect.x || b < this._scrollRect.y || a > this._scrollRect.x + this._scrollRect.width || b > this._scrollRect.y + this._scrollRect.height) return null
            } else if (this.mask && (this.mask.x > a || a > this.mask.x + this.mask.width || this.mask.y > b || b > this.mask.y + this.mask.height)) return null;
            for (var e = this._children,
            t = this._touchChildren,
            p = e.length - 1; 0 <= p; p--) {
                var k = e[p],
                l = k._getMatrix(),
                m = k._scrollRect;
                m && l.append(1, 0, 0, 1, -m.x, -m.y);
                l.invert();
                l = d.Matrix.transformCoords(l, a, b);
                if (k = k.hitTest(l.x, l.y, !0)) {
                    if (!t) return this;
                    if (k._touchEnabled && t) return k;
                    c = this
                }
            }
            return c ? c: this._texture_to_render ? f.prototype.hitTest.call(this, a, b, h) : null
        };
        c._onAddToStage = function() {
            f.prototype._onAddToStage.call(this);
            for (var a = this._children.length,
            b = 0; b < a; b++) this._children[b]._onAddToStage()
        };
        c._onRemoveFromStage = function() {
            f.prototype._onRemoveFromStage.call(this);
            for (var a = this._children,
            b = a.length,
            h = 0; h < b; h++) a[h]._onRemoveFromStage()
        };
        c.getChildByName = function(a) {
            for (var b = this._children,
            h = b.length,
            c, e = 0; e < h; e++) if (c = b[e], c.name == a) return c;
            return null
        };
        e.__EVENT__ADD_TO_STAGE_LIST = [];
        e.__EVENT__REMOVE_FROM_STAGE_LIST = [];
        return e
    } (d.DisplayObject);
    d.DisplayObjectContainer = f;
    f.prototype.__class__ = "egret.DisplayObjectContainer"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.NO_BORDER = "noBorder";
        d.NO_SCALE = "noScale";
        d.SHOW_ALL = "showAll";
        d.EXACT_FIT = "exactFit";
        return d
    } ();
    d.StageScaleMode = f;
    f.prototype.__class__ = "egret.StageScaleMode"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b) {
            void 0 === a && (a = 480);
            void 0 === b && (b = 800);
            f.call(this);
            this._changeSizeDispatchFlag = !0;
            this._scaleMode = "";
            this._stageHeight = this._stageWidth = NaN;
            this.touchEnabled = !0;
            this._stage = this;
            this._stageWidth = a;
            this._stageHeight = b
        }
        __extends(e, f);
        var c = e.prototype;
        c.invalidate = function() {
            e._invalidateRenderFlag = !0
        };
        Object.defineProperty(c, "scaleMode", {
            get: function() {
                return this._scaleMode
            },
            set: function(a) {
                this._scaleMode != a && (this._scaleMode = a, this.setResolutionPolicy())
            },
            enumerable: !0,
            configurable: !0
        });
        c.changeSize = function() {
            this._changeSizeDispatchFlag && (this.setResolutionPolicy(), this.dispatchEventWith(d.Event.RESIZE))
        };
        c.setResolutionPolicy = function() {
            var a = e.SCALE_MODE_ENUM[this._scaleMode];
            if (!a) throw Error(d.getString(1024));
            var b = new d.EqualToFrame,
            a = new d.ResolutionPolicy(b, a);
            d.StageDelegate.getInstance()._setResolutionPolicy(a);
            this._stageWidth = d.StageDelegate.getInstance()._stageWidth;
            this._stageHeight = d.StageDelegate.getInstance()._stageHeight
        };
        Object.defineProperty(c, "stageWidth", {
            get: function() {
                return this._stageWidth
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "stageHeight", {
            get: function() {
                return this._stageHeight
            },
            enumerable: !0,
            configurable: !0
        });
        c.hitTest = function(a, b, h) {
            if (!this._touchEnabled) return null;
            var c;
            if (!this._touchChildren) return this;
            h = this._children;
            for (var e = h.length - 1; 0 <= e; e--) {
                c = h[e];
                var f = c._getMatrix(),
                g = c._scrollRect;
                g && f.append(1, 0, 0, 1, -g.x, -g.y);
                f.invert();
                f = d.Matrix.transformCoords(f, a, b);
                if ((c = c.hitTest(f.x, f.y, !0)) && c._touchEnabled) return c
            }
            return this
        };
        c.getBounds = function(a) {
            a || (a = new d.Rectangle);
            return a.initialize(0, 0, this._stageWidth, this._stageHeight)
        };
        c._updateTransform = function() {
            for (var a = 0,
            b = this._children.length; a < b; a++) this._children[a]._updateTransform()
        };
        Object.defineProperty(c, "focus", {
            get: function() {
                return null
            },
            enumerable: !0,
            configurable: !0
        });
        e.registerScaleMode = function(a, b, h) {
            e.SCALE_MODE_ENUM[a] && !h ? d.Logger.warningWithErrorId(1009, a) : e.SCALE_MODE_ENUM[a] = b
        };
        e._invalidateRenderFlag = !1;
        e.SCALE_MODE_ENUM = {};
        return e
    } (d.DisplayObjectContainer);
    d.Stage = f;
    f.prototype.__class__ = "egret.Stage"
})(egret || (egret = {}));
egret.Stage.SCALE_MODE_ENUM[egret.StageScaleMode.NO_SCALE] = new egret.NoScale;
egret.Stage.SCALE_MODE_ENUM[egret.StageScaleMode.SHOW_ALL] = new egret.ShowAll;
egret.Stage.SCALE_MODE_ENUM[egret.StageScaleMode.NO_BORDER] = new egret.FixedWidth;
egret.Stage.SCALE_MODE_ENUM[egret.StageScaleMode.EXACT_FIT] = new egret.FullScreen; (function(d) {
    var f = function(f) {
        function e(a) {
            void 0 === a && (a = null);
            f.call(this);
            this._lastTouchPosition = new d.Point(0, 0);
            this._touchStartPosition = new d.Point(0, 0);
            this._scrollStarted = !1;
            this._lastTouchTime = 0;
            this._lastTouchEvent = null;
            this._velocitys = [];
            this._isVTweenPlaying = this._isHTweenPlaying = !1;
            this._vScrollTween = this._hScrollTween = null;
            this.scrollBeginThreshold = 10;
            this.scrollSpeed = 1;
            this._content = null;
            this._horizontalScrollPolicy = this._verticalScrollPolicy = "auto";
            this._scrollTop = this._scrollLeft = 0;
            this._vCanScroll = this._hCanScroll = !1;
            this.touchBeginTimer = this.delayTouchBeginEvent = null;
            this.touchEnabled = !0;
            a && this.setContent(a)
        }
        __extends(e, f);
        var c = e.prototype;
        c.setContent = function(a) {
            this._content !== a && (this.removeContent(), a && (this._content = a, f.prototype.addChild.call(this, a), this._addEvents()))
        };
        c.removeContent = function() {
            this._content && (this._removeEvents(), f.prototype.removeChildAt.call(this, 0));
            this._content = null
        };
        Object.defineProperty(c, "verticalScrollPolicy", {
            get: function() {
                return this._verticalScrollPolicy
            },
            set: function(a) {
                a != this._verticalScrollPolicy && (this._verticalScrollPolicy = a)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "horizontalScrollPolicy", {
            get: function() {
                return this._horizontalScrollPolicy
            },
            set: function(a) {
                a != this._horizontalScrollPolicy && (this._horizontalScrollPolicy = a)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "scrollLeft", {
            get: function() {
                return this._scrollLeft
            },
            set: function(a) {
                a != this._scrollLeft && (this._scrollLeft = a, this._validatePosition(!1, !0), this._updateContentPosition())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "scrollTop", {
            get: function() {
                return this._scrollTop
            },
            set: function(a) {
                a != this._scrollTop && (this._scrollTop = a, this._validatePosition(!0, !1), this._updateContentPosition())
            },
            enumerable: !0,
            configurable: !0
        });
        c.setScrollPosition = function(a, b, h) {
            void 0 === h && (h = !1);
            if (!h || 0 != a || 0 != b) if (h || this._scrollTop != a || this._scrollLeft != b) {
                if (h) {
                    h = this._isOnTheEdge(!0);
                    var c = this._isOnTheEdge(!1);
                    this._scrollTop += h ? a / 2 : a;
                    this._scrollLeft += c ? b / 2 : b
                } else this._scrollTop = a,
                this._scrollLeft = b;
                this._validatePosition(!0, !0);
                this._updateContentPosition()
            }
        };
        c._isOnTheEdge = function(a) {
            void 0 === a && (a = !0);
            var b = this._scrollTop,
            h = this._scrollLeft;
            return a ? 0 > b || b > this.getMaxScrollTop() : 0 > h || h > this.getMaxScrollLeft()
        };
        c._validatePosition = function(a, b) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            if (a) {
                var h = this.height,
                c = this._getContentHeight();
                this._scrollTop = Math.max(this._scrollTop, (0 - h) / 2);
                this._scrollTop = Math.min(this._scrollTop, c > h ? c - h / 2 : h / 2)
            }
            b && (h = this.width, c = this._getContentWidth(), this._scrollLeft = Math.max(this._scrollLeft, (0 - h) / 2), this._scrollLeft = Math.min(this._scrollLeft, c > h ? c - h / 2 : h / 2))
        };
        c._setWidth = function(a) {
            this._explicitWidth != a && (f.prototype._setWidth.call(this, a), this._updateContentPosition())
        };
        c._setHeight = function(a) {
            this._explicitHeight != a && (f.prototype._setHeight.call(this, a), this._updateContentPosition())
        };
        c._updateContentPosition = function() {
            var a = this.getBounds(d.Rectangle.identity);
            this.scrollRect = new d.Rectangle(this._scrollLeft, this._scrollTop, a.width, a.height);
            this.dispatchEvent(new d.Event(d.Event.CHANGE))
        };
        c._checkScrollPolicy = function() {
            var a = this.__checkScrollPolicy(this._horizontalScrollPolicy, this._getContentWidth(), this.width);
            this._hCanScroll = a;
            var b = this.__checkScrollPolicy(this._verticalScrollPolicy, this._getContentHeight(), this.height);
            this._vCanScroll = b;
            return a || b
        };
        c.__checkScrollPolicy = function(a, b, h) {
            return "on" == a ? !0 : "off" == a ? !1 : b > h
        };
        c._addEvents = function() {
            this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this._onTouchBegin, this);
            this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this._onTouchBeginCapture, this, !0);
            this.addEventListener(d.TouchEvent.TOUCH_END, this._onTouchEndCapture, this, !0)
        };
        c._removeEvents = function() {
            this.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this._onTouchBegin, this);
            this.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this._onTouchBeginCapture, this, !0);
            this.removeEventListener(d.TouchEvent.TOUCH_END, this._onTouchEndCapture, this, !0)
        };
        c._onTouchBegin = function(a) { ! a._isDefaultPrevented && this._checkScrollPolicy() && (this._touchStartPosition.x = a.stageX, this._touchStartPosition.y = a.stageY, (this._isHTweenPlaying || this._isVTweenPlaying) && this._onScrollFinished(), this.stage.addEventListener(d.TouchEvent.TOUCH_MOVE, this._onTouchMove, this), this.stage.addEventListener(d.TouchEvent.TOUCH_END, this._onTouchEnd, this), this.stage.addEventListener(d.TouchEvent.LEAVE_STAGE, this._onTouchEnd, this), this.addEventListener(d.Event.ENTER_FRAME, this._onEnterFrame, this), this._logTouchEvent(a), a.preventDefault())
        };
        c._onTouchBeginCapture = function(a) {
            var b = this._checkScrollPolicy();
            if (b) {
                for (var h = a.target; h != this;) {
                    if ("_checkScrollPolicy" in h && (b = h._checkScrollPolicy())) return;
                    h = h.parent
                }
                a.stopPropagation();
                this.delayTouchBeginEvent = this.cloneTouchEvent(a);
                this.touchBeginTimer || (this.touchBeginTimer = new d.Timer(100, 1), this.touchBeginTimer.addEventListener(d.TimerEvent.TIMER_COMPLETE, this._onTouchBeginTimer, this));
                this.touchBeginTimer.start();
                this._onTouchBegin(a)
            }
        };
        c._onTouchEndCapture = function(a) {
            this.delayTouchBeginEvent && this._onTouchBeginTimer()
        };
        c._onTouchBeginTimer = function() {
            this.touchBeginTimer.stop();
            var a = this.delayTouchBeginEvent;
            this.delayTouchBeginEvent = null;
            this.stage && this.dispatchPropagationEvent(a)
        };
        c.dispatchPropagationEvent = function(a) {
            for (var b = [], h = a._target, c = 0; h;) h == this && (c = b.length),
            b.push(h),
            h = h.parent;
            h = b.slice(0, c);
            h = h.reverse();
            b = h.concat(b);
            this._dispatchPropagationEvent(a, b, c)
        };
        c._dispatchPropagationEvent = function(a, b, h) {
            for (var c = b.length,
            e = 0; e < c; e++) {
                var d = b[e];
                a._currentTarget = d;
                a._eventPhase = e < h ? 1 : e == h ? 2 : 3;
                d._notifyListener(a);
                if (a._isPropagationStopped || a._isPropagationImmediateStopped) break
            }
        };
        c._onTouchMove = function(a) {
            if (this._lastTouchPosition.x != a.stageX || this._lastTouchPosition.y != a.stageY) {
                if (!this._scrollStarted) {
                    var b = a.stageX - this._touchStartPosition.x,
                    h = a.stageY - this._touchStartPosition.y;
                    if (Math.sqrt(b * b + h * h) < this.scrollBeginThreshold) {
                        this._logTouchEvent(a);
                        return
                    }
                }
                this._scrollStarted = !0;
                this.delayTouchBeginEvent && (this.delayTouchBeginEvent = null, this.touchBeginTimer.stop());
                this.touchChildren = !1;
                b = this._getPointChange(a);
                this.setScrollPosition(b.y, b.x, !0);
                this._calcVelocitys(a);
                this._logTouchEvent(a)
            }
        };
        c._onTouchEnd = function(a) {
            this.touchChildren = !0;
            this._scrollStarted = !1;
            d.MainContext.instance.stage.removeEventListener(d.TouchEvent.TOUCH_MOVE, this._onTouchMove, this);
            d.MainContext.instance.stage.removeEventListener(d.TouchEvent.TOUCH_END, this._onTouchEnd, this);
            d.MainContext.instance.stage.removeEventListener(d.TouchEvent.LEAVE_STAGE, this._onTouchEnd, this);
            this.removeEventListener(d.Event.ENTER_FRAME, this._onEnterFrame, this);
            this._moveAfterTouchEnd()
        };
        c._onEnterFrame = function(a) {
            a = d.getTimer();
            100 < a - this._lastTouchTime && 300 > a - this._lastTouchTime && this._calcVelocitys(this._lastTouchEvent)
        };
        c._logTouchEvent = function(a) {
            this._lastTouchPosition.x = a.stageX;
            this._lastTouchPosition.y = a.stageY;
            this._lastTouchEvent = this.cloneTouchEvent(a);
            this._lastTouchTime = d.getTimer()
        };
        c._getPointChange = function(a) {
            return {
                x: !1 === this._hCanScroll ? 0 : this._lastTouchPosition.x - a.stageX,
                y: !1 === this._vCanScroll ? 0 : this._lastTouchPosition.y - a.stageY
            }
        };
        c._calcVelocitys = function(a) {
            var b = d.getTimer();
            if (0 == this._lastTouchTime) this._lastTouchTime = b;
            else {
                var h = this._getPointChange(a),
                b = b - this._lastTouchTime;
                h.x /= b;
                h.y /= b;
                this._velocitys.push(h);
                5 < this._velocitys.length && this._velocitys.shift();
                this._lastTouchPosition.x = a.stageX;
                this._lastTouchPosition.y = a.stageY
            }
        };
        c._getContentWidth = function() {
            return this._content.explicitWidth || this._content.width
        };
        c._getContentHeight = function() {
            return this._content.explicitHeight || this._content.height
        };
        c.getMaxScrollLeft = function() {
            var a = this._getContentWidth() - this.width;
            return Math.max(0, a)
        };
        c.getMaxScrollTop = function() {
            var a = this._getContentHeight() - this.height;
            return Math.max(0, a)
        };
        c._moveAfterTouchEnd = function() {
            if (0 != this._velocitys.length) {
                for (var a = 0,
                b = 0,
                h = 0,
                c = 0; c < this._velocitys.length; c++) var d = this._velocitys[c],
                f = e.weight[c],
                a = a + d.x * f,
                b = b + d.y * f,
                h = h + f;
                this._velocitys.length = 0;
                0 >= this.scrollSpeed && (this.scrollSpeed = 1);
                a = a / h * this.scrollSpeed;
                b = b / h * this.scrollSpeed;
                d = Math.abs(a);
                h = Math.abs(b);
                f = this.getMaxScrollLeft();
                c = this.getMaxScrollTop();
                a = 0.02 < d ? this.getAnimationDatas(a, this._scrollLeft, f) : {
                    position: this._scrollLeft,
                    duration: 1
                };
                b = 0.02 < h ? this.getAnimationDatas(b, this._scrollTop, c) : {
                    position: this._scrollTop,
                    duration: 1
                };
                this.setScrollLeft(a.position, a.duration);
                this.setScrollTop(b.position, b.duration)
            }
        };
        c._onTweenFinished = function(a) {
            a == this._vScrollTween && (this._isVTweenPlaying = !1);
            a == this._hScrollTween && (this._isHTweenPlaying = !1); ! 1 == this._isHTweenPlaying && !1 == this._isVTweenPlaying && this._onScrollFinished()
        };
        c._onScrollStarted = function() {};
        c._onScrollFinished = function() {
            d.Tween.removeTweens(this);
            this._vScrollTween = this._hScrollTween = null;
            this._isVTweenPlaying = this._isHTweenPlaying = !1;
            this.dispatchEvent(new d.Event(d.Event.COMPLETE))
        };
        c.setScrollTop = function(a, b) {
            void 0 === b && (b = 0);
            var h = Math.min(this.getMaxScrollTop(), Math.max(a, 0));
            if (0 == b) return this.scrollTop = h,
            null;
            var c = d.Tween.get(this).to({
                scrollTop: a
            },
            b, d.Ease.quartOut);
            h != a && c.to({
                scrollTop: h
            },
            300, d.Ease.quintOut);
            this._isVTweenPlaying = !0;
            this._vScrollTween = c;
            c.call(this._onTweenFinished, this, [c]);
            this._isHTweenPlaying || this._onScrollStarted();
            return c
        };
        c.setScrollLeft = function(a, b) {
            void 0 === b && (b = 0);
            var h = Math.min(this.getMaxScrollLeft(), Math.max(a, 0));
            if (0 == b) return this.scrollLeft = h,
            null;
            var c = d.Tween.get(this).to({
                scrollLeft: a
            },
            b, d.Ease.quartOut);
            h != a && c.to({
                scrollLeft: h
            },
            300, d.Ease.quintOut);
            this._isHTweenPlaying = !0;
            this._hScrollTween = c;
            c.call(this._onTweenFinished, this, [c]);
            this._isVTweenPlaying || this._onScrollStarted();
            return c
        };
        c.getAnimationDatas = function(a, b, h) {
            var c = Math.abs(a),
            e = 0,
            d = b + 500 * a;
            if (0 > d || d > h) for (d = b; Infinity != Math.abs(a) && 0.02 < Math.abs(a);) d += a,
            a = 0 > d || d > h ? 0.998 * a * 0.95 : 0.998 * a,
            e++;
            else e = 500 * -Math.log(0.02 / c);
            return {
                position: Math.min(h + 50, Math.max(d, -50)),
                duration: e
            }
        };
        c.cloneTouchEvent = function(a) {
            var b = new d.TouchEvent(a._type, a._bubbles, a.cancelable);
            b.touchPointID = a.touchPointID;
            b._stageX = a._stageX;
            b._stageY = a._stageY;
            b.ctrlKey = a.ctrlKey;
            b.altKey = a.altKey;
            b.shiftKey = a.shiftKey;
            b.touchDown = a.touchDown;
            b._isDefaultPrevented = !1;
            b._target = a._target;
            return b
        };
        c.throwNotSupportedError = function() {
            throw Error(d.getString(1023));
        };
        c.addChild = function(a) {
            this.throwNotSupportedError();
            return null
        };
        c.addChildAt = function(a, b) {
            this.throwNotSupportedError();
            return null
        };
        c.removeChild = function(a) {
            this.throwNotSupportedError();
            return null
        };
        c.removeChildAt = function(a) {
            this.throwNotSupportedError();
            return null
        };
        c.setChildIndex = function(a, b) {
            this.throwNotSupportedError()
        };
        c.swapChildren = function(a, b) {
            this.throwNotSupportedError()
        };
        c.swapChildrenAt = function(a, b) {
            this.throwNotSupportedError()
        };
        c.hitTest = function(a, b, h) {
            void 0 === h && (h = !1);
            var c = f.prototype.hitTest.call(this, a, b, h);
            return c ? c: d.DisplayObject.prototype.hitTest.call(this, a, b, h)
        };
        e.weight = [1, 1.33, 1.66, 2, 2.33];
        return e
    } (d.DisplayObjectContainer);
    d.ScrollView = f;
    f.prototype.__class__ = "egret.ScrollView"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.REPEAT = "repeat";
        d.SCALE = "scale";
        return d
    } ();
    d.BitmapFillMode = f;
    f.prototype.__class__ = "egret.BitmapFillMode"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a) {
            f.call(this);
            this.scale9Grid = this._texture = null;
            this.fillMode = "scale";
            a && (this._texture = a, this._setSizeDirty());
            this.needDraw = !0
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "texture", {
            get: function() {
                return this._texture
            },
            set: function(a) {
                a != this._texture && (this._setSizeDirty(), this._texture = a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._render = function(a) {
            var b = this._texture;
            b ? (this._texture_to_render = b, e._drawBitmap(a, this._hasWidthSet ? this._explicitWidth: b._textureWidth, this._hasHeightSet ? this._explicitHeight: b._textureHeight, this)) : this._texture_to_render = null
        };
        e._drawBitmap = function(a, b, h, c) {
            var d = c._texture_to_render;
            if (d) {
                var f = d._textureWidth,
                g = d._textureHeight;
                if ("scale" == c.fillMode) {
                    var k = c.scale9Grid || d.scale9Grid;
                    if (k && f - k.width < b && g - k.height < h) e.drawScale9GridImage(a, c, k, b, h);
                    else {
                        var k = d._offsetX,
                        l = d._offsetY,
                        m = d._bitmapWidth || f,
                        n = d._bitmapHeight || g;
                        b /= f;
                        k = Math.round(k * b);
                        b = Math.round(m * b);
                        h /= g;
                        l = Math.round(l * h);
                        h = Math.round(n * h);
                        e.renderFilter.drawImage(a, c, d._bitmapX, d._bitmapY, m, n, k, l, b, h)
                    }
                } else e.drawRepeatImage(a, c, b, h, c.fillMode)
            }
        };
        e.drawRepeatImage = function(a, b, h, c, e) {
            var f = b._texture_to_render;
            if (f) {
                var g = f._textureWidth,
                k = f._textureHeight,
                l = f._bitmapX,
                m = f._bitmapY,
                g = f._bitmapWidth || g,
                k = f._bitmapHeight || k,
                n = f._offsetX,
                f = f._offsetY;
                d.RenderFilter.getInstance().drawImage(a, b, l, m, g, k, n, f, h, c, e)
            }
        };
        e.drawScale9GridImage = function(a, b, h, c, e) {
            var f = d.MainContext.instance.rendererContext._texture_scale_factor,
            g = b._texture_to_render;
            if (g && h) {
                var k = g._textureWidth,
                l = g._textureHeight,
                m = g._bitmapX,
                n = g._bitmapY,
                q = g._bitmapWidth || k,
                r = g._bitmapHeight || l;
                c -= k - q;
                e -= l - r;
                if (!a.drawImageScale9(g, m, n, q, r, g._offsetX, g._offsetY, c, e, h)) {
                    k = g._offsetX / f;
                    l = g._offsetY / f;
                    g = d.RenderFilter.getInstance();
                    h = d.Rectangle.identity.initialize(h.x - Math.round(k), h.y - Math.round(k), h.width, h.height);
                    k = Math.round(k);
                    l = Math.round(l);
                    h.y == h.bottom && (h.bottom < r ? h.bottom++:h.y--);
                    h.x == h.right && (h.right < q ? h.right++:h.x--);
                    var w = m + h.x / f,
                    y = m + h.right / f,
                    s = q - h.right,
                    x = n + h.y / f,
                    f = n + h.bottom / f,
                    v = r - h.bottom,
                    z = k + h.x,
                    u = l + h.y,
                    r = e - (r - h.bottom),
                    q = c - (q - h.right);
                    g.drawImage(a, b, m, n, h.x, h.y, k, l, h.x, h.y);
                    g.drawImage(a, b, w, n, h.width, h.y, z, l, q - h.x, h.y);
                    g.drawImage(a, b, y, n, s, h.y, k + q, l, c - q, h.y);
                    g.drawImage(a, b, m, x, h.x, h.height, k, u, h.x, r - h.y);
                    g.drawImage(a, b, w, x, h.width, h.height, z, u, q - h.x, r - h.y);
                    g.drawImage(a, b, y, x, s, h.height, k + q, u, c - q, r - h.y);
                    g.drawImage(a, b, m, f, h.x, v, k, l + r, h.x, e - r);
                    g.drawImage(a, b, w, f, h.width, v, z, l + r, q - h.x, e - r);
                    g.drawImage(a, b, y, f, s, v, k + q, l + r, c - q, e - r)
                }
            }
        };
        c._measureBounds = function() {
            var a = this._texture;
            return a ? d.Rectangle.identity.initialize(0, 0, a._textureWidth, a._textureHeight) : f.prototype._measureBounds.call(this)
        };
        e.renderFilter = d.RenderFilter.getInstance();
        return e
    } (d.DisplayObject);
    d.Bitmap = f;
    f.prototype.__class__ = "egret.Bitmap"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._text = "";
            this._textChanged = !1;
            this._font = null;
            this._fontChanged = !1;
            this._textOffsetY = this._textOffsetX = this._textHeight = this._textWidth = 0;
            this.textLinesChange = !0;
            this._lineHeights = [];
            this.needDraw = this.cacheAsBitmap = !0
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "text", {
            get: function() {
                return this._text
            },
            set: function(a) {
                this._text != a && (this._textChanged = !0, this._text = a, this._setSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "font", {
            get: function() {
                return this._font
            },
            set: function(a) {
                this._font != a && (this._font = a, this._fontChanged = !0, this._setSizeDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        c._setSizeDirty = function() {
            f.prototype._setSizeDirty.call(this);
            this.textLinesChange = !0
        };
        c._render = function(a) {
            var b = this._getTextLines(),
            h = b.length;
            if (0 != h) {
                for (var c = this._font,
                f = c._getFirstCharHeight(), f = Math.ceil(f * e.EMPTY_FACTOR), g = 0, p = this._hasHeightSet ? this._explicitHeight: Number.POSITIVE_INFINITY, k = this._lineHeights, l = 0; l < h; l++) {
                    var m = k[l];
                    if (0 < l && g + m > p) break;
                    for (var n = b[l], q = n.length, r = 0, w = 0; w < q; w++) {
                        var y = n.charAt(w),
                        s = c.getTexture(y);
                        if (s) {
                            var y = s._bitmapWidth || s._textureWidth,
                            x = s._bitmapHeight || s._textureHeight;
                            this._texture_to_render = s;
                            d.RenderFilter.getInstance().drawImage(a, this, s._bitmapX, s._bitmapY, y, x, r + s._offsetX, g + s._offsetY, y, x);
                            r += s._textureWidth
                        } else " " == y ? r += f: d.Logger.warningWithErrorId(1011, y)
                    }
                    g += m
                }
                this._texture_to_render = null
            }
        };
        c._measureBounds = function() {
            return 0 == this._getTextLines().length ? d.Rectangle.identity.initialize(0, 0, 0, 0) : d.Rectangle.identity.initialize(this._textOffsetX, this._textOffsetY, this._textWidth - this._textOffsetX, this._textHeight - this._textOffsetY)
        };
        c._getTextLines = function() {
            if (!this.textLinesChange) return this._textLines;
            var a = [];
            this._textLines = a;
            this.textLinesChange = !1;
            var b = [];
            this._lineHeights = b;
            if (!this._text || !this._font) return a;
            for (var h = 0,
            c = 0,
            f = 0,
            g = 0,
            p = this._hasWidthSet,
            k = this._hasWidthSet ? this._explicitWidth: Number.POSITIVE_INFINITY, l = this._font, m = l._getFirstCharHeight(), n = Math.ceil(m * e.EMPTY_FACTOR), q = this._text.split(/(?:\r\n|\r|\n)/), r = q.length, w = !0, y = 0; y < r; y++) {
                for (var s = q[y], x = s.length, v = 0, z = 0, u = !0, D = 0; D < x; D++) {
                    var B = s.charAt(D),
                    C,
                    A = 0,
                    H = 0,
                    G = l.getTexture(B);
                    if (G) B = G._textureWidth,
                    C = G._textureHeight,
                    A = G._offsetX,
                    H = G._offsetY;
                    else if (" " == B) B = n,
                    C = m;
                    else {
                        d.Logger.warningWithErrorId(1011, B);
                        u && (u = !1);
                        continue
                    }
                    u && (u = !1, f = Math.min(A, f));
                    w && (g = Math.min(H, g));
                    p && 0 < D && z + B > k ? (a.push(s.substring(0, D)), b.push(v), c += v, h = Math.max(z, h), s = s.substring(D), x = s.length, D = 0, z = B, v = C) : (z += B, v = Math.max(C, v))
                }
                w && (w = !1);
                a.push(s);
                b.push(v);
                c += v;
                h = Math.max(z, h)
            }
            this._textWidth = h;
            this._textHeight = c;
            this._textOffsetX = f;
            this._textOffsetY = g;
            return a
        };
        e.EMPTY_FACTOR = 0.33;
        return e
    } (d.DisplayObject);
    d.BitmapText = f;
    f.prototype.__class__ = "egret.BitmapText"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {
            this.fillStyleColor = this.strokeStyleColor = this.renderContext = this.commandQueue = this.canvasContext = null;
            this._dirty = !1;
            this.lineY = this.lineX = 0;
            this._firstCheck = !0;
            this._lastY = this._lastX = this._maxY = this._maxX = this._minY = this._minX = 0;
            this.commandQueue = []
        }
        var e = f.prototype;
        e.beginFill = function(c, a) {};
        e._setStyle = function(c) {};
        e.drawRect = function(c, a, b, h) {
            this.checkRect(c, a, b, h)
        };
        e.drawCircle = function(c, a, b) {
            this.checkRect(c - b, a - b, 2 * b, 2 * b)
        };
        e.drawRoundRect = function(c, a, b, h, e, d) {
            this.checkRect(c, a, b, h)
        };
        e.drawEllipse = function(c, a, b, h) {
            this.checkRect(c - b, a - h, 2 * b, 2 * h)
        };
        e.lineStyle = function(c, a, b, h, e, d, f, g) {};
        e.lineTo = function(c, a) {
            this.checkPoint(c, a)
        };
        e.curveTo = function(c, a, b, h) {
            this.checkPoint(c, a);
            this.checkPoint(b, h)
        };
        e.moveTo = function(c, a) {
            this.checkPoint(c, a)
        };
        e.clear = function() {
            this._maxY = this._maxX = this._minY = this._minX = 0;
            this._firstCheck = !0
        };
        e.endFill = function() {};
        e._draw = function(c) {};
        e.checkRect = function(c, a, b, h) {
            this._firstCheck ? (this._firstCheck = !1, this._minX = c, this._minY = a, this._maxX = c + b, this._maxY = a + h) : (this._minX = Math.min(this._minX, c), this._minY = Math.min(this._minY, a), this._maxX = Math.max(this._maxX, c + b), this._maxY = Math.max(this._maxY, a + h))
        };
        e.checkPoint = function(c, a) {
            this._firstCheck ? (this._firstCheck = !1, this._minX = c, this._minY = a, this._maxX = c, this._maxY = a) : (this._minX = Math.min(this._minX, c), this._minY = Math.min(this._minY, a), this._maxX = Math.max(this._maxX, c), this._maxY = Math.max(this._maxY, a));
            this._lastX = c;
            this._lastY = a
        };
        e._measureBounds = function() {
            return d.Rectangle.identity.initialize(this._minX, this._minY, this._maxX - this._minX, this._maxY - this._minY)
        };
        return f
    } ();
    d.Graphics = f;
    f.prototype.__class__ = "egret.Graphics"; (function() {
        return function(d, e, c) {
            this.method = d;
            this.thisObject = e;
            this.args = c
        }
    })().prototype.__class__ = "egret.Command"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._graphics = null
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "graphics", {
            get: function() {
                this._graphics || (this._graphics = new d.Graphics, this.needDraw = !0);
                return this._graphics
            },
            enumerable: !0,
            configurable: !0
        });
        c._render = function(a) {
            this._graphics && this._graphics._draw(a)
        };
        c._measureBounds = function() {
            var a = this._graphics;
            return a ? a._measureBounds() : f.prototype._measureBounds.call(this)
        };
        return e
    } (d.DisplayObject);
    d.Shape = f;
    f.prototype.__class__ = "egret.Shape"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._graphics = null
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "graphics", {
            get: function() {
                this._graphics || (this._graphics = new d.Graphics, this.needDraw = !0);
                return this._graphics
            },
            enumerable: !0,
            configurable: !0
        });
        c._render = function(a) {
            this._graphics && this._graphics._draw(a);
            f.prototype._render.call(this, a)
        };
        c._measureBounds = function() {
            for (var a = 0,
            b = 0,
            h = 0,
            c = 0,
            e = this._children.length,
            f = 0; f < e; f++) {
                var g = this._children[f];
                if (g._visible) {
                    var k = g.getBounds(d.Rectangle.identity, !1),
                    l = k.x,
                    m = k.y,
                    n = k.width,
                    k = k.height,
                    g = g._getMatrix(),
                    g = d.DisplayObject.getTransformBounds(d.Rectangle.identity.initialize(l, m, n, k), g),
                    l = g.x,
                    m = g.y,
                    n = g.width + g.x,
                    g = g.height + g.y;
                    if (l < a || 0 == f) a = l;
                    if (n > b || 0 == f) b = n;
                    if (m < h || 0 == f) h = m;
                    if (g > c || 0 == f) c = g
                }
            }
            if (this._graphics) {
                e = this._graphics._measureBounds();
                l = e.x;
                m = e.y;
                n = e.width + e.x;
                g = e.height + e.y;
                if (l < a || 0 == f) a = l;
                if (n > b || 0 == f) b = n;
                if (m < h || 0 == f) h = m;
                if (g > c || 0 == f) c = g
            }
            return d.Rectangle.identity.initialize(a, h, b - a, c - h)
        };
        c.hitTest = function(a, b, h) {
            void 0 === h && (h = !1);
            var c = f.prototype.hitTest.call(this, a, b, h);
            return c ? c: this._graphics ? d.DisplayObject.prototype.hitTest.call(this, a, b, h) : null
        };
        return e
    } (d.DisplayObjectContainer);
    d.Sprite = f;
    f.prototype.__class__ = "egret.Sprite"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {}
        f._getStartLine = function(e) {
            var c = f._getTextHeight(e),
            a = 0;
            e._hasHeightSet && (!(c < e._explicitHeight) && c > e._explicitHeight && (a = Math.max(e._properties._scrollV - 1, 0), a = Math.min(e._properties._numLines - 1, a)), e._properties._multiline || (a = Math.max(e._properties._scrollV - 1, 0), a = Math.min(e._properties._numLines - 1, a)));
            return a
        };
        f._getHalign = function(e) {
            var c = e._getLinesArr(),
            a = 0;
            e._properties._textAlign == d.HorizontalAlign.CENTER ? a = 0.5 : e._properties._textAlign == d.HorizontalAlign.RIGHT && (a = 1);
            e._properties._type == d.TextFieldType.INPUT && !e._properties._multiline && 1 < c.length && (a = 0);
            return a
        };
        f._getTextHeight = function(e) {
            return d.TextFieldType.INPUT != e._properties._type || e._properties._multiline ? e._properties._textMaxHeight + (e._properties._numLines - 1) * e._properties._lineSpacing: e._properties._size
        };
        f._getValign = function(e) {
            var c = f._getTextHeight(e);
            return e._properties._type == d.TextFieldType.INPUT ? e._properties._multiline ? 0 : 0.5 : e._hasHeightSet && c < e._explicitHeight ? (c = 0, e._properties._verticalAlign == d.VerticalAlign.MIDDLE ? c = 0.5 : e._properties._verticalAlign == d.VerticalAlign.BOTTOM && (c = 1), c) : 0
        };
        f._getTextElement = function(e, c, a) {
            c = f._getHit(e, c, a);
            e = e._getLinesArr();
            return c && e[c.lineIndex] && e[c.lineIndex].elements[c.textElementIndex] ? e[c.lineIndex].elements[c.textElementIndex] : null
        };
        f._getHit = function(e, c, a) {
            var b = e._getLinesArr();
            if (0 == e._properties._textMaxWidth) return null;
            for (var h = 0,
            d = 0,
            f = 0; f < b.length; f++) {
                var g = b[f];
                if (d + g.height >= a) {
                    h = f + 1;
                    break
                } else d += g.height;
                if (d + e._properties._lineSpacing > a) return null;
                d += e._properties._lineSpacing
            }
            if (0 === h) return null;
            e = b[h - 1];
            for (f = a = 0; f < e.elements.length; f++) if (b = e.elements[f], a + b.width < c) a += b.width;
            else return {
                lineIndex: h - 1,
                textElementIndex: f
            };
            return null
        };
        f._getScrollNum = function(e) {
            var c = 1;
            if (e._properties._multiline) {
                var a = e.height,
                b = e.size;
                e = e.lineSpacing;
                c = Math.floor(a / (b + e));
                a - (b + e) * c > b / 2 && c++
            }
            return c
        };
        return f
    } ();
    d.TextFieldUtils = f;
    f.prototype.__class__ = "egret.TextFieldUtils"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        return function() {
            this._text = this._type = "";
            this._displayAsPassword = !1;
            this._fontFamily = d.TextField.default_fontFamily;
            this._size = 30;
            this._bold = this._italic = !1;
            this._textColorString = "#FFFFFF";
            this._textColor = 16777215;
            this._strokeColorString = "#000000";
            this._stroke = this._strokeColor = 0;
            this._border = !1;
            this._borderColor = 0;
            this._background = !1;
            this._backgroundColor = 16777215;
            this._textAlign = "left";
            this._verticalAlign = "top";
            this._maxChars = this._textMaxHeight = this._textMaxWidth = 0;
            this._scrollV = -1;
            this._numLines = this._lineSpacing = 0;
            this._multiline = !1
        }
    } ();
    d.TextFieldProperties = f;
    f.prototype.__class__ = "egret.TextFieldProperties"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._inputEnabled = !1;
            this._bgGraphics = this._inputUtils = null;
            this._isFlow = !1;
            this._textArr = [];
            this._isArrayChanged = !1;
            this._linesArr = [];
            this._isTyping = !1;
            this.needDraw = !0;
            this._properties = new d.TextFieldProperties
        }
        __extends(e, f);
        var c = e.prototype;
        c.isInput = function() {
            return this._properties._type == d.TextFieldType.INPUT
        };
        c._setTouchEnabled = function(a) {
            f.prototype._setTouchEnabled.call(this, a);
            this.isInput() && (this._inputEnabled = !0)
        };
        Object.defineProperty(c, "type", {
            get: function() {
                return this._properties._type
            },
            set: function(a) {
                this._setType(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setType = function(a) {
            var b = this._properties;
            b._type != a && (b._type = a, b._type == d.TextFieldType.INPUT ? (this._hasWidthSet || this._setWidth(100), this._hasHeightSet || this._setHeight(30), null == this._inputUtils && (this._inputUtils = new d.InputController), this._inputUtils.init(this), this._setDirty(), this._stage && this._inputUtils._addStageText()) : this._inputUtils && (this._inputUtils._removeStageText(), this._inputUtils = null))
        };
        Object.defineProperty(c, "text", {
            get: function() {
                return this._getText()
            },
            set: function(a) {
                this._setText(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._getText = function() {
            return this._properties._type == d.TextFieldType.INPUT ? this._inputUtils._getText() : this._properties._text
        };
        c._setSizeDirty = function() {
            f.prototype._setSizeDirty.call(this);
            this._isArrayChanged = !0
        };
        c._setTextDirty = function() {
            this._setSizeDirty()
        };
        c._setBaseText = function(a) {
            null == a && (a = "");
            var b = this._properties;
            this._isFlow = !1;
            b._text != a && (this._setTextDirty(), b._text = a, a = "", a = b._displayAsPassword ? this.changeToPassText(b._text) : b._text, this.setMiddleStyle([{
                text: a
            }]))
        };
        c._setText = function(a) {
            null == a && (a = "");
            this._setBaseText(a);
            this._inputUtils && this._inputUtils._setText(this._properties._text)
        };
        Object.defineProperty(c, "displayAsPassword", {
            get: function() {
                return this._properties._displayAsPassword
            },
            set: function(a) {
                this._setDisplayAsPassword(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setDisplayAsPassword = function(a) {
            var b = this._properties;
            b._displayAsPassword != a && (b._displayAsPassword = a, this._setTextDirty(), a = "", a = b._displayAsPassword ? this.changeToPassText(b._text) : b._text, this.setMiddleStyle([{
                text: a
            }]))
        };
        Object.defineProperty(c, "fontFamily", {
            get: function() {
                return this._properties._fontFamily
            },
            set: function(a) {
                this._setFontFamily(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setFontFamily = function(a) {
            this._properties._fontFamily != a && (this._setTextDirty(), this._properties._fontFamily = a)
        };
        Object.defineProperty(c, "size", {
            get: function() {
                return this._properties._size
            },
            set: function(a) {
                this._setSize(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setSize = function(a) {
            this._properties._size != a && (this._setTextDirty(), this._properties._size = a)
        };
        Object.defineProperty(c, "italic", {
            get: function() {
                return this._properties._italic
            },
            set: function(a) {
                this._setItalic(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setItalic = function(a) {
            this._properties._italic != a && (this._setTextDirty(), this._properties._italic = a)
        };
        Object.defineProperty(c, "bold", {
            get: function() {
                return this._properties._bold
            },
            set: function(a) {
                this._setBold(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setBold = function(a) {
            this._properties._bold != a && (this._setTextDirty(), this._properties._bold = a)
        };
        Object.defineProperty(c, "textColor", {
            get: function() {
                return this._properties._textColor
            },
            set: function(a) {
                this._setTextColor(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setTextColor = function(a) {
            this._properties._textColor != a && (this._setTextDirty(), this._properties._textColor = a, this._properties._textColorString = d.toColorString(a))
        };
        Object.defineProperty(c, "strokeColor", {
            get: function() {
                return this._properties._strokeColor
            },
            set: function(a) {
                this._setStrokeColor(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setStrokeColor = function(a) {
            this._properties._strokeColor != a && (this._setTextDirty(), this._properties._strokeColor = a, this._properties._strokeColorString = d.toColorString(a))
        };
        Object.defineProperty(c, "stroke", {
            get: function() {
                return this._properties._stroke
            },
            set: function(a) {
                this._setStroke(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setStroke = function(a) {
            this._properties._stroke != a && (this._setTextDirty(), this._properties._stroke = a)
        };
        Object.defineProperty(c, "textAlign", {
            get: function() {
                return this._properties._textAlign
            },
            set: function(a) {
                this._setTextAlign(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setTextAlign = function(a) {
            this._properties._textAlign != a && (this._setTextDirty(), this._properties._textAlign = a)
        };
        Object.defineProperty(c, "verticalAlign", {
            get: function() {
                return this._properties._verticalAlign
            },
            set: function(a) {
                this._setVerticalAlign(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setVerticalAlign = function(a) {
            this._properties._verticalAlign != a && (this._setTextDirty(), this._properties._verticalAlign = a)
        };
        Object.defineProperty(c, "maxChars", {
            get: function() {
                return this._properties._maxChars
            },
            set: function(a) {
                this._setMaxChars(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setMaxChars = function(a) {
            this._properties._maxChars != a && (this._properties._maxChars = a)
        };
        Object.defineProperty(c, "scrollV", {
            get: function() {
                return Math.min(Math.max(this._properties._scrollV, 1), this.maxScrollV)
            },
            set: function(a) {
                this._properties._scrollV = Math.max(a, 1);
                this._setDirty()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "maxScrollV", {
            get: function() {
                this._getLinesArr();
                return Math.max(this._properties._numLines - d.TextFieldUtils._getScrollNum(this) + 1, 1)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "selectionBeginIndex", {
            get: function() {
                return 0
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "selectionEndIndex", {
            get: function() {
                return 0
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "caretIndex", {
            get: function() {
                return 0
            },
            enumerable: !0,
            configurable: !0
        });
        c._setSelection = function(a, b) {};
        Object.defineProperty(c, "lineSpacing", {
            get: function() {
                return this._properties._lineSpacing
            },
            set: function(a) {
                this._setLineSpacing(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setLineSpacing = function(a) {
            this._properties._lineSpacing != a && (this._setTextDirty(), this._properties._lineSpacing = a)
        };
        c._getLineHeight = function() {
            return this._properties._lineSpacing + this._properties._size
        };
        Object.defineProperty(c, "numLines", {
            get: function() {
                return this._properties._numLines
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "multiline", {
            get: function() {
                return this._properties._multiline
            },
            set: function(a) {
                this._setMultiline(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setMultiline = function(a) {
            this._properties._multiline = a;
            this._setDirty()
        };
        c._setWidth = function(a) {
            f.prototype._setWidth.call(this, a);
            this.fillBackground()
        };
        c._setHeight = function(a) {
            f.prototype._setHeight.call(this, a);
            this.fillBackground()
        };
        Object.defineProperty(c, "border", {
            get: function() {
                return this._properties._border
            },
            set: function(a) {
                this._properties._border = a;
                this.fillBackground()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "borderColor", {
            get: function() {
                return this._properties._borderColor
            },
            set: function(a) {
                this._properties._borderColor = a;
                this.fillBackground()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "background", {
            get: function() {
                return this._properties._background
            },
            set: function(a) {
                this._properties._background = a;
                this.fillBackground()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "backgroundColor", {
            get: function() {
                return this._properties._backgroundColor
            },
            set: function(a) {
                this._properties._backgroundColor = a;
                this.fillBackground()
            },
            enumerable: !0,
            configurable: !0
        });
        c.fillBackground = function() {
            var a = this._bgGraphics,
            b = this._properties;
            a && a.clear();
            if (b._background || b._border) null == a && (a = this._bgGraphics = new d.Graphics),
            b._background && a.beginFill(b._backgroundColor, 1),
            b._border && a.lineStyle(1, b._borderColor),
            a.drawRect(0, 0, this._getWidth(), this._getHeight()),
            a.endFill()
        };
        c.setFocus = function() {
            d.Logger.warningWithErrorId(1013)
        };
        c._onRemoveFromStage = function() {
            f.prototype._onRemoveFromStage.call(this);
            this._removeEvent();
            this._properties._type == d.TextFieldType.INPUT && this._inputUtils._removeStageText()
        };
        c._onAddToStage = function() {
            f.prototype._onAddToStage.call(this);
            this._addEvent();
            this._properties._type == d.TextFieldType.INPUT && this._inputUtils._addStageText()
        };
        c._updateBaseTransform = function() {
            this._getLinesArr();
            0 == this._properties._textMaxWidth && this._properties._type != d.TextFieldType.INPUT || f.prototype._updateTransform.call(this)
        };
        c._updateTransform = function() {
            this._properties._type == d.TextFieldType.INPUT ? this._normalDirty ? this._inputUtils._updateProperties() : this._inputUtils._updateTransform() : this._updateBaseTransform()
        };
        c._draw = function(a) {
            var b = this._properties;
            if (b._type == d.TextFieldType.INPUT) {
                if (this._isTyping) return
            } else if (0 == b._textMaxWidth) return;
            f.prototype._draw.call(this, a)
        };
        c._render = function(a) {
            this._bgGraphics && this._bgGraphics._draw(a);
            this.drawText(a);
            this._clearDirty()
        };
        c._measureBounds = function() {
            var a = this._properties;
            this._getLinesArr();
            return 0 == a._textMaxWidth ? d.Rectangle.identity.initialize(0, 0, 0, 0) : d.Rectangle.identity.initialize(0, 0, a._textMaxWidth, d.TextFieldUtils._getTextHeight(this))
        };
        Object.defineProperty(c, "textFlow", {
            get: function() {
                return this._textArr
            },
            set: function(a) {
                var b = this._properties;
                this._isFlow = !0;
                var h = "";
                null == a && (a = []);
                for (var c = 0; c < a.length; c++) h += a[c].text;
                b._displayAsPassword ? this._setBaseText(h) : (b._text = h, this.setMiddleStyle(a))
            },
            enumerable: !0,
            configurable: !0
        });
        c.changeToPassText = function(a) {
            if (this._properties._displayAsPassword) {
                for (var b = "",
                h = 0,
                c = a.length; h < c; h++) switch (a.charAt(h)) {
                case "\n":
                    b += "\n";
                    break;
                case "\r":
                    break;
                default:
                    b += "*"
                }
                return b
            }
            return a
        };
        c.setMiddleStyle = function(a) {
            this._isArrayChanged = !0;
            this._textArr = a;
            this._setSizeDirty()
        };
        Object.defineProperty(c, "textWidth", {
            get: function() {
                return this._properties._textMaxWidth
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "textHeight", {
            get: function() {
                return d.TextFieldUtils._getTextHeight(this)
            },
            enumerable: !0,
            configurable: !0
        });
        c.appendText = function(a) {
            this.appendElement({
                text: a
            })
        };
        c.appendElement = function(a) {
            this._textArr.push(a);
            this.setMiddleStyle(this._textArr)
        };
        c._getLinesArr = function() {
            var a = this._properties;
            if (!this._isArrayChanged) return this._linesArr;
            this._isArrayChanged = !1;
            var b = this._textArr,
            h = d.MainContext.instance.rendererContext;
            this._linesArr.length = 0;
            a._textMaxHeight = 0;
            a._textMaxWidth = 0;
            if (this._hasWidthSet && 0 == this._explicitWidth) return a._numLines = 0,
            [{
                width: 0,
                height: 0,
                charNum: 0,
                elements: [],
                hasNextLine: !1
            }];
            this._isFlow || h.setupFont(this);
            for (var c = this._linesArr,
            e = 0,
            f = 0,
            g = 0,
            k = 0,
            l, m = 0,
            n = b.length; m < n; m++) {
                var q = b[m];
                q.style = q.style || {};
                for (var r = q.text.toString().split(/(?:\r\n|\r|\n)/), w = 0, y = r.length; w < y; w++) {
                    null == c[k] && (l = {
                        width: 0,
                        height: 0,
                        elements: [],
                        charNum: 0,
                        hasNextLine: !1
                    },
                    c[k] = l, f = g = e = 0);
                    var g = a._type == d.TextFieldType.INPUT ? a._size: Math.max(g, q.style.size || a._size),
                    s = !0;
                    if ("" == r[w]) w == y - 1 && (s = !1);
                    else {
                        this._isFlow && h.setupFont(this, q.style);
                        var x = h.measureText(r[w]);
                        if (this._hasWidthSet) if (e + x <= this._explicitWidth) l.elements.push({
                            width: x,
                            text: r[w],
                            style: q.style
                        }),
                        e += x,
                        f += r[w].length,
                        w == y - 1 && (s = !1);
                        else {
                            for (var v = s = 0,
                            z = r[w], u = z.length; s < u; s++) {
                                x = h.measureText(z.charAt(s));
                                if (e + x > this._explicitWidth && 0 != e + s) break;
                                v += x;
                                e += x;
                                f += 1
                            }
                            0 < s && (l.elements.push({
                                width: v,
                                text: z.substring(0, s),
                                style: q.style
                            }), r[w] = z.substring(s));
                            w--;
                            s = !1
                        } else e += x,
                        f += r[w].length,
                        l.elements.push({
                            width: x,
                            text: r[w],
                            style: q.style
                        }),
                        w == y - 1 && (s = !1)
                    }
                    s && (f++, l.hasNextLine = !0);
                    w < r.length - 1 && (l.width = e, l.height = g, l.charNum = f, a._textMaxWidth = Math.max(a._textMaxWidth, e), a._textMaxHeight += g, k++)
                }
                m == b.length - 1 && l && (l.width = e, l.height = g, l.charNum = f, a._textMaxWidth = Math.max(a._textMaxWidth, e), a._textMaxHeight += g)
            }
            a._numLines = c.length;
            return c
        };
        c.drawText = function(a) {
            var b = this._properties,
            h = this._getLinesArr();
            if (0 != b._textMaxWidth) {
                var c = this._hasWidthSet ? this._explicitWidth: b._textMaxWidth,
                e = d.TextFieldUtils._getTextHeight(this),
                f = 0,
                g = d.TextFieldUtils._getStartLine(this);
                if (this._hasHeightSet && this._explicitHeight > e) var k = d.TextFieldUtils._getValign(this),
                f = f + k * (this._explicitHeight - e);
                for (var f = Math.round(f), e = d.TextFieldUtils._getHalign(this), k = 0, l = g, m = b._numLines; l < m; l++) {
                    var n = h[l],
                    q = n.height,
                    f = f + q / 2;
                    if (l != g) {
                        if (b._type == d.TextFieldType.INPUT && !b._multiline) break;
                        if (this._hasHeightSet && f > this._explicitHeight) break
                    }
                    for (var k = Math.round((c - n.width) * e), r = 0, w = n.elements.length; r < w; r++) {
                        var y = n.elements[r];
                        a.drawText(this, y.text, k, f + (q - (y.style.size || b._size)) / 2, y.width, y.style);
                        k += y.width
                    }
                    f += q / 2 + b._lineSpacing
                }
            }
        };
        c._addEvent = function() {
            this.addEventListener(d.TouchEvent.TOUCH_TAP, this.onTapHandler, this)
        };
        c._removeEvent = function() {
            this.removeEventListener(d.TouchEvent.TOUCH_TAP, this.onTapHandler, this)
        };
        c.onTapHandler = function(a) {
            if (this._properties._type != d.TextFieldType.INPUT && (a = d.TextFieldUtils._getTextElement(this, a.localX, a.localY), null != a && (a = a.style) && a.href && a.href.match(/^event:/))) {
                var b = a.href.match(/^event:/)[0];
                d.TextEvent.dispatchTextEvent(this, d.TextEvent.LINK, a.href.substring(b.length))
            }
        };
        e.default_fontFamily = "Arial";
        return e
    } (d.DisplayObject);
    d.TextField = f;
    f.prototype.__class__ = "egret.TextField"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {
            this.resutlArr = []
        }
        var e = d.prototype;
        e.parser = function(c) {
            this.stackArray = [];
            this.resutlArr = [];
            for (var a = 0,
            b = c.length; a < b;) {
                var h = c.indexOf("<", a);
                0 > h ? (this.addToResultArr(c.substring(a)), a = b) : (this.addToResultArr(c.substring(a, h)), a = c.indexOf(">", h), "/" == c.charAt(h + 1) ? this.stackArray.pop() : this.addToArray(c.substring(h + 1, a)), a += 1)
            }
            return this.resutlArr
        };
        e.addToResultArr = function(c) {
            if ("" != c) {
                var a = [];
                a.push(["&lt;", "<"]);
                a.push(["&gt;", ">"]);
                a.push(["&amp;", "&"]);
                a.push(["&quot;", '"']);
                a.push(["&apos;;", "'"]);
                for (var b = 0; b < a.length; b++) c.replace(new RegExp(a[b][0], "g"), a[b][1]);
                0 < this.stackArray.length ? this.resutlArr.push({
                    text: c,
                    style: this.stackArray[this.stackArray.length - 1]
                }) : this.resutlArr.push({
                    text: c
                })
            }
        };
        e.changeStringToObject = function(c) {
            var a = {};
            c = c.replace(/( )+/g, " ").split(" ");
            for (var b = 0; b < c.length; b++) this.addProperty(a, c[b]);
            return a
        };
        e.addProperty = function(c, a) {
            var b = a.replace(/( )*=( )*/g, "=").split("=");
            b[1] && (b[1] = b[1].replace(/(\"|\')/g, ""));
            switch (b[0].toLowerCase()) {
            case "color":
                b[1] = b[1].replace(/#/, "0x");
                c.textColor = parseInt(b[1]);
                break;
            case "strokecolor":
                b[1] = b[1].replace(/#/, "0x");
                c.strokeColor = parseInt(b[1]);
                break;
            case "stroke":
                c.stroke = parseInt(b[1]);
                break;
            case "b":
                c.bold = "true" == (b[1] || "true");
                break;
            case "i":
                c.italic = "true" == (b[1] || "true");
                break;
            case "size":
                c.size = parseInt(b[1]);
                break;
            case "fontfamily":
                c.fontFamily = b[1];
                break;
            case "href":
                c.href = b[1]
            }
        };
        e.addToArray = function(c) {
            c = this.changeStringToObject(c);
            if (0 != this.stackArray.length) {
                var a = this.stackArray[this.stackArray.length - 1],
                b;
                for (b in a) null == c[b] && (c[b] = a[b])
            }
            this.stackArray.push(c)
        };
        return d
    } ();
    d.HtmlTextParser = f;
    f.prototype.__class__ = "egret.HtmlTextParser"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.DYNAMIC = "dynamic";
        d.INPUT = "input";
        return d
    } ();
    d.TextFieldType = f;
    f.prototype.__class__ = "egret.TextFieldType"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a) {
            f.call(this);
            this._bitmapY = this._bitmapX = this._sourceHeight = this._sourceWidth = 0;
            this._textureMap = {};
            this.texture = a;
            this._sourceWidth = a._sourceWidth;
            this._sourceHeight = a._sourceHeight;
            this._bitmapX = a._bitmapX - a._offsetX;
            this._bitmapY = a._bitmapY - a._offsetY
        }
        __extends(e, f);
        var c = e.prototype;
        c.getTexture = function(a) {
            return this._textureMap[a]
        };
        c.createTexture = function(a, b, h, c, e, f, g, k, l) {
            void 0 === f && (f = 0);
            void 0 === g && (g = 0);
            "undefined" === typeof k && (k = f + c);
            "undefined" === typeof l && (l = g + e);
            var m = this.texture._clone(),
            n = d.MainContext.instance.rendererContext._texture_scale_factor;
            m._bitmapX = this._bitmapX + b;
            m._bitmapY = this._bitmapY + h;
            m._bitmapWidth = c * n;
            m._bitmapHeight = e * n;
            m._offsetX = f;
            m._offsetY = g;
            m._textureWidth = k * n;
            m._textureHeight = l * n;
            m._sourceWidth = this._sourceWidth;
            m._sourceHeight = this._sourceHeight;
            return this._textureMap[a] = m
        };
        return e
    } (d.HashObject);
    d.SpriteSheet = f;
    f.prototype.__class__ = "egret.SpriteSheet"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._text = null;
            this._isFocus = !1
        }
        __extends(e, f);
        var c = e.prototype;
        c.init = function(a) {
            this._text = a;
            this.stageText = d.StageText.create();
            this.stageText._setTextField(this._text)
        };
        c._addStageText = function() {
            this._text._inputEnabled || (this._text._touchEnabled = !0);
            this.stageText._add();
            this.stageText._addListeners();
            this.stageText.addEventListener("updateText", this.updateTextHandler, this);
            this._text.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.onMouseDownHandler, this);
            d.MainContext.instance.stage.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.onStageDownHandler, this);
            this.stageText.addEventListener("blur", this.blurHandler, this);
            this.stageText.addEventListener("focus", this.focusHandler, this)
        };
        c._removeStageText = function() {
            this._text._inputEnabled || (this._text._touchEnabled = !1);
            this.stageText._remove();
            this.stageText._removeListeners();
            this.stageText._removeInput();
            this.stageText.removeEventListener("updateText", this.updateTextHandler, this);
            this._text.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.onMouseDownHandler, this);
            d.MainContext.instance.stage.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.onStageDownHandler, this);
            this.stageText.removeEventListener("blur", this.blurHandler, this);
            this.stageText.removeEventListener("focus", this.focusHandler, this)
        };
        c._getText = function() {
            return this.stageText._getText()
        };
        c._setText = function(a) {
            this.stageText._setText(a)
        };
        c.focusHandler = function(a) {
            this._isFocus = !0;
            this._text._isTyping = !0
        };
        c.blurHandler = function(a) {
            this._isFocus = !1;
            this._text._isTyping = !1
        };
        c.onMouseDownHandler = function(a) {
            a.stopPropagation();
            this._text._visible && !this._isFocus && (this._isFocus = !0, this.stageText._show(this._text._properties._multiline, this._text.size, this._text.width, this._text.height), a = this._text.localToGlobal(), this.stageText._initElement(a.x, a.y, this._text._worldTransform.a, this._text._worldTransform.d))
        };
        c.onStageDownHandler = function(a) {
            this.stageText._hide()
        };
        c.updateTextHandler = function(a) {
            this.resetText();
            this._text.dispatchEvent(new d.Event(d.Event.CHANGE))
        };
        c.resetText = function() {
            this._text._setBaseText(this.stageText._getText())
        };
        c._hideInput = function() {
            this.stageText._removeInput()
        };
        c._updateTransform = function() {
            this._text._updateBaseTransform(); ! this._text._visible && this.stageText && this._hideInput()
        };
        c._updateProperties = function() {
            if (!this._isFocus) {
                var a = this._text._stage;
                if (null == a) this.stageText._setVisible(!1);
                else {
                    for (var b = this._text,
                    h = b._visible; h;) {
                        b = b.parent;
                        if (b == a) break;
                        h = b._visible
                    }
                    this.stageText._setVisible(h)
                }
                this.stageText._setMultiline(this._text._properties._multiline);
                this.stageText._setTextType(this._text._properties._displayAsPassword ? "password": "text");
                this.stageText._setText(this._text._properties._text);
                this.stageText._resetStageText()
            }
            this._updateTransform()
        };
        return e
    } (d.HashObject);
    d.InputController = f;
    f.prototype.__class__ = "egret.InputController"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a, b) {
            d.call(this, a);
            this.firstCharHeight = 0;
            "string" == typeof b ? this.charList = this.parseConfig(b) : b && b.hasOwnProperty("frames") ? this.charList = b.frames: this.charList = {}
        }
        __extends(e, d);
        var c = e.prototype;
        c.getTexture = function(a) {
            var b = this._textureMap[a];
            if (!b) {
                b = this.charList[a];
                if (!b) return null;
                b = this.createTexture(a, b.x, b.y, b.w, b.h, b.offX, b.offY, b.sourceW, b.sourceH);
                this._textureMap[a] = b
            }
            return b
        };
        c._getFirstCharHeight = function() {
            if (0 == this.firstCharHeight) for (var a in this.charList) {
                var b = this.charList[a];
                if (b) {
                    var h = b.sourceH;
                    void 0 === h && (h = b.h, void 0 === h && (h = 0), b = b.offY, void 0 === b && (b = 0), h += b);
                    if (! (0 >= h)) {
                        this.firstCharHeight = h;
                        break
                    }
                }
            }
            return this.firstCharHeight
        };
        c.parseConfig = function(a) {
            a = a.split("\r\n").join("\n");
            a = a.split("\n");
            for (var b = this.getConfigByKey(a[3], "count"), h = {},
            c = 4; c < 4 + b; c++) {
                var e = a[c],
                d = String.fromCharCode(this.getConfigByKey(e, "id")),
                f = {};
                h[d] = f;
                f.x = this.getConfigByKey(e, "x");
                f.y = this.getConfigByKey(e, "y");
                f.w = this.getConfigByKey(e, "width");
                f.h = this.getConfigByKey(e, "height");
                f.offX = this.getConfigByKey(e, "xoffset");
                f.offY = this.getConfigByKey(e, "yoffset")
            }
            return h
        };
        c.getConfigByKey = function(a, b) {
            for (var h = a.split(" "), c = 0, e = h.length; c < e; c++) {
                var d = h[c];
                if (b == d.substring(0, b.length)) return h = d.substring(b.length + 1),
                parseInt(h)
            }
            return 0
        };
        return e
    } (d.SpriteSheet);
    d.BitmapFont = f;
    f.prototype.__class__ = "egret.BitmapFont"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a) {
            f.call(this);
            this._isAddedToStage = !1;
            this._frames = this._movieClipData = this._textureToRender = null;
            this._totalFrames = 0;
            this._frameLabels = null;
            this._frameIntervalTime = 0;
            this._eventPool = null;
            this._isPlaying = !1;
            this._isStopped = !0;
            this._passedTime = this._displayedKeyFrameNum = this._nextFrameNum = this._currentFrameNum = this._playTimes = 0;
            this._setMovieClipData(a);
            this.needDraw = !0
        }
        __extends(e, f);
        var c = e.prototype;
        c._init = function() {
            this._reset();
            var a = this._movieClipData;
            a && a._isDataValid() && (this._frames = a.frames, this._totalFrames = a.numFrames, this._frameLabels = a.labels, this._frameIntervalTime = 1E3 / a.frameRate, this._initFrame())
        };
        c._reset = function() {
            this._frames = null;
            this._playTimes = 0;
            this._isPlaying = !1;
            this.setIsStopped(!0);
            this._currentFrameNum = 0;
            this._nextFrameNum = 1;
            this._passedTime = this._displayedKeyFrameNum = 0;
            this._eventPool = []
        };
        c._initFrame = function() {
            this._movieClipData._isTextureValid() && (this._advanceFrame(), this._constructFrame())
        };
        c._render = function(a) {
            var b = this._textureToRender;
            if (this._texture_to_render = b) {
                var h = Math.round(b._offsetX),
                c = Math.round(b._offsetY),
                d = b._bitmapWidth || b._textureWidth,
                f = b._bitmapHeight || b._textureHeight,
                g = Math.round(d),
                k = Math.round(f);
                e.renderFilter.drawImage(a, this, b._bitmapX, b._bitmapY, d, f, h, c, g, k)
            }
        };
        c._measureBounds = function() {
            var a = this._textureToRender;
            return a ? d.Rectangle.identity.initialize(a._offsetX, a._offsetY, a._textureWidth, a._textureHeight) : f.prototype._measureBounds.call(this)
        };
        c._onAddToStage = function() {
            f.prototype._onAddToStage.call(this);
            this._isAddedToStage = !0;
            this._isPlaying && 1 < this._totalFrames && this.setIsStopped(!1)
        };
        c._onRemoveFromStage = function() {
            f.prototype._onRemoveFromStage.call(this);
            this._isAddedToStage = !1;
            this.setIsStopped(!0)
        };
        c._getFrameLabelByName = function(a, b) {
            void 0 === b && (b = !1);
            b && (a = a.toLowerCase());
            var h = this._frameLabels;
            if (h) for (var c = null,
            e = 0; e < h.length; e++) if (c = h[e], b ? c.name.toLowerCase() === a: c.name === a) return c;
            return null
        };
        c._getFrameLabelByFrame = function(a) {
            var b = this._frameLabels;
            if (b) for (var h = null,
            c = 0; c < b.length; c++) if (h = b[c], h.frame === a) return h;
            return null
        };
        c._getFrameLabelForFrame = function(a) {
            var b = null,
            h = null,
            c = this._frameLabels;
            if (c) for (var e = 0; e < c.length; e++) {
                h = c[e];
                if (h.frame > a) break;
                b = h
            }
            return b
        };
        c.play = function(a) {
            void 0 === a && (a = 0);
            this._isPlaying = !0;
            this.setPlayTimes(a);
            1 < this._totalFrames && this._isAddedToStage && this.setIsStopped(!1)
        };
        c.stop = function() {
            this._isPlaying = !1;
            this.setIsStopped(!0)
        };
        c.prevFrame = function() {
            this.gotoAndStop(this._currentFrameNum - 1)
        };
        c.nextFrame = function() {
            this.gotoAndStop(this._currentFrameNum + 1)
        };
        c.gotoAndPlay = function(a, b) {
            void 0 === b && (b = 0);
            if (0 === arguments.length || 2 < arguments.length) throw Error(d.getString(1022, "MovieClip.gotoAndPlay()"));
            this.play(b);
            this._gotoFrame(a)
        };
        c.gotoAndStop = function(a) {
            if (1 != arguments.length) throw Error(d.getString(1022, "MovieClip.gotoAndStop()"));
            this.stop();
            this._gotoFrame(a)
        };
        c._gotoFrame = function(a) {
            var b;
            if ("string" === typeof a) b = this._getFrameLabelByName(a).frame;
            else if (b = parseInt(a + "", 10), b != a) throw Error(d.getString(1022, "Frame Label Not Found"));
            1 > b ? b = 1 : b > this._totalFrames && (b = this._totalFrames);
            b !== this._nextFrameNum && (this._nextFrameNum = b, this._advanceFrame(), this._constructFrame(), this._handlePendingEvent())
        };
        c._advanceTime = function(a) {
            var b = this._frameIntervalTime;
            a = this._passedTime + a;
            this._passedTime = a % b;
            b = a / b;
            if (! (1 > b)) {
                for (; 1 <= b;) {
                    b--;
                    this._nextFrameNum++;
                    if (this._nextFrameNum > this._totalFrames) if ( - 1 == this._playTimes) this._eventPool.push(d.Event.LOOP_COMPLETE),
                    this._nextFrameNum = 1;
                    else if (this._playTimes--, 0 < this._playTimes) this._eventPool.push(d.Event.LOOP_COMPLETE),
                    this._nextFrameNum = 1;
                    else {
                        this._nextFrameNum = this._totalFrames;
                        this._eventPool.push(d.Event.COMPLETE);
                        this.stop();
                        break
                    }
                    this._advanceFrame()
                }
                this._constructFrame();
                this._handlePendingEvent()
            }
        };
        c._advanceFrame = function() {
            this._currentFrameNum = this._nextFrameNum
        };
        c._constructFrame = function() {
            var a = this._currentFrameNum;
            this._displayedKeyFrameNum != a && (this._textureToRender = this._movieClipData.getTextureByFrame(a), this._displayedKeyFrameNum = a)
        };
        c._handlePendingEvent = function() {
            if (0 != this._eventPool.length) {
                this._eventPool.reverse();
                for (var a = this._eventPool,
                b = a.length,
                h = !1,
                c = !1,
                e = 0; e < b; e++) {
                    var f = a.pop();
                    f == d.Event.LOOP_COMPLETE ? c = !0 : f == d.Event.COMPLETE ? h = !0 : this.dispatchEventWith(f)
                }
                c && this.dispatchEventWith(d.Event.LOOP_COMPLETE);
                h && this.dispatchEventWith(d.Event.COMPLETE)
            }
        };
        Object.defineProperty(c, "totalFrames", {
            get: function() {
                return this._totalFrames
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "currentFrame", {
            get: function() {
                return this._currentFrameNum
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "currentFrameLabel", {
            get: function() {
                var a = this._getFrameLabelByFrame(this._currentFrameNum);
                return a && a.name
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "currentLabel", {
            get: function() {
                var a = this._getFrameLabelForFrame(this._currentFrameNum);
                return a ? a.name: null
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "frameRate", {
            get: function() {
                return this.movieClipData.frameRate
            },
            set: function(a) {
                a != this._movieClipData.frameRate && (this._movieClipData.frameRate = a, this._frameIntervalTime = 1E3 / this._movieClipData.frameRate)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "isPlaying", {
            get: function() {
                return this._isPlaying
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "movieClipData", {
            get: function() {
                return this._movieClipData
            },
            set: function(a) {
                this._setMovieClipData(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setMovieClipData = function(a) {
            this._movieClipData != a && (this._movieClipData = a, this._init())
        };
        c.setPlayTimes = function(a) {
            if (0 > a || 1 <= a) this._playTimes = 0 > a ? -1 : Math.floor(a)
        };
        c.setIsStopped = function(a) {
            this._isStopped != a && ((this._isStopped = a) ? (this._playTimes = 0, d.Ticker.getInstance().unregister(this._advanceTime, this)) : (this._playTimes = 0 == this._playTimes ? 1 : this._playTimes, d.Ticker.getInstance().register(this._advanceTime, this)))
        };
        e.renderFilter = d.RenderFilter.getInstance();
        return e
    } (d.DisplayObject);
    d.MovieClip = f;
    f.prototype.__class__ = "egret.MovieClip"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a, b) {
            d.call(this);
            this._name = a;
            this._frame = b | 0
        }
        __extends(e, d);
        var c = e.prototype;
        Object.defineProperty(c, "name", {
            get: function() {
                return this._name
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "frame", {
            get: function() {
                return this._frame
            },
            enumerable: !0,
            configurable: !0
        });
        c.clone = function() {
            return new e(this._name, this._frame)
        };
        return e
    } (d.EventDispatcher);
    d.FrameLabel = f;
    f.prototype.__class__ = "egret.FrameLabel"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._mcData = null;
            this.numFrames = 1;
            this.frames = [];
            this.labels = null;
            this.frameRate = 0;
            this.spriteSheet = this.textureData = null
        }
        __extends(e, f);
        var c = e.prototype;
        c._init = function(a, b, h) {
            this.textureData = b;
            this.spriteSheet = h;
            this._setMCData(a)
        };
        c.getKeyFrameData = function(a) {
            a = this.frames[a - 1];
            a.frame && (a = this.frames[a.frame - 1]);
            return a
        };
        c.getTextureByFrame = function(a) {
            a = this.getKeyFrameData(a);
            if (a.res) {
                var b = this.getTextureByResName(a.res);
                b._offsetX = a.x | 0;
                b._offsetY = a.y | 0;
                return b
            }
            return null
        };
        c.getTextureByResName = function(a) {
            var b = this.spriteSheet.getTexture(a);
            b || (b = this.textureData[a], b = this.spriteSheet.createTexture(a, b.x, b.y, b.w, b.h));
            return b
        };
        c._isDataValid = function() {
            return 0 < this.frames.length
        };
        c._isTextureValid = function() {
            return null != this.textureData && null != this.spriteSheet
        };
        c._fillMCData = function(a) {
            this.frameRate = a.frameRate || 24;
            this._fillFramesData(a.frames);
            this._fillFrameLabelsData(a.labels)
        };
        c._fillFramesData = function(a) {
            for (var b = this.frames,
            h = a ? a.length: 0, c, e = 0; e < h; e++) if (c = a[e], b.push(c), c.duration) {
                var d = parseInt(c.duration);
                if (1 < d) {
                    c = b.length;
                    for (var f = 1; f < d; f++) b.push({
                        frame: c
                    })
                }
            }
            this.numFrames = b.length
        };
        c._fillFrameLabelsData = function(a) {
            if (a) {
                var b = a.length;
                if (0 < b) {
                    this.labels = [];
                    for (var h = 0; h < b; h++) {
                        var c = a[h];
                        this.labels.push(new d.FrameLabel(c.name, c.frame))
                    }
                }
            }
        };
        Object.defineProperty(c, "mcData", {
            get: function() {
                return this._mcData
            },
            set: function(a) {
                this._setMCData(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setMCData = function(a) {
            this._mcData != a && (this._mcData = a) && this._fillMCData(a)
        };
        return e
    } (d.HashObject);
    d.MovieClipData = f;
    f.prototype.__class__ = "egret.MovieClipData"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b) {
            f.call(this);
            this.enableCache = !0;
            this._mcDataCache = {};
            this._mcDataSet = a;
            this.setTexture(b)
        }
        __extends(e, f);
        var c = e.prototype;
        c.clearCache = function() {
            this._mcDataCache = {}
        };
        c.generateMovieClipData = function(a) {
            void 0 === a && (a = "");
            if ("" == a && this._mcDataSet) for (a in this._mcDataSet.mc) break;
            if ("" == a) return null;
            var b = this._findFromCache(a, this._mcDataCache);
            b || (b = new d.MovieClipData, this._fillData(a, b, this._mcDataCache));
            return b
        };
        c._findFromCache = function(a, b) {
            return this.enableCache && b[a] ? b[a] : null
        };
        c._fillData = function(a, b, h) {
            if (this._mcDataSet) {
                var c = this._mcDataSet.mc[a];
                c && (b._init(c, this._mcDataSet.res, this._spriteSheet), this.enableCache && (h[a] = b))
            }
        };
        Object.defineProperty(c, "mcDataSet", {
            get: function() {
                return this._mcDataSet
            },
            set: function(a) {
                this._mcDataSet = a
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "texture", {
            set: function(a) {
                this.setTexture(a)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "spriteSheet", {
            get: function() {
                return this._spriteSheet
            },
            enumerable: !0,
            configurable: !0
        });
        c.setTexture = function(a) {
            this._spriteSheet = a ? new d.SpriteSheet(a) : null
        };
        return e
    } (d.EventDispatcher);
    d.MovieClipDataFactory = f;
    f.prototype.__class__ = "egret.MovieClipDataFactory"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._scaleY = this._scaleX = 1;
            this._size = 30;
            this._color = "#FFFFFF";
            this._fontFamily = "Arial";
            this._italic = this._bold = !1;
            this._textAlign = "left";
            this._verticalAlign = "top";
            this._visible = !1;
            this._height = this._width = 0;
            this._multiline = !1;
            this._maxChars = 0
        }
        __extends(e, d);
        var c = e.prototype;
        c._setTextField = function(a) {
            this._textfield = a
        };
        c._getText = function() {
            return null
        };
        c._setText = function(a) {};
        c._setTextType = function(a) {};
        c._getTextType = function() {
            return null
        };
        c._show = function(a, b, h, c) {};
        c._add = function() {};
        c._remove = function() {};
        c._hide = function() {};
        c._addListeners = function() {};
        c._removeListeners = function() {};
        c._setScale = function(a, b) {
            this._scaleX = a;
            this._scaleY = b
        };
        c.changePosition = function(a, b) {};
        c._setSize = function(a) {
            this._size = a
        };
        c._setTextColor = function(a) {
            this._color = a
        };
        c._setTextFontFamily = function(a) {
            this._fontFamily = a
        };
        c._setBold = function(a) {
            this._bold = a
        };
        c._setItalic = function(a) {
            this._italic = a
        };
        c._setTextAlign = function(a) {
            this._textAlign = a
        };
        c._setVerticalAlign = function(a) {
            this._verticalAlign = a
        };
        c._setVisible = function(a) {
            this._visible = a
        };
        c._setWidth = function(a) {
            this._width = a
        };
        c._setHeight = function(a) {
            this._height = a
        };
        c._setMultiline = function(a) {
            this._multiline = a
        };
        c._setMaxChars = function(a) {
            this._maxChars = a
        };
        c._resetStageText = function() {};
        c._initElement = function(a, b, h, c) {};
        c._removeInput = function() {};
        e.create = function() {
            return null
        };
        return e
    } (d.EventDispatcher);
    d.StageText = f;
    f.prototype.__class__ = "egret.StageText"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.GET = "get";
        d.POST = "post";
        return d
    } ();
    d.URLRequestMethod = f;
    f.prototype.__class__ = "egret.URLRequestMethod"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.BINARY = "binary";
        d.TEXT = "text";
        d.VARIABLES = "variables";
        d.TEXTURE = "texture";
        d.SOUND = "sound";
        return d
    } ();
    d.URLLoaderDataFormat = f;
    f.prototype.__class__ = "egret.URLLoaderDataFormat"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(a) {
            void 0 === a && (a = null);
            d.call(this);
            this.variables = null;
            null !== a && this.decode(a)
        }
        __extends(e, d);
        var c = e.prototype;
        c.decode = function(a) {
            this.variables || (this.variables = {});
            a = a.split("+").join(" ");
            for (var b, h = /[?&]?([^=]+)=([^&]*)/g; b = h.exec(a);) {
                var c = decodeURIComponent(b[1]);
                b = decodeURIComponent(b[2]);
                if (!1 == c in this.variables) this.variables[c] = b;
                else {
                    var e = this.variables[c];
                    e instanceof Array ? e.push(b) : this.variables[c] = [e, b]
                }
            }
        };
        c.toString = function() {
            if (!this.variables) return "";
            var a = this.variables,
            b = [],
            h;
            for (h in a) b.push(this.encodeValue(h, a[h]));
            return b.join("&")
        };
        c.encodeValue = function(a, b) {
            return b instanceof Array ? this.encodeArray(a, b) : encodeURIComponent(a) + "=" + encodeURIComponent(b)
        };
        c.encodeArray = function(a, b) {
            return a ? 0 == b.length ? encodeURIComponent(a) + "=": b.map(function(b) {
                return encodeURIComponent(a) + "=" + encodeURIComponent(b)
            }).join("&") : ""
        };
        return e
    } (d.HashObject);
    d.URLVariables = f;
    f.prototype.__class__ = "egret.URLVariables"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        return function(d, e) {
            this.value = this.name = "";
            this.name = d;
            this.value = e
        }
    } ();
    d.URLRequestHeader = f;
    f.prototype.__class__ = "egret.URLRequestHeader"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(c) {
            void 0 === c && (c = null);
            f.call(this);
            this.data = null;
            this.method = d.URLRequestMethod.GET;
            this.url = "";
            this.url = c
        }
        __extends(e, f);
        return e
    } (d.HashObject);
    d.URLRequest = f;
    f.prototype.__class__ = "egret.URLRequest"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a) {
            void 0 === a && (a = null);
            f.call(this);
            this.dataFormat = d.URLLoaderDataFormat.TEXT;
            this._request = this.data = null;
            this._status = -1;
            a && this.load(a)
        }
        __extends(e, f);
        var c = e.prototype;
        c.load = function(a) {
            this._request = a;
            this.data = null;
            d.MainContext.instance.netContext.proceed(this)
        };
        c.__recycle = function() {
            this.data = this._request = null
        };
        return e
    } (d.EventDispatcher);
    d.URLLoader = f;
    f.prototype.__class__ = "egret.URLLoader"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._sourceHeight = this._sourceWidth = this._textureHeight = this._textureWidth = this._offsetY = this._offsetX = this._bitmapHeight = this._bitmapWidth = this._bitmapY = this._bitmapX = 0;
            this._bitmapData = null
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "textureWidth", {
            get: function() {
                return this._textureWidth
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "textureHeight", {
            get: function() {
                return this._textureHeight
            },
            enumerable: !0,
            configurable: !0
        });
        c._setBitmapData = function(a) {
            var b = d.MainContext.instance.rendererContext._texture_scale_factor;
            this._bitmapData = a;
            this._sourceWidth = a.width;
            this._sourceHeight = a.height;
            this._textureWidth = this._sourceWidth * b;
            this._textureHeight = this._sourceHeight * b;
            this._bitmapWidth = this._textureWidth;
            this._bitmapHeight = this._textureHeight;
            this._offsetX = this._offsetY = this._bitmapX = this._bitmapY = 0
        };
        c.getPixel32 = function(a, b) {
            return this._bitmapData.getContext("2d").getImageData(a, b, 1, 1).data
        };
        c.dispose = function() {
            var a = this._bitmapData;
            a.dispose && a.dispose()
        };
        c._clone = function() {
            var a = new e;
            a._bitmapData = this._bitmapData;
            return a
        };
        return e
    } (d.HashObject);
    d.Texture = f;
    f.prototype.__class__ = "egret.Texture"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this)
        }
        __extends(e, f);
        var c = e.prototype;
        c.init = function() {
            this._bitmapData = document.createElement("canvas");
            this.renderContext = d.RendererContext.createRendererContext(this._bitmapData)
        };
        c.drawToTexture = function(a, b, h) {
            var c = b || a.getBounds(d.Rectangle.identity);
            if (0 == c.width || 0 == c.height) return ! 1;
            this._bitmapData || this.init();
            var f = c.x,
            g = c.y,
            p = c.width,
            c = c.height,
            k, l, m = d.MainContext.instance.rendererContext._texture_scale_factor;
            k = p / m;
            l = c / m;
            k = Math.round(k);
            l = Math.round(l);
            this.setSize(k, l);
            this.begin();
            a._worldTransform.identity();
            a._worldTransform.a = 1 / m;
            a._worldTransform.d = 1 / m;
            h && (a._worldTransform.a *= h, a._worldTransform.d *= h);
            h = a._anchorOffsetX;
            m = a._anchorOffsetY;
            if (0 != a._anchorX || 0 != a._anchorY) h = a._anchorX * k,
            m = a._anchorY * l;
            this._offsetX = f + h;
            this._offsetY = g + m;
            a._worldTransform.append(1, 0, 0, 1, -this._offsetX, -this._offsetY);
            b && (this._offsetX -= f, this._offsetY -= g);
            a.worldAlpha = 1;
            if (a instanceof d.DisplayObjectContainer) for (b = a._children, f = 0, g = b.length; f < g; f++) b[f]._updateTransform();
            this.renderContext.setTransform(a._worldTransform);
            b = d.RenderFilter.getInstance();
            f = b._drawAreaList.concat();
            b._drawAreaList.length = 0;
            this.renderContext.clearScreen();
            this.renderContext.onRenderStart();
            d.RendererContext.deleteTexture(this);
            a._filter && this.renderContext.setGlobalFilter(a._filter);
            a._colorTransform && this.renderContext.setGlobalColorTransform(a._colorTransform.matrix); (g = a.mask || a._scrollRect) && this.renderContext.pushMask(g);
            h = d.MainContext.__use_new_draw;
            d.MainContext.__use_new_draw = !1;
            a._render(this.renderContext);
            d.MainContext.__use_new_draw = h;
            g && this.renderContext.popMask();
            a._colorTransform && this.renderContext.setGlobalColorTransform(null);
            a._filter && this.renderContext.setGlobalFilter(null);
            e.identityRectangle.width = k;
            e.identityRectangle.height = l;
            b.addDrawArea(e.identityRectangle);
            this.renderContext.onRenderFinish();
            b._drawAreaList = f;
            this._sourceWidth = k;
            this._sourceHeight = l;
            this._textureWidth = p;
            this._textureHeight = c;
            this.end();
            return ! 0
        };
        c.setSize = function(a, b) {
            var h = this._bitmapData;
            h.width = a;
            h.height = b;
            h.style.width = a + "px";
            h.style.height = b + "px";
            this.renderContext._cacheCanvas && (this.renderContext._cacheCanvas.width = a, this.renderContext._cacheCanvas.height = b)
        };
        c.begin = function() {};
        c.end = function() {};
        c.dispose = function() {
            this._bitmapData && (this.renderContext = this._bitmapData = null)
        };
        e.identityRectangle = new d.Rectangle;
        return e
    } (d.Texture);
    d.RenderTexture = f;
    f.prototype.__class__ = "egret.RenderTexture"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.renderCost = 0;
            this._texture_scale_factor = 1;
            this.profiler = d.Profiler.getInstance();
            e.blendModesForGL || e.initBlendMode()
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "texture_scale_factor", {
            get: function() {
                return this._texture_scale_factor
            },
            set: function(a) {
                this._setTextureScaleFactor(a)
            },
            enumerable: !0,
            configurable: !0
        });
        c._setTextureScaleFactor = function(a) {
            this._texture_scale_factor = a
        };
        c.clearScreen = function() {};
        c.clearRect = function(a, b, h, c) {};
        c.drawImage = function(a, b, h, c, e, d, f, g, l, m) {
            this.profiler.onDrawImage()
        };
        c.drawImageScale9 = function(a, b, h, c, e, d, f, g, l, m) {
            return ! 1
        };
        c._addOneDraw = function() {
            this.profiler.onDrawImage()
        };
        c.setTransform = function(a) {};
        c.setAlpha = function(a, b) {};
        c.setupFont = function(a, b) {};
        c.measureText = function(a) {
            return 0
        };
        c.drawText = function(a, b, h, c, e, d) {
            this.profiler.onDrawImage()
        };
        c.strokeRect = function(a, b, h, c, e) {};
        c.pushMask = function(a) {};
        c.popMask = function() {};
        c.onRenderStart = function() {};
        c.onRenderFinish = function() {};
        c.setGlobalColorTransform = function(a) {};
        c.setGlobalFilter = function(a) {};
        c.drawCursor = function(a, b, h, c) {};
        e.createRendererContext = function(a) {
            return null
        };
        e.deleteTexture = function(a) {
            var b = d.MainContext.instance.rendererContext.gl;
            if (a = a._bitmapData) {
                var h = a.webGLTexture;
                if (h && b) for (var c in h) b.deleteTexture(h[c]);
                a.webGLTexture = null
            }
        };
        e.initBlendMode = function() {
            e.blendModesForGL = {};
            e.blendModesForGL[d.BlendMode.NORMAL] = [1, 771];
            e.blendModesForGL[d.BlendMode.ADD] = [770, 1];
            e.blendModesForGL[d.BlendMode.ERASE] = [0, 771];
            e.blendModesForGL[d.BlendMode.ERASE_REVERSE] = [0, 770]
        };
        e.registerBlendModeForGL = function(a, b, h, c) {
            e.blendModesForGL[a] && !c ? d.Logger.warningWithErrorId(1005, a) : e.blendModesForGL[a] = [b, h]
        };
        e.imageSmoothingEnabled = !0;
        e.blendModesForGL = null;
        return e
    } (d.HashObject);
    d.RendererContext = f;
    f.prototype.__class__ = "egret.RendererContext"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.MOUSE = "mouse";
        d.TOUCH = "touch";
        d.mode = "touch";
        return d
    } ();
    d.InteractionMode = f;
    f.prototype.__class__ = "egret.InteractionMode"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._currentTouchTarget = {};
            this.maxTouches = 2;
            this.touchDownTarget = {};
            this.touchingIdentifiers = [];
            this.lastTouchY = this.lastTouchX = -1
        }
        __extends(e, f);
        var c = e.prototype;
        c.run = function() {};
        c.getTouchData = function(a, b, h) {
            var c = this._currentTouchTarget[a];
            null == c && (c = {},
            this._currentTouchTarget[a] = c);
            c.stageX = b;
            c.stageY = h;
            c.identifier = a;
            return c
        };
        c.dispatchEvent = function(a, b) {
            d.TouchEvent.dispatchTouchEvent(b.target, a, b.identifier, b.stageX, b.stageY, !1, !1, !1, !0 == this.touchDownTarget[b.identifier])
        };
        c.onTouchBegan = function(a, b, h) {
            if (this.touchingIdentifiers.length != this.maxTouches) {
                var c = d.MainContext.instance.stage.hitTest(a, b);
                c && (a = this.getTouchData(h, a, b), this.touchDownTarget[h] = !0, a.target = c, a.beginTarget = c, this.dispatchEvent(d.TouchEvent.TOUCH_BEGIN, a));
                this.touchingIdentifiers.push(h)
            }
        };
        c.onTouchMove = function(a, b, h) {
            if ( - 1 != this.touchingIdentifiers.indexOf(h) && (a != this.lastTouchX || b != this.lastTouchY)) {
                this.lastTouchX = a;
                this.lastTouchY = b;
                var c = d.MainContext.instance.stage.hitTest(a, b);
                c && (a = this.getTouchData(h, a, b), a.target = c, this.dispatchEvent(d.TouchEvent.TOUCH_MOVE, a))
            }
        };
        c.onTouchEnd = function(a, b, h) {
            var c = this.touchingIdentifiers.indexOf(h); - 1 != c && (this.touchingIdentifiers.splice(c, 1), c = d.MainContext.instance.stage.hitTest(a, b)) && (a = this.getTouchData(h, a, b), delete this.touchDownTarget[h], h = a.beginTarget, a.target = c, this.dispatchEvent(d.TouchEvent.TOUCH_END, a), h == c ? this.dispatchEvent(d.TouchEvent.TOUCH_TAP, a) : a.beginTarget && (a.target = a.beginTarget, this.dispatchEvent(d.TouchEvent.TOUCH_RELEASE_OUTSIDE, a)), delete this._currentTouchTarget[a.identifier])
        };
        return e
    } (d.HashObject);
    d.TouchContext = f;
    f.prototype.__class__ = "egret.TouchContext"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this)
        }
        __extends(e, f);
        var c = e.prototype;
        c.proceed = function(a) {};
        e._getUrl = function(a) {
            var b = a.url; - 1 == b.indexOf("?") && a.method == d.URLRequestMethod.GET && a.data && a.data instanceof d.URLVariables && (b = b + "?" + a.data.toString());
            return b
        };
        c.getChangeList = function() {
            return []
        };
        return e
    } (d.HashObject);
    d.NetContext = f;
    f.prototype.__class__ = "egret.NetContext"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this.frameRate = 60
        }
        __extends(e, d);
        e.prototype.executeMainLoop = function(c, a) {};
        return e
    } (d.HashObject);
    d.DeviceContext = f;
    f.prototype.__class__ = "egret.DeviceContext"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.call = function(e, c) {};
        d.addCallback = function(e, c) {};
        return d
    } ();
    d.ExternalInterface = f;
    f.prototype.__class__ = "egret.ExternalInterface"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.trans = null;
            this.header = "";
            this.ua = navigator.userAgent.toLowerCase();
            this.trans = this.getTrans("transform")
        }
        __extends(e, f);
        var c = e.prototype;
        e.getInstance = function() {
            null == e.instance && (e.instance = new e);
            return e.instance
        };
        Object.defineProperty(c, "isMobile", {
            get: function() {
                d.Logger.warningWithErrorId(1E3);
                return d.MainContext.deviceType == d.MainContext.DEVICE_MOBILE
            },
            enumerable: !0,
            configurable: !0
        });
        c.getUserAgent = function() {
            return this.ua
        };
        c.getTrans = function(a) {
            "" == this.header && (this.header = this.getHeader());
            return this.header + a.substring(1, a.length)
        };
        c.getHeader = function() {
            for (var a = document.createElement("div").style, b = ["t", "webkitT", "msT", "MozT", "OT"], h = 0; h < b.length; h++) if (b[h] + "ransform" in a) return b[h];
            return b[0]
        };
        c.$new = function(a) {
            return this.$(document.createElement(a))
        };
        c.$ = function(a) {
            var b = document;
            if (a = a instanceof HTMLElement ? a: b.querySelector(a)) a.find = a.find || this.$,
            a.hasClass = a.hasClass ||
            function(b) {
                return this.className.match(new RegExp("(\\s|^)" + b + "(\\s|$)"))
            },
            a.addClass = a.addClass ||
            function(b) {
                this.hasClass(b) || (this.className && (this.className += " "), this.className += b);
                return this
            },
            a.removeClass = a.removeClass ||
            function(b) {
                this.hasClass(b) && (this.className = this.className.replace(b, ""));
                return this
            },
            a.remove = a.remove ||
            function() {},
            a.appendTo = a.appendTo ||
            function(b) {
                b.appendChild(this);
                return this
            },
            a.prependTo = a.prependTo ||
            function(b) {
                b.childNodes[0] ? b.insertBefore(this, b.childNodes[0]) : b.appendChild(this);
                return this
            },
            a.transforms = a.transforms ||
            function() {
                this.style[e.getInstance().trans] = e.getInstance().translate(this.position) + e.getInstance().rotate(this.rotation) + e.getInstance().scale(this.scale) + e.getInstance().skew(this.skew);
                return this
            },
            a.position = a.position || {
                x: 0,
                y: 0
            },
            a.rotation = a.rotation || 0,
            a.scale = a.scale || {
                x: 1,
                y: 1
            },
            a.skew = a.skew || {
                x: 0,
                y: 0
            },
            a.translates = function(b, a) {
                this.position.x = b;
                this.position.y = a - d.MainContext.instance.stage.stageHeight;
                this.transforms();
                return this
            },
            a.rotate = function(b) {
                this.rotation = b;
                this.transforms();
                return this
            },
            a.resize = function(b, a) {
                this.scale.x = b;
                this.scale.y = a;
                this.transforms();
                return this
            },
            a.setSkew = function(b, a) {
                this.skew.x = b;
                this.skew.y = a;
                this.transforms();
                return this
            };
            return a
        };
        c.translate = function(a) {
            return "translate(" + a.x + "px, " + a.y + "px) "
        };
        c.rotate = function(a) {
            return "rotate(" + a + "deg) "
        };
        c.scale = function(a) {
            return "scale(" + a.x + ", " + a.y + ") "
        };
        c.skew = function(a) {
            return "skewX(" + -a.x + "deg) skewY(" + a.y + "deg)"
        };
        return e
    } (d.HashObject);
    d.Browser = f;
    f.prototype.__class__ = "egret.Browser"
})(egret || (egret = {})); (function(d) { (function(d) {
        d.getItem = function(d) {
            return null
        };
        d.setItem = function(d, e) {
            return ! 1
        };
        d.removeItem = function(d) {};
        d.clear = function() {}
    })(d.localStorage || (d.localStorage = {}))
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {}
        f.parse = function(e) {
            e = d.SAXParser.getInstance().parserXML(e);
            if (!e || !e.childNodes) return null;
            for (var c = e.childNodes.length,
            a = !1,
            b = 0; b < c; b++) {
                var h = e.childNodes[b];
                if (1 == h.nodeType) {
                    a = !0;
                    break
                }
            }
            return a ? f.parseNode(h) : null
        };
        f.parseNode = function(e) {
            if (!e || 1 != e.nodeType) return null;
            var c = {};
            c.localName = e.localName;
            c.name = e.nodeName;
            e.namespaceURI && (c.namespace = e.namespaceURI);
            e.prefix && (c.prefix = e.prefix);
            for (var a = e.attributes,
            b = a.length,
            h = 0; h < b; h++) {
                var d = a[h],
                E = d.name;
                0 != E.indexOf("xmlns:") && (c["$" + E] = d.value)
            }
            a = e.childNodes;
            b = a.length;
            for (h = 0; h < b; h++) if (d = f.parseNode(a[h])) c.children || (c.children = []),
            d.parent = c,
            c.children.push(d); ! c.children && (e = e.textContent.trim()) && (c.text = e);
            return c
        };
        f.findChildren = function(e, c, a) {
            a ? a.length = 0 : a = [];
            f.findByPath(e, c, a);
            return a
        };
        f.findByPath = function(e, c, a) {
            var b = c.indexOf("."),
            h; - 1 == b ? (h = c, b = !0) : (h = c.substring(0, b), c = c.substring(b + 1), b = !1);
            if (e = e.children) for (var d = e.length,
            E = 0; E < d; E++) {
                var t = e[E];
                t.localName == h && (b ? a.push(t) : f.findByPath(t, c, a))
            }
        };
        f.getAttributes = function(e, c) {
            c ? c.length = 0 : c = [];
            for (var a in e)"$" == a.charAt(0) && c.push(a.substring(1));
            return c
        };
        return f
    } ();
    d.XML = f;
    f.prototype.__class__ = "egret.XML"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function e() {}
        e.LITTLE_ENDIAN = "littleEndian";
        e.BIG_ENDIAN = "bigEndian";
        return e
    } ();
    d.Endian = f;
    f.prototype.__class__ = "egret.Endian";
    var g = function() {
        function e(a) {
            this.BUFFER_EXT_SIZE = 0;
            this.EOF_code_point = this.EOF_byte = -1;
            this._setArrayBuffer(a || new ArrayBuffer(this.BUFFER_EXT_SIZE));
            this.endian = f.BIG_ENDIAN
        }
        var c = e.prototype;
        c._setArrayBuffer = function(a) {
            this.write_position = a.byteLength;
            this.data = new DataView(a);
            this._position = 0
        };
        c.setArrayBuffer = function(a) {};
        Object.defineProperty(c, "buffer", {
            get: function() {
                return this.data.buffer
            },
            set: function(a) {
                this.data = new DataView(a)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "dataView", {
            get: function() {
                return this.data
            },
            set: function(a) {
                this.data = a;
                this.write_position = a.byteLength
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "bufferOffset", {
            get: function() {
                return this.data.byteOffset
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "position", {
            get: function() {
                return this._position
            },
            set: function(a) {
                this._position < a && !this.validate(a - this._position) || (this._position = a, this.write_position = a > this.write_position ? a: this.write_position)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "length", {
            get: function() {
                return this.write_position
            },
            set: function(a) {
                this.validateBuffer(a, !0)
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "bytesAvailable", {
            get: function() {
                return this.data.byteLength - this._position
            },
            enumerable: !0,
            configurable: !0
        });
        c.clear = function() {
            this._setArrayBuffer(new ArrayBuffer(this.BUFFER_EXT_SIZE))
        };
        c.readBoolean = function() {
            return this.validate(e.SIZE_OF_BOOLEAN) ? 0 != this.data.getUint8(this.position++) : null
        };
        c.readByte = function() {
            return this.validate(e.SIZE_OF_INT8) ? this.data.getInt8(this.position++) : null
        };
        c.readBytes = function(a, b, h) {
            void 0 === b && (b = 0);
            void 0 === h && (h = 0);
            if (0 == h) h = this.bytesAvailable;
            else if (!this.validate(h)) return null;
            a ? a.validateBuffer(h) : a = new e(new ArrayBuffer(h));
            for (var c = 0; c < h; c++) a.data.setUint8(c + b, this.data.getUint8(this.position++))
        };
        c.readDouble = function() {
            if (!this.validate(e.SIZE_OF_FLOAT64)) return null;
            var a = this.data.getFloat64(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_FLOAT64;
            return a
        };
        c.readFloat = function() {
            if (!this.validate(e.SIZE_OF_FLOAT32)) return null;
            var a = this.data.getFloat32(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_FLOAT32;
            return a
        };
        c.readInt = function() {
            if (!this.validate(e.SIZE_OF_INT32)) return null;
            var a = this.data.getInt32(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_INT32;
            return a
        };
        c.readShort = function() {
            if (!this.validate(e.SIZE_OF_INT16)) return null;
            var a = this.data.getInt16(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_INT16;
            return a
        };
        c.readUnsignedByte = function() {
            return this.validate(e.SIZE_OF_UINT8) ? this.data.getUint8(this.position++) : null
        };
        c.readUnsignedInt = function() {
            if (!this.validate(e.SIZE_OF_UINT32)) return null;
            var a = this.data.getUint32(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_UINT32;
            return a
        };
        c.readUnsignedShort = function() {
            if (!this.validate(e.SIZE_OF_UINT16)) return null;
            var a = this.data.getUint16(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_UINT16;
            return a
        };
        c.readUTF = function() {
            if (!this.validate(e.SIZE_OF_UINT16)) return null;
            var a = this.data.getUint16(this.position, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_UINT16;
            return 0 < a ? this.readUTFBytes(a) : ""
        };
        c.readUTFBytes = function(a) {
            if (!this.validate(a)) return null;
            var b = new Uint8Array(this.buffer, this.bufferOffset + this.position, a);
            this.position += a;
            return this.decodeUTF8(b)
        };
        c.writeBoolean = function(a) {
            this.validateBuffer(e.SIZE_OF_BOOLEAN);
            this.data.setUint8(this.position++, a ? 1 : 0)
        };
        c.writeByte = function(a) {
            this.validateBuffer(e.SIZE_OF_INT8);
            this.data.setInt8(this.position++, a)
        };
        c.writeBytes = function(a, b, h) {
            void 0 === b && (b = 0);
            void 0 === h && (h = 0);
            if (! (0 > b || 0 > h) && (h = 0 == h ? a.length - b: Math.min(a.length - b, h), 0 < h)) {
                this.validateBuffer(h);
                a = new DataView(a.buffer);
                for (var c = b; c < h + b; c++) this.data.setUint8(this.position++, a.getUint8(c))
            }
        };
        c.writeDouble = function(a) {
            this.validateBuffer(e.SIZE_OF_FLOAT64);
            this.data.setFloat64(this.position, a, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_FLOAT64
        };
        c.writeFloat = function(a) {
            this.validateBuffer(e.SIZE_OF_FLOAT32);
            this.data.setFloat32(this.position, a, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_FLOAT32
        };
        c.writeInt = function(a) {
            this.validateBuffer(e.SIZE_OF_INT32);
            this.data.setInt32(this.position, a, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_INT32
        };
        c.writeShort = function(a) {
            this.validateBuffer(e.SIZE_OF_INT16);
            this.data.setInt16(this.position, a, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_INT16
        };
        c.writeUnsignedInt = function(a) {
            this.validateBuffer(e.SIZE_OF_UINT32);
            this.data.setUint32(this.position, a, this.endian == f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_UINT32
        };
        c.writeUTF = function(a) {
            a = this.encodeUTF8(a);
            var b = a.length;
            this.validateBuffer(e.SIZE_OF_UINT16 + b);
            this.data.setUint16(this.position, b, this.endian === f.LITTLE_ENDIAN);
            this.position += e.SIZE_OF_UINT16;
            this._writeUint8Array(a, !1)
        };
        c.writeUTFBytes = function(a) {
            this._writeUint8Array(this.encodeUTF8(a))
        };
        c.toString = function() {
            return "[ByteArray] length:" + this.length + ", bytesAvailable:" + this.bytesAvailable
        };
        c._writeUint8Array = function(a, b) {
            void 0 === b && (b = !0);
            b && this.validateBuffer(this.position + a.length);
            for (var h = 0; h < a.length; h++) this.data.setUint8(this.position++, a[h])
        };
        c.validate = function(a) {
            if (0 < this.data.byteLength && this._position + a <= this.data.byteLength) return ! 0;
            throw d.getString(1025);
        };
        c.validateBuffer = function(a, b) {
            void 0 === b && (b = !1);
            this.write_position = a > this.write_position ? a: this.write_position;
            a += this._position;
            if (this.data.byteLength < a || b) {
                var h = new Uint8Array(new ArrayBuffer(a + this.BUFFER_EXT_SIZE)),
                c = Math.min(this.data.buffer.byteLength, a + this.BUFFER_EXT_SIZE);
                h.set(new Uint8Array(this.data.buffer, 0, c));
                this.buffer = h.buffer
            }
        };
        c.encodeUTF8 = function(a) {
            var b = 0;
            a = this.stringToCodePoints(a);
            for (var h = []; a.length > b;) {
                var c = a[b++];
                if (this.inRange(c, 55296, 57343)) this.encoderError(c);
                else if (this.inRange(c, 0, 127)) h.push(c);
                else {
                    var e, d;
                    this.inRange(c, 128, 2047) ? (e = 1, d = 192) : this.inRange(c, 2048, 65535) ? (e = 2, d = 224) : this.inRange(c, 65536, 1114111) && (e = 3, d = 240);
                    for (h.push(this.div(c, Math.pow(64, e)) + d); 0 < e;) {
                        var f = this.div(c, Math.pow(64, e - 1));
                        h.push(128 + f % 64);
                        e -= 1
                    }
                }
            }
            return new Uint8Array(h)
        };
        c.decodeUTF8 = function(a) {
            for (var b = 0,
            h = "",
            c, e = 0,
            d = 0,
            f = 0,
            g = 0; a.length > b;) {
                c = a[b++];
                if (c === this.EOF_byte) c = 0 !== d ? this.decoderError(!1) : this.EOF_code_point;
                else if (0 === d) this.inRange(c, 0, 127) || (this.inRange(c, 194, 223) ? (d = 1, g = 128, e = c - 192) : this.inRange(c, 224, 239) ? (d = 2, g = 2048, e = c - 224) : this.inRange(c, 240, 244) ? (d = 3, g = 65536, e = c - 240) : this.decoderError(!1), e *= Math.pow(64, d), c = null);
                else if (this.inRange(c, 128, 191)) if (f += 1, e += (c - 128) * Math.pow(64, d - f), f !== d) c = null;
                else {
                    var l = e,
                    m = g,
                    g = f = d = e = 0;
                    c = this.inRange(l, m, 1114111) && !this.inRange(l, 55296, 57343) ? l: this.decoderError(!1, c)
                } else g = f = d = e = 0,
                b--,
                c = this.decoderError(!1, c);
                null !== c && c !== this.EOF_code_point && (65535 >= c ? 0 < c && (h += String.fromCharCode(c)) : (c -= 65536, h += String.fromCharCode(55296 + (c >> 10 & 1023)), h += String.fromCharCode(56320 + (c & 1023))))
            }
            return h
        };
        c.encoderError = function(a) {
            throw d.getString(1026, a);
        };
        c.decoderError = function(a, b) {
            if (a) throw d.getString(1027);
            return b || 65533
        };
        c.inRange = function(a, b, h) {
            return b <= a && a <= h
        };
        c.div = function(a, b) {
            return Math.floor(a / b)
        };
        c.stringToCodePoints = function(a) {
            for (var b = [], h = 0, c = a.length; h < a.length;) {
                var e = a.charCodeAt(h);
                if (this.inRange(e, 55296, 57343)) if (this.inRange(e, 56320, 57343)) b.push(65533);
                else if (h === c - 1) b.push(65533);
                else {
                    var d = a.charCodeAt(h + 1);
                    this.inRange(d, 56320, 57343) ? (e &= 1023, d &= 1023, h += 1, b.push(65536 + (e << 10) + d)) : b.push(65533)
                } else b.push(e);
                h += 1
            }
            return b
        };
        e.SIZE_OF_BOOLEAN = 1;
        e.SIZE_OF_INT8 = 1;
        e.SIZE_OF_INT16 = 2;
        e.SIZE_OF_INT32 = 4;
        e.SIZE_OF_UINT8 = 1;
        e.SIZE_OF_UINT16 = 2;
        e.SIZE_OF_UINT32 = 4;
        e.SIZE_OF_FLOAT32 = 4;
        e.SIZE_OF_FLOAT64 = 8;
        return e
    } ();
    d.ByteArray = g;
    g.prototype.__class__ = "egret.ByteArray"
})(egret || (egret = {})); (function(d) {
    d.getOption = function(d) {
        if (window.hasOwnProperty("location")) {
            var g = location.search;
            if ("" == g) return "";
            for (var g = g.slice(1), g = g.split("&"), e = g.length, c = 0; c < e; c++) {
                var a = g[c].split("=");
                if (a[0] == d) return a[1]
            }
        }
        return ""
    }
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e(a, b, h) {
            f.call(this);
            this._target = null;
            this.loop = this.ignoreGlobalPause = this._useTicks = !1;
            this._actions = this._steps = this.pluginData = null;
            this.paused = !1;
            this.duration = 0;
            this._prevPos = -1;
            this.position = null;
            this._stepPosition = this._prevPosition = 0;
            this.passive = !1;
            this.initialize(a, b, h)
        }
        __extends(e, f);
        var c = e.prototype;
        e.get = function(a, b, h, c) {
            void 0 === b && (b = null);
            void 0 === h && (h = null);
            void 0 === c && (c = !1);
            c && e.removeTweens(a);
            return new e(a, b, h)
        };
        e.removeTweens = function(a) {
            if (a.tween_count) {
                for (var b = e._tweens,
                h = b.length - 1; 0 <= h; h--) b[h]._target == a && (b[h].paused = !0, b.splice(h, 1));
                a.tween_count = 0
            }
        };
        e.pauseTweens = function(a) {
            if (a.tween_count) for (var b = d.Tween._tweens,
            h = b.length - 1; 0 <= h; h--) b[h]._target == a && (b[h].paused = !0)
        };
        e.resumeTweens = function(a) {
            if (a.tween_count) for (var b = d.Tween._tweens,
            h = b.length - 1; 0 <= h; h--) b[h]._target == a && (b[h].paused = !1)
        };
        e.tick = function(a, b) {
            void 0 === b && (b = !1);
            for (var h = e._tweens.concat(), c = h.length - 1; 0 <= c; c--) {
                var d = h[c];
                b && !d.ignoreGlobalPause || d.paused || d.tick(d._useTicks ? 1 : a)
            }
        };
        e._register = function(a, b) {
            var h = a._target,
            c = e._tweens;
            if (b) h && (h.tween_count = 0 < h.tween_count ? h.tween_count + 1 : 1),
            c.push(a),
            e._inited || (d.Ticker.getInstance().register(e.tick, null), e._inited = !0);
            else for (h && h.tween_count--, h = c.length; h--;) if (c[h] == a) {
                c.splice(h, 1);
                break
            }
        };
        e.removeAllTweens = function() {
            for (var a = e._tweens,
            b = 0,
            h = a.length; b < h; b++) {
                var c = a[b];
                c.paused = !0;
                c._target.tweenjs_count = 0
            }
            a.length = 0
        };
        c.initialize = function(a, b, h) {
            this._target = a;
            b && (this._useTicks = b.useTicks, this.ignoreGlobalPause = b.ignoreGlobalPause, this.loop = b.loop, b.onChange && this.addEventListener("change", b.onChange, b.onChangeObj), b.override && e.removeTweens(a));
            this.pluginData = h || {};
            this._curQueueProps = {};
            this._initQueueProps = {};
            this._steps = [];
            this._actions = [];
            b && b.paused ? this.paused = !0 : e._register(this, !0);
            b && null != b.position && this.setPosition(b.position, e.NONE)
        };
        c.setPosition = function(a, b) {
            void 0 === b && (b = 1);
            0 > a && (a = 0);
            var h = a,
            c = !1;
            h >= this.duration && (this.loop ? h %= this.duration: (h = this.duration, c = !0));
            if (h == this._prevPos) return c;
            var e = this._prevPos;
            this.position = this._prevPos = h;
            this._prevPosition = a;
            if (this._target) if (c) this._updateTargetProps(null, 1);
            else if (0 < this._steps.length) {
                for (var d = 0,
                f = this._steps.length; d < f && !(this._steps[d].t > h); d++);
                d = this._steps[d - 1];
                this._updateTargetProps(d, (this._stepPosition = h - d.t) / d.d)
            }
            0 != b && 0 < this._actions.length && (this._useTicks ? this._runActions(h, h) : 1 == b && h < e ? (e != this.duration && this._runActions(e, this.duration), this._runActions(0, h, !0)) : this._runActions(e, h));
            c && this.setPaused(!0);
            this.dispatchEventWith("change");
            return c
        };
        c._runActions = function(a, b, h) {
            void 0 === h && (h = !1);
            var c = a,
            e = b,
            d = -1,
            f = this._actions.length,
            g = 1;
            a > b && (c = b, e = a, d = f, f = g = -1);
            for (; (d += g) != f;) {
                b = this._actions[d];
                var l = b.t; (l == e || l > c && l < e || h && l == a) && b.f.apply(b.o, b.p)
            }
        };
        c._updateTargetProps = function(a, b) {
            var h, c, d, f;
            if (a || 1 != b) {
                if (this.passive = !!a.v) return;
                a.e && (b = a.e(b, 0, 1, 1));
                h = a.p0;
                c = a.p1
            } else this.passive = !1,
            h = c = this._curQueueProps;
            for (var g in this._initQueueProps) {
                null == (d = h[g]) && (h[g] = d = this._initQueueProps[g]);
                null == (f = c[g]) && (c[g] = f = d);
                d = d == f || 0 == b || 1 == b || "number" != typeof d ? 1 == b ? f: d: d + (f - d) * b;
                var k = !1;
                if (f = e._plugins[g]) for (var l = 0,
                m = f.length; l < m; l++) {
                    var n = f[l].tween(this, g, d, h, c, b, !!a && h == c, !a);
                    n == e.IGNORE ? k = !0 : d = n
                }
                k || (this._target[g] = d)
            }
        };
        c.setPaused = function(a) {
            this.paused = a;
            e._register(this, !a);
            return this
        };
        c._cloneProps = function(a) {
            var b = {},
            h;
            for (h in a) b[h] = a[h];
            return b
        };
        c._addStep = function(a) {
            0 < a.d && (this._steps.push(a), a.t = this.duration, this.duration += a.d);
            return this
        };
        c._appendQueueProps = function(a) {
            var b, h, c, d, f, g;
            for (g in a) if (void 0 === this._initQueueProps[g]) {
                h = this._target[g];
                if (b = e._plugins[g]) for (c = 0, d = b.length; c < d; c++) h = b[c].init(this, g, h);
                this._initQueueProps[g] = this._curQueueProps[g] = void 0 === h ? null: h
            }
            for (g in a) {
                h = this._curQueueProps[g];
                if (b = e._plugins[g]) for (f = f || {},
                c = 0, d = b.length; c < d; c++) b[c].step && b[c].step(this, g, h, a[g], f);
                this._curQueueProps[g] = a[g]
            }
            f && this._appendQueueProps(f);
            return this._curQueueProps
        };
        c._addAction = function(a) {
            a.t = this.duration;
            this._actions.push(a);
            return this
        };
        c._set = function(a, b) {
            for (var h in a) b[h] = a[h]
        };
        c.wait = function(a, b) {
            if (null == a || 0 >= a) return this;
            var h = this._cloneProps(this._curQueueProps);
            return this._addStep({
                d: a,
                p0: h,
                p1: h,
                v: b
            })
        };
        c.to = function(a, b, h) {
            void 0 === h && (h = void 0);
            if (isNaN(b) || 0 > b) b = 0;
            return this._addStep({
                d: b || 0,
                p0: this._cloneProps(this._curQueueProps),
                e: h,
                p1: this._cloneProps(this._appendQueueProps(a))
            })
        };
        c.call = function(a, b, h) {
            void 0 === b && (b = void 0);
            void 0 === h && (h = void 0);
            return this._addAction({
                f: a,
                p: h ? h: [],
                o: b ? b: this._target
            })
        };
        c.set = function(a, b) {
            void 0 === b && (b = null);
            return this._addAction({
                f: this._set,
                o: this,
                p: [a, b ? b: this._target]
            })
        };
        c.play = function(a) {
            a || (a = this);
            return this.call(a.setPaused, a, [!1])
        };
        c.pause = function(a) {
            a || (a = this);
            return this.call(a.setPaused, a, [!0])
        };
        c.tick = function(a) {
            this.paused || this.setPosition(this._prevPosition + a)
        };
        e.NONE = 0;
        e.LOOP = 1;
        e.REVERSE = 2;
        e._tweens = [];
        e.IGNORE = {};
        e._plugins = {};
        e._inited = !1;
        return e
    } (d.EventDispatcher);
    d.Tween = f;
    f.prototype.__class__ = "egret.Tween"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f() {
            d.Logger.fatalWithErrorId(1014)
        }
        f.get = function(e) { - 1 > e && (e = -1);
            1 < e && (e = 1);
            return function(c) {
                return 0 == e ? c: 0 > e ? c * (c * -e + 1 + e) : c * ((2 - c) * e + (1 - e))
            }
        };
        f.getPowIn = function(e) {
            return function(c) {
                return Math.pow(c, e)
            }
        };
        f.getPowOut = function(e) {
            return function(c) {
                return 1 - Math.pow(1 - c, e)
            }
        };
        f.getPowInOut = function(e) {
            return function(c) {
                return 1 > (c *= 2) ? 0.5 * Math.pow(c, e) : 1 - 0.5 * Math.abs(Math.pow(2 - c, e))
            }
        };
        f.sineIn = function(e) {
            return 1 - Math.cos(e * Math.PI / 2)
        };
        f.sineOut = function(e) {
            return Math.sin(e * Math.PI / 2)
        };
        f.sineInOut = function(e) {
            return - 0.5 * (Math.cos(Math.PI * e) - 1)
        };
        f.getBackIn = function(e) {
            return function(c) {
                return c * c * ((e + 1) * c - e)
            }
        };
        f.getBackOut = function(e) {
            return function(c) {
                return--c * c * ((e + 1) * c + e) + 1
            }
        };
        f.getBackInOut = function(e) {
            e *= 1.525;
            return function(c) {
                return 1 > (c *= 2) ? 0.5 * c * c * ((e + 1) * c - e) : 0.5 * ((c -= 2) * c * ((e + 1) * c + e) + 2)
            }
        };
        f.circIn = function(e) {
            return - (Math.sqrt(1 - e * e) - 1)
        };
        f.circOut = function(e) {
            return Math.sqrt(1 - --e * e)
        };
        f.circInOut = function(e) {
            return 1 > (e *= 2) ? -0.5 * (Math.sqrt(1 - e * e) - 1) : 0.5 * (Math.sqrt(1 - (e -= 2) * e) + 1)
        };
        f.bounceIn = function(e) {
            return 1 - f.bounceOut(1 - e)
        };
        f.bounceOut = function(e) {
            return e < 1 / 2.75 ? 7.5625 * e * e: e < 2 / 2.75 ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75 : e < 2.5 / 2.75 ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375 : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375
        };
        f.bounceInOut = function(e) {
            return 0.5 > e ? 0.5 * f.bounceIn(2 * e) : 0.5 * f.bounceOut(2 * e - 1) + 0.5
        };
        f.getElasticIn = function(e, c) {
            var a = 2 * Math.PI;
            return function(b) {
                if (0 == b || 1 == b) return b;
                var h = c / a * Math.asin(1 / e);
                return - (e * Math.pow(2, 10 * (b -= 1)) * Math.sin((b - h) * a / c))
            }
        };
        f.getElasticOut = function(e, c) {
            var a = 2 * Math.PI;
            return function(b) {
                if (0 == b || 1 == b) return b;
                var h = c / a * Math.asin(1 / e);
                return e * Math.pow(2, -10 * b) * Math.sin((b - h) * a / c) + 1
            }
        };
        f.getElasticInOut = function(e, c) {
            var a = 2 * Math.PI;
            return function(b) {
                var h = c / a * Math.asin(1 / e);
                return 1 > (b *= 2) ? -0.5 * e * Math.pow(2, 10 * (b -= 1)) * Math.sin((b - h) * a / c) : e * Math.pow(2, -10 * (b -= 1)) * Math.sin((b - h) * a / c) * 0.5 + 1
            }
        };
        f.quadIn = f.getPowIn(2);
        f.quadOut = f.getPowOut(2);
        f.quadInOut = f.getPowInOut(2);
        f.cubicIn = f.getPowIn(3);
        f.cubicOut = f.getPowOut(3);
        f.cubicInOut = f.getPowInOut(3);
        f.quartIn = f.getPowIn(4);
        f.quartOut = f.getPowOut(4);
        f.quartInOut = f.getPowInOut(4);
        f.quintIn = f.getPowIn(5);
        f.quintOut = f.getPowOut(5);
        f.quintInOut = f.getPowInOut(5);
        f.backIn = f.getBackIn(1.7);
        f.backOut = f.getBackOut(1.7);
        f.backInOut = f.getBackInOut(1.7);
        f.elasticIn = f.getElasticIn(1, 0.3);
        f.elasticOut = f.getElasticOut(1, 0.3);
        f.elasticInOut = f.getElasticInOut(1, 0.3 * 1.5);
        return f
    } ();
    d.Ease = f;
    f.prototype.__class__ = "egret.Ease"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {
            this.path = "";
            this.audio = null;
            this.type = d.EFFECT
        }
        var e = d.prototype;
        e.play = function(c) {
            void 0 === c && (c = !1);
            var a = this.audio;
            a && (isNaN(a.duration) || (a.currentTime = 0), a.loop = c, a.play())
        };
        e.pause = function() {
            var c = this.audio;
            c && c.pause()
        };
        e.load = function() {
            var c = this.audio;
            c && c.load()
        };
        e.addEventListener = function(c, a) {
            this.audio && this.audio.addEventListener(c, a, !1)
        };
        e.removeEventListener = function(c, a) {
            this.audio && this.audio.removeEventListener(c, a, !1)
        };
        e.setVolume = function(c) {
            var a = this.audio;
            a && (a.volume = c)
        };
        e.getVolume = function() {
            return this.audio ? this.audio.volume: 0
        };
        e.preload = function(c) {
            this.type = c
        };
        e._setAudio = function(c) {
            this.audio = c
        };
        d.MUSIC = "music";
        d.EFFECT = "effect";
        return d
    } ();
    d.Sound = f;
    f.prototype.__class__ = "egret.Sound"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function d() {}
        d.isNumber = function(e) {
            return "number" === typeof e && !isNaN(e)
        };
        d.sin = function(e) {
            e = Math.round(e);
            e %= 360;
            0 > e && (e += 360);
            return 90 > e ? egret_sin_map[e] : 180 > e ? egret_cos_map[e - 90] : 270 > e ? -egret_sin_map[e - 180] : -egret_cos_map[e - 270]
        };
        d.cos = function(e) {
            e = Math.round(e);
            e %= 360;
            0 > e && (e += 360);
            return 90 > e ? egret_cos_map[e] : 180 > e ? -egret_sin_map[e - 90] : 270 > e ? -egret_cos_map[e - 180] : egret_sin_map[e - 270]
        };
        return d
    } ();
    d.NumberUtils = f;
    f.prototype.__class__ = "egret.NumberUtils"
})(egret || (egret = {}));
for (var egret_sin_map = {},
egret_cos_map = {},
NumberUtils_i = 0; 90 >= NumberUtils_i; NumberUtils_i++) egret_sin_map[NumberUtils_i] = Math.sin(NumberUtils_i * egret.Matrix.DEG_TO_RAD),
egret_cos_map[NumberUtils_i] = Math.cos(NumberUtils_i * egret.Matrix.DEG_TO_RAD);
Function.prototype.bind || (Function.prototype.bind = function(d) {
    if ("function" !== typeof this) throw new TypeError(egret.getString(1029));
    var f = Array.prototype.slice.call(arguments, 1),
    g = this,
    e = function() {},
    c = function() {
        return g.apply(this instanceof e && d ? this: d, f.concat(Array.prototype.slice.call(arguments)))
    };
    e.prototype = this.prototype;
    c.prototype = new e;
    return c
}); (function(d) {
    var f = function(f) {
        function e(a) {
            void 0 === a && (a = 60);
            f.call(this);
            this.frameRate = a;
            this._time = 0;
            this._requestAnimationId = NaN;
            this._isActivate = !0;
            60 == a && (e.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame, e.cancelAnimationFrame = window.cancelAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame);
            e.requestAnimationFrame || (e.requestAnimationFrame = function(b) {
                return window.setTimeout(b, 1E3 / a)
            });
            e.cancelAnimationFrame || (e.cancelAnimationFrame = function(b) {
                return window.clearTimeout(b)
            });
            e.instance = this;
            this.registerListener()
        }
        __extends(e, f);
        var c = e.prototype;
        c.enterFrame = function() {
            var a = e.instance,
            b = e._thisObject,
            h = e._callback,
            c = d.getTimer(),
            f = c - a._time;
            a._requestAnimationId = e.requestAnimationFrame.call(window, e.prototype.enterFrame);
            h.call(b, f);
            a._time = c
        };
        c.executeMainLoop = function(a, b) {
            e._callback = a;
            e._thisObject = b;
            this.enterFrame()
        };
        c.reset = function() {
            var a = e.instance;
            a._requestAnimationId && (a._time = d.getTimer(), e.cancelAnimationFrame.call(window, a._requestAnimationId), a.enterFrame())
        };
        c.registerListener = function() {
            var a = this,
            b = function() {
                a._isActivate && (a._isActivate = !1, d.MainContext.instance.stage.dispatchEvent(new d.Event(d.Event.DEACTIVATE)))
            },
            h = function() {
                a._isActivate || (a._isActivate = !0, e.instance.reset(), d.MainContext.instance.stage.dispatchEvent(new d.Event(d.Event.ACTIVATE)))
            },
            c = function() {
                document[f] ? b() : h()
            };
            window.addEventListener("focus", h, !1);
            window.addEventListener("blur", b, !1);
            var f, g;
            "undefined" !== typeof document.hidden ? (f = "hidden", g = "visibilitychange") : "undefined" !== typeof document.mozHidden ? (f = "mozHidden", g = "mozvisibilitychange") : "undefined" !== typeof document.msHidden ? (f = "msHidden", g = "msvisibilitychange") : "undefined" !== typeof document.webkitHidden ? (f = "webkitHidden", g = "webkitvisibilitychange") : "undefined" !== typeof document.oHidden && (f = "oHidden", g = "ovisibilitychange");
            "onpageshow" in window && "onpagehide" in window && (window.addEventListener("pageshow", h, !1), window.addEventListener("pagehide", b, !1));
            f && g && document.addEventListener(g, c, !1)
        };
        e.instance = null;
        e.requestAnimationFrame = null;
        e.cancelAnimationFrame = null;
        e._thisObject = null;
        e._callback = null;
        return e
    } (d.DeviceContext);
    d.HTML5DeviceContext = f;
    f.prototype.__class__ = "egret.HTML5DeviceContext"
})(egret || (egret = {}));
var egret_html5_localStorage; (function(d) {
    d.getItem = function(d) {
        return window.localStorage.getItem(d)
    };
    d.setItem = function(d, g) {
        try {
            return window.localStorage.setItem(d, g),
            !0
        } catch(e) {
            return egret.Logger.infoWithErrorId(1018, d, g),
            !1
        }
    };
    d.removeItem = function(d) {
        window.localStorage.removeItem(d)
    };
    d.clear = function() {
        window.localStorage.clear()
    };
    d.init = function() {
        for (var f in d) egret.localStorage[f] = d[f]
    }
})(egret_html5_localStorage || (egret_html5_localStorage = {}));
egret_html5_localStorage.init(); (function(d) {
    var f = function(f) {
        function e(a, b) {
            void 0 === b && (b = !0);
            f.call(this);
            this.useCacheCanvas = b;
            this.canvas = a || this.createCanvas();
            this.canvasContext = this.canvas.getContext("2d");
            b ? (this._cacheCanvas = document.createElement("canvas"), this._cacheCanvas.width = this.canvas.width, this._cacheCanvas.height = this.canvas.height, this.drawCanvasContext = this._cacheCanvasContext = this._cacheCanvas.getContext("2d")) : this.drawCanvasContext = this.canvasContext;
            this.onResize();
            var h = this.drawCanvasContext.setTransform,
            c = this;
            this.drawCanvasContext.setTransform = function(b, a, e, d, f, g) {
                c._matrixA = b;
                c._matrixB = a;
                c._matrixC = e;
                c._matrixD = d;
                c._matrixTx = f;
                c._matrixTy = g;
                h.call(c.drawCanvasContext, b, a, e, d, f, g)
            };
            this._matrixA = 1;
            this._matrixC = this._matrixB = 0;
            this._matrixD = 1;
            this._transformTy = this._transformTx = this._matrixTy = this._matrixTx = 0;
            this.initBlendMode()
        }
        __extends(e, f);
        var c = e.prototype;
        c.createCanvas = function() {
            var a = d.Browser.getInstance().$("#egretCanvas");
            if (!a) {
                var b = document.getElementById(d.StageDelegate.canvas_div_name),
                a = d.Browser.getInstance().$new("canvas");
                a.id = "egretCanvas";
                b.appendChild(a)
            }
            d.MainContext.instance.stage.addEventListener(d.Event.RESIZE, this.onResize, this);
            return a
        };
        c.onResize = function() {
            if (this.canvas) {
                var a = document.getElementById(d.StageDelegate.canvas_div_name);
                this.canvas.width = d.MainContext.instance.stage.stageWidth;
                this.canvas.height = d.MainContext.instance.stage.stageHeight;
                this.canvas.style.width = a.style.width;
                this.canvas.style.height = a.style.height;
                this.useCacheCanvas && (this._cacheCanvas.width = this.canvas.width, this._cacheCanvas.height = this.canvas.height);
                this.drawCanvasContext.imageSmoothingEnabled = d.RendererContext.imageSmoothingEnabled;
                this.drawCanvasContext.webkitImageSmoothingEnabled = d.RendererContext.imageSmoothingEnabled;
                this.drawCanvasContext.mozImageSmoothingEnabled = d.RendererContext.imageSmoothingEnabled;
                this.drawCanvasContext.msImageSmoothingEnabled = d.RendererContext.imageSmoothingEnabled
            }
        };
        c.clearScreen = function() {
            for (var a = d.RenderFilter.getInstance().getDrawAreaList(), b = 0, h = a.length; b < h; b++) {
                var c = a[b];
                this.clearRect(c.x, c.y, c.width, c.height)
            }
            a = d.MainContext.instance.stage;
            this.useCacheCanvas && this._cacheCanvasContext.clearRect(0, 0, a.stageWidth, a.stageHeight);
            this.renderCost = 0
        };
        c.clearRect = function(a, b, h, c) {
            this.canvasContext.clearRect(a, b, h, c)
        };
        c.drawImage = function(a, b, h, c, e, t, p, k, l, m) {
            void 0 === m && (m = void 0);
            var n = a._bitmapData;
            t += this._transformTx;
            p += this._transformTy;
            var q = d.getTimer();
            void 0 === m ? this.drawCanvasContext.drawImage(n, b, h, c, e, t, p, k, l) : this.drawRepeatImage(a, b, h, c, e, t, p, k, l, m);
            f.prototype.drawImage.call(this, a, b, h, c, e, t, p, k, l, m);
            this.renderCost += d.getTimer() - q
        };
        c.drawRepeatImage = function(a, b, h, c, e, f, g, k, l, m) {
            if (void 0 === a.pattern) {
                var n = d.MainContext.instance.rendererContext._texture_scale_factor,
                q = a._bitmapData,
                r = q;
                if (q.width != c || q.height != e || 1 != n) r = document.createElement("canvas"),
                r.width = c * n,
                r.height = e * n,
                r.getContext("2d").drawImage(q, b, h, c, e, 0, 0, c * n, e * n);
                b = this.drawCanvasContext.createPattern(r, m);
                a.pattern = b
            }
            this.drawCanvasContext.fillStyle = a.pattern;
            this.drawCanvasContext.translate(f, g);
            this.drawCanvasContext.fillRect(0, 0, k, l);
            this.drawCanvasContext.translate( - f, -g)
        };
        c.setTransform = function(a) {
            1 == a.a && 0 == a.b && 0 == a.c && 1 == a.d && 1 == this._matrixA && 0 == this._matrixB && 0 == this._matrixC && 1 == this._matrixD ? (this._transformTx = a.tx - this._matrixTx, this._transformTy = a.ty - this._matrixTy) : (this._transformTx = this._transformTy = 0, this._matrixA == a.a && this._matrixB == a.b && this._matrixC == a.c && this._matrixD == a.d && this._matrixTx == a.tx && this._matrixTy == a.ty || this.drawCanvasContext.setTransform(a.a, a.b, a.c, a.d, a.tx, a.ty))
        };
        c.setAlpha = function(a, b) {
            this.drawCanvasContext.globalAlpha = a;
            b ? (this.blendValue = this.blendModes[b], this.drawCanvasContext.globalCompositeOperation = this.blendValue) : this.blendValue != d.BlendMode.NORMAL && (this.blendValue = this.blendModes[d.BlendMode.NORMAL], this.drawCanvasContext.globalCompositeOperation = this.blendValue)
        };
        c.initBlendMode = function() {
            this.blendModes = {};
            this.blendModes[d.BlendMode.NORMAL] = "source-over";
            this.blendModes[d.BlendMode.ADD] = "lighter";
            this.blendModes[d.BlendMode.ERASE] = "destination-out";
            this.blendModes[d.BlendMode.ERASE_REVERSE] = "destination-in"
        };
        c.setupFont = function(a, b) {
            void 0 === b && (b = null);
            b = b || {};
            var h = a._properties,
            c = null == b.size ? h._size: b.size,
            e = null == b.fontFamily ? h._fontFamily: b.fontFamily,
            d = this.drawCanvasContext,
            f = (null == b.italic ? h._italic: b.italic) ? "italic ": "normal ",
            f = f + ((null == b.bold ? h._bold: b.bold) ? "bold ": "normal ");
            d.font = f + (c + "px " + e);
            d.textAlign = "left";
            d.textBaseline = "middle"
        };
        c.measureText = function(a) {
            return this.drawCanvasContext.measureText(a).width
        };
        c.drawText = function(a, b, h, c, e, t) {
            void 0 === t && (t = null);
            this.setupFont(a, t);
            t = t || {};
            var p = a._properties,
            k;
            k = null != t.textColor ? d.toColorString(t.textColor) : p._textColorString;
            var l;
            l = null != t.strokeColor ? d.toColorString(t.strokeColor) : p._strokeColorString;
            var p = null != t.stroke ? t.stroke: p._stroke,
            m = this.drawCanvasContext;
            m.fillStyle = k;
            m.strokeStyle = l;
            p && (m.lineWidth = 2 * p, m.strokeText(b, h + this._transformTx, c + this._transformTy, e || 65535));
            m.fillText(b, h + this._transformTx, c + this._transformTy, e || 65535);
            f.prototype.drawText.call(this, a, b, h, c, e, t)
        };
        c.strokeRect = function(a, b, h, c, e) {
            this.drawCanvasContext.strokeStyle = e;
            this.drawCanvasContext.strokeRect(a, b, h, c)
        };
        c.pushMask = function(a) {
            this.drawCanvasContext.save();
            this.drawCanvasContext.beginPath();
            this.drawCanvasContext.rect(a.x + this._transformTx, a.y + this._transformTy, a.width, a.height);
            this.drawCanvasContext.clip();
            this.drawCanvasContext.closePath()
        };
        c.popMask = function() {
            this.drawCanvasContext.restore();
            this.drawCanvasContext.setTransform(1, 0, 0, 1, 0, 0)
        };
        c.onRenderStart = function() {
            this.drawCanvasContext.save()
        };
        c.onRenderFinish = function() {
            this.drawCanvasContext.restore();
            this.drawCanvasContext.setTransform(1, 0, 0, 1, 0, 0);
            if (this.useCacheCanvas) for (var a = this._cacheCanvas.width,
            b = this._cacheCanvas.height,
            h = d.RenderFilter.getInstance().getDrawAreaList(), c = 0, e = h.length; c < e; c++) {
                var f = h[c],
                g = f.x,
                k = f.y,
                l = f.width,
                f = f.height;
                g + l > a && (l = a - g);
                k + f > b && (f = b - k);
                0 < l && 0 < f && this.canvasContext.drawImage(this._cacheCanvas, g, k, l, f, g, k, l, f)
            }
        };
        c.drawCursor = function(a, b, h, c) {
            this.drawCanvasContext.strokeStyle = "#40a5ff";
            this.drawCanvasContext.lineWidth = 2;
            this.drawCanvasContext.beginPath();
            this.drawCanvasContext.moveTo(Math.round(a + this._transformTx), Math.round(b + this._transformTy));
            this.drawCanvasContext.lineTo(Math.round(h + this._transformTx), Math.round(c + this._transformTy));
            this.drawCanvasContext.closePath();
            this.drawCanvasContext.stroke()
        };
        return e
    } (d.RendererContext);
    d.HTML5CanvasRenderer = f;
    f.prototype.__class__ = "egret.HTML5CanvasRenderer"
})(egret || (egret = {}));
var egret_h5_graphics; (function(d) {
    d.beginFill = function(d, e) {
        void 0 === e && (e = 1);
        var c = "rgba(" + (d >> 16) + "," + ((d & 65280) >> 8) + "," + (d & 255) + "," + e + ")";
        this.fillStyleColor = c;
        this._pushCommand(new f(this._setStyle, this, [c]))
    };
    d.drawRect = function(d, e, c, a) {
        this._pushCommand(new f(function(b, a, c, e) {
            var d = this.renderContext;
            this.canvasContext.beginPath();
            this.canvasContext.rect(d._transformTx + b, d._transformTy + a, c, e);
            this.canvasContext.closePath()
        },
        this, [d, e, c, a]));
        this._fill();
        this.checkRect(d, e, c, a)
    };
    d.drawCircle = function(d, e, c) {
        this._pushCommand(new f(function(a, b, h) {
            var c = this.renderContext;
            this.canvasContext.beginPath();
            this.canvasContext.arc(c._transformTx + a, c._transformTy + b, h, 0, 2 * Math.PI);
            this.canvasContext.closePath()
        },
        this, [d, e, c]));
        this._fill();
        this.checkRect(d - c, e - c, 2 * c, 2 * c)
    };
    d.drawRoundRect = function(d, e, c, a, b, h) {
        this._pushCommand(new f(function(b, a, h, c, e, d) {
            var f = this.renderContext;
            b = f._transformTx + b;
            a = f._transformTy + a;
            e /= 2;
            d = d ? d / 2 : e;
            h = b + h;
            c = a + c;
            f = c - d;
            this.canvasContext.beginPath();
            this.canvasContext.moveTo(h, f);
            this.canvasContext.quadraticCurveTo(h, c, h - e, c);
            this.canvasContext.lineTo(b + e, c);
            this.canvasContext.quadraticCurveTo(b, c, b, c - d);
            this.canvasContext.lineTo(b, a + d);
            this.canvasContext.quadraticCurveTo(b, a, b + e, a);
            this.canvasContext.lineTo(h - e, a);
            this.canvasContext.quadraticCurveTo(h, a, h, a + d);
            this.canvasContext.lineTo(h, f);
            this.canvasContext.closePath()
        },
        this, [d, e, c, a, b, h]));
        this._fill();
        this.checkRect(d, e, c, a)
    };
    d.drawEllipse = function(d, e, c, a) {
        this._pushCommand(new f(function(b, a, c, e) {
            var d = this.renderContext;
            this.canvasContext.save();
            b = d._transformTx + b + c / 2;
            a = d._transformTy + a + e / 2;
            d = c > e ? c: e;
            c /= d;
            e /= d;
            d /= 2;
            this.canvasContext.scale(c, e);
            this.canvasContext.beginPath();
            this.canvasContext.arc(b / c, a / e, d, 0, 2 * Math.PI);
            this.canvasContext.closePath();
            this.canvasContext.restore()
        },
        this, [d, e, c, a]));
        this._fill();
        this.checkRect(d, e, c, a)
    };
    d.lineStyle = function(d, e, c, a, b, h, F, E) {
        void 0 === d && (d = NaN);
        void 0 === e && (e = 0);
        void 0 === c && (c = 1);
        void 0 === a && (a = !1);
        void 0 === b && (b = "normal");
        void 0 === h && (h = null);
        void 0 === F && (F = null);
        void 0 === E && (E = 3);
        this.strokeStyleColor && (this.createEndLineCommand(), this._pushCommand(this.endLineCommand));
        this.strokeStyleColor = e = "rgba(" + (e >> 16) + "," + ((e & 65280) >> 8) + "," + (e & 255) + "," + c + ")";
        this._pushCommand(new f(function(b, a) {
            this.canvasContext.lineWidth = b;
            this.canvasContext.strokeStyle = a;
            this.canvasContext.beginPath()
        },
        this, [d, e]));
        this.moveTo(this.lineX, this.lineY)
    };
    d.lineTo = function(d, e) {
        this._pushCommand(new f(function(c, a) {
            var b = this.renderContext;
            this.canvasContext.lineTo(b._transformTx + c, b._transformTy + a)
        },
        this, [d, e]));
        this.checkPoint(this.lineX, this.lineY);
        this.lineX = d;
        this.lineY = e;
        this.checkPoint(d, e)
    };
    d.curveTo = function(d, e, c, a) {
        this._pushCommand(new f(function(b, a, c, e) {
            var d = this.renderContext;
            this.canvasContext.quadraticCurveTo(d._transformTx + b, d._transformTy + a, d._transformTx + c, d._transformTy + e)
        },
        this, [d, e, c, a]));
        this.checkPoint(this.lineX, this.lineY);
        this.lineX = c;
        this.lineY = a;
        this.checkPoint(d, e);
        this.checkPoint(c, a)
    };
    d.moveTo = function(d, e) {
        this._pushCommand(new f(function(c, a) {
            var b = this.renderContext;
            this.canvasContext.moveTo(b._transformTx + c, b._transformTy + a)
        },
        this, [d, e]))
    };
    d.clear = function() {
        this.lineY = this.lineX = this.commandQueue.length = 0;
        this.fillStyleColor = this.strokeStyleColor = null;
        this._dirty = !1;
        this._maxY = this._maxX = this._minY = this._minX = 0;
        this._firstCheck = !0
    };
    d.createEndFillCommand = function() {
        this.endFillCommand || (this.endFillCommand = new f(function() {
            this.canvasContext.fill();
            this.canvasContext.closePath()
        },
        this, null))
    };
    d.endFill = function() {
        null != this.fillStyleColor && this._fill()
    };
    d._fill = function() {
        this.fillStyleColor && (this.createEndFillCommand(), this._pushCommand(this.endFillCommand), this.fillStyleColor = null);
        this.strokeStyleColor && (this.createEndLineCommand(), this._pushCommand(this.endLineCommand))
    };
    d.createEndLineCommand = function() {
        this.endLineCommand || (this.endLineCommand = new f(function() {
            this.canvasContext.stroke();
            this.canvasContext.closePath()
        },
        this, null))
    };
    d._pushCommand = function(d) {
        this.commandQueue.push(d);
        this._dirty = !0
    };
    d._draw = function(d) {
        var e = this.commandQueue.length;
        if (0 != e) {
            this.renderContext = d;
            d = this.canvasContext = this.renderContext.drawCanvasContext;
            d.save();
            this.strokeStyleColor && 0 < e && this.commandQueue[e - 1] != this.endLineCommand && (this.createEndLineCommand(), this._pushCommand(this.endLineCommand), e = this.commandQueue.length);
            for (var c = 0; c < e; c++) {
                var a = this.commandQueue[c];
                a.method.apply(a.thisObject, a.args)
            }
            d.restore();
            this._dirty = !1
        }
    };
    var f = function() {
        return function(d, e, c) {
            this.method = d;
            this.thisObject = e;
            this.args = c
        }
    } ();
    f.prototype.__class__ = "egret_h5_graphics.Command";
    d._setStyle = function(d) {
        this.canvasContext.fillStyle = d;
        this.canvasContext.beginPath()
    };
    d.init = function() {
        for (var f in d) egret.Graphics.prototype[f] = d[f];
        egret.RendererContext.createRendererContext = function(e) {
            return new egret.HTML5CanvasRenderer(e, !1)
        }
    }
})(egret_h5_graphics || (egret_h5_graphics = {}));
egret_h5_graphics.init(); (function(d) {
    var f = function(f) {
        function e(a) {
            f.call(this);
            this.glID = this.gl = this.canvas = null;
            this.size = 2E3;
            this.vertices = null;
            this.vertSize = 5;
            this.indices = null;
            this.projectionY = this.projectionX = NaN;
            this.shaderManager = null;
            this.contextLost = !1;
            this.glContextId = 0;
            this.currentBlendMode = "";
            this.currentBaseTexture = null;
            this.currentBatchSize = 0;
            this.worldTransform = null;
            this.worldAlpha = 1;
            this.maskList = [];
            this.maskDataFreeList = [];
            this.graphicsIndexBuffer = this.graphicsBuffer = this.graphicsIndices = this.graphicsPoints = this.filterType = this.colorTransformMatrix = null;
            this.graphicsStyle = {};
            this.canvas = a || this.createCanvas();
            this.canvas.addEventListener("webglcontextlost", this.handleContextLost.bind(this), !1);
            this.canvas.addEventListener("webglcontextrestored", this.handleContextRestored.bind(this), !1);
            this.html5Canvas = document.createElement("canvas");
            this.canvasContext = new d.HTML5CanvasRenderer(this.html5Canvas);
            this.onResize();
            this.projectionX = this.canvas.width / 2;
            this.projectionY = -this.canvas.height / 2;
            a = 6 * this.size;
            this.vertices = new Float32Array(4 * this.size * this.vertSize);
            this.indices = new Uint16Array(a);
            for (var b = 0,
            h = 0; b < a; b += 6, h += 4) this.indices[b + 0] = h + 0,
            this.indices[b + 1] = h + 1,
            this.indices[b + 2] = h + 2,
            this.indices[b + 3] = h + 0,
            this.indices[b + 4] = h + 2,
            this.indices[b + 5] = h + 3;
            this.initWebGL();
            this.shaderManager = new d.WebGLShaderManager(this.gl);
            this.worldTransform = new d.Matrix;
            this.initAll()
        }
        __extends(e, f);
        var c = e.prototype;
        c.onRenderFinish = function() {
            this._drawWebGL()
        };
        c.initAll = function() {
            e.isInit || (e.isInit = !0, egret_webgl_graphics.init(), d.TextField.prototype._makeBitmapCache = function() {
                this.renderTexture || (this.renderTexture = new d.RenderTexture);
                var a = this.getBounds(d.Rectangle.identity);
                if (0 == a.width || 0 == a.height) return this._texture_to_render = null,
                !1;
                this._bitmapData || (this._bitmapData = document.createElement("canvas"), this.renderContext = d.RendererContext.createRendererContext(this._bitmapData));
                var b = a.width,
                a = a.height,
                h, c, e = d.MainContext.instance.rendererContext._texture_scale_factor;
                h = b / e;
                c = a / e;
                h = Math.round(h);
                c = Math.round(c);
                var f = this._bitmapData;
                f.width = h;
                f.height = c;
                f.style.width = h + "px";
                f.style.height = c + "px";
                this.renderContext._cacheCanvas && (this.renderContext._cacheCanvas.width = h, this.renderContext._cacheCanvas.height = c);
                this._worldTransform.identity();
                this._worldTransform.a = 1 / e;
                this._worldTransform.d = 1 / e;
                this.renderContext.setTransform(this._worldTransform);
                this.worldAlpha = 1;
                e = d.RenderFilter.getInstance();
                f = e._drawAreaList.concat();
                e._drawAreaList.length = 0;
                this.renderContext.clearScreen();
                this.renderContext.onRenderStart();
                d.RendererContext.deleteTexture(this.renderTexture);
                this._colorTransform && this.renderContext.setGlobalColorTransform(this._colorTransform.matrix);
                var g = this.mask || this._scrollRect;
                g && this.renderContext.pushMask(g);
                this._render(this.renderContext);
                g && this.renderContext.popMask();
                this._colorTransform && this.renderContext.setGlobalColorTransform(null);
                d.RenderTexture.identityRectangle.width = h;
                d.RenderTexture.identityRectangle.height = c;
                e.addDrawArea(d.RenderTexture.identityRectangle);
                this.renderContext.onRenderFinish();
                e._drawAreaList = f;
                this.renderTexture._bitmapData = this._bitmapData;
                this.renderTexture._sourceWidth = h;
                this.renderTexture._sourceHeight = c;
                this.renderTexture._textureWidth = b;
                this.renderTexture._textureHeight = a;
                this._texture_to_render = this.renderTexture;
                return ! 0
            },
            d.TextField.prototype._draw = function(a) {
                this._properties._type == d.TextFieldType.INPUT && this._isTyping || (this.getDirty() && (this._texture_to_render = this.renderTexture, this._cacheAsBitmap = !0), d.DisplayObject.prototype._draw.call(this, a))
            },
            d.RenderTexture.prototype.init = function() {
                this._bitmapData = document.createElement("canvas");
                this.canvasContext = this._bitmapData.getContext("2d");
                this._webglBitmapData = document.createElement("canvas");
                this.renderContext = new d.WebGLRenderer(this._webglBitmapData)
            },
            d.RenderTexture.prototype.setSize = function(a, b) {
                if (this._webglBitmapData) {
                    var h = this._webglBitmapData;
                    h.width = a;
                    h.height = b;
                    h.style.width = a + "px";
                    h.style.height = b + "px";
                    this.renderContext.projectionX = a / 2;
                    this.renderContext.projectionY = -b / 2;
                    this.renderContext.viewportScale = d.MainContext.instance.rendererContext._texture_scale_factor
                }
            },
            d.RenderTexture.prototype.end = function() {},
            d.RenderTexture.prototype.drawToTexture = function(a, b, h) {
                var c = b || a.getBounds(d.Rectangle.identity);
                if (0 == c.width || 0 == c.height) return ! 1;
                "undefined" == typeof h && (h = 1);
                this._bitmapData || (this._bitmapData = document.createElement("canvas"), this.canvasContext = this._bitmapData.getContext("2d"), d.RenderTexture.WebGLCanvas || (d.RenderTexture.WebGLCanvas = document.createElement("canvas"), d.RenderTexture.WebGLRenderer = new d.WebGLRenderer(d.RenderTexture.WebGLCanvas)), this._webglBitmapData = d.RenderTexture.WebGLCanvas, this.renderContext = d.RenderTexture.WebGLRenderer);
                var e = c.x,
                f = c.y,
                g = c.width,
                c = c.height,
                c = c / h,
                k = d.MainContext.instance.rendererContext._texture_scale_factor,
                g = Math.round(g / h),
                c = Math.round(c);
                this.setSize(g, c);
                var l = this._bitmapData,
                m = g / k * h,
                n = c / k * h;
                l.width = m;
                l.height = n;
                l.style.width = m + "px";
                l.style.height = n + "px";
                this.begin();
                a._worldTransform.identity();
                l = a._anchorOffsetX;
                m = a._anchorOffsetY;
                if (0 != a._anchorX || 0 != a._anchorY) l = a._anchorX * g,
                m = a._anchorY * c;
                this._offsetX = e + l;
                this._offsetY = f + m;
                a._worldTransform.append(1, 0, 0, 1, -this._offsetX, -this._offsetY);
                b && (this._offsetX -= e, this._offsetY -= f);
                a.worldAlpha = 1;
                b = d.MainContext.__use_new_draw;
                d.MainContext.__use_new_draw = !1;
                if (a instanceof d.DisplayObjectContainer) for (e = a._children, f = 0, l = e.length; f < l; f++) e[f]._updateTransform();
                this.renderContext.setTransform(a._worldTransform);
                e = d.RenderFilter.getInstance();
                f = e._drawAreaList.concat();
                e._drawAreaList.length = 0;
                l = this.renderContext.gl;
                l.viewport(0, 0, g, c);
                l.bindFramebuffer(l.FRAMEBUFFER, null);
                l.clearColor(0, 0, 0, 0);
                l.clear(l.COLOR_BUFFER_BIT);
                this.renderContext.onRenderStart();
                d.RendererContext.deleteTexture(this);
                a._filter && this.renderContext.setGlobalFilter(a._filter);
                a._colorTransform && this.renderContext.setGlobalColorTransform(a._colorTransform.matrix); (l = a.mask || a._scrollRect) && this.renderContext.pushMask(l);
                a._render(this.renderContext);
                this.renderContext._drawWebGL();
                d.MainContext.__use_new_draw = b;
                l && this.renderContext.popMask();
                a._colorTransform && this.renderContext.setGlobalColorTransform(null);
                a._filter && this.renderContext.setGlobalFilter(null);
                d.RenderTexture.identityRectangle.width = g;
                d.RenderTexture.identityRectangle.height = c;
                e.addDrawArea(d.RenderTexture.identityRectangle);
                this.renderContext.onRenderFinish();
                e._drawAreaList = f;
                this._sourceWidth = g / k * h;
                this._sourceHeight = c / k * h;
                this._textureWidth = g * h;
                this._textureHeight = c * h;
                this.canvasContext.drawImage(this._webglBitmapData, 0, 0, g, c, 0, 0, this._sourceWidth, this._sourceHeight);
                return ! 0
            })
        };
        c.createCanvas = function() {
            var a = d.Browser.getInstance().$("#egretCanvas");
            if (!a) {
                var b = document.getElementById(d.StageDelegate.canvas_div_name),
                a = d.Browser.getInstance().$new("canvas");
                a.id = "egretCanvas";
                b.appendChild(a)
            }
            d.MainContext.instance.stage.addEventListener(d.Event.RESIZE, this.onResize, this);
            return a
        };
        c.onResize = function() {
            var a = document.getElementById(d.StageDelegate.canvas_div_name);
            this.canvas && (this.canvas.width = d.MainContext.instance.stage.stageWidth, this.canvas.height = d.MainContext.instance.stage.stageHeight, this.canvas.style.width = a.style.width, this.canvas.style.height = a.style.height, this.projectionX = this.canvas.width / 2, this.projectionY = -this.canvas.height / 2);
            this.html5Canvas && (this.html5Canvas.width = d.MainContext.instance.stage.stageWidth, this.html5Canvas.height = d.MainContext.instance.stage.stageHeight, this.html5Canvas.style.width = a.style.width, this.html5Canvas.style.height = a.style.height)
        };
        c.handleContextLost = function() {
            this.contextLost = !0
        };
        c.handleContextRestored = function() {
            this.initWebGL();
            this.shaderManager.setContext(this.gl);
            this.contextLost = !1
        };
        c.initWebGL = function() {
            for (var a = {},
            b, h = ["experimental-webgl", "webgl"], c = 0; c < h.length; c++) {
                try {
                    b = this.canvas.getContext(h[c], a)
                } catch(f) {}
                if (b) break
            }
            if (!b) throw Error(d.getString(1021));
            e.glID++;
            this.glID = e.glID;
            this.setContext(b)
        };
        c.setContext = function(a) {
            this.gl = a;
            a.id = this.glContextId++;
            this.vertexBuffer = a.createBuffer();
            this.indexBuffer = a.createBuffer();
            a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
            a.bufferData(a.ELEMENT_ARRAY_BUFFER, this.indices, a.STATIC_DRAW);
            a.bindBuffer(a.ARRAY_BUFFER, this.vertexBuffer);
            a.bufferData(a.ARRAY_BUFFER, this.vertices, a.DYNAMIC_DRAW);
            a.disable(a.DEPTH_TEST);
            a.disable(a.CULL_FACE);
            a.enable(a.BLEND);
            a.colorMask(!0, !0, !0, !0)
        };
        c.start = function() {
            if (!this.contextLost) {
                var a = this.gl;
                a.activeTexture(a.TEXTURE0);
                a.bindBuffer(a.ARRAY_BUFFER, this.vertexBuffer);
                a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                var b;
                b = this.colorTransformMatrix ? this.shaderManager.colorTransformShader: "blur" == this.filterType ? this.shaderManager.blurShader: this.shaderManager.defaultShader;
                this.shaderManager.activateShader(b);
                b.syncUniforms();
                a.uniform2f(b.projectionVector, this.projectionX, this.projectionY);
                var h = 4 * this.vertSize;
                a.vertexAttribPointer(b.aVertexPosition, 2, a.FLOAT, !1, h, 0);
                a.vertexAttribPointer(b.aTextureCoord, 2, a.FLOAT, !1, h, 8);
                a.vertexAttribPointer(b.colorAttribute, 2, a.FLOAT, !1, h, 16)
            }
        };
        c.clearScreen = function() {
            var a = this.gl;
            a.colorMask(!0, !0, !0, !0);
            for (var b = d.RenderFilter.getInstance().getDrawAreaList(), h = 0, c = b.length; h < c; h++) {
                var e = b[h];
                a.viewport(e.x, e.y, e.width, e.height);
                a.bindFramebuffer(a.FRAMEBUFFER, null);
                a.clearColor(0, 0, 0, 0);
                a.clear(a.COLOR_BUFFER_BIT)
            }
            b = d.MainContext.instance.stage;
            a.viewport(0, 0, b.stageWidth, b.stageHeight);
            this.renderCost = 0
        };
        c.setBlendMode = function(a) {
            a || (a = d.BlendMode.NORMAL);
            if (this.currentBlendMode != a) {
                var b = d.RendererContext.blendModesForGL[a];
                b && (this._drawWebGL(), this.gl.blendFunc(b[0], b[1]), this.currentBlendMode = a)
            }
        };
        c.drawRepeatImage = function(a, b, h, c, e, f, g, k, l, m) {
            m = d.MainContext.instance.rendererContext._texture_scale_factor;
            c *= m;
            for (e *= m; f < k; f += c) for (var n = g; n < l; n += e) {
                var q = Math.min(c, k - f),
                r = Math.min(e, l - n);
                this.drawImage(a, b, h, q / m, r / m, f, n, q, r)
            }
        };
        c.drawImage = function(a, b, h, c, e, d, f, g, l, m) {
            void 0 === m && (m = void 0);
            if (!this.contextLost) if (void 0 !== m) this.drawRepeatImage(a, b, h, c, e, d, f, g, l, m);
            else {
                this.createWebGLTexture(a);
                m = a._bitmapData.webGLTexture[this.glID];
                if (m !== this.currentBaseTexture || this.currentBatchSize >= this.size - 1) this._drawWebGL(),
                this.currentBaseTexture = m;
                var n = this.worldTransform,
                q = n.a,
                r = n.b,
                w = n.c,
                y = n.d,
                s = n.tx,
                x = n.ty;
                0 == d && 0 == f || n.append(1, 0, 0, 1, d, f);
                1 == c / g && 1 == e / l || n.append(g / c, 0, 0, l / e, 0, 0);
                d = n.a;
                f = n.b;
                g = n.c;
                l = n.d;
                m = n.tx;
                var v = n.ty;
                n.a = q;
                n.b = r;
                n.c = w;
                n.d = y;
                n.tx = s;
                n.ty = x;
                q = a._sourceWidth;
                r = a._sourceHeight;
                a = c;
                n = e;
                b /= q;
                h /= r;
                c /= q;
                e /= r;
                q = this.vertices;
                r = 4 * this.currentBatchSize * this.vertSize;
                w = this.worldAlpha;
                q[r++] = m;
                q[r++] = v;
                q[r++] = b;
                q[r++] = h;
                q[r++] = w;
                q[r++] = d * a + m;
                q[r++] = f * a + v;
                q[r++] = c + b;
                q[r++] = h;
                q[r++] = w;
                q[r++] = d * a + g * n + m;
                q[r++] = l * n + f * a + v;
                q[r++] = c + b;
                q[r++] = e + h;
                q[r++] = w;
                q[r++] = g * n + m;
                q[r++] = l * n + v;
                q[r++] = b;
                q[r++] = e + h;
                q[r++] = w;
                this.currentBatchSize++
            }
        };
        c._drawWebGL = function() {
            if (0 != this.currentBatchSize && !this.contextLost) {
                var a = d.getTimer();
                this.start();
                var b = this.gl;
                b.bindTexture(b.TEXTURE_2D, this.currentBaseTexture);
                var h = this.vertices.subarray(0, 4 * this.currentBatchSize * this.vertSize);
                b.bufferSubData(b.ARRAY_BUFFER, 0, h);
                b.drawElements(b.TRIANGLES, 6 * this.currentBatchSize, b.UNSIGNED_SHORT, 0);
                this.currentBatchSize = 0;
                this.renderCost += d.getTimer() - a;
                d.Profiler.getInstance().onDrawImage()
            }
        };
        c.setTransform = function(a) {
            var b = this.worldTransform;
            b.a = a.a;
            b.b = a.b;
            b.c = a.c;
            b.d = a.d;
            b.tx = a.tx;
            b.ty = a.ty
        };
        c.setAlpha = function(a, b) {
            this.worldAlpha = a;
            this.setBlendMode(b)
        };
        c.createWebGLTexture = function(a) {
            a = a._bitmapData;
            a.webGLTexture || (a.webGLTexture = {});
            if (!a.webGLTexture[this.glID]) {
                var b = this.gl;
                a.webGLTexture[this.glID] = b.createTexture();
                b.bindTexture(b.TEXTURE_2D, a.webGLTexture[this.glID]);
                b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0);
                b.texImage2D(b.TEXTURE_2D, 0, b.RGBA, b.RGBA, b.UNSIGNED_BYTE, a);
                b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MAG_FILTER, b.LINEAR);
                b.texParameteri(b.TEXTURE_2D, b.TEXTURE_MIN_FILTER, b.LINEAR);
                b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_S, b.CLAMP_TO_EDGE);
                b.texParameteri(b.TEXTURE_2D, b.TEXTURE_WRAP_T, b.CLAMP_TO_EDGE);
                b.bindTexture(b.TEXTURE_2D, null)
            }
        };
        c.pushMask = function(a) {
            this._drawWebGL();
            var b = this.gl;
            0 == this.maskList.length && b.enable(b.SCISSOR_TEST);
            a = this.getScissorRect(a);
            this.maskList.push(a);
            this.scissor(a.x, a.y, a.width, a.height)
        };
        c.getScissorRect = function(a) {
            var b = this.maskList[this.maskList.length - 1],
            h,
            c,
            e;
            b ? b.intersects(b) ? (h = Math.max(a.x + this.worldTransform.tx, b.x), c = Math.max(a.y + this.worldTransform.ty, b.y), e = Math.min(a.x + this.worldTransform.tx + a.width, b.x + b.width) - h, a = Math.min(a.y + this.worldTransform.ty + a.height, b.y + b.height) - c) : a = e = c = h = 0 : (h = a.x + this.worldTransform.tx, c = a.y + this.worldTransform.ty, e = a.width, a = a.height); (b = this.maskDataFreeList.pop()) ? (b.x = h, b.y = c, b.width = e, b.height = a) : b = new d.Rectangle(h, c, e, a);
            return b
        };
        c.popMask = function() {
            this._drawWebGL();
            var a = this.gl,
            b = this.maskList.pop();
            this.maskDataFreeList.push(b);
            b = this.maskList.length;
            0 != b ? (b = this.maskList[b - 1], (0 < b.width || 0 < b.height) && this.scissor(b.x, b.y, b.width, b.height)) : a.disable(a.SCISSOR_TEST)
        };
        c.scissor = function(a, b, h, c) {
            var e = this.gl;
            0 > h && (h = 0);
            0 > c && (c = 0);
            e.scissor(a, -b + d.MainContext.instance.stage.stageHeight - c, h, c)
        };
        c.setGlobalColorTransform = function(a) {
            if (this.colorTransformMatrix != a && (this._drawWebGL(), this.colorTransformMatrix = a)) {
                a = a.concat();
                var b = this.shaderManager.colorTransformShader;
                b.uniforms.colorAdd.value.w = a.splice(19, 1)[0] / 255;
                b.uniforms.colorAdd.value.z = a.splice(14, 1)[0] / 255;
                b.uniforms.colorAdd.value.y = a.splice(9, 1)[0] / 255;
                b.uniforms.colorAdd.value.x = a.splice(4, 1)[0] / 255;
                b.uniforms.matrix.value = a
            }
        };
        c.setGlobalFilter = function(a) {
            this._drawWebGL();
            this.setFilterProperties(a)
        };
        c.setFilterProperties = function(a) {
            if (a) switch (this.filterType = a.type, a.type) {
            case "blur":
                var b = this.shaderManager.blurShader;
                b.uniforms.blur.value.x = a.blurX;
                b.uniforms.blur.value.y = a.blurY
            } else this.filterType = null
        };
        c.setupFont = function(a, b) {
            void 0 === b && (b = null);
            this.canvasContext.setupFont(a, b)
        };
        c.measureText = function(a) {
            return this.canvasContext.measureText(a)
        };
        c.renderGraphics = function(a) {
            this._drawWebGL();
            var b = this.gl,
            h = this.shaderManager.primitiveShader;
            this.graphicsPoints ? (this.graphicsPoints.length = 0, this.graphicsIndices.length = 0) : (this.graphicsPoints = [], this.graphicsIndices = [], this.graphicsBuffer = b.createBuffer(), this.graphicsIndexBuffer = b.createBuffer());
            this.updateGraphics(a);
            this.shaderManager.activateShader(h);
            b.blendFunc(b.ONE, b.ONE_MINUS_SRC_ALPHA);
            b.uniformMatrix3fv(h.translationMatrix, !1, this.worldTransform.toArray(!0));
            b.uniform2f(h.projectionVector, this.projectionX, -this.projectionY);
            b.uniform2f(h.offsetVector, 0, 0);
            b.uniform3fv(h.tintColor, [1, 1, 1]);
            b.uniform1f(h.alpha, this.worldAlpha);
            b.bindBuffer(b.ARRAY_BUFFER, this.graphicsBuffer);
            b.vertexAttribPointer(h.aVertexPosition, 2, b.FLOAT, !1, 24, 0);
            b.vertexAttribPointer(h.colorAttribute, 4, b.FLOAT, !1, 24, 8);
            b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, this.graphicsIndexBuffer);
            b.drawElements(b.TRIANGLE_STRIP, this.graphicsIndices.length, b.UNSIGNED_SHORT, 0);
            this.shaderManager.activateShader(this.shaderManager.defaultShader)
        };
        c.updateGraphics = function(a) {
            var b = this.gl;
            this.buildRectangle(a);
            b.bindBuffer(b.ARRAY_BUFFER, this.graphicsBuffer);
            b.bufferData(b.ARRAY_BUFFER, new Float32Array(this.graphicsPoints), b.STATIC_DRAW);
            b.bindBuffer(b.ELEMENT_ARRAY_BUFFER, this.graphicsIndexBuffer);
            b.bufferData(b.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.graphicsIndices), b.STATIC_DRAW)
        };
        c.buildRectangle = function(a) {
            var b = a.x,
            h = a.y,
            c = a.w;
            a = a.h;
            var e = this.graphicsStyle.a,
            d = this.graphicsStyle.r * e,
            f = this.graphicsStyle.g * e,
            g = this.graphicsStyle.b * e,
            l = this.graphicsPoints,
            m = this.graphicsIndices,
            n = l.length / 6;
            l.push(b, h);
            l.push(d, f, g, e);
            l.push(b + c, h);
            l.push(d, f, g, e);
            l.push(b, h + a);
            l.push(d, f, g, e);
            l.push(b + c, h + a);
            l.push(d, f, g, e);
            m.push(n, n, n + 1, n + 2, n + 3, n + 3)
        };
        c.setGraphicsStyle = function(a, b, h, c) {
            this.graphicsStyle.r = a;
            this.graphicsStyle.g = b;
            this.graphicsStyle.b = h;
            this.graphicsStyle.a = c
        };
        e.glID = 0;
        e.isInit = !1;
        return e
    } (d.RendererContext);
    d.WebGLRenderer = f;
    f.prototype.__class__ = "egret.WebGLRenderer"
})(egret || (egret = {}));
var egret_webgl_graphics; (function(d) {
    d.beginFill = function(d, e) {
        void 0 === e && (e = 1);
        this._pushCommand(new f(this._setStyle, this, [(d >> 16) / 255, ((d & 65280) >> 8) / 255, (d & 255) / 255, e]))
    };
    d.drawRect = function(d, e, c, a) {
        this._pushCommand(new f(function(b) {
            this.renderContext.renderGraphics(b)
        },
        this, [{
            x: d,
            y: e,
            w: c,
            h: a
        }]));
        this.checkRect(d, e, c, a)
    };
    d.drawCircle = function(d, e, c) {};
    d.drawRoundRect = function(d, e, c, a, b, h) {};
    d.drawEllipse = function(d, e, c, a) {};
    d.lineStyle = function(d, e, c, a, b, h, f, E) {};
    d.lineTo = function(d, e) {};
    d.curveTo = function(d, e, c, a) {};
    d.moveTo = function(d, e) {};
    d.clear = function() {
        this._maxY = this._maxX = this._minY = this._minX = this.commandQueue.length = 0
    };
    d.endFill = function() {};
    d._pushCommand = function(d) {
        this.commandQueue.push(d)
    };
    d._draw = function(d) {
        var e = this.commandQueue.length;
        if (0 != e) for (this.renderContext = d, d = 0; d < e; d++) {
            var c = this.commandQueue[d];
            c.method.apply(c.thisObject, c.args)
        }
    };
    var f = function() {
        return function(d, e, c) {
            this.method = d;
            this.thisObject = e;
            this.args = c
        }
    } ();
    f.prototype.__class__ = "egret_webgl_graphics.Command";
    d._setStyle = function(d, e, c, a) {
        this.renderContext.setGraphicsStyle(d, e, c, a)
    };
    d.init = function() {
        for (var f in d) egret.Graphics.prototype[f] = d[f]
    }
})(egret_webgl_graphics || (egret_webgl_graphics = {})); (function(d) {
    var f = function() {
        function f() {}
        f.compileProgram = function(e, c, a) {
            a = f.compileFragmentShader(e, a);
            c = f.compileVertexShader(e, c);
            var b = e.createProgram();
            e.attachShader(b, c);
            e.attachShader(b, a);
            e.linkProgram(b);
            e.getProgramParameter(b, e.LINK_STATUS) || d.Logger.infoWithErrorId(1020);
            return b
        };
        f.compileFragmentShader = function(e, c) {
            return f._compileShader(e, c, e.FRAGMENT_SHADER)
        };
        f.compileVertexShader = function(e, c) {
            return f._compileShader(e, c, e.VERTEX_SHADER)
        };
        f._compileShader = function(e, c, a) {
            a = e.createShader(a);
            e.shaderSource(a, c);
            e.compileShader(a);
            return e.getShaderParameter(a, e.COMPILE_STATUS) ? a: (d.Logger.info(e.getShaderInfoLog(a)), null)
        };
        f.checkCanUseWebGL = function() {
            if (void 0 == f.canUseWebGL) try {
                var e = document.createElement("canvas");
                f.canUseWebGL = !!window.WebGLRenderingContext && !(!e.getContext("webgl") && !e.getContext("experimental-webgl"))
            } catch(c) {
                f.canUseWebGL = !1
            }
            return f.canUseWebGL
        };
        return f
    } ();
    d.WebGLUtils = f;
    f.prototype.__class__ = "egret.WebGLUtils"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f(c) {
            this.defaultVertexSrc = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nattribute vec2 aColor;\nuniform vec2 projectionVector;\nuniform vec2 offsetVector;\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nconst vec2 center = vec2(-1.0, 1.0);\nvoid main(void) {\n   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);\n   vTextureCoord = aTextureCoord;\n   vColor = vec4(aColor.x, aColor.x, aColor.x, aColor.x);\n}";
            this.program = this.gl = null;
            this.fragmentSrc = "precision lowp float;\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nuniform sampler2D uSampler;\nvoid main(void) {\ngl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;\n}";
            this.uniforms = null;
            this.gl = c;
            this.init()
        }
        var e = f.prototype;
        e.init = function() {
            var c = this.gl,
            a = d.WebGLUtils.compileProgram(c, this.defaultVertexSrc, this.fragmentSrc);
            c.useProgram(a);
            this.uSampler = c.getUniformLocation(a, "uSampler");
            this.projectionVector = c.getUniformLocation(a, "projectionVector");
            this.offsetVector = c.getUniformLocation(a, "offsetVector");
            this.dimensions = c.getUniformLocation(a, "dimensions");
            this.aVertexPosition = c.getAttribLocation(a, "aVertexPosition");
            this.aTextureCoord = c.getAttribLocation(a, "aTextureCoord");
            this.colorAttribute = c.getAttribLocation(a, "aColor"); - 1 === this.colorAttribute && (this.colorAttribute = 2);
            this.attributes = [this.aVertexPosition, this.aTextureCoord, this.colorAttribute];
            for (var b in this.uniforms) this.uniforms[b].uniformLocation = c.getUniformLocation(a, b);
            this.initUniforms();
            this.program = a
        };
        e.initUniforms = function() {
            if (this.uniforms) {
                var c = this.gl,
                a, b;
                for (b in this.uniforms) {
                    a = this.uniforms[b];
                    var h = a.type;
                    "mat2" === h || "mat3" === h || "mat4" === h ? (a.glMatrix = !0, a.glValueLength = 1, "mat2" === h ? a.glFunc = c.uniformMatrix2fv: "mat3" === h ? a.glFunc = c.uniformMatrix3fv: "mat4" === h && (a.glFunc = c.uniformMatrix4fv)) : (a.glFunc = c["uniform" + h], a.glValueLength = "2f" === h || "2i" === h ? 2 : "3f" === h || "3i" === h ? 3 : "4f" === h || "4i" === h ? 4 : 1)
                }
            }
        };
        e.syncUniforms = function() {
            if (this.uniforms) {
                var c, a = this.gl,
                b;
                for (b in this.uniforms) c = this.uniforms[b],
                1 === c.glValueLength ? !0 === c.glMatrix ? c.glFunc.call(a, c.uniformLocation, c.transpose, c.value) : c.glFunc.call(a, c.uniformLocation, c.value) : 2 === c.glValueLength ? c.glFunc.call(a, c.uniformLocation, c.value.x, c.value.y) : 3 === c.glValueLength ? c.glFunc.call(a, c.uniformLocation, c.value.x, c.value.y, c.value.z) : 4 === c.glValueLength && c.glFunc.call(a, c.uniformLocation, c.value.x, c.value.y, c.value.z, c.value.w)
            }
        };
        return f
    } ();
    d.EgretShader = f;
    f.prototype.__class__ = "egret.EgretShader"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(c) {
            d.call(this, c);
            this.fragmentSrc = "precision mediump float;\nvarying vec2 vTextureCoord;\nvarying vec4 vColor;\nuniform float invert;\nuniform mat4 matrix;\nuniform vec4 colorAdd;\nuniform sampler2D uSampler;\nvoid main(void) {\nvec4 locColor = texture2D(uSampler, vTextureCoord) * matrix;\nif(locColor.a != 0.0){\nlocColor += colorAdd;\n}\ngl_FragColor = locColor;\n}";
            this.uniforms = {
                matrix: {
                    type: "mat4",
                    value: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
                },
                colorAdd: {
                    type: "4f",
                    value: {
                        x: 0,
                        y: 0,
                        z: 0,
                        w: 0
                    }
                }
            };
            this.init()
        }
        __extends(e, d);
        return e
    } (d.EgretShader);
    d.ColorTransformShader = f;
    f.prototype.__class__ = "egret.ColorTransformShader"
})(egret || (egret = {})); (function(d) {
    var f = function(d) {
        function e(c) {
            d.call(this, c);
            this.fragmentSrc = "precision mediump float;uniform vec2 blur;uniform sampler2D uSampler;varying vec2 vTextureCoord;void main(){gl_FragColor = vec4(0.0);gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.028 * blur.x, -0.028 * blur.y))) * 0.0044299121055113265;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.024 * blur.x, -0.024 * blur.y))) * 0.00895781211794;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.020 * blur.x, -0.020 * blur.y))) * 0.0215963866053;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.016 * blur.x, -0.016 * blur.y))) * 0.0443683338718;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.012 * blur.x, -0.012 * blur.y))) * 0.0776744219933;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.008 * blur.x, -0.008 * blur.y))) * 0.115876621105;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2(-0.004 * blur.x, -0.004 * blur.y))) * 0.147308056121;gl_FragColor += texture2D(uSampler, vTextureCoord) * 0.159576912161;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.004 * blur.x,  0.004 * blur.y))) * 0.147308056121;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.008 * blur.x,  0.008 * blur.y))) * 0.115876621105;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.012 * blur.x,  0.012 * blur.y))) * 0.0776744219933;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.016 * blur.x,  0.016 * blur.y))) * 0.0443683338718;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.020 * blur.x,  0.020 * blur.y))) * 0.0215963866053;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.024 * blur.x,  0.024 * blur.y))) * 0.00895781211794;gl_FragColor += texture2D(uSampler, (vTextureCoord + vec2( 0.028 * blur.x,  0.028 * blur.y))) * 0.0044299121055113265;}";
            this.uniforms = {
                blur: {
                    type: "2f",
                    value: {
                        x: 2,
                        y: 2
                    }
                }
            };
            this.init()
        }
        __extends(e, d);
        return e
    } (d.EgretShader);
    d.BlurShader = f;
    f.prototype.__class__ = "egret.BlurShader"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f(e) {
            this.alpha = this.translationMatrix = this.attributes = this.colorAttribute = this.aVertexPosition = this.tintColor = this.offsetVector = this.projectionVector = this.program = this.gl = null;
            this.fragmentSrc = "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n   gl_FragColor = vColor;\n}";
            this.vertexSrc = "attribute vec2 aVertexPosition;\nattribute vec4 aColor;\nuniform mat3 translationMatrix;\nuniform vec2 projectionVector;\nuniform vec2 offsetVector;\nuniform float alpha;\nuniform vec3 tint;\nvarying vec4 vColor;\nvoid main(void) {\n   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);\n   v -= offsetVector.xyx;\n   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);\n   vColor = aColor * vec4(tint * alpha, alpha);\n}";
            this.gl = e;
            this.init()
        }
        f.prototype.init = function() {
            var e = this.gl,
            c = d.WebGLUtils.compileProgram(e, this.vertexSrc, this.fragmentSrc);
            e.useProgram(c);
            this.projectionVector = e.getUniformLocation(c, "projectionVector");
            this.offsetVector = e.getUniformLocation(c, "offsetVector");
            this.tintColor = e.getUniformLocation(c, "tint");
            this.aVertexPosition = e.getAttribLocation(c, "aVertexPosition");
            this.colorAttribute = e.getAttribLocation(c, "aColor");
            this.attributes = [this.aVertexPosition, this.colorAttribute];
            this.translationMatrix = e.getUniformLocation(c, "translationMatrix");
            this.alpha = e.getUniformLocation(c, "alpha");
            this.program = c
        };
        return f
    } ();
    d.PrimitiveShader = f;
    f.prototype.__class__ = "egret.PrimitiveShader"
})(egret || (egret = {})); (function(d) {
    var f = function() {
        function f(c) {
            this.gl = null;
            this.maxAttibs = 10;
            this.attribState = [];
            this.tempAttribState = [];
            this.blurShader = this.colorTransformShader = this.primitiveShader = this.defaultShader = this.currentShader = null;
            for (var a = 0; a < this.maxAttibs; a++) this.attribState[a] = !1;
            this.setContext(c)
        }
        var e = f.prototype;
        e.setContext = function(c) {
            this.gl = c;
            this.primitiveShader = new d.PrimitiveShader(c);
            this.defaultShader = new d.EgretShader(c);
            this.colorTransformShader = new d.ColorTransformShader(c);
            this.blurShader = new d.BlurShader(c);
            this.activateShader(this.defaultShader)
        };
        e.activateShader = function(c) {
            this.currentShader != c && (this.gl.useProgram(c.program), this.setAttribs(c.attributes), this.currentShader = c)
        };
        e.setAttribs = function(c) {
            var a, b;
            b = this.tempAttribState.length;
            for (a = 0; a < b; a++) this.tempAttribState[a] = !1;
            b = c.length;
            for (a = 0; a < b; a++) this.tempAttribState[c[a]] = !0;
            c = this.gl;
            b = this.attribState.length;
            for (a = 0; a < b; a++) this.attribState[a] !== this.tempAttribState[a] && (this.attribState[a] = this.tempAttribState[a], this.tempAttribState[a] ? c.enableVertexAttribArray(a) : c.disableVertexAttribArray(a))
        };
        return f
    } ();
    d.WebGLShaderManager = f;
    f.prototype.__class__ = "egret.WebGLShaderManager"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this)
        }
        __extends(e, f);
        var c = e.prototype;
        c.proceed = function(a) {
            function b() {
                if (4 == c.readyState) if (c.status != a._status && (a._status = c.status, d.HTTPStatusEvent.dispatchHTTPStatusEvent(a, c.status)), 400 <= c.status || 0 == c.status) d.IOErrorEvent.dispatchIOErrorEvent(a);
                else {
                    switch (a.dataFormat) {
                    case d.URLLoaderDataFormat.TEXT:
                        a.data = c.responseText;
                        break;
                    case d.URLLoaderDataFormat.VARIABLES:
                        a.data = new d.URLVariables(c.responseText);
                        break;
                    case d.URLLoaderDataFormat.BINARY:
                        a.data = c.response;
                        break;
                    default:
                        a.data = c.responseText
                    }
                    d.__callAsync(d.Event.dispatchEvent, d.Event, a, d.Event.COMPLETE)
                }
            }
            if (a.dataFormat == d.URLLoaderDataFormat.TEXTURE) this.loadTexture(a);
            else if (a.dataFormat == d.URLLoaderDataFormat.SOUND) this.loadSound(a);
            else {
                var h = a._request,
                c = this.getXHR();
                c.onreadystatechange = b;
                var e = d.NetContext._getUrl(h);
                c.open(h.method, e, !0);
                this.setResponseType(c, a.dataFormat);
                h.method != d.URLRequestMethod.GET && h.data ? h.data instanceof d.URLVariables ? (c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), c.send(h.data.toString())) : (c.setRequestHeader("Content-Type", "multipart/form-data"), c.send(h.data)) : c.send()
            }
        };
        c.loadSound = function(a) {
            function b(e) {
                d.clearTimeout(c.__timeoutId);
                c.removeEventListener("canplaythrough", b, !1);
                c.removeEventListener("error", h, !1);
                e = new d.Sound;
                e._setAudio(c);
                a.data = e;
                d.__callAsync(d.Event.dispatchEvent, d.Event, a, d.Event.COMPLETE)
            }
            function h(e) {
                d.clearTimeout(c.__timeoutId);
                c.removeEventListener("canplaythrough", b, !1);
                c.removeEventListener("error", h, !1);
                d.IOErrorEvent.dispatchIOErrorEvent(a)
            }
            var c = new Audio(a._request.url);
            c.__timeoutId = d.setTimeout(b, this, 100);
            c.addEventListener("canplaythrough", b, !1);
            c.addEventListener("error", h, !1);
            c.load()
        };
        c.getXHR = function() {
            return window.XMLHttpRequest ? new window.XMLHttpRequest: new ActiveXObject("MSXML2.XMLHTTP")
        };
        c.setResponseType = function(a, b) {
            switch (b) {
            case d.URLLoaderDataFormat.TEXT:
            case d.URLLoaderDataFormat.VARIABLES:
                a.responseType = d.URLLoaderDataFormat.TEXT;
                break;
            case d.URLLoaderDataFormat.BINARY:
                a.responseType = "arraybuffer";
                break;
            default:
                a.responseType = b
            }
        };
        c.loadTexture = function(a) {
            var b = a._request,
            h = new Image;
            h.onload = function(b) {
                h.onerror = null;
                h.onload = null;
                b = new d.Texture;
                b._setBitmapData(h);
                a.data = b;
                d.__callAsync(d.Event.dispatchEvent, d.Event, a, d.Event.COMPLETE)
            };
            h.onerror = function(b) {
                h.onerror = null;
                h.onload = null;
                d.IOErrorEvent.dispatchIOErrorEvent(a)
            };
            h.src = b.url
        };
        return e
    } (d.NetContext);
    d.HTML5NetContext = f;
    f.prototype.__class__ = "egret.HTML5NetContext"
})(egret || (egret = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this._isTouchDown = !1;
            this.rootDiv = null;
            this.rootDiv = document.getElementById(d.StageDelegate.canvas_div_name);
            if (!this.rootDiv) {
                var a = document.getElementById(d.StageDelegate.egret_root_div);
                this.rootDiv = d.Browser.getInstance().$new("div");
                this.rootDiv.id = d.StageDelegate.canvas_div_name;
                a.appendChild(this.rootDiv)
            }
        }
        __extends(e, f);
        var c = e.prototype;
        c.prevent = function(a) {
            a.stopPropagation(); ! 0 == a.isScroll || d.HTMLInput.getInstance().isInputOn() || a.preventDefault()
        };
        c.run = function() {
            var a = this;
            window.navigator.msPointerEnabled ? (this.rootDiv.addEventListener("MSPointerDown",
            function(b) {
                a._onTouchBegin(b);
                a.prevent(b)
            },
            !1), this.rootDiv.addEventListener("MSPointerMove",
            function(b) {
                a._onTouchMove(b);
                a.prevent(b)
            },
            !1), this.rootDiv.addEventListener("MSPointerUp",
            function(b) {
                a._onTouchEnd(b);
                a.prevent(b)
            },
            !1)) : d.MainContext.deviceType == d.MainContext.DEVICE_MOBILE ? this.addTouchListener() : d.MainContext.deviceType == d.MainContext.DEVICE_PC && (this.addTouchListener(), this.addMouseListener());
            window.addEventListener("mousedown",
            function(b) {
                a.inOutOfCanvas(b) ? a.dispatchLeaveStageEvent() : a._isTouchDown = !0
            });
            window.addEventListener("mouseup",
            function(b) {
                a._isTouchDown && (a.inOutOfCanvas(b) ? a.dispatchLeaveStageEvent() : a._onTouchEnd(b));
                a._isTouchDown = !1
            })
        };
        c.addMouseListener = function() {
            var a = this;
            this.rootDiv.addEventListener("mousedown",
            function(b) {
                a._onTouchBegin(b)
            });
            this.rootDiv.addEventListener("mousemove",
            function(b) {
                a._onTouchMove(b)
            });
            this.rootDiv.addEventListener("mouseup",
            function(b) {
                a._onTouchEnd(b)
            })
        };
        c.addTouchListener = function() {
            var a = this;
            this.rootDiv.addEventListener("touchstart",
            function(b) {
                for (var h = b.changedTouches.length,
                c = 0; c < h; c++) a._onTouchBegin(b.changedTouches[c]);
                a.prevent(b)
            },
            !1);
            this.rootDiv.addEventListener("touchmove",
            function(b) {
                for (var h = b.changedTouches.length,
                c = 0; c < h; c++) a._onTouchMove(b.changedTouches[c]);
                a.prevent(b)
            },
            !1);
            this.rootDiv.addEventListener("touchend",
            function(b) {
                for (var h = b.changedTouches.length,
                c = 0; c < h; c++) a._onTouchEnd(b.changedTouches[c]);
                a.prevent(b)
            },
            !1);
            this.rootDiv.addEventListener("touchcancel",
            function(b) {
                for (var h = b.changedTouches.length,
                c = 0; c < h; c++) a._onTouchEnd(b.changedTouches[c]);
                a.prevent(b)
            },
            !1)
        };
        c.inOutOfCanvas = function(a) {
            var b = this.getLocation(this.rootDiv, a);
            a = b.x;
            var b = b.y,
            h = d.MainContext.instance.stage;
            return 0 > a || 0 > b || a > h.stageWidth || b > h.stageHeight ? !0 : !1
        };
        c.dispatchLeaveStageEvent = function() {
            this.touchingIdentifiers.length = 0;
            d.MainContext.instance.stage.dispatchEventWith(d.Event.LEAVE_STAGE)
        };
        c._onTouchBegin = function(a) {
            var b = this.getLocation(this.rootDiv, a),
            h = -1;
            a.hasOwnProperty("identifier") && (h = a.identifier);
            this.onTouchBegan(b.x, b.y, h)
        };
        c._onTouchMove = function(a) {
            var b = this.getLocation(this.rootDiv, a),
            h = -1;
            a.hasOwnProperty("identifier") && (h = a.identifier);
            this.onTouchMove(b.x, b.y, h)
        };
        c._onTouchEnd = function(a) {
            var b = this.getLocation(this.rootDiv, a),
            h = -1;
            a.hasOwnProperty("identifier") && (h = a.identifier);
            this.onTouchEnd(b.x, b.y, h)
        };
        c.getLocation = function(a, b) {
            var h = document.documentElement,
            c = window,
            e, f;
            "function" === typeof a.getBoundingClientRect ? (f = a.getBoundingClientRect(), e = f.left, f = f.top) : f = e = 0;
            e += c.pageXOffset - h.clientLeft;
            f += c.pageYOffset - h.clientTop;
            null != b.pageX ? (h = b.pageX, c = b.pageY) : (e -= document.body.scrollLeft, f -= document.body.scrollTop, h = b.clientX, c = b.clientY);
            var g = d.Point.identity;
            g.x = (h - e) / d.StageDelegate.getInstance().getScaleX();
            g.y = (c - f) / d.StageDelegate.getInstance().getScaleY();
            return g
        };
        return e
    } (d.TouchContext);
    d.HTML5TouchContext = f;
    f.prototype.__class__ = "egret.HTML5TouchContext"
})(egret || (egret = {})); (function(d) {
    var f = function(e) {
        function c() {
            e.call(this);
            this._isNeedShow = !1;
            this.inputDiv = this.inputElement = null;
            this._gscaleY = this._gscaleX = 0;
            this._isNeesHide = !1;
            this.textValue = "";
            this._styleInfoes = {};
            g.getInstance()
        }
        __extends(c, e);
        var a = c.prototype;
        a._initElement = function(b, a, c, e) {
            var f = d.StageDelegate.getInstance().getScaleX(),
            g = d.StageDelegate.getInstance().getScaleY();
            this.inputDiv.style.left = b * f + "px";
            this.inputDiv.style.top = a * g + "px";
            this._gscaleX = f * c;
            this._gscaleY = g * e
        };
        a._show = function(b, a, c, e) {
            this._multiline = b;
            g.getInstance().isCurrentStageText(this) ? this.inputElement.onblur = null: (this.inputElement = g.getInstance().getInputElement(this), this.inputDiv = g.getInstance()._inputDIV);
            this._isNeedShow = g.getInstance()._needShow = !0
        };
        a.onBlurHandler = function() {
            g.getInstance().clearInputElement();
            window.scrollTo(0, 0)
        };
        a.executeShow = function() {
            this.inputElement.value = this._getText();
            null == this.inputElement.onblur && (this.inputElement.onblur = this.onBlurHandler);
            this._resetStageText();
            0 < this._textfield._properties._maxChars ? this.inputElement.setAttribute("maxlength", this._textfield._properties._maxChars) : this.inputElement.removeAttribute("maxlength");
            this.inputElement.selectionStart = this.inputElement.value.length;
            this.inputElement.selectionEnd = this.inputElement.value.length;
            this.inputElement.focus()
        };
        a._hide = function() {
            this._isNeesHide = !0;
            0 <= d.Browser.getInstance().getUserAgent().indexOf("ios") && g.getInstance().disconnectStageText(this)
        };
        a._getText = function() {
            this.textValue || (this.textValue = "");
            return this.textValue
        };
        a._setText = function(b) {
            this.textValue = b;
            this.resetText()
        };
        a.resetText = function() {
            this.inputElement && (this.inputElement.value = this.textValue)
        };
        a._onInput = function() {
            this.textValue = this.inputElement.value;
            d.Event.dispatchEvent(this, "updateText", !1)
        };
        a._onClickHandler = function(b) {
            this._isNeedShow && (b.stopImmediatePropagation(), this._isNeedShow = !1, this.executeShow(), this.dispatchEvent(new d.Event("focus")))
        };
        a._onDisconnect = function() {
            this.inputElement = null;
            this.dispatchEvent(new d.Event("blur"))
        };
        a.setElementStyle = function(b, a) {
            this.inputElement && this._styleInfoes[b] != a && (this.inputElement.style[b] = a)
        };
        a._removeInput = function() {
            this.inputElement && g.getInstance().disconnectStageText(this)
        };
        a._resetStageText = function() {
            if (this.inputElement) {
                var b = this._textfield,
                a = b._properties;
                this.setElementStyle("fontFamily", a._fontFamily);
                this.setElementStyle("fontStyle", a._italic ? "italic": "normal");
                this.setElementStyle("fontWeight", a._bold ? "bold": "normal");
                this.setElementStyle("textAlign", a._textAlign);
                this.setElementStyle("fontSize", a._size * this._gscaleY + "px");
                this.setElementStyle("lineHeight", a._size * this._gscaleY + "px");
                this.setElementStyle("color", a._textColorString);
                this.setElementStyle("width", b._getSize(d.Rectangle.identity).width * this._gscaleX + "px");
                this.setElementStyle("height", b._getSize(d.Rectangle.identity).height * this._gscaleY + "px");
                this.setElementStyle("verticalAlign", a._verticalAlign)
            }
        };
        return c
    } (d.StageText);
    d.HTML5StageText = f;
    f.prototype.__class__ = "egret.HTML5StageText";
    var g = function() {
        function e() {
            this._needShow = !1
        }
        var c = e.prototype;
        c.isInputOn = function() {
            return null != this._stageText
        };
        c.isCurrentStageText = function(a) {
            return this._stageText == a
        };
        c.initValue = function(a) {
            a.style.position = "absolute";
            a.style.left = "0px";
            a.style.top = "0px";
            a.style.border = "none";
            a.style.padding = "0"
        };
        c.initStageDelegateDiv = function() {
            var a = this,
            b = d.Browser.getInstance().$("#StageDelegateDiv");
            b || (b = d.Browser.getInstance().$new("div"), b.id = "StageDelegateDiv", document.getElementById(d.StageDelegate.egret_root_div).appendChild(b), a.initValue(b), b.style.width = "0px", b.style.height = "0px", a._inputDIV = d.Browser.getInstance().$new("div"), a.initValue(a._inputDIV), a._inputDIV.style.width = "0px", a._inputDIV.style.height = "0px", a._inputDIV.style.left = "0px", a._inputDIV.style.top = "-100px", a._inputDIV.style[d.Browser.getInstance().getTrans("transformOrigin")] = "0% 0% 0px", b.appendChild(a._inputDIV), document.getElementById(d.StageDelegate.canvas_div_name).addEventListener("click",
            function(b) {
                a._needShow ? (a._needShow = !1, d.MainContext.instance.stage._changeSizeDispatchFlag = !1, a._stageText._onClickHandler(b), e.getInstance().show()) : a._inputElement && (a.clearInputElement(), a._inputElement.blur(), a._inputElement = null)
            }), a.initInputElement(!0), a.initInputElement(!1))
        };
        c.initInputElement = function(a) {
            var b = this;
            a ? (a = document.createElement("textarea"), a.style.resize = "none", b._multiElement = a, a.id = "egretTextarea") : (a = document.createElement("input"), b._simpleElement = a, a.id = "egretInput");
            a.type = "text";
            b._inputDIV.appendChild(a);
            a.setAttribute("tabindex", "-1");
            a.style.width = "1px";
            a.style.height = "12px";
            b.initValue(a);
            a.style.outline = "thin";
            a.style.background = "none";
            a.style.overflow = "hidden";
            a.style.wordBreak = "break-all";
            a.style.opacity = 0;
            a.oninput = function() {
                b._stageText && b._stageText._onInput()
            }
        };
        c.show = function() {
            var a = this._inputElement;
            d.__callAsync(function() {
                a.style.opacity = 1
            },
            this)
        };
        c.disconnectStageText = function(a) {
            if (null == this._stageText || this._stageText == a) this.clearInputElement(),
            this._inputElement && this._inputElement.blur()
        };
        c.clearInputElement = function() {
            this._inputElement && (this._inputElement.value = "", this._inputElement.onblur = null, this._inputElement.style.width = "1px", this._inputElement.style.height = "12px", this._inputElement.style.left = "0px", this._inputElement.style.top = "0px", this._inputElement.style.opacity = 0, (this._simpleElement == this._inputElement ? this._multiElement: this._simpleElement).style.display = "block", this._inputDIV.style.left = "0px", this._inputDIV.style.top = "-100px");
            this._stageText && (this._stageText._onDisconnect(), this._stageText = null);
            d.MainContext.instance.stage._changeSizeDispatchFlag = !0
        };
        c.getInputElement = function(a) {
            this.clearInputElement();
            this._stageText = a;
            this._inputElement = this._stageText._multiline ? this._multiElement: this._simpleElement; (this._simpleElement == this._inputElement ? this._multiElement: this._simpleElement).style.display = "none";
            return this._inputElement
        };
        e.getInstance = function() {
            null == e._instance && (e._instance = new d.HTMLInput, e._instance.initStageDelegateDiv());
            return e._instance
        };
        return e
    } ();
    d.HTMLInput = g;
    g.prototype.__class__ = "egret.HTMLInput"
})(egret || (egret = {}));
egret.StageText.create = function() {
    return new egret.HTML5StageText
};
var RES; (function(d) {
    var f = function(d) {
        function e(c, a, b) {
            void 0 === a && (a = !1);
            void 0 === b && (b = !1);
            d.call(this, c, a, b);
            this.itemsTotal = this.itemsLoaded = 0;
            this.groupName = "";
            this.resItem = null
        }
        __extends(e, d);
        e.dispatchResourceEvent = function(c, a, b, h, d, f) {
            void 0 === b && (b = "");
            void 0 === h && (h = null);
            void 0 === d && (d = 0);
            void 0 === f && (f = 0);
            var g = egret.Event._getPropertyData(e);
            g.groupName = b;
            g.resItem = h;
            g.itemsLoaded = d;
            g.itemsTotal = f;
            egret.Event._dispatchByTarget(e, c, a, g)
        };
        e.ITEM_LOAD_ERROR = "itemLoadError";
        e.CONFIG_COMPLETE = "configComplete";
        e.CONFIG_LOAD_ERROR = "configLoadError";
        e.GROUP_PROGRESS = "groupProgress";
        e.GROUP_COMPLETE = "groupComplete";
        e.GROUP_LOAD_ERROR = "groupLoadError";
        return e
    } (egret.Event);
    d.ResourceEvent = f;
    f.prototype.__class__ = "RES.ResourceEvent"
})(RES || (RES = {})); (function(d) {
    var f = function() {
        function d(c, a, b) {
            this.groupName = "";
            this.data = null;
            this._loaded = !1;
            this.name = c;
            this.url = a;
            this.type = b
        }
        var e = d.prototype;
        Object.defineProperty(e, "loaded", {
            get: function() {
                return this.data ? this.data.loaded: this._loaded
            },
            set: function(c) {
                this.data && (this.data.loaded = c);
                this._loaded = c
            },
            enumerable: !0,
            configurable: !0
        });
        e.toString = function() {
            return '[ResourceItem name="' + this.name + '" url="' + this.url + '" type="' + this.type + '"]'
        };
        d.TYPE_XML = "xml";
        d.TYPE_IMAGE = "image";
        d.TYPE_BIN = "bin";
        d.TYPE_TEXT = "text";
        d.TYPE_JSON = "json";
        d.TYPE_SHEET = "sheet";
        d.TYPE_FONT = "font";
        d.TYPE_SOUND = "sound";
        return d
    } ();
    d.ResourceItem = f;
    f.prototype.__class__ = "RES.ResourceItem"
})(RES || (RES = {})); (function(d) {
    var f = function() {
        function f() {
            this.keyMap = {};
            this.groupDic = {};
            d.configInstance = this
        }
        var e = f.prototype;
        e.getGroupByName = function(c) {
            var a = [];
            if (!this.groupDic[c]) return a;
            c = this.groupDic[c];
            for (var b = c.length,
            h = 0; h < b; h++) a.push(this.parseResourceItem(c[h]));
            return a
        };
        e.getRawGroupByName = function(c) {
            return this.groupDic[c] ? this.groupDic[c] : []
        };
        e.createGroup = function(c, a, b) {
            void 0 === b && (b = !1);
            if (!b && this.groupDic[c] || !a || 0 == a.length) return ! 1;
            b = this.groupDic;
            for (var h = [], e = a.length, d = 0; d < e; d++) {
                var f = a[d],
                g = b[f];
                if (g) for (var f = g.length,
                k = 0; k < f; k++) {
                    var l = g[k]; - 1 == h.indexOf(l) && h.push(l)
                } else(l = this.keyMap[f]) ? -1 == h.indexOf(l) && h.push(l) : egret.Logger.warningWithErrorId(2E3, f)
            }
            if (0 == h.length) return ! 1;
            this.groupDic[c] = h;
            return ! 0
        };
        e.parseConfig = function(c, a) {
            if (c) {
                var b = c.resources;
                if (b) for (var h = b.length,
                e = 0; e < h; e++) {
                    var d = b[e],
                    f = d.url;
                    f && -1 == f.indexOf("://") && (d.url = a + f);
                    this.addItemToKeyMap(d)
                }
                if (b = c.groups) for (h = b.length, e = 0; e < h; e++) {
                    for (var f = b[e], g = [], k = f.keys.split(","), l = k.length, m = 0; m < l; m++) d = k[m].trim(),
                    (d = this.keyMap[d]) && -1 == g.indexOf(d) && g.push(d);
                    this.groupDic[f.name] = g
                }
            }
        };
        e.addSubkey = function(c, a) {
            var b = this.keyMap[a];
            b && !this.keyMap[c] && (this.keyMap[c] = b)
        };
        e.addItemToKeyMap = function(c) {
            this.keyMap[c.name] || (this.keyMap[c.name] = c);
            if (c.hasOwnProperty("subkeys")) {
                var a = c.subkeys.split(",");
                c.subkeys = a;
                for (var b = a.length,
                h = 0; h < b; h++) {
                    var e = a[h];
                    null == this.keyMap[e] && (this.keyMap[e] = c)
                }
            }
        };
        e.getName = function(c) {
            return (c = this.keyMap[c]) ? c.name: ""
        };
        e.getType = function(c) {
            return (c = this.keyMap[c]) ? c.type: ""
        };
        e.getRawResourceItem = function(c) {
            return this.keyMap[c]
        };
        e.getResourceItem = function(c) {
            return (c = this.keyMap[c]) ? this.parseResourceItem(c) : null
        };
        e.parseResourceItem = function(c) {
            var a = new d.ResourceItem(c.name, c.url, c.type);
            a.data = c;
            return a
        };
        return f
    } ();
    d.ResourceConfig = f;
    f.prototype.__class__ = "RES.ResourceConfig"
})(RES || (RES = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.thread = 2;
            this.loadingCount = 0;
            this.resInstance = this.callBack = null;
            this.groupTotalDic = {};
            this.numLoadedDic = {};
            this.itemListDic = {};
            this.groupErrorDic = {};
            this.retryTimesDic = {};
            this.maxRetryTimes = 3;
            this.failedList = [];
            this.priorityQueue = {};
            this.lazyLoadList = [];
            this.analyzerDic = {};
            this.queueIndex = 0
        }
        __extends(e, f);
        var c = e.prototype;
        c.isGroupInLoading = function(a) {
            return void 0 !== this.itemListDic[a]
        };
        c.loadGroup = function(a, b, h) {
            void 0 === h && (h = 0);
            if (!this.itemListDic[b] && b) if (a && 0 != a.length) {
                this.priorityQueue[h] ? this.priorityQueue[h].push(b) : this.priorityQueue[h] = [b];
                this.itemListDic[b] = a;
                h = a.length;
                for (var c = 0; c < h; c++) a[c].groupName = b;
                this.groupTotalDic[b] = a.length;
                this.numLoadedDic[b] = 0;
                this.next()
            } else egret.Logger.warningWithErrorId(2001, b),
            a = new d.ResourceEvent(d.ResourceEvent.GROUP_LOAD_ERROR),
            a.groupName = b,
            this.dispatchEvent(a)
        };
        c.loadItem = function(a) {
            this.lazyLoadList.push(a);
            a.groupName = "";
            this.next()
        };
        c.next = function() {
            for (; this.loadingCount < this.thread;) {
                var a = this.getOneResourceItem();
                if (!a) break;
                this.loadingCount++;
                if (a.loaded) this.onItemComplete(a);
                else {
                    var b = this.analyzerDic[a.type];
                    b || (b = this.analyzerDic[a.type] = egret.Injector.getInstance(d.AnalyzerBase, a.type));
                    b.loadFile(a, this.onItemComplete, this)
                }
            }
        };
        c.getOneResourceItem = function() {
            if (0 < this.failedList.length) return this.failedList.shift();
            var a = Number.NEGATIVE_INFINITY,
            b;
            for (b in this.priorityQueue) a = Math.max(a, b);
            a = this.priorityQueue[a];
            if (!a || 0 == a.length) return 0 == this.lazyLoadList.length ? null: this.lazyLoadList.pop();
            b = a.length;
            for (var h, c = 0; c < b; c++) {
                this.queueIndex >= b && (this.queueIndex = 0);
                h = this.itemListDic[a[this.queueIndex]];
                if (0 < h.length) break;
                this.queueIndex++
            }
            return 0 == h.length ? null: h.shift()
        };
        c.onItemComplete = function(a) {
            this.loadingCount--;
            var b = a.groupName;
            if (!a.loaded) {
                var h = this.retryTimesDic[a.name] || 1;
                if (h > this.maxRetryTimes) delete this.retryTimesDic[a.name],
                d.ResourceEvent.dispatchResourceEvent(this.resInstance, d.ResourceEvent.ITEM_LOAD_ERROR, b, a);
                else {
                    this.retryTimesDic[a.name] = h + 1;
                    this.failedList.push(a);
                    this.next();
                    return
                }
            }
            if (b) {
                this.numLoadedDic[b]++;
                var h = this.numLoadedDic[b],
                c = this.groupTotalDic[b];
                a.loaded || (this.groupErrorDic[b] = !0);
                d.ResourceEvent.dispatchResourceEvent(this.resInstance, d.ResourceEvent.GROUP_PROGRESS, b, a, h, c);
                h == c && (a = this.groupErrorDic[b], this.removeGroupName(b), delete this.groupTotalDic[b], delete this.numLoadedDic[b], delete this.itemListDic[b], delete this.groupErrorDic[b], a ? d.ResourceEvent.dispatchResourceEvent(this, d.ResourceEvent.GROUP_LOAD_ERROR, b) : d.ResourceEvent.dispatchResourceEvent(this, d.ResourceEvent.GROUP_COMPLETE, b))
            } else this.callBack.call(this.resInstance, a);
            this.next()
        };
        c.removeGroupName = function(a) {
            for (var b in this.priorityQueue) {
                for (var h = this.priorityQueue[b], c = h.length, e = 0, d = !1, c = h.length, f = 0; f < c; f++) {
                    if (h[f] == a) {
                        h.splice(e, 1);
                        d = !0;
                        break
                    }
                    e++
                }
                if (d) {
                    0 == h.length && delete this.priorityQueue[b];
                    break
                }
            }
        };
        return e
    } (egret.EventDispatcher);
    d.ResourceLoader = f;
    f.prototype.__class__ = "RES.ResourceLoader"
})(RES || (RES = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.resourceConfig = null;
            this.resourceConfig = d.configInstance
        }
        __extends(e, f);
        var c = e.prototype;
        c.addSubkey = function(a, b) {
            this.resourceConfig.addSubkey(a, b)
        };
        c.loadFile = function(a, b, h) {};
        c.getRes = function(a) {};
        c.destroyRes = function(a) {
            return ! 1
        };
        e.getStringPrefix = function(a) {
            if (!a) return "";
            var b = a.indexOf(".");
            return - 1 != b ? a.substring(0, b) : ""
        };
        e.getStringTail = function(a) {
            if (!a) return "";
            var b = a.indexOf(".");
            return - 1 != b ? a.substring(b + 1) : ""
        };
        return e
    } (egret.HashObject);
    d.AnalyzerBase = f;
    f.prototype.__class__ = "RES.AnalyzerBase"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this.fileDic = {};
            this.resItemDic = [];
            this._dataFormat = egret.URLLoaderDataFormat.BINARY;
            this.recycler = new egret.Recycler
        }
        __extends(e, d);
        var c = e.prototype;
        c.loadFile = function(a, b, h) {
            if (this.fileDic[a.name]) b.call(h, a);
            else {
                var c = this.getLoader();
                this.resItemDic[c.hashCode] = {
                    item: a,
                    func: b,
                    thisObject: h
                };
                c.load(new egret.URLRequest(a.url))
            }
        };
        c.getLoader = function() {
            var a = this.recycler.pop();
            a || (a = new egret.URLLoader, a.addEventListener(egret.Event.COMPLETE, this.onLoadFinish, this), a.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onLoadFinish, this));
            a.dataFormat = this._dataFormat;
            return a
        };
        c.onLoadFinish = function(a) {
            var b = a.target,
            h = this.resItemDic[b.hashCode];
            delete this.resItemDic[b.hashCode];
            var c = h.item,
            e = h.func;
            c.loaded = a.type == egret.Event.COMPLETE;
            c.loaded && this.analyzeData(c, b.data);
            this.recycler.push(b);
            e.call(h.thisObject, c)
        };
        c.analyzeData = function(a, b) {
            var h = a.name; ! this.fileDic[h] && b && (this.fileDic[h] = b)
        };
        c.getRes = function(a) {
            return this.fileDic[a]
        };
        c.hasRes = function(a) {
            return null != this.getRes(a)
        };
        c.destroyRes = function(a) {
            return this.fileDic[a] ? (this.onResourceDestroy(this.fileDic[a]), delete this.fileDic[a], !0) : !1
        };
        c.onResourceDestroy = function(a) {};
        return e
    } (d.AnalyzerBase);
    d.BinAnalyzer = f;
    f.prototype.__class__ = "RES.BinAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._dataFormat = egret.URLLoaderDataFormat.TEXTURE
        }
        __extends(e, d);
        var c = e.prototype;
        c.analyzeData = function(a, b) {
            var h = a.name; ! this.fileDic[h] && b && (this.fileDic[h] = b, (h = a.data) && h.scale9grid && (h = h.scale9grid.split(","), b.scale9Grid = new egret.Rectangle(parseInt(h[0]), parseInt(h[1]), parseInt(h[2]), parseInt(h[3]))))
        };
        c.onResourceDestroy = function(a) {};
        return e
    } (d.BinAnalyzer);
    d.ImageAnalyzer = f;
    f.prototype.__class__ = "RES.ImageAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._dataFormat = egret.URLLoaderDataFormat.TEXT
        }
        __extends(e, d);
        e.prototype.analyzeData = function(c, a) {
            var b = c.name;
            if (!this.fileDic[b] && a) try {
                this.fileDic[b] = JSON.parse(a)
            } catch(h) {
                egret.Logger.warningWithErrorId(1017, c.url, a)
            }
        };
        return e
    } (d.BinAnalyzer);
    d.JsonAnalyzer = f;
    f.prototype.__class__ = "RES.JsonAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._dataFormat = egret.URLLoaderDataFormat.TEXT
        }
        __extends(e, d);
        return e
    } (d.BinAnalyzer);
    d.TextAnalyzer = f;
    f.prototype.__class__ = "RES.TextAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.sheetMap = {};
            this.textureMap = {};
            this._dataFormat = egret.URLLoaderDataFormat.TEXT
        }
        __extends(e, f);
        var c = e.prototype;
        c.getRes = function(a) {
            var b = this.fileDic[a];
            b || (b = this.textureMap[a]); ! b && (b = d.AnalyzerBase.getStringPrefix(a), b = this.fileDic[b]) && (a = d.AnalyzerBase.getStringTail(a), b = b.getTexture(a));
            return b
        };
        c.onLoadFinish = function(a) {
            var b = a.target,
            h = this.resItemDic[b.hashCode];
            delete this.resItemDic[b.hashCode];
            var c = h.item,
            e = h.func;
            c.loaded = a.type == egret.Event.COMPLETE;
            if (c.loaded) if ("string" == typeof b.data) {
                if (c.loaded = !1, a = this.analyzeConfig(c, b.data)) {
                    b = c.url;
                    c.url = a;
                    this._dataFormat = egret.URLLoaderDataFormat.TEXTURE;
                    this.loadFile(c, e, h.thisObject);
                    this._dataFormat = egret.URLLoaderDataFormat.TEXT;
                    c.url = b;
                    return
                }
            } else this.analyzeBitmap(c, b.data);
            this.recycler.push(b);
            e.call(h.thisObject, c)
        };
        c.analyzeConfig = function(a, b) {
            var h = a.name,
            c, e = "";
            try {
                c = JSON.parse(b)
            } catch(d) {
                egret.Logger.warningWithErrorId(1017, a.url, b)
            }
            c && (this.sheetMap[h] = c, e = this.getRelativePath(a.url, c.file));
            return e
        };
        c.analyzeBitmap = function(a, b) {
            var h = a.name;
            if (!this.fileDic[h] && b) {
                var c = this.sheetMap[h];
                delete this.sheetMap[h];
                c = this.parseSpriteSheet(b, c, a.data && a.data.subkeys ? "": h);
                this.fileDic[h] = c
            }
        };
        c.getRelativePath = function(a, b) {
            a = a.split("\\").join("/");
            var h = a.lastIndexOf("/");
            return a = -1 != h ? a.substring(0, h + 1) + b: b
        };
        c.parseSpriteSheet = function(a, b, h) {
            b = b.frames;
            if (!b) return null;
            var c = new egret.SpriteSheet(a),
            e = this.textureMap,
            d;
            for (d in b) {
                var f = b[d];
                a = c.createTexture(d, f.x, f.y, f.w, f.h, f.offX, f.offY, f.sourceW, f.sourceH);
                f.scale9grid && (f = f.scale9grid.split(","), a.scale9Grid = new egret.Rectangle(parseInt(f[0]), parseInt(f[1]), parseInt(f[2]), parseInt(f[3])));
                null == e[d] && (e[d] = a, h && this.addSubkey(d, h))
            }
            return c
        };
        c.destroyRes = function(a) {
            var b = this.fileDic[a];
            if (b) {
                delete this.fileDic[a];
                for (var h in b._textureMap) this.textureMap[h] && delete this.textureMap[h];
                return ! 0
            }
            return ! 1
        };
        return e
    } (d.BinAnalyzer);
    d.SheetAnalyzer = f;
    f.prototype.__class__ = "RES.SheetAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this)
        }
        __extends(e, d);
        var c = e.prototype;
        c.analyzeConfig = function(a, b) {
            var h = a.name,
            c, e = "";
            try {
                c = JSON.parse(b)
            } catch(d) {}
            c ? e = this.getRelativePath(a.url, c.file) : (c = b, e = this.getTexturePath(a.url, c));
            this.sheetMap[h] = c;
            return e
        };
        c.analyzeBitmap = function(a, b) {
            var h = a.name;
            if (!this.fileDic[h] && b) {
                var c = this.sheetMap[h];
                delete this.sheetMap[h];
                c = new egret.BitmapFont(b, c);
                this.fileDic[h] = c
            }
        };
        c.getTexturePath = function(a, b) {
            var h = "",
            c = b.split("\n")[2],
            e = c.indexOf('file="'); - 1 != e && (c = c.substring(e + 6), e = c.indexOf('"'), h = c.substring(0, e));
            a = a.split("\\").join("/");
            e = a.lastIndexOf("/");
            return a = -1 != e ? a.substring(0, e + 1) + h: h
        };
        c.destroyRes = function(a) {
            return this.fileDic[a] ? (delete this.fileDic[a], !0) : !1
        };
        return e
    } (d.SheetAnalyzer);
    d.FontAnalyzer = f;
    f.prototype.__class__ = "RES.FontAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._dataFormat = egret.URLLoaderDataFormat.SOUND
        }
        __extends(e, d);
        e.prototype.analyzeData = function(c, a) {
            var b = c.name; ! this.fileDic[b] && a && (this.fileDic[b] = a, (b = c.data) && b.soundType ? a.preload(b.soundType) : a.preload(egret.Sound.EFFECT))
        };
        return e
    } (d.BinAnalyzer);
    d.SoundAnalyzer = f;
    f.prototype.__class__ = "RES.SoundAnalyzer"
})(RES || (RES = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._dataFormat = egret.URLLoaderDataFormat.TEXT
        }
        __extends(e, d);
        e.prototype.analyzeData = function(c, a) {
            var b = c.name;
            if (!this.fileDic[b] && a) try {
                var h = egret.XML.parse(a);
                this.fileDic[b] = h
            } catch(e) {}
        };
        return e
    } (d.BinAnalyzer);
    d.XMLAnalyzer = f;
    f.prototype.__class__ = "RES.XMLAnalyzer"
})(RES || (RES = {})); (function(d) {
    d.loadConfig = function(e, c, a) {
        void 0 === c && (c = "");
        void 0 === a && (a = "json");
        g.loadConfig(e, c, a)
    };
    d.loadGroup = function(e, c) {
        void 0 === c && (c = 0);
        g.loadGroup(e, c)
    };
    d.isGroupLoaded = function(e) {
        return g.isGroupLoaded(e)
    };
    d.getGroupByName = function(e) {
        return g.getGroupByName(e)
    };
    d.createGroup = function(e, c, a) {
        void 0 === a && (a = !1);
        return g.createGroup(e, c, a)
    };
    d.hasRes = function(e) {
        return g.hasRes(e)
    };
    d.parseConfig = function(e, c) {
        void 0 === c && (c = "");
        g.parseConfig(e, c)
    };
    d.getRes = function(e) {
        return g.getRes(e)
    };
    d.getResAsync = function(e, c, a) {
        g.getResAsync(e, c, a)
    };
    d.getResByUrl = function(e, c, a, b) {
        void 0 === b && (b = "");
        g.getResByUrl(e, c, a, b)
    };
    d.destroyRes = function(e) {
        return g.destroyRes(e)
    };
    d.setMaxLoadingThread = function(e) {
        g.setMaxLoadingThread(e)
    };
    d.setMaxRetryTimes = function(e) {
        g.setMaxRetryTimes(e)
    };
    d.addEventListener = function(e, c, a, b, h) {
        void 0 === b && (b = !1);
        void 0 === h && (h = 0);
        g.addEventListener(e, c, a, b, h)
    };
    d.removeEventListener = function(e, c, a, b) {
        void 0 === b && (b = !1);
        g.removeEventListener(e, c, a, b)
    };
    var f = function(e) {
        function c() {
            e.call(this);
            this.analyzerDic = {};
            this.configItemList = [];
            this.configComplete = this.callLaterFlag = !1;
            this.loadedGroups = [];
            this.groupNameList = [];
            this.asyncDic = {};
            this.init()
        }
        __extends(c, e);
        var a = c.prototype;
        a.getAnalyzerByType = function(b) {
            var a = this.analyzerDic[b];
            a || (a = this.analyzerDic[b] = egret.Injector.getInstance(d.AnalyzerBase, b));
            return a
        };
        a.init = function() {
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_BIN) || egret.Injector.mapClass(d.AnalyzerBase, d.BinAnalyzer, d.ResourceItem.TYPE_BIN);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_IMAGE) || egret.Injector.mapClass(d.AnalyzerBase, d.ImageAnalyzer, d.ResourceItem.TYPE_IMAGE);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_TEXT) || egret.Injector.mapClass(d.AnalyzerBase, d.TextAnalyzer, d.ResourceItem.TYPE_TEXT);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_JSON) || egret.Injector.mapClass(d.AnalyzerBase, d.JsonAnalyzer, d.ResourceItem.TYPE_JSON);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_SHEET) || egret.Injector.mapClass(d.AnalyzerBase, d.SheetAnalyzer, d.ResourceItem.TYPE_SHEET);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_FONT) || egret.Injector.mapClass(d.AnalyzerBase, d.FontAnalyzer, d.ResourceItem.TYPE_FONT);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_SOUND) || egret.Injector.mapClass(d.AnalyzerBase, d.SoundAnalyzer, d.ResourceItem.TYPE_SOUND);
            egret.Injector.hasMapRule(d.AnalyzerBase, d.ResourceItem.TYPE_XML) || egret.Injector.mapClass(d.AnalyzerBase, d.XMLAnalyzer, d.ResourceItem.TYPE_XML);
            this.resConfig = new d.ResourceConfig;
            this.resLoader = new d.ResourceLoader;
            this.resLoader.callBack = this.onResourceItemComp;
            this.resLoader.resInstance = this;
            this.resLoader.addEventListener(d.ResourceEvent.GROUP_COMPLETE, this.onGroupComp, this);
            this.resLoader.addEventListener(d.ResourceEvent.GROUP_LOAD_ERROR, this.onGroupError, this)
        };
        a.loadConfig = function(b, a, c) {
            void 0 === c && (c = "json");
            this.configItemList.push({
                url: b,
                resourceRoot: a,
                type: c
            });
            this.callLaterFlag || (egret.callLater(this.startLoadConfig, this), this.callLaterFlag = !0)
        };
        a.startLoadConfig = function() {
            this.callLaterFlag = !1;
            var b = this.configItemList;
            this.configItemList = [];
            this.loadingConfigList = b;
            for (var a = b.length,
            e = [], f = 0; f < a; f++) {
                var g = b[f],
                g = new d.ResourceItem(g.url, g.url, g.type);
                e.push(g)
            }
            this.resLoader.loadGroup(e, c.GROUP_CONFIG, Number.MAX_VALUE)
        };
        a.isGroupLoaded = function(b) {
            return - 1 != this.loadedGroups.indexOf(b)
        };
        a.getGroupByName = function(b) {
            return this.resConfig.getGroupByName(b)
        };
        a.loadGroup = function(b, a) {
            void 0 === a && (a = 0);
            if ( - 1 != this.loadedGroups.indexOf(b)) d.ResourceEvent.dispatchResourceEvent(this, d.ResourceEvent.GROUP_COMPLETE, b);
            else if (!this.resLoader.isGroupInLoading(b)) if (this.configComplete) {
                var c = this.resConfig.getGroupByName(b);
                this.resLoader.loadGroup(c, b, a)
            } else this.groupNameList.push({
                name: b,
                priority: a
            })
        };
        a.createGroup = function(b, a, c) {
            void 0 === c && (c = !1);
            if (c) {
                var e = this.loadedGroups.indexOf(b); - 1 != e && this.loadedGroups.splice(e, 1)
            }
            return this.resConfig.createGroup(b, a, c)
        };
        a.onGroupComp = function(b) {
            if (b.groupName == c.GROUP_CONFIG) {
                b = this.loadingConfigList.length;
                for (var a = 0; a < b; a++) {
                    var e = this.loadingConfigList[a],
                    f = this.getAnalyzerByType(e.type),
                    g = f.getRes(e.url);
                    f.destroyRes(e.url);
                    this.resConfig.parseConfig(g, e.resourceRoot)
                }
                this.configComplete = !0;
                this.loadingConfigList = null;
                d.ResourceEvent.dispatchResourceEvent(this, d.ResourceEvent.CONFIG_COMPLETE);
                this.loadDelayGroups()
            } else this.loadedGroups.push(b.groupName),
            this.dispatchEvent(b)
        };
        a.loadDelayGroups = function() {
            var b = this.groupNameList;
            this.groupNameList = [];
            for (var a = b.length,
            c = 0; c < a; c++) {
                var e = b[c];
                this.loadGroup(e.name, e.priority)
            }
        };
        a.onGroupError = function(b) {
            b.groupName == c.GROUP_CONFIG ? (this.loadingConfigList = null, d.ResourceEvent.dispatchResourceEvent(this, d.ResourceEvent.CONFIG_LOAD_ERROR)) : this.dispatchEvent(b)
        };
        a.hasRes = function(b) {
            var a = this.resConfig.getType(b);
            return "" == a && (b = d.AnalyzerBase.getStringPrefix(b), a = this.resConfig.getType(b), "" == a) ? !1 : !0
        };
        a.parseConfig = function(b, a) {
            this.resConfig.parseConfig(b, a);
            this.configComplete || this.loadingConfigList || (this.configComplete = !0, this.loadDelayGroups())
        };
        a.getRes = function(b) {
            var a = this.resConfig.getType(b);
            return "" == a && (a = d.AnalyzerBase.getStringPrefix(b), a = this.resConfig.getType(a), "" == a) ? null: this.getAnalyzerByType(a).getRes(b)
        };
        a.getResAsync = function(b, a, c) {
            var e = this.resConfig.getType(b),
            f = this.resConfig.getName(b);
            if ("" == e && (f = d.AnalyzerBase.getStringPrefix(b), e = this.resConfig.getType(f), "" == e)) {
                a.call(c, null);
                return
            } (e = this.getAnalyzerByType(e).getRes(b)) ? a.call(c, e) : (b = {
                key: b,
                compFunc: a,
                thisObject: c
            },
            this.asyncDic[f] ? this.asyncDic[f].push(b) : (this.asyncDic[f] = [b], f = this.resConfig.getResourceItem(f), this.resLoader.loadItem(f)))
        };
        a.getResByUrl = function(b, a, c, e) {
            void 0 === e && (e = "");
            if (b) {
                e || (e = this.getTypeByUrl(b));
                var f = this.getAnalyzerByType(e).getRes(b);
                f ? a.call(c, f) : (a = {
                    key: b,
                    compFunc: a,
                    thisObject: c
                },
                this.asyncDic[b] ? this.asyncDic[b].push(a) : (this.asyncDic[b] = [a], b = new d.ResourceItem(b, b, e), this.resLoader.loadItem(b)))
            } else a.call(c, null)
        };
        a.getTypeByUrl = function(b) { (b = b.substr(b.lastIndexOf(".") + 1)) && (b = b.toLowerCase());
            switch (b) {
            case d.ResourceItem.TYPE_XML:
            case d.ResourceItem.TYPE_JSON:
            case d.ResourceItem.TYPE_SHEET:
                break;
            case "png":
            case "jpg":
            case "gif":
            case "jpeg":
            case "bmp":
                b = d.ResourceItem.TYPE_IMAGE;
                break;
            case "fnt":
                b = d.ResourceItem.TYPE_FONT;
                break;
            case "txt":
                b = d.ResourceItem.TYPE_TEXT;
                break;
            case "mp3":
            case "ogg":
            case "mpeg":
            case "wav":
            case "m4a":
            case "mp4":
            case "aiff":
            case "wma":
            case "mid":
                b = d.ResourceItem.TYPE_SOUND;
                break;
            default:
                b = d.ResourceItem.TYPE_BIN
            }
            return b
        };
        a.onResourceItemComp = function(b) {
            var a = this.asyncDic[b.name];
            delete this.asyncDic[b.name];
            b = this.getAnalyzerByType(b.type);
            for (var c = a.length,
            e = 0; e < c; e++) {
                var d = a[e],
                f = b.getRes(d.key);
                d.compFunc.call(d.thisObject, f, d.key)
            }
        };
        a.destroyRes = function(b) {
            var a = this.resConfig.getRawGroupByName(b);
            if (a) {
                var c = this.loadedGroups.indexOf(b); - 1 != c && this.loadedGroups.splice(c, 1);
                b = a.length;
                for (var e = 0; e < b; e++) {
                    c = a[e];
                    c.loaded = !1;
                    var d = this.getAnalyzerByType(c.type);
                    d.destroyRes(c.name);
                    this.removeLoadedGroupsByItemName(c.name)
                }
                return ! 0
            }
            a = this.resConfig.getType(b);
            if ("" == a) return ! 1;
            c = this.resConfig.getRawResourceItem(b);
            c.loaded = !1;
            d = this.getAnalyzerByType(a);
            a = d.destroyRes(b);
            this.removeLoadedGroupsByItemName(c.name);
            return a
        };
        a.removeLoadedGroupsByItemName = function(b) {
            for (var a = this.loadedGroups,
            c = a.length,
            e = 0; e < c; e++) for (var d = this.resConfig.getRawGroupByName(a[e]), f = d.length, g = 0; g < f; g++) if (d[g].name == b) {
                a.splice(e, 1);
                e--;
                c = a.length;
                break
            }
        };
        a.setMaxLoadingThread = function(b) {
            1 > b && (b = 1);
            this.resLoader.thread = b
        };
        a.setMaxRetryTimes = function(b) {
            b = Math.max(b, 0);
            this.resLoader.maxRetryTimes = b
        };
        c.GROUP_CONFIG = "RES__CONFIG";
        return c
    } (egret.EventDispatcher);
    f.prototype.__class__ = "RES.Resource";
    var g = new f
})(RES || (RES = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this);
                this._source = b ? b: []
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "source", {
                get: function() {
                    return this._source
                },
                set: function(b) {
                    b || (b = []);
                    this._source = b;
                    this.dispatchCoEvent(f.CollectionEventKind.RESET)
                },
                enumerable: !0,
                configurable: !0
            });
            a.refresh = function() {
                this.dispatchCoEvent(f.CollectionEventKind.REFRESH)
            };
            a.contains = function(b) {
                return - 1 != this.getItemIndex(b)
            };
            a.checkIndex = function(b) {
                if (0 > b || b >= this._source.length) throw new RangeError(d.getString(3002, b));
            };
            Object.defineProperty(a, "length", {
                get: function() {
                    return this._source.length
                },
                enumerable: !0,
                configurable: !0
            });
            a.addItem = function(b) {
                this._source.push(b);
                this.dispatchCoEvent(f.CollectionEventKind.ADD, this._source.length - 1, -1, [b])
            };
            a.addItemAt = function(b, a) {
                if (0 > a || a > this._source.length) throw new RangeError(d.getString(3002, a));
                this._source.splice(a, 0, b);
                this.dispatchCoEvent(f.CollectionEventKind.ADD, a, -1, [b])
            };
            a.getItemAt = function(b) {
                return this._source[b]
            };
            a.getItemIndex = function(b) {
                for (var a = this._source.length,
                c = 0; c < a; c++) if (this._source[c] === b) return c;
                return - 1
            };
            a.itemUpdated = function(b) {
                var a = this.getItemIndex(b); - 1 != a && this.dispatchCoEvent(f.CollectionEventKind.UPDATE, a, -1, [b])
            };
            a.removeAll = function() {
                var b = this._source.concat();
                this._source.length = 0;
                this.dispatchCoEvent(f.CollectionEventKind.REMOVE, 0, -1, b)
            };
            a.removeItemAt = function(b) {
                this.checkIndex(b);
                var a = this._source.splice(b, 1)[0];
                this.dispatchCoEvent(f.CollectionEventKind.REMOVE, b, -1, [a]);
                return a
            };
            a.replaceItemAt = function(b, a) {
                this.checkIndex(a);
                var c = this._source.splice(a, 1, b)[0];
                this.dispatchCoEvent(f.CollectionEventKind.REPLACE, a, -1, [b], [c]);
                return c
            };
            a.replaceAll = function(b) {
                b || (b = []);
                for (var a = b.length,
                c = this._source.length,
                e = a; e < c; e++) this.removeItemAt(a);
                for (e = 0; e < a; e++) e >= c ? this.addItemAt(b[e], e) : this.replaceItemAt(b[e], e);
                this._source = b
            };
            a.moveItemAt = function(b, a) {
                this.checkIndex(b);
                this.checkIndex(a);
                var c = this._source.splice(b, 1)[0];
                this._source.splice(a, 0, c);
                this.dispatchCoEvent(f.CollectionEventKind.MOVE, a, b, [c]);
                return c
            };
            a.dispatchCoEvent = function(b, a, c, e, d) {
                void 0 === b && (b = null);
                void 0 === a && (a = -1);
                void 0 === c && (c = -1);
                void 0 === e && (e = null);
                void 0 === d && (d = null);
                f.CollectionEvent.dispatchCollectionEvent(this, f.CollectionEvent.COLLECTION_CHANGE, b, a, c, e, d)
            };
            return c
        } (d.EventDispatcher);
        f.ArrayCollection = g;
        g.prototype.__class__ = "egret.gui.ArrayCollection"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b, a) {
                void 0 === b && (b = "children");
                void 0 === a && (a = "parent");
                e.call(this);
                this.childrenKey = "children";
                this.parentKey = "parent";
                this._source = null;
                this.nodeList = [];
                this._openNodes = [];
                this._showRoot = !1;
                this.childrenKey = b;
                this.parentKey = a
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "source", {
                get: function() {
                    return this._source
                },
                set: function(b) {
                    this._source = b;
                    this._openNodes = [];
                    this.nodeList = [];
                    this._source && (this._showRoot ? this.nodeList.push(this._source) : (this._openNodes = [this._source], this.addChildren(this._source, this.nodeList)));
                    this.dispatchCoEvent(f.CollectionEventKind.RESET)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "openNodes", {
                get: function() {
                    return this._openNodes.concat()
                },
                set: function(b) {
                    this._openNodes = b ? b.concat() : [];
                    this.refresh()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "length", {
                get: function() {
                    return this.nodeList.length
                },
                enumerable: !0,
                configurable: !0
            });
            a.getItemAt = function(b) {
                return this.nodeList[b]
            };
            a.getItemIndex = function(b) {
                for (var a = this.nodeList.length,
                c = 0; c < a; c++) if (this.nodeList[c] === b) return c;
                return - 1
            };
            a.itemUpdated = function(b) {
                var a = this.getItemIndex(b); - 1 != a && this.dispatchCoEvent(f.CollectionEventKind.UPDATE, a, -1, [b])
            };
            a.removeItem = function(b) {
                this.isItemOpen(b) && this.closeNode(b);
                if (b) {
                    var a = b[this.parentKey];
                    if (a && (a = a[this.childrenKey])) {
                        var c = a.indexOf(b); - 1 != c && a.splice(c, 1);
                        b[this.parentKey] = null;
                        c = this.nodeList.indexOf(b); - 1 != c && (this.nodeList.splice(c, 1), this.dispatchCoEvent(f.CollectionEventKind.REMOVE, c, -1, [b]))
                    }
                }
            };
            Object.defineProperty(a, "showRoot", {
                get: function() {
                    return this._showRoot
                },
                set: function(b) {
                    this._showRoot != b && (this._showRoot = b, this._source && (this._showRoot ? this.nodeList.splice(0, 0, this._source) : (this.nodeList.shift(), -1 == this.openNodes.indexOf(this._source) && this.openNodes.push(this._source)), this.refresh()))
                },
                enumerable: !0,
                configurable: !0
            });
            a.addChildren = function(b, a) {
                if (b.hasOwnProperty(this.childrenKey) && -1 != this._openNodes.indexOf(b)) for (var c = b[this.childrenKey], e = c.length, d = 0; d < e; d++) {
                    var f = c[d];
                    a.push(f);
                    this.addChildren(f, a)
                }
            };
            a.hasChildren = function(b) {
                return b.hasOwnProperty(this.childrenKey) ? 0 < b[this.childrenKey].length: !1
            };
            a.isItemOpen = function(b) {
                return - 1 != this._openNodes.indexOf(b)
            };
            a.expandItem = function(b, a) {
                void 0 === a && (a = !0);
                a ? this.openNode(b) : this.closeNode(b)
            };
            a.openNode = function(b) {
                if ( - 1 == this._openNodes.indexOf(b)) {
                    this._openNodes.push(b);
                    var a = this.nodeList.indexOf(b);
                    if ( - 1 != a) {
                        var c = [];
                        this.addChildren(b, c);
                        for (var e = a; c.length;) {
                            e++;
                            var d = c.shift();
                            this.nodeList.splice(e, 0, d);
                            this.dispatchCoEvent(f.CollectionEventKind.ADD, e, -1, [d])
                        }
                        this.dispatchCoEvent("open", a, a, [b])
                    }
                }
            };
            a.closeNode = function(b) {
                var a = this._openNodes.indexOf(b);
                if ( - 1 != a) {
                    var c = [];
                    this.addChildren(b, c);
                    this._openNodes.splice(a, 1);
                    a = this.nodeList.indexOf(b);
                    if ( - 1 != a) {
                        for (a++; c.length;) {
                            var e = this.nodeList.splice(a, 1)[0];
                            this.dispatchCoEvent(f.CollectionEventKind.REMOVE, a, -1, [e]);
                            c.shift()
                        }
                        a--;
                        this.dispatchCoEvent(f.CollectionEventKind.CLOSE, a, a, [b])
                    }
                }
            };
            a.getDepth = function(b) {
                var a = 0;
                for (b = b[this.parentKey]; b;) a++,
                b = b[this.parentKey];
                0 < a && !this._showRoot && a--;
                return a
            };
            a.refresh = function() {
                this.nodeList = [];
                this._source && (this._showRoot && this.nodeList.push(this._source), this.addChildren(this._source, this.nodeList));
                this.dispatchCoEvent(f.CollectionEventKind.REFRESH)
            };
            a.dispatchCoEvent = function(b, a, c, e, d) {
                void 0 === b && (b = null);
                void 0 === a && (a = -1);
                void 0 === c && (c = -1);
                void 0 === e && (e = null);
                void 0 === d && (d = null);
                f.CollectionEvent.dispatchCollectionEvent(this, f.CollectionEvent.COLLECTION_CHANGE, b, a, c, e, d)
            };
            c.assignParent = function(b, a, e) {
                void 0 === a && (a = "children");
                void 0 === e && (e = "parent");
                if (b.hasOwnProperty(a)) for (var d = b[a], f = d.length, g = 0; g < f; g++) {
                    var k = d[g];
                    try {
                        k[e] = b
                    } catch(l) {}
                    c.assignParent(k, a, e)
                }
            };
            return c
        } (d.EventDispatcher);
        f.ObjectCollection = g;
        g.prototype.__class__ = "egret.gui.ObjectCollection"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.targetLevel = Number.MAX_VALUE;
                this.updateCompleteQueue = new f.DepthQueue;
                this.invalidateClientPropertiesFlag = this.invalidatePropertiesFlag = !1;
                this.invalidatePropertiesQueue = new f.DepthQueue;
                this.invalidateClientSizeFlag = this.invalidateSizeFlag = !1;
                this.invalidateSizeQueue = new f.DepthQueue;
                this.invalidateDisplayListFlag = !1;
                this.invalidateDisplayListQueue = new f.DepthQueue;
                this.listenersAttached = !1
            }
            __extends(c, e);
            var a = c.prototype;
            a.invalidateProperties = function(b) {
                this.invalidatePropertiesFlag || (this.invalidatePropertiesFlag = !0, this.listenersAttached || this.attachListeners());
                this.targetLevel <= b.nestLevel && (this.invalidateClientPropertiesFlag = !0);
                this.invalidatePropertiesQueue.insert(b)
            };
            a.validateProperties = function() {
                for (var b = this.invalidatePropertiesQueue.shift(); b;) b.parent && (b.validateProperties(), b.updateCompletePendingFlag || (this.updateCompleteQueue.insert(b), b.updateCompletePendingFlag = !0)),
                b = this.invalidatePropertiesQueue.shift();
                this.invalidatePropertiesQueue.isEmpty() && (this.invalidatePropertiesFlag = !1)
            };
            a.invalidateSize = function(b) {
                this.invalidateSizeFlag || (this.invalidateSizeFlag = !0, this.listenersAttached || this.attachListeners());
                this.targetLevel <= b.nestLevel && (this.invalidateClientSizeFlag = !0);
                this.invalidateSizeQueue.insert(b)
            };
            a.validateSize = function() {
                for (var b = this.invalidateSizeQueue.pop(); b;) b.parent && (b.validateSize(), b.updateCompletePendingFlag || (this.updateCompleteQueue.insert(b), b.updateCompletePendingFlag = !0)),
                b = this.invalidateSizeQueue.pop();
                this.invalidateSizeQueue.isEmpty() && (this.invalidateSizeFlag = !1)
            };
            a.invalidateDisplayList = function(b) {
                this.invalidateDisplayListFlag || (this.invalidateDisplayListFlag = !0, this.listenersAttached || this.attachListeners());
                this.invalidateDisplayListQueue.insert(b)
            };
            a.validateDisplayList = function() {
                for (var b = this.invalidateDisplayListQueue.shift(); b;) b.parent && (b.validateDisplayList(), b.updateCompletePendingFlag || (this.updateCompleteQueue.insert(b), b.updateCompletePendingFlag = !0)),
                b = this.invalidateDisplayListQueue.shift();
                this.invalidateDisplayListQueue.isEmpty() && (this.invalidateDisplayListFlag = !1)
            };
            a.attachListeners = function() {
                f.UIGlobals.stage.addEventListener(d.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                f.UIGlobals.stage.addEventListener(d.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                f.UIGlobals.stage.invalidate();
                this.listenersAttached = !0
            };
            a.doPhasedInstantiationCallBack = function(b) {
                f.UIGlobals.stage.removeEventListener(d.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                f.UIGlobals.stage.removeEventListener(d.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                this.doPhasedInstantiation()
            };
            a.doPhasedInstantiation = function() {
                this.invalidatePropertiesFlag && this.validateProperties();
                this.invalidateSizeFlag && this.validateSize();
                this.invalidateDisplayListFlag && this.validateDisplayList();
                if (this.invalidatePropertiesFlag || this.invalidateSizeFlag || this.invalidateDisplayListFlag) this.attachListeners();
                else {
                    this.listenersAttached = !1;
                    for (var b = this.updateCompleteQueue.pop(); b;) b.initialized || (b.initialized = !0),
                    b.hasEventListener(f.UIEvent.UPDATE_COMPLETE) && f.UIEvent.dispatchUIEvent(b, f.UIEvent.UPDATE_COMPLETE),
                    b.updateCompletePendingFlag = !1,
                    b = this.updateCompleteQueue.pop();
                    f.UIEvent.dispatchUIEvent(this, f.UIEvent.UPDATE_COMPLETE)
                }
            };
            a.validateNow = function() {
                for (var b = 0; this.listenersAttached && 100 > b++;) this.doPhasedInstantiationCallBack()
            };
            a.validateClient = function(b, a) {
                void 0 === a && (a = !1);
                var c, e = !1,
                d = this.targetLevel;
                this.targetLevel == Number.MAX_VALUE && (this.targetLevel = b.nestLevel);
                for (; ! e;) {
                    e = !0;
                    for (c = this.invalidatePropertiesQueue.removeSmallestChild(b); c;) c.parent && (c.validateProperties(), c.updateCompletePendingFlag || (this.updateCompleteQueue.insert(c), c.updateCompletePendingFlag = !0)),
                    c = this.invalidatePropertiesQueue.removeSmallestChild(b);
                    this.invalidatePropertiesQueue.isEmpty() && (this.invalidatePropertiesFlag = !1);
                    this.invalidateClientPropertiesFlag = !1;
                    for (c = this.invalidateSizeQueue.removeLargestChild(b); c;) {
                        c.parent && (c.validateSize(), c.updateCompletePendingFlag || (this.updateCompleteQueue.insert(c), c.updateCompletePendingFlag = !0));
                        if (this.invalidateClientPropertiesFlag && (c = this.invalidatePropertiesQueue.removeSmallestChild(b))) {
                            this.invalidatePropertiesQueue.insert(c);
                            e = !1;
                            break
                        }
                        c = this.invalidateSizeQueue.removeLargestChild(b)
                    }
                    this.invalidateSizeQueue.isEmpty() && (this.invalidateSizeFlag = !1);
                    this.invalidateClientSizeFlag = this.invalidateClientPropertiesFlag = !1;
                    if (!a) {
                        for (c = this.invalidateDisplayListQueue.removeSmallestChild(b); c;) {
                            c.parent && (c.validateDisplayList(), c.updateCompletePendingFlag || (this.updateCompleteQueue.insert(c), c.updateCompletePendingFlag = !0));
                            if (this.invalidateClientPropertiesFlag && (c = this.invalidatePropertiesQueue.removeSmallestChild(b))) {
                                this.invalidatePropertiesQueue.insert(c);
                                e = !1;
                                break
                            }
                            if (this.invalidateClientSizeFlag && (c = this.invalidateSizeQueue.removeLargestChild(b))) {
                                this.invalidateSizeQueue.insert(c);
                                e = !1;
                                break
                            }
                            c = this.invalidateDisplayListQueue.removeSmallestChild(b)
                        }
                        this.invalidateDisplayListQueue.isEmpty() && (this.invalidateDisplayListFlag = !1)
                    }
                }
                if (d == Number.MAX_VALUE && (this.targetLevel = Number.MAX_VALUE, !a)) for (c = this.updateCompleteQueue.removeLargestChild(b); c;) c.initialized || (c.initialized = !0),
                c.hasEventListener(f.UIEvent.UPDATE_COMPLETE) && f.UIEvent.dispatchUIEvent(c, f.UIEvent.UPDATE_COMPLETE),
                c.updateCompletePendingFlag = !1,
                c = this.updateCompleteQueue.removeLargestChild(b)
            };
            return c
        } (d.EventDispatcher);
        f.LayoutManager = g;
        g.prototype.__class__ = "egret.gui.LayoutManager"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function c() {
                this.depthBins = [];
                this.minDepth = 0;
                this.maxDepth = -1
            }
            var a = c.prototype;
            a.insert = function(b) {
                var a = b.nestLevel,
                c = b.hashCode;
                this.maxDepth < this.minDepth ? this.minDepth = this.maxDepth = a: (a < this.minDepth && (this.minDepth = a), a > this.maxDepth && (this.maxDepth = a));
                var d = this.depthBins[a];
                d ? null == d.items[c] && (d.items[c] = b, d.length++) : (d = new e, this.depthBins[a] = d, d.items[c] = b, d.length++)
            };
            a.pop = function() {
                var b = null;
                if (this.minDepth <= this.maxDepth) {
                    for (var a = this.depthBins[this.maxDepth]; ! a || 0 == a.length;) {
                        this.maxDepth--;
                        if (this.maxDepth < this.minDepth) return null;
                        a = this.depthBins[this.maxDepth]
                    }
                    var c = a.items,
                    e;
                    for (e in c) {
                        b = c[e];
                        this.remove(b, this.maxDepth);
                        break
                    }
                    for (; ! a || 0 == a.length;) {
                        this.maxDepth--;
                        if (this.maxDepth < this.minDepth) break;
                        a = this.depthBins[this.maxDepth]
                    }
                }
                return b
            };
            a.shift = function() {
                var b = null;
                if (this.minDepth <= this.maxDepth) {
                    for (var a = this.depthBins[this.minDepth]; ! a || 0 == a.length;) {
                        this.minDepth++;
                        if (this.minDepth > this.maxDepth) return null;
                        a = this.depthBins[this.minDepth]
                    }
                    var c = a.items,
                    e;
                    for (e in c) {
                        b = c[e];
                        this.remove(b, this.minDepth);
                        break
                    }
                    for (; ! a || 0 == a.length;) {
                        this.minDepth++;
                        if (this.minDepth > this.maxDepth) break;
                        a = this.depthBins[this.minDepth]
                    }
                }
                return b
            };
            a.removeLargestChild = function(b) {
                for (var a = this.maxDepth,
                c = b.nestLevel,
                e = b.hashCode; c <= a;) {
                    var f = this.depthBins[a];
                    if (f && 0 < f.length) {
                        if (a == b.nestLevel) {
                            if (f.items[e]) return this.remove(b, a),
                            b
                        } else {
                            var f = f.items,
                            g;
                            for (g in f) {
                                var k = f[g];
                                if (k instanceof d.DisplayObject && b instanceof d.DisplayObjectContainer && b.contains(k)) return this.remove(k, a),
                                k
                            }
                        }
                        a--
                    } else if (a == this.maxDepth && this.maxDepth--, a--, a < c) break
                }
                return null
            };
            a.removeSmallestChild = function(b) {
                for (var a = b.nestLevel,
                c = b.hashCode; a <= this.maxDepth;) {
                    var e = this.depthBins[a];
                    if (e && 0 < e.length) {
                        if (a == b.nestLevel) {
                            if (e.items[c]) return this.remove(b, a),
                            b
                        } else {
                            var e = e.items,
                            f;
                            for (f in e) {
                                var g = e[f];
                                if (g instanceof d.DisplayObject && b instanceof d.DisplayObjectContainer && b.contains(g)) return this.remove(g, a),
                                g
                            }
                        }
                        a++
                    } else if (a == this.minDepth && this.minDepth++, a++, a > this.maxDepth) break
                }
                return null
            };
            a.remove = function(b, a) {
                void 0 === a && (a = -1);
                var c = b.hashCode,
                e = this.depthBins[0 <= a ? a: b.nestLevel];
                return e && null != e.items[c] ? (delete e.items[c], e.length--, b) : null
            };
            a.removeAll = function() {
                this.minDepth = this.depthBins.length = 0;
                this.maxDepth = -1
            };
            a.isEmpty = function() {
                return this.minDepth > this.maxDepth
            };
            return c
        } ();
        f.DepthQueue = g;
        g.prototype.__class__ = "egret.gui.DepthQueue";
        var e = function() {
            return function() {
                this.length = 0;
                this.items = []
            }
        } ();
        f.DepthBin = e;
        e.prototype.__class__ = "egret.gui.DepthBin"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            Object.defineProperty(e, "stage", {
                get: function() {
                    return e._stage
                },
                enumerable: !0,
                configurable: !0
            });
            e._initlize = function(c) {
                e.initlized || (e._stage = c, e._layoutManager = new d.LayoutManager, e.initlized = !0)
            };
            Object.defineProperty(e, "uiStage", {
                get: function() {
                    return e._uiStage
                },
                enumerable: !0,
                configurable: !0
            });
            e.initlized = !1;
            return e
        } ();
        d.UIGlobals = g;
        g.prototype.__class__ = "egret.gui.UIGlobals"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._id = null;
                this._isPopUp = !1;
                this._owner = null;
                this.initializeCalled = this._initialized = this._updateCompletePendingFlag = !1;
                this._nestLevel = 0;
                this._hasOwnStyleChain = !1;
                this._styleProtoChain = null;
                this._hasNoStyleChild = !1;
                this._enabled = !0;
                this.oldWidth = NaN;
                this._width = 0;
                this.oldHeight = NaN;
                this._minWidth = this._height = 0;
                this._maxWidth = 1E4;
                this._minHeight = 0;
                this._maxHeight = 1E4;
                this._measuredHeight = this._measuredWidth = 0;
                this.oldY = this.oldX = NaN;
                this._invalidateSizeFlag = this._invalidatePropertiesFlag = !1;
                this._oldPreferHeight = this._oldPreferWidth = NaN;
                this._validateNowFlag = this._invalidateDisplayListFlag = !1;
                this._includeInLayout = !0;
                this._percentHeight = this._percentWidth = this._verticalCenter = this._horizontalCenter = this._bottom = this._top = this._right = this._left = NaN;
                this._layoutHeightExplicitlySet = this._layoutWidthExplicitlySet = !1;
                this.touchEnabled = !0;
                this.addEventListener(d.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                this.addEventListener(d.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this);
                void 0 === c.prototypeCanSet && (c.prototypeCanSet = void 0 !== {}.__proto__)
            }
            __extends(c, e);
            var a = c.prototype;
            a.onAddedToStage = function(b) {
                this.removeEventListener(d.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                this._initialize();
                f.UIGlobals._initlize(this.stage);
                0 < this._nestLevel && this.checkInvalidateFlag()
            };
            Object.defineProperty(a, "id", {
                get: function() {
                    return this._id
                },
                set: function(b) {
                    this._id = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "isPopUp", {
                get: function() {
                    return this._isPopUp
                },
                set: function(b) {
                    this._isPopUp = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "owner", {
                get: function() {
                    return this._owner ? this._owner: this.parent
                },
                enumerable: !0,
                configurable: !0
            });
            a.ownerChanged = function(b) {
                this._owner = b
            };
            Object.defineProperty(a, "updateCompletePendingFlag", {
                get: function() {
                    return this._updateCompletePendingFlag
                },
                set: function(b) {
                    this._updateCompletePendingFlag = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "initialized", {
                get: function() {
                    return this._initialized
                },
                set: function(b) {
                    this._initialized != b && (this._initialized = b) && (this.childrenCreated(), f.UIEvent.dispatchUIEvent(this, f.UIEvent.CREATION_COMPLETE))
                },
                enumerable: !0,
                configurable: !0
            });
            a._initialize = function() {
                this.initializeCalled || (f.UIGlobals.stage && this.removeEventListener(d.Event.ADDED_TO_STAGE, this.onAddedToStage, this), this.initializeCalled = !0, f.UIEvent.dispatchUIEvent(this, f.UIEvent.INITIALIZE), this.createChildren(), this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
            };
            a.createChildren = function() {};
            a.childrenCreated = function() {};
            Object.defineProperty(a, "nestLevel", {
                get: function() {
                    return this._nestLevel
                },
                set: function(b) {
                    this._nestLevel != b && (this._nestLevel = b, 0 == this._nestLevel ? this.addEventListener(d.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this) : this.removeEventListener(d.Event.ADDED_TO_STAGE, this.checkInvalidateFlag, this), this._updateChildrenNestLevel())
                },
                enumerable: !0,
                configurable: !0
            });
            a._updateChildrenNestLevel = function() {
                for (var b = this.numChildren - 1; 0 <= b; b--) {
                    var a = this.getChildAt(b);
                    a && "nestLevel" in a && (a.nestLevel = this._nestLevel + 1)
                }
            };
            a.getStyle = function(b) {
                var a = this._styleProtoChain;
                return a ? a[b] : void 0
            };
            a.setStyle = function(b, a) {
                var c = this._styleProtoChain;
                this._hasOwnStyleChain || (c = this._createOwnStyleProtoChain(c));
                c[b] = a;
                this.styleChanged(b);
                this.notifyStyleChangeInChildren(b)
            };
            a.styleChanged = function(b) {};
            a.notifyStyleChangeInChildren = function(b) {
                if (!this._hasNoStyleChild) for (var a = this.numChildren - 1; 0 <= a; a--) {
                    var c = this.getChildAt(a);
                    c && "styleChanged" in c && (c.styleChanged(b), c.notifyStyleChangeInChildren(b))
                }
            };
            a._createOwnStyleProtoChain = function(b) {
                this._hasOwnStyleChain = !0;
                c.prototypeCanSet ? (this._styleProtoChain = {},
                this._styleProtoChain.__proto__ = b ? b: c.emptyStyleChain) : this._styleProtoChain = this.createProtoChain(b);
                b = this._styleProtoChain;
                if (!this._hasNoStyleChild) for (var a = this.numChildren - 1; 0 <= a; a--) {
                    var e = this.getChildAt(a);
                    e && "regenerateStyleCache" in e && e.regenerateStyleCache(b)
                }
                return b
            };
            a.createProtoChain = function(b) {
                function a() {}
                a.prototype = b;
                b = new a;
                a.prototype = null;
                return b
            };
            a.clearStyle = function(b) {
                this._hasOwnStyleChain && (delete this._styleProtoChain[b], this.styleChanged(b), this.notifyStyleChangeInChildren(b))
            };
            a.regenerateStyleCache = function(b) {
                if (!c.prototypeCanSet) this.regenerateStyleCacheForIE(b);
                else if (this._hasOwnStyleChain) this._styleProtoChain.__proto__ = b ? b: c.emptyStyleChain;
                else if (this._styleProtoChain != b) {
                    this._styleProtoChain = b;
                    for (var a = this.numChildren - 1; 0 <= a; a--) {
                        var e = this.getChildAt(a);
                        e && "regenerateStyleCache" in e && e.regenerateStyleCache(b)
                    }
                }
            };
            a.regenerateStyleCacheForIE = function(b) {
                if (this._hasOwnStyleChain) {
                    var a = this._styleProtoChain;
                    b = this.createProtoChain(b);
                    for (var c in a) a.hasOwnProperty(c) && (b[c] = a[c])
                }
                this._styleProtoChain = b;
                if (!this._hasNoStyleChild) for (a = this.numChildren - 1; 0 <= a; a--)(c = this.getChildAt(a)) && "regenerateStyleCacheForIE" in c && c.regenerateStyleCacheForIE(b)
            };
            a._addToDisplayList = function(b, a) {
                void 0 === a && (a = !0);
                var c = this.numChildren;
                b.parent == this && c--;
                this._addingChild(b);
                this._doAddChild(b, c, a);
                this._childAdded(b);
                return b
            };
            a._addToDisplayListAt = function(b, a, c) {
                void 0 === c && (c = !0);
                this._addingChild(b);
                this._doAddChild(b, a, c);
                this._childAdded(b);
                return b
            };
            a._removeFromDisplayList = function(b, a) {
                void 0 === a && (a = !0);
                var c = this._children.indexOf(b);
                if (0 <= c) return this._doRemoveChild(c, a),
                this._childRemoved(b),
                b;
                d.Logger.fatalWithErrorId(1008);
                return null
            };
            a._removeFromDisplayListAt = function(b, a) {
                void 0 === a && (a = !0);
                if (0 <= b && b < this._children.length) {
                    var c = this._doRemoveChild(b, a);
                    this._childRemoved(c);
                    return c
                }
                d.Logger.fatalWithErrorId(1007);
                return null
            };
            a.addChild = function(b) {
                this._addingChild(b);
                e.prototype.addChild.call(this, b);
                this._childAdded(b);
                return b
            };
            a.addChildAt = function(b, a) {
                this._addingChild(b);
                e.prototype.addChildAt.call(this, b, a);
                this._childAdded(b);
                return b
            };
            a._addingChild = function(b) {
                if (b && ("nestLevel" in b && (b.nestLevel = this._nestLevel + 1), "styleChanged" in b)) {
                    var a = this._styleProtoChain;
                    if (a || b._styleProtoChain) b.regenerateStyleCache(a),
                    b.styleChanged(null),
                    b.notifyStyleChangeInChildren(null)
                }
            };
            a._childAdded = function(b) {
                b instanceof c && (b._initialize(), b.checkInvalidateFlag())
            };
            a.removeChild = function(b) {
                e.prototype.removeChild.call(this, b);
                this._childRemoved(b);
                return b
            };
            a.removeChildAt = function(b) {
                b = e.prototype.removeChildAt.call(this, b);
                this._childRemoved(b);
                return b
            };
            a._childRemoved = function(b) {
                b && "nestLevel" in b && (b.nestLevel = 0)
            };
            a.checkInvalidateFlag = function(b) {
                f.UIGlobals._layoutManager && (this._invalidatePropertiesFlag && f.UIGlobals._layoutManager.invalidateProperties(this), this._invalidateSizeFlag && f.UIGlobals._layoutManager.invalidateSize(this), this._invalidateDisplayListFlag && f.UIGlobals._layoutManager.invalidateDisplayList(this), this._validateNowFlag && (f.UIGlobals._layoutManager.validateClient(this), this._validateNowFlag = !1))
            };
            Object.defineProperty(a, "enabled", {
                get: function() {
                    return this._enabled
                },
                set: function(b) {
                    this._enabled = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "width", {
                get: function() {
                    return this._width
                },
                set: function(b) {
                    this._setWidth(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setWidth = function(b) {
                if (this._width != b || this._explicitWidth != b) e.prototype._setWidth.call(this, b),
                isNaN(b) ? this.invalidateSize() : this._width = b,
                this.invalidateProperties(),
                this.invalidateDisplayList(),
                this.invalidateParentSizeAndDisplayList()
            };
            Object.defineProperty(a, "height", {
                get: function() {
                    return this._height
                },
                set: function(b) {
                    this._setHeight(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setHeight = function(b) {
                if (this._height != b || this._explicitHeight != b) e.prototype._setHeight.call(this, b),
                isNaN(b) ? this.invalidateSize() : this._height = b,
                this.invalidateProperties(),
                this.invalidateDisplayList(),
                this.invalidateParentSizeAndDisplayList()
            };
            Object.defineProperty(a, "scaleX", {
                get: function() {
                    return this._scaleX
                },
                set: function(b) {
                    this._setScaleX(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setScaleX = function(b) {
                this._scaleX != b && (this._scaleX = b, this.invalidateParentSizeAndDisplayList())
            };
            Object.defineProperty(a, "scaleY", {
                get: function() {
                    return this._scaleY
                },
                set: function(b) {
                    this._setScaleY(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setScaleY = function(b) {
                this._scaleY != b && (this._scaleY = b, this.invalidateParentSizeAndDisplayList())
            };
            Object.defineProperty(a, "minWidth", {
                get: function() {
                    return this._minWidth
                },
                set: function(b) {
                    this._minWidth != b && (this._minWidth = b, this.invalidateSize())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maxWidth", {
                get: function() {
                    return this._maxWidth
                },
                set: function(b) {
                    this._maxWidth != b && (this._maxWidth = b, this.invalidateSize())
                },
                enumerable: !0,
                configurable: !0
            });
            a._getMaxWidth = function() {
                return this._maxWidth
            };
            Object.defineProperty(a, "minHeight", {
                get: function() {
                    return this._minHeight
                },
                set: function(b) {
                    this._minHeight != b && (this._minHeight = b, this.invalidateSize())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maxHeight", {
                get: function() {
                    return this._maxHeight
                },
                set: function(b) {
                    this._maxHeight != b && (this._maxHeight = b, this.invalidateSize())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "measuredWidth", {
                get: function() {
                    return this._measuredWidth
                },
                set: function(b) {
                    this._measuredWidth = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "measuredHeight", {
                get: function() {
                    return this._measuredHeight
                },
                set: function(b) {
                    this._measuredHeight = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.setActualSize = function(b, a) {
                var c = !1;
                this._width != b && (this._width = b, c = !0);
                this._height != a && (this._height = a, c = !0);
                c && (this.invalidateDisplayList(), this.dispatchResizeEvent())
            };
            Object.defineProperty(a, "x", {
                get: function() {
                    return this._x
                },
                set: function(b) {
                    this._x != b && (this._setX(b), this.invalidateProperties(), this._includeInLayout && this.parent && this.parent instanceof c && this.parent._childXYChanged())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "y", {
                get: function() {
                    return this._y
                },
                set: function(b) {
                    this._y != b && (this._setY(b), this.invalidateProperties(), this._includeInLayout && this.parent && this.parent instanceof c && this.parent._childXYChanged())
                },
                enumerable: !0,
                configurable: !0
            });
            a.invalidateProperties = function() {
                this._invalidatePropertiesFlag || (this._invalidatePropertiesFlag = !0, this.parent && f.UIGlobals._layoutManager && f.UIGlobals._layoutManager.invalidateProperties(this))
            };
            a.validateProperties = function() {
                this._invalidatePropertiesFlag && (this.commitProperties(), this._invalidatePropertiesFlag = !1)
            };
            a.invalidateSize = function() {
                this._invalidateSizeFlag || (this._invalidateSizeFlag = !0, this.parent && f.UIGlobals._layoutManager && f.UIGlobals._layoutManager.invalidateSize(this))
            };
            a.validateSize = function(b) {
                void 0 === b && (b = !1);
                if (b) for (b = 0; b < this.numChildren; b++) {
                    var a = this.getChildAt(b);
                    "validateSize" in a && a.validateSize(!0)
                }
                this._invalidateSizeFlag && (this.measureSizes() && (this.invalidateDisplayList(), this.invalidateParentSizeAndDisplayList()), this._invalidateSizeFlag = !1)
            };
            a.measureSizes = function() {
                var b = !1;
                if (!this._invalidateSizeFlag) return b;
                this.canSkipMeasurement() || (this.measure(), this.measuredWidth < this.minWidth && (this.measuredWidth = this.minWidth), this.measuredWidth > this.maxWidth && (this.measuredWidth = this.maxWidth), this.measuredHeight < this.minHeight && (this.measuredHeight = this.minHeight), this.measuredHeight > this.maxHeight && (this.measuredHeight = this.maxHeight));
                if (isNaN(this._oldPreferWidth)) this._oldPreferWidth = this.preferredWidth,
                this._oldPreferHeight = this.preferredHeight,
                b = !0;
                else {
                    if (this.preferredWidth != this._oldPreferWidth || this.preferredHeight != this._oldPreferHeight) b = !0;
                    this._oldPreferWidth = this.preferredWidth;
                    this._oldPreferHeight = this.preferredHeight
                }
                return b
            };
            a.invalidateDisplayList = function() {
                this._invalidateDisplayListFlag || (this._invalidateDisplayListFlag = !0, this.parent && f.UIGlobals._layoutManager && f.UIGlobals._layoutManager.invalidateDisplayList(this), this._setSizeDirty())
            };
            a.validateDisplayList = function() {
                if (this._invalidateDisplayListFlag) {
                    var b = 0,
                    a = 0,
                    b = this._layoutWidthExplicitlySet ? this._width: isNaN(this.explicitWidth) ? this.measuredWidth: this._explicitWidth,
                    a = this._layoutHeightExplicitlySet ? this._height: isNaN(this.explicitHeight) ? this.measuredHeight: this._explicitHeight;
                    isNaN(b) && (b = 0);
                    isNaN(a) && (a = 0);
                    this.setActualSize(b, a);
                    this.updateDisplayList(b, a);
                    this._invalidateDisplayListFlag = !1
                }
            };
            a.validateNow = function(b) {
                void 0 === b && (b = !1);
                this._validateNowFlag || null == f.UIGlobals._layoutManager ? this._validateNowFlag = !0 : f.UIGlobals._layoutManager.validateClient(this, b)
            };
            a.invalidateParentSizeAndDisplayList = function() {
                if (this.parent && this._includeInLayout && "invalidateSize" in this.parent) {
                    var b = this.parent;
                    b.invalidateSize();
                    b.invalidateDisplayList()
                }
            };
            a.updateDisplayList = function(b, a) {};
            a.canSkipMeasurement = function() {
                return ! isNaN(this._explicitWidth) && !isNaN(this._explicitHeight)
            };
            a.commitProperties = function() {
                this.oldWidth == this._width && this.oldHeight == this._height || this.dispatchResizeEvent();
                this.oldX == this.x && this.oldY == this.y || this.dispatchMoveEvent()
            };
            a.measure = function() {
                this._measuredWidth = this._measuredHeight = 0
            };
            a.dispatchMoveEvent = function() {
                this.hasEventListener(f.MoveEvent.MOVE) && f.MoveEvent.dispatchMoveEvent(this, this.oldX, this.oldY);
                this.oldX = this.x;
                this.oldY = this.y
            };
            a._childXYChanged = function() {};
            a.dispatchResizeEvent = function() {
                this.hasEventListener(f.ResizeEvent.RESIZE) && f.ResizeEvent.dispatchResizeEvent(this, this.oldWidth, this.oldHeight);
                this.oldWidth = this._width;
                this.oldHeight = this._height
            };
            Object.defineProperty(a, "includeInLayout", {
                get: function() {
                    return this._includeInLayout
                },
                set: function(b) {
                    this._includeInLayout != b && (this._includeInLayout = !0, this.invalidateParentSizeAndDisplayList(), this._includeInLayout = b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "left", {
                get: function() {
                    return this._left
                },
                set: function(b) {
                    this._left != b && (this._left = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "right", {
                get: function() {
                    return this._right
                },
                set: function(b) {
                    this._right != b && (this._right = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "top", {
                get: function() {
                    return this._top
                },
                set: function(b) {
                    this._top != b && (this._top = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "bottom", {
                get: function() {
                    return this._bottom
                },
                set: function(b) {
                    this._bottom != b && (this._bottom = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "horizontalCenter", {
                get: function() {
                    return this._horizontalCenter
                },
                set: function(b) {
                    this._horizontalCenter != b && (this._horizontalCenter = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalCenter", {
                get: function() {
                    return this._verticalCenter
                },
                set: function(b) {
                    this._verticalCenter != b && (this._verticalCenter = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "percentWidth", {
                get: function() {
                    return this._percentWidth
                },
                set: function(b) {
                    this._percentWidth != b && (this._percentWidth = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "percentHeight", {
                get: function() {
                    return this._percentHeight
                },
                set: function(b) {
                    this._percentHeight != b && (this._percentHeight = b, this.invalidateParentSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.setLayoutBoundsSize = function(b, a) {
                isNaN(b) ? (this._layoutWidthExplicitlySet = !1, b = this.preferredWidth) : this._layoutWidthExplicitlySet = !0;
                isNaN(a) ? (this._layoutHeightExplicitlySet = !1, a = this.preferredHeight) : this._layoutHeightExplicitlySet = !0;
                this.setActualSize(b / this._scaleX, a / this._scaleY)
            };
            a.setLayoutBoundsPosition = function(b, a) {
                0 > this._scaleX && (b += this.layoutBoundsWidth);
                0 > this._scaleY && (a += this.layoutBoundsHeight);
                var c = !1;
                this._x != b && (this._setX(b), c = !0);
                this._y != a && (this._setY(a), c = !0);
                c && this.dispatchMoveEvent()
            };
            Object.defineProperty(a, "preferredWidth", {
                get: function() {
                    var b = this._hasWidthSet ? this._explicitWidth: this._measuredWidth,
                    a = this._scaleX;
                    0 > a && (a = -a);
                    return b * a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "preferredHeight", {
                get: function() {
                    var b = this._hasHeightSet ? this._explicitHeight: this._measuredHeight,
                    a = this._scaleY;
                    0 > a && (a = -a);
                    return b * a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "preferredX", {
                get: function() {
                    return 0 <= this._scaleX ? this._x: this._x - this.preferredWidth
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "preferredY", {
                get: function() {
                    return 0 <= this._scaleY ? this._y: this._y - this.preferredHeight
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "layoutBoundsX", {
                get: function() {
                    return 0 <= this._scaleX ? this._x: this._x - this.layoutBoundsWidth
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "layoutBoundsY", {
                get: function() {
                    return 0 <= this._scaleY ? this._y: this._y - this.layoutBoundsHeight
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "layoutBoundsWidth", {
                get: function() {
                    var b = 0,
                    b = this._layoutWidthExplicitlySet ? this._width: this._hasWidthSet ? this._explicitWidth: this._measuredWidth,
                    a = this._scaleX;
                    0 > a && (a = -a);
                    return b * a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "layoutBoundsHeight", {
                get: function() {
                    var b = 0,
                    b = this._layoutHeightExplicitlySet ? this._height: this._hasHeightSet ? this._explicitHeight: this._measuredHeight,
                    a = this.scaleY;
                    0 > a && (a = -a);
                    return b * a
                },
                enumerable: !0,
                configurable: !0
            });
            c.prototypeCanSet = void 0;
            c.emptyStyleChain = {};
            return c
        } (d.DisplayObjectContainer);
        f.UIComponent = g;
        g.prototype.__class__ = "egret.gui.UIComponent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.ABOVE = "above";
            e.BELOW = "below";
            e.CENTER = "center";
            e.TOP_LEFT = "topLeft";
            e.LEFT = "left";
            e.RIGHT = "right";
            e.SCREEN_CENTER = "screenCenter";
            return e
        } ();
        d.PopUpPosition = g;
        g.prototype.__class__ = "egret.gui.PopUpPosition"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.AUTO = "auto";
            e.OFF = "off";
            e.ON = "on";
            return e
        } ();
        d.ScrollPolicy = g;
        g.prototype.__class__ = "egret.gui.ScrollPolicy"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a) {
                void 0 === a && (a = null);
                e.call(this);
                this.generator = null;
                this.generator = a
            }
            __extends(c, e);
            c.prototype.newInstance = function() {
                return new this.generator
            };
            return c
        } (d.HashObject);
        f.ClassFactory = g;
        g.prototype.__class__ = "egret.gui.ClassFactory"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.DOWN = 40;
            e.END = 35;
            e.HOME = 36;
            e.LEFT = 37;
            e.PAGE_DOWN = 34;
            e.PAGE_LEFT = 9111;
            e.PAGE_RIGHT = 9112;
            e.PAGE_UP = 33;
            e.RIGHT = 39;
            e.UP = 38;
            return e
        } ();
        d.NavigationUnit = g;
        g.prototype.__class__ = "egret.gui.NavigationUnit"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.initialize = function(b) {};
            a.apply = function(b) {};
            a.remove = function(b) {};
            a.initializeFromObject = function(b) {
                for (var a in b) this[a] = b[a];
                return this
            };
            return c
        } (d.HashObject);
        f.OverrideBase = g;
        g.prototype.__class__ = "egret.gui.OverrideBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b, a, d, f) {
                e.call(this);
                this.propertyName = "";
                this.position = c.LAST;
                this.target = this.relativeTo = null;
                this.target = b;
                this.propertyName = a;
                this.position = d;
                this.relativeTo = f
            }
            __extends(c, e);
            var a = c.prototype;
            a.initialize = function(b) {
                if ((b = b[this.target]) && !(b instanceof d.SkinnableComponent) && "_initialize" in b) try {
                    b._initialize()
                } catch(a) {}
            };
            a.apply = function(b) {
                var a, e;
                try {
                    e = b[this.relativeTo]
                } catch(d) {}
                var f = b[this.target];
                b = this.propertyName ? b[this.propertyName] : b;
                if (f && b) {
                    switch (this.position) {
                    case c.FIRST:
                        a = 0;
                        break;
                    case c.LAST:
                        a = -1;
                        break;
                    case c.BEFORE:
                        a = b.getElementIndex(e);
                        break;
                    case c.AFTER:
                        a = b.getElementIndex(e) + 1
                    } - 1 == a && (a = b.numElements);
                    b.addElementAt(f, a)
                }
            };
            a.remove = function(b) {
                var a = null == this.propertyName || "" == this.propertyName ? b: b[this.propertyName]; (b = b[this.target]) && a && -1 != a.getElementIndex(b) && a.removeElement(b)
            };
            c.FIRST = "first";
            c.LAST = "last";
            c.BEFORE = "before";
            c.AFTER = "after";
            return c
        } (d.OverrideBase);
        d.AddItems = g;
        g.prototype.__class__ = "egret.gui.AddItems"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b, a, c) {
                e.call(this);
                this.oldValue = this.value = this.target = this.name = null;
                this.target = b;
                this.name = a;
                this.value = c
            }
            __extends(c, e);
            var a = c.prototype;
            a.apply = function(b) {
                b = null == this.target || "" == this.target ? b: b[this.target];
                null != b && (this.oldValue = b[this.name], this.setPropertyValue(b, this.name, this.value, this.oldValue))
            };
            a.remove = function(b) {
                b = null == this.target || "" == this.target ? b: b[this.target];
                null != b && (this.setPropertyValue(b, this.name, this.oldValue, this.oldValue), this.oldValue = null)
            };
            a.setPropertyValue = function(b, a, c, e) {
                b[a] = void 0 === c || null === c ? c: "number" == typeof e ? parseFloat(c) : "boolean" == typeof e ? this.toBoolean(c) : c
            };
            a.toBoolean = function(b) {
                return "string" == typeof b ? "true" == b.toLowerCase() : !1 != b
            };
            return c
        } (d.OverrideBase);
        d.SetProperty = g;
        g.prototype.__class__ = "egret.gui.SetProperty"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b, a, c) {
                e.call(this);
                this.target = b;
                this.name = a;
                this.value = c
            }
            __extends(c, e);
            var a = c.prototype;
            a.apply = function(b) {
                b = null == this.target || "" == this.target ? b: b[this.target];
                null != b && (this.oldValue = b.getStyle(this.name), this.setStyleValue(b, this.name, this.value, this.oldValue))
            };
            a.remove = function(b) {
                b = null == this.target || "" == this.target ? b: b[this.target];
                null != b && (this.setStyleValue(b, this.name, this.oldValue, this.oldValue), this.oldValue = null)
            };
            a.setStyleValue = function(b, a, c, e) {
                void 0 === c ? b.clearStyle(a) : null === c ? b.setStyle(a, c) : "number" == typeof e ? b.setStyle(a, parseFloat(c)) : "boolean" == typeof e ? b.setStyle(a, this.toBoolean(c)) : b.setStyle(a, c)
            };
            a.toBoolean = function(b) {
                return "string" == typeof b ? "true" == b.toLowerCase() : !1 != b
            };
            return c
        } (d.OverrideBase);
        d.SetStyle = g;
        g.prototype.__class__ = "egret.gui.SetStyle"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b) {
                e.call(this);
                this.initialized = !1;
                this.name = null;
                this.name = a;
                this.overrides = b
            }
            __extends(c, e);
            c.prototype.initialize = function(a) {
                if (!this.initialized) {
                    this.initialized = !0;
                    for (var b = 0; b < this.overrides.length; b++) this.overrides[b].initialize(a)
                }
            };
            return c
        } (d.HashObject);
        f.State = g;
        g.prototype.__class__ = "egret.gui.State"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.adjustRelativeByXY = function(c, a) {
                void 0 === a && (a = null);
                if (c && (a || (a = c.parent), a)) {
                    var b = c.x,
                    h = c.y,
                    e = c.layoutBoundsHeight,
                    d = c.layoutBoundsWidth,
                    f = a.width,
                    g = a.height;
                    isNaN(c.left) || (c.left = b);
                    isNaN(c.right) || (c.right = f - b - d);
                    isNaN(c.horizontalCenter) || (c.horizontalCenter = b + 0.5 * d - 0.5 * f);
                    isNaN(c.top) || (c.top = h);
                    isNaN(c.bottom) || (c.bottom = g - h - e);
                    isNaN(c.verticalCenter) || (c.verticalCenter = 0.5 * e - 0.5 * g + h)
                }
            };
            return e
        } ();
        d.LayoutUtil = g;
        g.prototype.__class__ = "egret.gui.LayoutUtil"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = {};
        f.getScale9Grid = function(e) {
            if (g[e]) return g[e];
            if (!e) return null;
            var c = e.split(","),
            c = new d.Rectangle(parseInt(c[0]), parseInt(c[1]), parseInt(c[2]), parseInt(c[3]));
            return g[e] = c
        }
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        d.setProperties = function(d, e, c) {
            for (var a = e.length,
            b = 0; b < a; b++) d[e[b]] = c[b];
            return d
        }
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e(a) {
                void 0 === a && (a = 0.5);
                this._easeInFraction = 0.5;
                this.easeInFraction = a
            }
            var c = e.prototype;
            Object.defineProperty(c, "easeInFraction", {
                get: function() {
                    return this._easeInFraction
                },
                set: function(a) {
                    this._easeInFraction = a
                },
                enumerable: !0,
                configurable: !0
            });
            c.ease = function(a) {
                var b = 1 - this._easeInFraction;
                return a <= this._easeInFraction && 0 < this._easeInFraction ? this._easeInFraction * this._easeIn(a / this._easeInFraction) : this._easeInFraction + b * this._easeOut((a - this._easeInFraction) / b)
            };
            c._easeIn = function(a) {
                return a
            };
            c._easeOut = function(a) {
                return a
            };
            return e
        } ();
        d.EaseInOutBase = g;
        g.prototype.__class__ = "egret.gui.EaseInOutBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            var c = e.prototype;
            c.ease = function(a) {
                return this.easeOut(a, 0, 1, 1)
            };
            c.easeOut = function(a, b, c, e) {
                return (a /= e) < 1 / 2.75 ? 7.5625 * c * a * a + b: a < 2 / 2.75 ? c * (7.5625 * (a -= 1.5 / 2.75) * a + 0.75) + b: a < 2.5 / 2.75 ? c * (7.5625 * (a -= 2.25 / 2.75) * a + 0.9375) + b: c * (7.5625 * (a -= 2.625 / 2.75) * a + 0.984375) + b
            };
            return e
        } ();
        d.Bounce = g;
        g.prototype.__class__ = "egret.gui.Bounce"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            var c = e.prototype;
            c.ease = function(a) {
                return this.easeOut(a, 0, 1, 1)
            };
            c.easeOut = function(a, b, c, e, d, f) {
                void 0 === d && (d = 0);
                void 0 === f && (f = 0);
                if (0 == a) return b;
                if (1 == (a /= e)) return b + c;
                f || (f = 0.3 * e);
                var g; ! d || d < Math.abs(c) ? (d = c, g = f / 4) : g = f / (2 * Math.PI) * Math.asin(c / d);
                return d * Math.pow(2, -10 * a) * Math.sin(2 * (a * e - g) * Math.PI / f) + c + b
            };
            return e
        } ();
        d.Elastic = g;
        g.prototype.__class__ = "egret.gui.Elastic"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e(a, b) {
                void 0 === a && (a = 0);
                void 0 === b && (b = 0);
                this._easeOutFraction = this._easeInFraction = 0;
                this.easeInFraction = a;
                this.easeOutFraction = b
            }
            var c = e.prototype;
            Object.defineProperty(c, "easeInFraction", {
                get: function() {
                    return this._easeInFraction
                },
                set: function(a) {
                    this._easeInFraction = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "easeOutFraction", {
                get: function() {
                    return this._easeOutFraction
                },
                set: function(a) {
                    this._easeOutFraction = a
                },
                enumerable: !0,
                configurable: !0
            });
            c.ease = function(a) {
                if (0 == this.easeInFraction && 0 == this.easeOutFraction) return a;
                var b = 1 / (1 - this.easeInFraction / 2 - this.easeOutFraction / 2);
                return a < this.easeInFraction ? a / this.easeInFraction * b * a / 2 : a > 1 - this.easeOutFraction ? (a -= 1 - this.easeOutFraction, b * (1 - this.easeInFraction / 2 - this.easeOutFraction + a * (2 - a / this.easeOutFraction) / 2)) : b * (a - this.easeInFraction / 2)
            };
            return e
        } ();
        d.Linear = g;
        g.prototype.__class__ = "egret.gui.Linear"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b, a) {
                void 0 === b && (b = 0.5);
                void 0 === a && (a = 2);
                e.call(this, b);
                this.exponent = a
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "exponent", {
                get: function() {
                    return this._exponent
                },
                set: function(b) {
                    this._exponent = b
                },
                enumerable: !0,
                configurable: !0
            });
            a._easeIn = function(b) {
                return Math.pow(b, this._exponent)
            };
            a._easeOut = function(b) {
                return 1 - Math.pow(1 - b, this._exponent)
            };
            return c
        } (d.EaseInOutBase);
        d.Power = g;
        g.prototype.__class__ = "egret.gui.Power"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = 0.5);
                e.call(this, b)
            }
            __extends(c, e);
            var a = c.prototype;
            a._easeIn = function(b) {
                return 1 - Math.cos(b * Math.PI / 2)
            };
            a._easeOut = function(b) {
                return Math.sin(b * Math.PI / 2)
            };
            return c
        } (d.EaseInOutBase);
        d.Sine = g;
        g.prototype.__class__ = "egret.gui.Sine"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            var c = e.prototype;
            e.getInstance = function() {
                e.theInstance || (e.theInstance = new e);
                return e.theInstance
            };
            c.interpolate = function(a, b, c) {
                return 0 == a ? b: 1 == a ? c: b + a * (c - b)
            };
            c.increment = function(a, b) {
                return a + b
            };
            c.decrement = function(a, b) {
                return a - b
            };
            return e
        } ();
        d.NumberInterpolator = g;
        g.prototype.__class__ = "egret.gui.NumberInterpolator"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.LOOP = "loop";
            e.REVERSE = "reverse";
            return e
        } ();
        d.RepeatBehavior = g;
        g.prototype.__class__ = "egret.gui.RepeatBehavior"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e(c, a, b) {
                void 0 === c && (c = NaN);
                void 0 === a && (a = null);
                void 0 === b && (b = null);
                this.value = a;
                this.time = c;
                this.valueBy = b
            }
            e.prototype.clone = function() {
                var c = new e(this.time, this.value, this.valueBy);
                c.easer = this.easer;
                c._timeFraction = this._timeFraction;
                return c
            };
            return e
        } ();
        d.Keyframe = g;
        g.prototype.__class__ = "egret.gui.Keyframe"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e(a) {
                void 0 === a && (a = null);
                this.interpolator = d.NumberInterpolator.getInstance();
                this.property = a
            }
            var c = e.prototype;
            c.clone = function() {
                var a = new e(this.property);
                a.interpolator = this.interpolator;
                if (null !== this.keyframes) {
                    a.keyframes = [];
                    for (var b = 0; b < this.keyframes.length; ++b) a.keyframes[b] = this.keyframes[b].clone()
                }
                return a
            };
            c._scaleKeyframes = function(a) {
                for (var b = this.keyframes.length,
                c = 0; c < b; ++c) {
                    var e = this.keyframes[c];
                    e._timeFraction = e.time / a
                }
            };
            c.getValue = function(a) {
                if (!this.keyframes) return null;
                var b = this.keyframes.length;
                if (2 == b && 1 == this.keyframes[1]._timeFraction) {
                    var c = null != this.keyframes[1].easer ? this.keyframes[1].easer.ease(a) : a;
                    return this.interpolator.interpolate(c, this.keyframes[0].value, this.keyframes[1].value)
                }
                isNaN(this.keyframes[0]._timeFraction) && this._scaleKeyframes(this.keyframes[this.keyframes.length - 1].time);
                for (var e = 0,
                c = this.keyframes[0].value, d = 1; d < b; ++d) {
                    var f = this.keyframes[d];
                    if (a >= e && a < f._timeFraction) return a = (a - e) / (f._timeFraction - e),
                    a = null != f.easer ? f.easer.ease(a) : a,
                    this.interpolator.interpolate(a, c, f.value);
                    e = f._timeFraction;
                    c = f.value
                }
                return this.keyframes[b - 1].value
            };
            return e
        } ();
        d.MotionPath = g;
        g.prototype.__class__ = "egret.gui.MotionPath"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b, a, c, g) {
                void 0 === b && (b = null);
                void 0 === a && (a = null);
                void 0 === c && (c = null);
                void 0 === g && (g = null);
                e.call(this);
                this.property = b;
                this.keyframes = [new d.Keyframe(0, a), new d.Keyframe(NaN, c, g)]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "valueFrom", {
                get: function() {
                    return this.keyframes[0].value
                },
                set: function(b) {
                    this.keyframes[0].value = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "valueTo", {
                get: function() {
                    return this.keyframes[this.keyframes.length - 1].value
                },
                set: function(b) {
                    this.keyframes[this.keyframes.length - 1].value = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "valueBy", {
                get: function() {
                    return this.keyframes[this.keyframes.length - 1].valueBy
                },
                set: function(b) {
                    this.keyframes[this.keyframes.length - 1].valueBy = b
                },
                enumerable: !0,
                configurable: !0
            });
            return c
        } (d.MotionPath);
        d.SimpleMotionPath = g;
        g.prototype.__class__ = "egret.gui.SimpleMotionPath"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e(a, b) {
                this._easer = e.defaultEaser;
                this.repeatFunction = this.stopFunction = this.updateFunction = this.endFunction = this.startFunction = this.thisObject = null;
                this.id = -1;
                this.started = this._invertValues = this._doReverse = this._isPlaying = this._doSeek = !1;
                this.delayedStartTime = this.delayTime = -1;
                this._playheadTime = 0;
                this.duration = 500;
                this._repeatBehavior = f.RepeatBehavior.LOOP;
                this._repeatCount = 1;
                this._startDelay = this._repeatDelay = 0;
                this.interpolator = null;
                this._cycleTime = 0;
                this.updateFunction = a;
                this.thisObject = b
            }
            var c = e.prototype;
            Object.defineProperty(c, "easer", {
                get: function() {
                    return this._easer
                },
                set: function(a) {
                    a || (a = e.defaultEaser);
                    this._easer = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "playheadTime", {
                get: function() {
                    return this._playheadTime + this.startDelay
                },
                set: function(a) {
                    this._invertValues = !1;
                    this.seek(a, !0)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "isPlaying", {
                get: function() {
                    return this._isPlaying
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "repeatBehavior", {
                get: function() {
                    return this._repeatBehavior
                },
                set: function(a) {
                    this._repeatBehavior = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "repeatCount", {
                get: function() {
                    return this._repeatCount
                },
                set: function(a) {
                    this._repeatCount = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "repeatDelay", {
                get: function() {
                    return this._repeatDelay
                },
                set: function(a) {
                    this._repeatDelay = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "startDelay", {
                get: function() {
                    return this._startDelay
                },
                set: function(a) {
                    this._startDelay = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "cycleTime", {
                get: function() {
                    return this._cycleTime
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "cycleFraction", {
                get: function() {
                    return this._cycleFraction
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "playReversed", {
                get: function() {
                    return this._playReversed
                },
                set: function(a) {
                    this._isPlaying && this._invertValues != a && (this._invertValues = a, this.seek(this.duration - this._cycleTime, !0));
                    this._playReversed = this._doReverse = a
                },
                enumerable: !0,
                configurable: !0
            });
            e.addAnimation = function(a) {
                if (a.motionPaths && 0 < a.motionPaths.length && a.motionPaths[0] && ("width" == a.motionPaths[0].property || "height" == a.motionPaths[0].property)) {
                    e.activeAnimations.splice(0, 0, a);
                    a.id = 0;
                    for (var b = 1; b < e.activeAnimations.length; ++b) e.activeAnimations[b].id = b
                } else a.id = e.activeAnimations.length,
                e.activeAnimations.push(a);
                e.timer || (e.pulse(), e.timer = new d.Timer(e.TIMER_RESOLUTION), e.timer.addEventListener(d.TimerEvent.TIMER, e.timerHandler, e), e.timer.start());
                e.intervalTime = e.currentTime;
                a.cycleStartTime = e.intervalTime
            };
            e.removeAnimationAt = function(a) {
                void 0 === a && (a = 0);
                if (0 <= a && a < e.activeAnimations.length) {
                    e.activeAnimations.splice(a, 1);
                    for (var b = e.activeAnimations.length; a < b; a++) e.activeAnimations[a].id--
                }
                e.stopTimerIfDone()
            };
            e.removeAnimation = function(a) {
                e.removeAnimationAt(a.id)
            };
            e.timerHandler = function(a) {
                e.intervalTime = e.pulse();
                for (a = 0; a < e.activeAnimations.length;) {
                    var b = !0,
                    c = e.activeAnimations[a];
                    c && (b = !c.doInterval());
                    b && ++a
                }
                for (; 0 < e.delayedStartAnims.length;) if (a = e.delayedStartAnims[0], a.delayedStartTime < e.currentTime) a.playReversed ? a.end() : a.start();
                else break
            };
            c.doInterval = function() {
                var a = !1,
                b = !1;
                if (this._isPlaying || this._doSeek) {
                    var c = e.intervalTime - this.cycleStartTime;
                    this._playheadTime = e.intervalTime - this.startTime;
                    if (c >= this.duration) {
                        var F = 2;
                        0 < this.duration + this.repeatDelay && (F += Math.floor((this._playheadTime - this.duration) / (this.duration + this.repeatDelay)));
                        if (0 == this.repeatCount || F <= this.repeatCount) if (0 == this.repeatDelay) this._cycleTime = c % this.duration,
                        this.cycleStartTime = e.intervalTime - this._cycleTime,
                        c = this._cycleTime,
                        this.repeatBehavior == f.RepeatBehavior.REVERSE && (this._invertValues = 1 < this.repeatCount ? !(F % 2) : !this._invertValues),
                        b = !0;
                        else return this._doSeek ? (this._cycleTime = c % (this.duration + this.repeatDelay), this._cycleTime > this.duration && (this._cycleTime = this.duration), this.calculateValue(this._cycleTime), this.sendUpdateEvent()) : (this._cycleTime = this.duration, this.calculateValue(this._cycleTime), this.sendUpdateEvent(), e.removeAnimation(this), a = new d.Timer(this.repeatDelay, 1), a.addEventListener(d.TimerEvent.TIMER, this.repeat, this), a.start()),
                        !1;
                        else c > this.duration && (this._playheadTime = c = this.duration)
                    }
                    this._cycleTime = c;
                    this.calculateValue(c);
                    c >= this.duration && !this._doSeek ? this.playReversed && 0 != this.startDelay ? (this.stopAnimation(), this.addToDelayedAnimations(this.startDelay)) : (this.end(), a = !0) : (b && this.sendAnimationEvent("repeatFunction"), this.sendUpdateEvent())
                }
                return a
            };
            c.sendUpdateEvent = function() {
                this.sendAnimationEvent("updateFunction")
            };
            c.sendAnimationEvent = function(a) {
                null != this[a] && this[a].call(this.thisObject, this)
            };
            c.calculateValue = function(a) {
                var b = 0;
                this.currentValue = {};
                if (0 == this.duration) for (b = 0; b < this.motionPaths.length; ++b) this.currentValue[this.motionPaths[b].property] = this._invertValues ? this.motionPaths[b].keyframes[0].value: this.motionPaths[b].keyframes[this.motionPaths[b].keyframes.length - 1].value;
                else if (this._invertValues && (a = this.duration - a), this._cycleFraction = this.easer.ease(a / this.duration), this.motionPaths) for (b = 0; b < this.motionPaths.length; ++b) this.currentValue[this.motionPaths[b].property] = this.motionPaths[b].getValue(this._cycleFraction)
            };
            c.removeFromDelayedAnimations = function() {
                if (0 <= this.delayedStartTime) {
                    for (var a = 0; a < e.delayedStartAnims.length; ++a) if (e.delayedStartAnims[a] == this) {
                        e.delayedStartAnims.splice(a, 1);
                        break
                    }
                    this.delayedStartTime = -1
                }
            };
            c.end = function() {
                0 < this.startDelay && 0 < e.delayedStartAnims.length && this.removeFromDelayedAnimations();
                this.started || this.sendAnimationEvent("startFunction");
                1 < this.repeatCount && "reverse" == this.repeatBehavior && 0 == this.repeatCount % 2 && (this._invertValues = !0);
                this._doReverse && 0 < this.startDelay || (this.calculateValue(this.duration), this.sendUpdateEvent());
                this.sendAnimationEvent("endFunction");
                this.isPlaying ? this.stopAnimation() : e.stopTimerIfDone()
            };
            e.stopTimerIfDone = function() {
                e.timer && 0 == e.activeAnimations.length && 0 == e.delayedStartAnims.length && (e.intervalTime = NaN, e.timer.reset(), e.timer = null)
            };
            c.addToDelayedAnimations = function(a) {
                e.timer || (e.pulse(), e.timer = new d.Timer(e.TIMER_RESOLUTION), e.timer.addEventListener(d.TimerEvent.TIMER, e.timerHandler, e), e.timer.start());
                a = e.currentTime + a;
                for (var b = -1,
                c = 0; c < e.delayedStartAnims.length; ++c) if (a < e.delayedStartAnims[c].delayedStartTime) {
                    b = c;
                    break
                }
                0 <= b ? e.delayedStartAnims.splice(b, 0, this) : e.delayedStartAnims.push(this);
                this.delayedStartTime = a
            };
            c.play = function() {
                this.stopAnimation();
                for (var a = 0,
                b = 0,
                a = 0; a < this.motionPaths.length; ++a) {
                    var c = this.motionPaths[a].keyframes;
                    isNaN(c[0].time) ? c[0].time = 0 : 0 < c[0].time && (b = c[0].time, c.splice(0, 0, new f.Keyframe(0, null)), c.splice(1, 0, new f.Keyframe(b - 1, null)), this.playReversed && (c[0].value = c[2].value, c[1].value = c[2].value));
                    for (b = 1; b < c.length; ++b) isNaN(c[b].time) && (c[b].time = this.duration)
                }
                for (a = 0; a < this.motionPaths.length; ++a) this.motionPaths[a]._scaleKeyframes(this.duration);
                this._doReverse && (this._invertValues = !0);
                0 < this.startDelay && !this.playReversed ? this.addToDelayedAnimations(this.startDelay) : this.start()
            };
            c.seek = function(a, b) {
                void 0 === b && (b = !1);
                this.startTime = this.cycleStartTime = e.intervalTime - a;
                this._doSeek = !0;
                if (!this._isPlaying || this.playReversed) {
                    var c = this._isPlaying;
                    e.intervalTime = e.currentTime;
                    if (b && 0 < this.startDelay && 0 <= this.delayedStartTime) {
                        this.removeFromDelayedAnimations();
                        c = a - this.startDelay;
                        this.playReversed && (c -= this.duration);
                        0 > c ? this.addToDelayedAnimations(this.startDelay - a) : (a -= this.startDelay, this.isPlaying || this.start(), this.startTime = this.cycleStartTime = e.intervalTime - a, this.doInterval(), this._doSeek = !1);
                        return
                    }
                    c || (this.sendAnimationEvent("startFunction"), this.setupInterpolation());
                    this.startTime = this.cycleStartTime = e.intervalTime - a
                }
                this.doInterval();
                this._doSeek = !1
            };
            c.setupInterpolation = function() {
                if (this.interpolator && this.motionPaths) for (var a = 0; a < this.motionPaths.length; ++a) this.motionPaths[a].interpolator = this.interpolator
            };
            c.reverse = function() {
                this._isPlaying ? (this._doReverse = !1, this.seek(this.duration - this._cycleTime), this._invertValues = !this._invertValues) : this._doReverse = !this._doReverse
            };
            c.pause = function() {
                0 <= this.delayedStartTime && (this.delayTime = this.delayedStartTime - e.currentTime, this.removeFromDelayedAnimations());
                this._isPlaying = !1
            };
            c.stopAnimation = function() {
                this.removeFromDelayedAnimations();
                0 <= this.id && (e.removeAnimationAt(this.id), this.id = -1, this._isPlaying = this._invertValues = !1)
            };
            c.stop = function() {
                this.stopAnimation();
                this.sendAnimationEvent("stopFunction")
            };
            c.resume = function() {
                this._isPlaying = !0;
                0 <= this.delayTime ? this.addToDelayedAnimations(this.delayTime) : (this.cycleStartTime = e.intervalTime - this._cycleTime, this.startTime = e.intervalTime - this._playheadTime, this._doReverse && (this.reverse(), this._doReverse = !1))
            };
            c.repeat = function(a) {
                this.repeatBehavior == f.RepeatBehavior.REVERSE && (this._invertValues = !this._invertValues);
                this.calculateValue(0);
                this.sendAnimationEvent("repeatFunction");
                this.sendUpdateEvent();
                e.addAnimation(this)
            };
            c.start = function(a) {
                a = 0;
                if (!this.playReversed && 0 <= this.delayedStartTime) {
                    var b = e.currentTime - this.delayedStartTime;
                    0 < b && (a = Math.min(b, this.duration));
                    this.removeFromDelayedAnimations()
                }
                this.sendAnimationEvent("startFunction");
                this.setupInterpolation();
                this.calculateValue(0);
                this.sendUpdateEvent();
                e.addAnimation(this);
                this.startTime = this.cycleStartTime;
                this._isPlaying = !0;
                0 < a && this.seek(a);
                this.started = !0
            };
            e.pulse = function() {
                if (0 > e.startTime) return e.startTime = d.getTimer(),
                e._currentTime = 0,
                e._currentTime;
                e._currentTime = d.getTimer() - e.startTime;
                return e._currentTime
            };
            Object.defineProperty(e, "currentTime", {
                get: function() {
                    return 0 > e._currentTime ? e.pulse() : e._currentTime
                },
                enumerable: !0,
                configurable: !0
            });
            e.TIMER_RESOLUTION = 1E3 / 60;
            e.defaultEaser = new f.Sine(0.5);
            e.intervalTime = NaN;
            e.activeAnimations = [];
            e.timer = null;
            e.delayedStartAnims = [];
            e.startTime = -1;
            e._currentTime = -1;
            return e
        } ();
        f.Animation = g;
        g.prototype.__class__ = "egret.gui.Animation"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                e.call(this);
                this.delayElapsedTime = this.delayStartTime = 0;
                this.durationExplicitlySet = !1;
                this._playCount = 0;
                this._stopRepeat = !1;
                this._duration = 500;
                this._startDelay = this._repeatDelay = this._repeatCount = 0;
                this.target = b
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "_actualDuration", {
                get: function() {
                    var b = NaN;
                    0 < this.repeatCount && (b = this.duration * this.repeatCount + this.repeatDelay * (this.repeatCount - 1) + this.startDelay);
                    return b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "duration", {
                get: function() {
                    return ! this.durationExplicitlySet && this.parentCompositeEffectInstance ? this.parentCompositeEffectInstance.duration: this._duration
                },
                set: function(b) {
                    this.durationExplicitlySet = !0;
                    this._duration = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "effect", {
                get: function() {
                    return this._effect
                },
                set: function(b) {
                    this._effect = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "playheadTime", {
                get: function() {
                    return Math.max(this._playCount - 1, 0) * (this.duration + this.repeatDelay) + (this.playReversed ? 0 : this.startDelay)
                },
                set: function(b) {
                    this._setPlayheadTime(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayheadTime = function(b) {
                this._delayTimer && this._delayTimer.running && (this._delayTimer.reset(), b < this.startDelay ? (this._delayTimer = new d.Timer(this.startDelay - b, 1), this.delayStartTime = d.getTimer(), this._delayTimer.addEventListener(d.TimerEvent.TIMER, this.delayTimerHandler, this), this._delayTimer.start()) : (this._playCount = 0, this.play()))
            };
            Object.defineProperty(a, "playReversed", {
                get: function() {
                    return this._playReversed
                },
                set: function(b) {
                    this._setPlayReversed(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayReversed = function(b) {
                this._playReversed = b
            };
            Object.defineProperty(a, "repeatCount", {
                get: function() {
                    return this._repeatCount
                },
                set: function(b) {
                    this._repeatCount = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "repeatDelay", {
                get: function() {
                    return this._repeatDelay
                },
                set: function(b) {
                    this._repeatDelay = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "startDelay", {
                get: function() {
                    return this._startDelay
                },
                set: function(b) {
                    this._startDelay = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "target", {
                get: function() {
                    return this._target
                },
                set: function(b) {
                    this._target = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.startEffect = function() {
                0 < this.startDelay && !this.playReversed ? (this._delayTimer = new d.Timer(this.startDelay, 1), this.delayStartTime = d.getTimer(), this._delayTimer.addEventListener(d.TimerEvent.TIMER, this.delayTimerHandler, this), this._delayTimer.start()) : this.play()
            };
            a.play = function() {
                this._playCount++;
                this.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_START, !1, !1, this));
                this.target && "dispatchEvent" in this.target && this.target.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_START, !1, !1, this))
            };
            a.pause = function() {
                this._delayTimer && this._delayTimer.running && !isNaN(this.delayStartTime) && (this._delayTimer.stop(), this.delayElapsedTime = d.getTimer() - this.delayStartTime)
            };
            a.stop = function() {
                this._delayTimer && this._delayTimer.reset();
                this._stopRepeat = !0;
                this.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_STOP, !1, !1, this));
                this.target && "dispatchEvent" in this.target && this.target.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_STOP, !1, !1, this));
                this.finishEffect()
            };
            a.resume = function() { ! this._delayTimer || this._delayTimer.running || isNaN(this.delayElapsedTime) || (this._delayTimer.delay = this.playReversed ? this.delayElapsedTime: this._delayTimer.delay - this.delayElapsedTime, this.delayStartTime = d.getTimer(), this._delayTimer.start())
            };
            a.reverse = function() {
                0 < this.repeatCount && (this._playCount = this.repeatCount - this._playCount + 1)
            };
            a.end = function() {
                this._delayTimer && this._delayTimer.reset();
                this._stopRepeat = !0;
                this.finishEffect()
            };
            a.finishEffect = function() {
                this._playCount = 0;
                this.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_END, !1, !1, this));
                this.target && "dispatchEvent" in this.target && this.target.dispatchEvent(new f.EffectEvent(f.EffectEvent.EFFECT_END, !1, !1, this))
            };
            a.finishRepeat = function() { ! this._stopRepeat && 0 != this._playCount && (this._playCount < this.repeatCount || 0 == this.repeatCount) ? 0 < this.repeatDelay ? (this._delayTimer = new d.Timer(this.repeatDelay, 1), this.delayStartTime = d.getTimer(), this._delayTimer.addEventListener(d.TimerEvent.TIMER, this.delayTimerHandler, this), this._delayTimer.start()) : this.play() : this.finishEffect()
            };
            a._playWithNoDuration = function() {
                this.duration = 0;
                this.repeatCount = 1;
                this.startDelay = this.repeatDelay = 0;
                this.startEffect()
            };
            a.delayTimerHandler = function(b) {
                this._delayTimer.reset();
                this.delayElapsedTime = this.delayStartTime = NaN;
                this.play()
            };
            return c
        } (d.EventDispatcher);
        f.EffectInstance = g;
        g.prototype.__class__ = "egret.gui.EffectInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e() {}
            e.transformAround = function(c, a, b, h, f, g) {
                void 0 === b && (b = null);
                void 0 === h && (h = NaN);
                void 0 === f && (f = NaN);
                void 0 === g && (g = NaN);
                if (null == b && null != a) {
                    d.Point.identity.x = a.x;
                    d.Point.identity.y = a.y;
                    var t = e.transformPointToParent(c, d.Point.identity)
                }
                isNaN(g) || (c.rotation = g);
                isNaN(h) || (c.scaleX = h);
                isNaN(f) || (c.scaleY = f);
                null == a ? null != b && (c.x = b.x, c.y = b.y) : (d.Point.identity.x = a.x, d.Point.identity.y = a.y, a = e.transformPointToParent(c, d.Point.identity), null != b ? (c.x += b.x - a.x, c.y += b.y - a.y) : (c.x += t.x - a.x, c.y += t.y - a.y))
            };
            e.transformPointToParent = function(c, a) {
                void 0 === a && (a = null);
                var b = new d.Point;
                a && (b.x = a.x, b.y = a.y);
                c.parent && (c.localToGlobal(b.x, b.y, b), c.parent.globalToLocal(b.x, b.y, b));
                return b
            };
            return e
        } ();
        f.TransformUtil = g;
        g.prototype.__class__ = "egret.gui.TransformUtil"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                e.call(this, b);
                this._activeEffectQueue = [];
                this._playheadTime = 0;
                this._childSets = []
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "_actualDuration", {
                get: function() {
                    var b = NaN;
                    0 < this.repeatCount && (b = this._durationWithoutRepeat * this.repeatCount + this.repeatDelay * (this.repeatCount - 1) + this.startDelay);
                    return b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "playheadTime", {
                get: function() {
                    return this._playheadTime
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayheadTime = function(b) {
                this._timerAnimation ? this._timerAnimation.playheadTime = b: this._playheadTime = b;
                e.prototype._setPlayheadTime.call(this, b)
            };
            Object.defineProperty(a, "_durationWithoutRepeat", {
                get: function() {
                    return 0
                },
                enumerable: !0,
                configurable: !0
            });
            a.play = function() {
                this._timerAnimation = new d.Animation(this.animationUpdate, this);
                this._timerAnimation.duration = this._durationWithoutRepeat;
                this._timerAnimation.motionPaths = [new d.SimpleMotionPath("timer", 0, 0)];
                this._timerAnimation.endFunction = this.animationEnd;
                this._timerAnimation.play();
                e.prototype.play.call(this)
            };
            a.pause = function() {
                e.prototype.pause.call(this);
                this._timerAnimation && this._timerAnimation.pause()
            };
            a.stop = function() {
                e.prototype.stop.call(this);
                this._timerAnimation && this._timerAnimation.stop()
            };
            a.end = function() {
                e.prototype.end.call(this);
                this._timerAnimation && this._timerAnimation.end()
            };
            a.resume = function() {
                e.prototype.resume.call(this);
                this._timerAnimation && this._timerAnimation.resume()
            };
            a.reverse = function() {
                e.prototype.reverse.call(this);
                this._setPlayReversed(!this.playReversed);
                this._timerAnimation && this._timerAnimation.reverse()
            };
            a.finishEffect = function() {
                this._activeEffectQueue = null;
                e.prototype.finishEffect.call(this)
            };
            a.addChildSet = function(b) {
                if (b) {
                    var a = b.length;
                    if (0 < a) {
                        this._childSets ? this._childSets.push(b) : this._childSets = [b];
                        for (var c = 0; c < a; c++) b[c].addEventListener(d.EffectEvent.EFFECT_END, this._effectEndHandler, this),
                        b[c].parentCompositeEffectInstance = this
                    }
                }
            };
            a._playWithNoDuration = function() {
                e.prototype._playWithNoDuration.call(this);
                this.end()
            };
            a.animationUpdate = function(b) {
                this._playheadTime = this._timerAnimation ? this._timerAnimation.playheadTime: this._playheadTime
            };
            a.animationEnd = function(b) {
                this._playheadTime = this._timerAnimation ? this._timerAnimation.playheadTime: this._playheadTime
            };
            a._onEffectEnd = function(b) {};
            a._effectEndHandler = function(b) {
                this._onEffectEnd(b.effectInstance)
            };
            return c
        } (d.EffectInstance);
        d.CompositeEffectInstance = g;
        g.prototype.__class__ = "egret.gui.CompositeEffectInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                e.call(this, b);
                this.isReversed = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "_durationWithoutRepeat", {
                get: function() {
                    for (var b = 0,
                    a = this._childSets.length,
                    c = 0; c < a; c++) b = Math.max(this._childSets[c][0]._actualDuration, b);
                    return b
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayheadTime = function(b) {
                this._setPlayheadTime(b);
                var a = this.effect.compositeDuration,
                c = a + this.startDelay + this.repeatDelay,
                e = a + this.repeatDelay,
                d = c + e * (this.repeatCount - 1);
                b <= c ? (b = Math.min(b - this.startDelay, a), this._playCount = 1) : b >= d && 0 != this.repeatCount ? (b = a, this._playCount = this.repeatCount) : (a = b - c, b = a % e, this._playCount = 1 + a / e);
                for (e = 0; e < this._childSets.length; e++) for (a = this._childSets[e], c = a.length, d = 0; d < c; d++) a[d].playheadTime = this.playReversed ? Math.max(0, b - (this._durationWithoutRepeat - a[d]._actualDuration)) : b;
                if (this.playReversed && null != this.replayEffectQueue && 0 < this.replayEffectQueue.length) for (b = this._durationWithoutRepeat - this.playheadTime, e = this.replayEffectQueue.length - 1; 0 <= e; e--) a = this.replayEffectQueue[e],
                b <= a._actualDuration && (null == this._activeEffectQueue && (this._activeEffectQueue = []), this._activeEffectQueue.push(a), this.replayEffectQueue.splice(e, 1), a.playReversed = this.playReversed, a.startEffect())
            };
            a.play = function() {
                this.doneEffectQueue = [];
                this._activeEffectQueue = [];
                this.replayEffectQueue = [];
                e.prototype.play.call(this);
                for (var b = 0,
                a = 0,
                b = this._childSets.length,
                a = 0; a < b; a++) for (var c = this._childSets[a], d = c.length, f = 0; f < d && null != this._activeEffectQueue; f++) {
                    var g = c[f];
                    this.playReversed && g._actualDuration < this._durationWithoutRepeat ? (this.replayEffectQueue.push(g), this.startTimer()) : (g.playReversed = this.playReversed, this._activeEffectQueue.push(g))
                }
                if (0 < this._activeEffectQueue.length) for (b = this._activeEffectQueue.slice(0), a = 0; a < b.length; a++) b[a].startEffect()
            };
            a.pause = function() {
                e.prototype.pause.call(this);
                if (this._activeEffectQueue) for (var b = this._activeEffectQueue.length,
                a = 0; a < b; a++) this._activeEffectQueue[a].pause()
            };
            a.stop = function() {
                this.stopTimer();
                if (this._activeEffectQueue) {
                    var b = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    for (var a = b.length,
                    c = 0; c < a; c++) b[c] && b[c].stop()
                }
                e.prototype.stop.call(this)
            };
            a.resume = function() {
                e.prototype.resume.call(this);
                if (this._activeEffectQueue) for (var b = this._activeEffectQueue.length,
                a = 0; a < b; a++) this._activeEffectQueue[a].resume()
            };
            a.reverse = function() {
                e.prototype.reverse.call(this);
                var b = 0,
                a = 0;
                if (this.isReversed) {
                    b = this._activeEffectQueue.length;
                    for (a = 0; a < b; a++) this._activeEffectQueue[a].reverse();
                    this.stopTimer()
                } else {
                    this.replayEffectQueue = this.doneEffectQueue.splice(0);
                    b = this._activeEffectQueue.length;
                    for (a = 0; a < b; a++) this._activeEffectQueue[a].reverse();
                    this.startTimer()
                }
                this.isReversed = !this.isReversed
            };
            a.end = function() {
                this._endEffectCalled = !0;
                this.stopTimer();
                if (this._activeEffectQueue) {
                    var b = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    for (var a = b.length,
                    c = 0; c < a; c++) b[c] && b[c].end()
                }
                e.prototype.end.call(this)
            };
            a._onEffectEnd = function(b) {
                if (!this._endEffectCalled && null != this._activeEffectQueue) {
                    for (var a = this._activeEffectQueue.length,
                    c = 0; c < a; c++) if (b == this._activeEffectQueue[c]) {
                        this.doneEffectQueue.push(b);
                        this._activeEffectQueue.splice(c, 1);
                        break
                    }
                    1 == a && this.finishRepeat()
                }
            };
            a.startTimer = function() {
                this.timer || (this.timer = new d.Timer(10), this.timer.addEventListener(d.TimerEvent.TIMER, this.timerHandler, this));
                this.timer.start()
            };
            a.stopTimer = function() {
                this.timer && this.timer.reset()
            };
            a.timerHandler = function(b) {
                b = this._durationWithoutRepeat - this.playheadTime;
                var a = this.replayEffectQueue.length;
                if (0 == a) this.stopTimer();
                else for (a -= 1; 0 <= a; a--) {
                    var c = this.replayEffectQueue[a];
                    b <= c._actualDuration && (null == this._activeEffectQueue && (this._activeEffectQueue = []), this._activeEffectQueue.push(c), this.replayEffectQueue.splice(a, 1), c.playReversed = this.playReversed, c.startEffect())
                }
            };
            return c
        } (f.CompositeEffectInstance);
        f.ParallelInstance = g;
        g.prototype.__class__ = "egret.gui.ParallelInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                e.call(this, b);
                this.currentInstanceDuration = 0;
                this.currentSetIndex = -1;
                this.isPaused = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "_durationWithoutRepeat", {
                get: function() {
                    for (var b = 0,
                    a = this._childSets.length,
                    c = 0; c < a; c++) b += this._childSets[c][0]._actualDuration;
                    return b
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayheadTime = function(b) {
                this._setPlayheadTime(b);
                var a, c;
                a = 0;
                var e = this.effect.compositeDuration;
                a = e + this.startDelay + this.repeatDelay;
                var d = e + this.repeatDelay;
                c = a + d * (this.repeatCount - 1);
                b <= a ? (b = Math.min(b - this.startDelay, e), this._playCount = 1) : b >= c && 0 != this.repeatCount ? (b = e, this._playCount = this.repeatCount) : (a = b - a, b = Math.min(a % d, e), this._playCount = 1 + a / d);
                if (this._activeEffectQueue && 0 < this._activeEffectQueue.length) {
                    c = 0;
                    var f = this._activeEffectQueue.length;
                    for (a = 0; a < f; ++a) {
                        var d = this.playReversed ? f - 1 - a: a,
                        e = c,
                        g = c + this._childSets[d][0]._actualDuration;
                        c = g;
                        if (e <= b && b <= g) {
                            this._endEffectCalled = !0;
                            if (this.currentSetIndex == d) for (a = 0; a < this.currentSet.length; a++) this.currentSet[a].playheadTime = b - e;
                            else {
                                if (d < this.currentSetIndex) if (this.playReversed) {
                                    for (a = 0; a < this.currentSet.length; a++) this.currentSet[a].end();
                                    for (a = this.currentSetIndex - 1; a > d; --a) for (f = this._activeEffectQueue[a], c = 0; c < f.length; c++) this.playReversed && (f[c].playReversed = !0),
                                    f[c].play(),
                                    f[c].end()
                                } else {
                                    for (a = 0; a < this.currentSet.length; a++) this.currentSet[a].playheadTime = 0,
                                    this.currentSet[a].stop();
                                    for (a = this.currentSetIndex - 1; a > d; --a) for (f = this._activeEffectQueue[a], c = 0; c < f.length; c++) f[c].play(),
                                    f[c].stop()
                                } else if (this.playReversed) {
                                    for (a = 0; a < this.currentSet.length; a++) this.currentSet[a].playheadTime = 0,
                                    this.currentSet[a].stop();
                                    for (c = this.currentSetIndex + 1; c < d; c++) for (f = this._activeEffectQueue[c], a = 0; a < f.length; a++) f[a].playheadTime = 0,
                                    f[a].stop()
                                } else {
                                    c = this.currentSet.concat();
                                    for (a = 0; a < c.length; a++) c[a].end();
                                    for (c = this.currentSetIndex + 1; c < d; c++) for (f = this._activeEffectQueue[c], a = 0; a < f.length; a++) f[a].play(),
                                    f[a].end()
                                }
                                this.currentSetIndex = d;
                                this.playCurrentChildSet();
                                for (c = 0; c < this.currentSet.length; c++) this.currentSet[c].playheadTime = b - e,
                                this.isPaused && this.currentSet[c].pause()
                            }
                            this._endEffectCalled = !1;
                            break
                        }
                    }
                }
            };
            a.play = function() {
                this.isPaused = !1;
                this._activeEffectQueue = [];
                this.currentSetIndex = this.playReversed ? this._childSets.length: -1;
                for (var b = 0,
                a = 0,
                b = this._childSets.length,
                a = 0; a < b; a++) this._activeEffectQueue.push(this._childSets[a]);
                e.prototype.play.call(this);
                0 == this._activeEffectQueue.length ? this.finishRepeat() : this.playNextChildSet()
            };
            a.pause = function() {
                e.prototype.pause.call(this);
                this.isPaused = !0;
                if (this.currentSet && 0 < this.currentSet.length) for (var b = this.currentSet.length,
                a = 0; a < b; a++) this.currentSet[a].pause()
            };
            a.stop = function() {
                this.isPaused = !1;
                if (this._activeEffectQueue && 0 < this._activeEffectQueue.length) {
                    var b = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var a = b[this.currentSetIndex];
                    if (a) for (var c = a.length,
                    d = 0; d < c; d++) a[d].stop();
                    a = b.length;
                    for (c = this.currentSetIndex + 1; c < a; c++) for (var d = b[c], f = d.length, g = 0; g < f; g++) {
                        var k = d[g];
                        k.effect.deleteInstance(k)
                    }
                }
                e.prototype.stop.call(this)
            };
            a.resume = function() {
                e.prototype.resume.call(this);
                this.isPaused = !1;
                if (this.currentSet && 0 < this.currentSet.length) for (var b = this.currentSet.length,
                a = 0; a < b; a++) this.currentSet[a].resume()
            };
            a.reverse = function() {
                e.prototype.reverse.call(this);
                if (this.currentSet && 0 < this.currentSet.length) for (var b = this.currentSet.length,
                a = 0; a < b; a++) this.currentSet[a].reverse()
            };
            a.end = function() {
                this._endEffectCalled = !0;
                if (this._activeEffectQueue && 0 < this._activeEffectQueue.length) {
                    var b = this._activeEffectQueue.concat();
                    this._activeEffectQueue = null;
                    var a = b[this.currentSetIndex];
                    if (a) for (var c = a.length,
                    d = 0; d < c; d++) a[d].end();
                    a = b.length;
                    for (c = this.currentSetIndex + 1; c < a; c++) for (var d = b[c], f = d.length, g = 0; g < f; g++) d[g]._playWithNoDuration()
                }
                this.isPaused = !1;
                e.prototype.end.call(this)
            };
            a._onEffectEnd = function(b) {
                for (var a = 0; a < this.currentSet.length; a++) if (b == this.currentSet[a]) {
                    this.currentSet.splice(a, 1);
                    break
                }
                this._endEffectCalled || 0 == this.currentSet.length && !1 == this.playNextChildSet() && this.finishRepeat()
            };
            a.playCurrentChildSet = function() {
                var b, a = this._activeEffectQueue[this.currentSetIndex];
                this.currentSet = [];
                for (var c = 0; c < a.length; c++) b = a[c],
                this.currentSet.push(b),
                b.playReversed = this.playReversed,
                b.startEffect();
                this.currentInstanceDuration += b._actualDuration
            };
            a.playNextChildSet = function(b) {
                if (!this.playReversed) {
                    if (!this._activeEffectQueue || this.currentSetIndex++>=this._activeEffectQueue.length - 1) return ! 1
                } else if (0 >= this.currentSetIndex--) return ! 1;
                this.playCurrentChildSet();
                return ! 0
            };
            return c
        } (d.CompositeEffectInstance);
        d.SequenceInstance = g;
        g.prototype.__class__ = "egret.gui.SequenceInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                e.call(this, b);
                this.isStyleMap = {};
                this.numUpdateListeners = this._seekTime = 0
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "motionPaths", {
                get: function() {
                    return this._motionPaths
                },
                set: function(b) {
                    this._motionPaths || (this._motionPaths = b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "easer", {
                get: function() {
                    return this._easer
                },
                set: function(b) {
                    this._easer = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "interpolator", {
                get: function() {
                    return this._interpolator
                },
                set: function(b) {
                    this._interpolator = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "repeatBehavior", {
                get: function() {
                    return this._repeatBehavior
                },
                set: function(b) {
                    this._repeatBehavior = b
                },
                enumerable: !0,
                configurable: !0
            });
            a._setPlayReversed = function(b) {
                e.prototype._setPlayReversed.call(this, b);
                b && this.animation && this.animation.reverse();
                this.reverseAnimation = b
            };
            Object.defineProperty(a, "playheadTime", {
                get: function() {
                    return this.animation ? this.animation.playheadTime: this._seekTime
                },
                set: function(b) {
                    this.animation && (this.animation.playheadTime = b);
                    this._seekTime = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.pause = function() {
                e.prototype.pause.call(this);
                this.animation && this.animation.pause()
            };
            a.stop = function() {
                e.prototype.stop.call(this);
                this.animation && this.animation.stop()
            };
            a.resume = function() {
                e.prototype.resume.call(this);
                this.animation && this.animation.resume()
            };
            a.reverse = function() {
                e.prototype.reverse.call(this);
                this.animation && this.animation.reverse();
                this.reverseAnimation = !this.reverseAnimation
            };
            a.end = function() {
                this.animation && (this.animation.end(), this.animation = null);
                e.prototype.end.call(this)
            };
            a.startEffect = function() {
                this.play()
            };
            a.play = function() {
                e.prototype.play.call(this);
                if (this.motionPaths && 0 != this.motionPaths.length) {
                    this.isStyleMap = Array(this.motionPaths.length);
                    for (var b = 0,
                    a = 0,
                    b = 0; b < this.motionPaths.length; ++b) {
                        var a = this.motionPaths[b],
                        c = a.keyframes;
                        if (c && (this.interpolator && (a.interpolator = this.interpolator), 0 < this.duration)) for (a = 0; a < c.length; ++a) isNaN(c[a].time) || (this.duration = Math.max(this.duration, c[a].time))
                    }
                    this.animation = new f.Animation(this.animationUpdate, this);
                    this.animation.duration = this.duration;
                    this.animation.startFunction = this.animationStart;
                    this.animation.endFunction = this.animationEnd;
                    this.animation.stopFunction = this.animationStop;
                    this.animation.repeatFunction = this.animationRepeat;
                    this.animation.motionPaths = this.motionPaths;
                    this.reverseAnimation && (this.animation.playReversed = !0);
                    this.animation.interpolator = this.interpolator;
                    this.animation.repeatCount = this.repeatCount;
                    this.animation.repeatDelay = this.repeatDelay;
                    this.animation.repeatBehavior = this.repeatBehavior;
                    this.animation.easer = this.easer;
                    this.animation.startDelay = this.startDelay;
                    this.animation.play();
                    0 < this._seekTime && (this.animation.playheadTime = this._seekTime)
                } else b = new d.Timer(this.duration, 1),
                b.addEventListener(d.TimerEvent.TIMER, this.noopAnimationHandler, this),
                b.start()
            };
            a.applyValues = function(b) {
                for (var a = 0; a < this.motionPaths.length; ++a) {
                    var c = this.motionPaths[a].property;
                    this.setValue(c, b.currentValue[c])
                }
            };
            a._isValidValue = function(b) {
                return "number" == typeof b && !isNaN(b) || "number" != typeof b && null !== b
            };
            a.finalizeValues = function() {
                for (var b = 0,
                a, c = 0; c < this.motionPaths.length; ++c) {
                    var e = this.motionPaths[c],
                    d = e.keyframes;
                    if (d && 0 != d.length) for (this._isValidValue(d[0].value) || (0 < d.length && this._isValidValue(d[1].valueBy) && this._isValidValue(d[1].value) ? d[0].value = e.interpolator.decrement(d[1].value, d[1].valueBy) : d[0].value = this.getCurrentValue(e.property)), a = d[0].value, b = 1; b < d.length; ++b) {
                        var f = d[b];
                        this._isValidValue(f.value) || (this._isValidValue(f.valueBy) ? f.value = e.interpolator.increment(a, f.valueBy) : b <= d.length - 2 && this._isValidValue(d[b + 1].value) && this._isValidValue(d[b + 1].valueBy) ? f.value = e.interpolator.decrement(d[b + 1].value, d[b + 1].valueBy) : f.value = a);
                        a = f.value
                    }
                }
            };
            a.animationStart = function(b) {
                if (this.disableLayout) this.cacheConstraints();
                else if (this.disabledConstraintsMap) {
                    for (var a in this.disabledConstraintsMap) this.cacheConstraint(a);
                    this.disabledConstraintsMap = null
                }
                this.finalizeValues()
            };
            a.animationUpdate = function(b) {
                this.applyValues(b);
                0 < this.numUpdateListeners && (b = new f.EffectEvent(f.EffectEvent.EFFECT_UPDATE), b.effectInstance = this, this.dispatchEvent(b))
            };
            a.animationRepeat = function(b) {
                b = new f.EffectEvent(f.EffectEvent.EFFECT_REPEAT);
                b.effectInstance = this;
                this.dispatchEvent(b)
            };
            a.animationCleanup = function() {
                this.disableLayout && this.reenableConstraints()
            };
            a.animationEnd = function(b) {
                this.animationCleanup();
                this.finishEffect()
            };
            a.animationStop = function(b) {
                this.animationCleanup()
            };
            a.noopAnimationHandler = function(b) {
                this.finishEffect()
            };
            a.addEventListener = function(b, a, c, d, g) {
                void 0 === d && (d = !1);
                void 0 === g && (g = 0);
                e.prototype.addEventListener.call(this, b, a, c, d, g);
                b == f.EffectEvent.EFFECT_UPDATE && ++this.numUpdateListeners
            };
            a.removeEventListener = function(b, a, c) {
                void 0 === c && (c = !1);
                e.prototype.removeEventListener.call(this, b, a, this, c);
                b == f.EffectEvent.EFFECT_UPDATE && --this.numUpdateListeners
            };
            a.reenableConstraint = function(b) {
                var a = this.constraintsHolder[b];
                void 0 !== a && (b in this.target ? this.target[b] = a: this.target.setStyle(b, a), delete this.constraintsHolder[b]);
                return a
            };
            a.reenableConstraints = function() {
                if (this.constraintsHolder) {
                    var b = this.reenableConstraint("left"),
                    a = this.reenableConstraint("right"),
                    c = this.reenableConstraint("top"),
                    e = this.reenableConstraint("bottom");
                    this.reenableConstraint("horizontalCenter");
                    this.reenableConstraint("verticalCenter");
                    this.constraintsHolder = null;
                    void 0 != b && void 0 != a && "explicitWidth" in this.target && (this.target.width = this.oldWidth);
                    void 0 != c && void 0 != e && "explicitHeight" in this.target && (this.target.height = this.oldHeight)
                }
            };
            a.cacheConstraint = function(b) {
                var a = b in this.target,
                c;
                c = a ? this.target[b] : this.target.getStyle(b);
                isNaN(c) || null == c || (this.constraintsHolder || (this.constraintsHolder = {}), this.constraintsHolder[b] = c, a ? this.target[b] = NaN: "setStyle" in this.target && this.target.setStyle(b, void 0));
                return c
            };
            a.cacheConstraints = function() {
                var b = this.cacheConstraint("left"),
                a = this.cacheConstraint("right"),
                c = this.cacheConstraint("top"),
                e = this.cacheConstraint("bottom");
                this.cacheConstraint("verticalCenter");
                this.cacheConstraint("horizontalCenter");
                void 0 != b && void 0 != a && "explicitWidth" in this.target && (b = this.target.width, this.oldWidth = this.target.explicitWidth, this.target.width = b);
                void 0 != c && void 0 != e && "explicitHeight" in this.target && (c = this.target.height, this.oldHeight = this.target.explicitHeight, this.target.height = c)
            };
            a._setupStyleMapEntry = function(b) {
                if (void 0 == this.isStyleMap[b]) if (b in this.target) this.isStyleMap[b] = !1;
                else try {
                    this.target.getStyle(b),
                    this.isStyleMap[b] = !0
                } catch(a) {
                    throw Error("propNotPropOrStyle");
                }
            };
            a.setValue = function(b, a) {
                this._setupStyleMapEntry(b);
                this.isStyleMap[b] ? this.target.setStyle(b, a) : this.target[b] = a
            };
            a.getCurrentValue = function(b) {
                this._setupStyleMapEntry(b);
                return this.isStyleMap[b] ? this.target.getStyle(b) : this.target[b]
            };
            return c
        } (f.EffectInstance);
        f.AnimateInstance = g;
        g.prototype.__class__ = "egret.gui.AnimateInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                e.call(this, b);
                this.started = !1;
                this.instanceStartTime = 0;
                this.currentValues = {
                    rotation: NaN,
                    scaleX: NaN,
                    scaleY: NaN,
                    translationX: NaN,
                    translationY: NaN
                };
                this.initialized = !1
            }
            __extends(c, e);
            var a = c.prototype;
            a.startEffect = function() {
                this.started || (this.started = !0, e.prototype.startEffect.call(this))
            };
            a.insertKeyframe = function(b, a, c, e) {
                void 0 === c && (c = 0);
                void 0 === e && (e = !1);
                a.time += c;
                for (c = 0; c < b.length; c++) if (b[c].time >= a.time) {
                    b[c].time == a.time ? e ? (a.time += 0.01, b.splice(c + 1, 0, a)) : (a.time -= 0.01, b.splice(c, 0, a)) : b.splice(c, 0, a);
                    return
                }
                b.push(a)
            };
            a.addMotionPath = function(b, a) {
                void 0 === a && (a = 0);
                var c = !1;
                if (this.motionPaths) {
                    var e = 0,
                    d = 0,
                    f, g = this.motionPaths.length;
                    if (a < this.instanceStartTime) {
                        for (var l = this.instanceStartTime - a,
                        e = 0; e < g; e++) for (f = this.motionPaths[e], d = 0; d < f.keyframes.length; d++) f.keyframes[d].time += l;
                        this.instanceStartTime = a
                    }
                    for (e = 0; e < g; e++) if (f = this.motionPaths[e], f.property == b.property) {
                        for (d = 0; d < b.keyframes.length; d++) this.insertKeyframe(f.keyframes, b.keyframes[d], a - this.instanceStartTime, 0 == d);
                        c = !0;
                        break
                    }
                } else this.motionPaths = [],
                this.instanceStartTime = a;
                if (!c) {
                    if (a > this.instanceStartTime) for (d = 0; d < b.keyframes.length; d++) b.keyframes[d].time += a - this.instanceStartTime;
                    this.motionPaths.push(b)
                }
                g = this.motionPaths.length;
                for (e = 0; e < g; e++) f = this.motionPaths[e],
                c = f.keyframes[f.keyframes.length - 1],
                isNaN(c.time) || (this.duration = Math.max(this.duration, c.time))
            };
            a.play = function() {
                if (this.motionPaths) {
                    var b = 0,
                    a = 0;
                    this.updateTransformCenter();
                    for (var c = 0 != this.transformCenter.x || 0 != this.transformCenter.y,
                    b = 0; b < this.motionPaths.length; ++b) {
                        var d = this.motionPaths[b];
                        if (c && ("translationX" == d.property || "translationY" == d.property)) for (a = 0; a < d.keyframes.length; ++a) {
                            var f = d.keyframes[a];
                            this._isValidValue(f.value) && (f.value = "translationX" == d.property ? f.value + this.transformCenter.x: f.value + this.transformCenter.y)
                        }
                    }
                }
                e.prototype.play.call(this)
            };
            a.animationEnd = function(b) {
                this.started = !1;
                e.prototype.animationEnd.call(this, b)
            };
            a.updateTransformCenter = function() {
                this.transformCenter || (this.transformCenter = new d.Point(0, 0));
                this.autoCenterTransform && (this.transformCenter.x = this.target.width / 2, this.transformCenter.y = this.target.height / 2)
            };
            a.getCurrentValue = function(b) {
                switch (b) {
                case "translationX":
                case "translationY":
                    this.updateTransformCenter();
                    var a = f.TransformUtil.transformPointToParent(this.target, this.transformCenter);
                    if ("translationX" == b) return a.x;
                    if ("translationY" == b) return a.y;
                    break;
                default:
                    return e.prototype.getCurrentValue.call(this, b)
                }
            };
            a.applyValues = function(b) {
                var a, e;
                for (a = 0; a < this.motionPaths.length; ++a) void 0 !== this.currentValues[this.motionPaths[a].property] ? this.currentValues[this.motionPaths[a].property] = b.currentValue[this.motionPaths[a].property] : this.setValue(this.motionPaths[a].property, b.currentValue[this.motionPaths[a].property]);
                e = isNaN(this.currentValues.rotation) ? this.getCurrentValue("rotation") : this.currentValues.rotation;
                b = isNaN(this.currentValues.scaleX) ? this.getCurrentValue("scaleX") : this.currentValues.scaleX;
                a = isNaN(this.currentValues.scaleY) ? this.getCurrentValue("scaleY") : this.currentValues.scaleY;
                c.position.x = isNaN(this.currentValues.translationX) ? this.getCurrentValue("translationX") : this.currentValues.translationX;
                c.position.y = isNaN(this.currentValues.translationY) ? this.getCurrentValue("translationY") : this.currentValues.translationY;
                this.lastTranslationPoint || (this.lastTranslationPoint = c.position.clone());
                isNaN(this.currentValues.translationX) && 0.1 > Math.abs(c.position.x - this.lastTranslationPoint.x) && (c.position.x = this.lastTranslationPoint.x);
                isNaN(this.currentValues.translationY) && 0.1 > Math.abs(c.position.y - this.lastTranslationPoint.y) && (c.position.y = this.lastTranslationPoint.y);
                this.lastTranslationPoint.x = c.position.x;
                this.lastTranslationPoint.y = c.position.y;
                f.TransformUtil.transformAround(this.target, this.transformCenter, c.position, b, a, e)
            };
            c.position = new d.Point;
            return c
        } (f.AnimateInstance);
        f.AnimateTransformInstance = g;
        g.prototype.__class__ = "egret.gui.AnimateTransformInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(a) {
                e.call(this, a)
            }
            __extends(c, e);
            c.prototype.play = function() {
                var a = this.alphaFrom,
                b = this.alphaTo;
                "visible" in this.target && !this.target.visible && (isNaN(a) && (a = this.target.alpha), isNaN(b) && (b = this.target.alpha), 0 == a && 0 != b && (this.target.alpha = 0, this.target.visible = !0));
                this.motionPaths = [new d.MotionPath("alpha")];
                this.motionPaths[0].keyframes = [new d.Keyframe(0, this.alphaFrom), new d.Keyframe(this.duration, this.alphaTo)];
                e.prototype.play.call(this)
            };
            return c
        } (d.AnimateInstance);
        d.FadeInstance = g;
        g.prototype.__class__ = "egret.gui.FadeInstance"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this);
                this._instances = [];
                this._isPaused = !1;
                this._duration = 500;
                this.durationExplicitlySet = !1;
                this._perElementOffset = 0;
                this.repeatCount = 1;
                this.startDelay = this.repeatDelay = 0;
                this._targets = [];
                this._playheadTime = 0;
                this.target = b
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "duration", {
                get: function() {
                    return ! this.durationExplicitlySet && this._parentCompositeEffect ? this._parentCompositeEffect.duration: this._duration
                },
                set: function(b) {
                    this.durationExplicitlySet = !0;
                    this._duration = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "isPlaying", {
                get: function() {
                    return this._instances && 0 < this._instances.length
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "isPaused", {
                get: function() {
                    return this.isPlaying ? this._isPaused: !1
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "perElementOffset", {
                get: function() {
                    return this._perElementOffset
                },
                set: function(b) {
                    this._perElementOffset = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "target", {
                get: function() {
                    return 0 < this._targets.length ? this._targets[0] : null
                },
                set: function(b) {
                    this._targets.splice(0);
                    b && (this._targets[0] = b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "targets", {
                get: function() {
                    return this._targets
                },
                set: function(b) {
                    for (var a = b.length - 1; 0 <= a; a--) null == b[a] && b.splice(a, 1);
                    this._targets = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "playheadTime", {
                get: function() {
                    for (var b = 0; b < this._instances.length; b++) if (this._instances[b]) return this._instances[b].playheadTime;
                    return this._playheadTime
                },
                set: function(b) {
                    var a = !1;
                    0 == this._instances.length && (this.play(), a = !0);
                    for (var c = 0; c < this._instances.length; c++) this._instances[c] && (this._instances[c].playheadTime = b);
                    a && this.pause();
                    this._playheadTime = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.createInstances = function(b) {
                void 0 === b && (b = null);
                b || (b = this.targets);
                for (var a = [], c = 0, e = b.length, d = 0; d < e; d++) {
                    var f = this.createInstance(b[d]);
                    f && (f.startDelay += c, c += this.perElementOffset, a.push(f))
                }
                return a
            };
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                b || (b = this.target);
                b = new this.instanceClass(b);
                this._initInstance(b);
                b.addEventListener(f.EffectEvent.EFFECT_START, this._effectStartHandler, this);
                b.addEventListener(f.EffectEvent.EFFECT_STOP, this._effectStopHandler, this);
                b.addEventListener(f.EffectEvent.EFFECT_END, this._effectEndHandler, this);
                this._instances.push(b);
                return b
            };
            a._initInstance = function(b) {
                b.duration = this.duration;
                b.durationExplicitlySet = this.durationExplicitlySet;
                b.effect = this;
                b.repeatCount = this.repeatCount;
                b.repeatDelay = this.repeatDelay;
                b.startDelay = this.startDelay
            };
            a.deleteInstance = function(b) {
                b.removeEventListener(f.EffectEvent.EFFECT_START, this._effectStartHandler, this);
                b.removeEventListener(f.EffectEvent.EFFECT_STOP, this._effectStopHandler, this);
                b.removeEventListener(f.EffectEvent.EFFECT_END, this._effectEndHandler, this);
                for (var a = this._instances.length,
                c = 0; c < a; c++) this._instances[c] === b && this._instances.splice(c, 1)
            };
            a.play = function(b, a) {
                void 0 === b && (b = null);
                void 0 === a && (a = !1);
                this._isPaused = this.effectStopped = !1;
                this.playReversed = a;
                for (var c = this.createInstances(b), e = c.length, d = 0; d < e; d++) {
                    var f = c[d];
                    f.playReversed = a;
                    f.startEffect()
                }
                return c
            };
            a.pause = function() {
                if (this.isPlaying && !this._isPaused) {
                    this._isPaused = !0;
                    for (var b = this._instances.length,
                    a = 0; a < b; a++) this._instances[a].pause()
                }
            };
            a.stop = function() {
                for (var b = this._instances.length - 1; 0 <= b; b--) {
                    var a = this._instances[b];
                    a && a.stop()
                }
            };
            a.resume = function() {
                if (this.isPlaying && this._isPaused) {
                    this._isPaused = !1;
                    for (var b = this._instances.length,
                    a = 0; a < b; a++) this._instances[a].resume()
                }
            };
            a.reverse = function() {
                if (this.isPlaying) for (var b = this._instances.length,
                a = 0; a < b; a++) this._instances[a].reverse()
            };
            a.end = function(b) {
                void 0 === b && (b = null);
                if (b) b.end();
                else for (b = this._instances.length - 1; 0 <= b; b--) {
                    var a = this._instances[b];
                    a && a.end()
                }
            };
            a._effectStartHandler = function(b) {
                this.dispatchEvent(b)
            };
            a._effectStopHandler = function(b) {
                this.dispatchEvent(b);
                this.effectStopped = !0
            };
            a._effectEndHandler = function(b) {
                this.deleteInstance(b.effectInstance);
                this.dispatchEvent(b)
            };
            return c
        } (d.EventDispatcher);
        f.Effect = g;
        g.prototype.__class__ = "egret.gui.Effect"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this._children = [];
                this.instanceClass = d.CompositeEffectInstance
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "children", {
                get: function() {
                    return this._children
                },
                set: function(b) {
                    var a = 0;
                    if (this._children) for (a = 0; a < this._children.length; ++a) this._children[a] && (this._children[a]._parentCompositeEffect = null);
                    if (this._children = b) for (a = 0; a < this._children.length; ++a) this._children[a] && (this._children[a]._parentCompositeEffect = this)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "compositeDuration", {
                get: function() {
                    return this.duration
                },
                enumerable: !0,
                configurable: !0
            });
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                this.childTargets || (this.childTargets = [b]);
                b = e.prototype.createInstance.call(this, b);
                this.childTargets = null;
                return b
            };
            a.createInstances = function(b) {
                void 0 === b && (b = null);
                b || (b = this.targets);
                this.childTargets = b;
                b = this.createInstance();
                this.childTargets = null;
                return b ? [b] : []
            };
            a._initInstance = function(b) {
                e.prototype._initInstance.call(this, b);
                var a = this.childTargets;
                a instanceof Array || (a = [a]);
                if (this.children) for (var c = this.children.length,
                d = 0; d < c; d++) {
                    var f = this.children[d];
                    0 == f.targets.length ? b.addChildSet(this.children[d].createInstances(a)) : b.addChildSet(this.children[d].createInstances(f.targets))
                }
            };
            a.addChild = function(b) {
                this.children.push(b);
                b._parentCompositeEffect = this
            };
            return c
        } (d.Effect);
        d.CompositeEffect = g;
        g.prototype.__class__ = "egret.gui.CompositeEffect"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(a) {
                void 0 === a && (a = null);
                e.call(this, a);
                this.instanceClass = d.ParallelInstance
            }
            __extends(c, e);
            Object.defineProperty(c.prototype, "compositeDuration", {
                get: function() {
                    for (var a = 0,
                    b = 0; b < this.children.length; ++b) {
                        var c, e = this.children[b];
                        c = e instanceof d.CompositeEffect ? e.compositeDuration: e.duration;
                        c = c * e.repeatCount + e.repeatDelay * (e.repeatCount - 1) + e.startDelay;
                        a = Math.max(a, c)
                    }
                    return a
                },
                enumerable: !0,
                configurable: !0
            });
            return c
        } (d.CompositeEffect);
        d.Parallel = g;
        g.prototype.__class__ = "egret.gui.Parallel"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(a) {
                void 0 === a && (a = null);
                e.call(this, a);
                this.instanceClass = d.SequenceInstance
            }
            __extends(c, e);
            Object.defineProperty(c.prototype, "compositeDuration", {
                get: function() {
                    for (var a = 0,
                    b = 0; b < this.children.length; ++b) {
                        var c, e = this.children[b];
                        c = e instanceof d.CompositeEffect ? e.compositeDuration: e.duration;
                        c = c * e.repeatCount + e.repeatDelay * (e.repeatCount - 1) + e.startDelay;
                        a += c
                    }
                    return a
                },
                enumerable: !0,
                configurable: !0
            });
            return c
        } (d.CompositeEffect);
        d.Sequence = g;
        g.prototype.__class__ = "egret.gui.Sequence"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this.numUpdateListeners = 0;
                this._interpolator = null;
                this._repeatBehavior = d.RepeatBehavior.LOOP;
                this._disableLayout = !1;
                this.instanceClass = d.AnimateInstance
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "motionPaths", {
                get: function() {
                    return this._motionPaths
                },
                set: function(b) {
                    this._motionPaths = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "easer", {
                get: function() {
                    return this._easer
                },
                set: function(b) {
                    this._easer = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "interpolator", {
                get: function() {
                    return this._interpolator
                },
                set: function(b) {
                    this._interpolator = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "repeatBehavior", {
                get: function() {
                    return this._repeatBehavior
                },
                set: function(b) {
                    this._repeatBehavior = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "disableLayout", {
                get: function() {
                    return this._disableLayout
                },
                set: function(b) {
                    this._disableLayout = b
                },
                enumerable: !0,
                configurable: !0
            });
            a._initInstance = function(b) {
                e.prototype._initInstance.call(this, b);
                b.addEventListener(d.EffectEvent.EFFECT_REPEAT, this.animationEventHandler, this);
                0 < this.numUpdateListeners && b.addEventListener(d.EffectEvent.EFFECT_UPDATE, this.animationEventHandler, this);
                b.easer = this.easer;
                this.interpolator && (b.interpolator = this.interpolator);
                isNaN(this.repeatCount) && (b.repeatCount = this.repeatCount);
                b.repeatBehavior = this.repeatBehavior;
                b.disableLayout = this.disableLayout;
                if (this.motionPaths) {
                    b.motionPaths = [];
                    for (var a = 0; a < this.motionPaths.length; ++a) b.motionPaths[a] = this.motionPaths[a].clone()
                }
            };
            a.addEventListener = function(b, a, c, g, t) {
                void 0 === g && (g = !1);
                void 0 === t && (t = 0);
                e.prototype.addEventListener.call(this, b, a, c, g, t);
                b == d.EffectEvent.EFFECT_UPDATE && ++this.numUpdateListeners
            };
            a.removeEventListener = function(b, a, c) {
                void 0 === c && (c = !1);
                e.prototype.removeEventListener.call(this, b, a, this, c);
                b == d.EffectEvent.EFFECT_UPDATE && --this.numUpdateListeners
            };
            a.animationEventHandler = function(b) {
                this.dispatchEvent(b)
            };
            return c
        } (d.Effect);
        d.Animate = g;
        g.prototype.__class__ = "egret.gui.Animate"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this.autoCenterTransform = !1;
                this.instanceClass = f.AnimateTransformInstance
            }
            __extends(c, e);
            var a = c.prototype;
            a.getOwningParallelEffect = function() {
                for (var b = null,
                a = this._parentCompositeEffect; a && !(a instanceof f.Sequence);) b = a,
                a = a._parentCompositeEffect;
                return b
            };
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                b || (b = this.target);
                var a = null,
                d = this.getOwningParallelEffect();
                null != d && (a = c.getSharedInstance(d, b));
                if (a) return this._initInstance(a),
                null;
                a = e.prototype.createInstance.call(this, b);
                d && c.storeSharedInstance(d, b, a);
                return a
            };
            a._effectStartHandler = function(b) {
                e.prototype._effectStartHandler.call(this, b);
                var a = this.getOwningParallelEffect();
                null != a && c.removeSharedInstance(a, b.effectInstance.target)
            };
            a.computeTransformCenterForTarget = function(b, a) {
                void 0 === a && (a = null);
                var c;
                this.autoCenterTransform ? c = new d.Point((null != a && void 0 !== a.width ? a.width: b.width) / 2, (null != a && void 0 !== a.height ? a.height: b.height) / 2) : (c = new d.Point(0, 0), isNaN(this.transformX) || (c.x = this.transformX), isNaN(this.transformY) || (c.y = this.transformY));
                return c
            };
            a.insertKeyframe = function(b, a) {
                for (var c = 0; c < b.length; c++) if (b[c].time > a.time) {
                    b.splice(c, 0, a);
                    return
                }
                b.push(a)
            };
            a._addMotionPath = function(b, a, c, e) {
                void 0 === a && (a = NaN);
                void 0 === c && (c = NaN);
                void 0 === e && (e = NaN);
                isNaN(a) && (isNaN(c) || isNaN(e) || (a = c - e));
                b = new f.MotionPath(b);
                b.keyframes = [new f.Keyframe(0, a), new f.Keyframe(this.duration, c, e)];
                b.keyframes[1].easer = this.easer;
                if (this.motionPaths) for (c = this.motionPaths.length, e = 0; e < c; e++) {
                    if (a = this.motionPaths[e], a.property == b.property) {
                        for (c = 0; c < b.keyframes.length; c++) this.insertKeyframe(a.keyframes, b.keyframes[c]);
                        return
                    }
                } else this.motionPaths = [];
                this.motionPaths.push(b)
            };
            a._initInstance = function(b) {
                var a = 0,
                f = this.duration;
                if (this.motionPaths) {
                    for (var g = [], a = 0; a < this.motionPaths.length; ++a) {
                        g[a] = this.motionPaths[a].clone();
                        var t = g[a];
                        if (t.keyframes) {
                            for (var p = 0; p < t.keyframes.length; ++p) {
                                var k = t.keyframes[p];
                                isNaN(k.time) && (k.time = this.duration);
                                0 != this.startDelay && (k.time += this.startDelay)
                            }
                            f = Math.max(f, t.keyframes[t.keyframes.length - 1].time)
                        }
                    }
                    t = this.getGlobalStartTime();
                    for (a = 0; a < g.length; ++a) b.addMotionPath(g[a], t)
                }
                b.initialized || (b.initialized = !0, this.autoCenterTransform || (b.transformCenter = this.computeTransformCenterForTarget(b.target)), b.autoCenterTransform = this.autoCenterTransform, a = this.startDelay, this.startDelay = 0, g = this.motionPaths, this.motionPaths = null, e.prototype._initInstance.call(this, b), this.startDelay = a, this.motionPaths = g, b.duration = Math.max(this.duration, f), d.getQualifiedClassName(this) != d.getQualifiedClassName(c) && (b.easer = c.linearEaser))
            };
            a.getGlobalStartTime = function() {
                for (var b = 0,
                a = this._parentCompositeEffect; a;) {
                    b += a.startDelay;
                    if (a instanceof f.Sequence) for (var c = a,
                    e = 0; e < c.children.length; ++e) {
                        var d = c.children[e];
                        if (d == this) break;
                        b = d instanceof f.CompositeEffect ? b + d.compositeDuration: b + (d.startDelay + d.duration * d.repeatCount + (d.repeatDelay + (d.repeatCount - 1)))
                    }
                    a = a._parentCompositeEffect
                }
                return b
            };
            c.getSharedInstance = function(b, a) {
                if (null != b) {
                    var e = c.sharedObjectMaps[b.hashCode];
                    if (null != e) return e[a.hashCode]
                }
                return null
            };
            c.removeSharedInstance = function(b, a) {
                if (null != b) {
                    var e = c.sharedObjectMaps[b.hashCode];
                    e && e[a.hashCode] && (delete e[a.hashCode], c.sharedObjectRefcounts[b.hashCode] -= 1, 0 >= c.sharedObjectRefcounts[b.hashCode] && (delete c.sharedObjectMaps[b.hashCode], delete c.sharedObjectRefcounts[b.hashCode]))
                }
            };
            c.storeSharedInstance = function(b, a, e) {
                if (null != b) {
                    var d = c.sharedObjectMaps[b.hashCode];
                    d || (d = {},
                    c.sharedObjectMaps[b.hashCode] = d);
                    d[a.hashCode] || (c.sharedObjectRefcounts[b.hashCode] = c.sharedObjectRefcounts[b.hashCode] ? c.sharedObjectRefcounts[b.hashCode] + 1 : 1);
                    d[a.hashCode] = e
                }
            };
            c.linearEaser = new f.Linear;
            c.sharedObjectMaps = {};
            c.sharedObjectRefcounts = {};
            return c
        } (f.Animate);
        f.AnimateTransform = g;
        g.prototype.__class__ = "egret.gui.AnimateTransform"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this.instanceClass = d.AnimateTransformInstance
            }
            __extends(c, e);
            var a = c.prototype;
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                this.motionPaths = [];
                return e.prototype.createInstance.call(this, b)
            };
            a._initInstance = function(b) {
                this._addMotionPath("translationX", this.xFrom, this.xTo, this.xBy);
                this._addMotionPath("translationY", this.yFrom, this.yTo, this.yBy);
                e.prototype._initInstance.call(this, b)
            };
            return c
        } (d.AnimateTransform);
        d.Move = g;
        g.prototype.__class__ = "egret.gui.Move"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this.instanceClass = d.AnimateTransformInstance
            }
            __extends(c, e);
            var a = c.prototype;
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                this.motionPaths = [];
                return e.prototype.createInstance.call(this, b)
            };
            a._initInstance = function(b) {
                this._addMotionPath("rotation", this.angleFrom, this.angleTo, this.angleBy);
                e.prototype._initInstance.call(this, b)
            };
            return c
        } (d.AnimateTransform);
        d.Rotate = g;
        g.prototype.__class__ = "egret.gui.Rotate"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(b) {
                void 0 === b && (b = null);
                e.call(this, b);
                this.instanceClass = d.AnimateTransformInstance
            }
            __extends(c, e);
            var a = c.prototype;
            a.createInstance = function(b) {
                void 0 === b && (b = null);
                this.motionPaths = [];
                return e.prototype.createInstance.call(this, b)
            };
            a._initInstance = function(b) {
                this._addMotionPath("scaleX", this.scaleXFrom, this.scaleXTo, this.scaleXBy);
                this._addMotionPath("scaleY", this.scaleYFrom, this.scaleYTo, this.scaleYBy);
                e.prototype._initInstance.call(this, b)
            };
            return c
        } (d.AnimateTransform);
        d.Scale = g;
        g.prototype.__class__ = "egret.gui.Scale"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c(a) {
                void 0 === a && (a = null);
                e.call(this, a);
                this.instanceClass = d.FadeInstance
            }
            __extends(c, e);
            c.prototype._initInstance = function(a) {
                e.prototype._initInstance.call(this, a);
                a.alphaFrom = this.alphaFrom;
                a.alphaTo = this.alphaTo
            };
            return c
        } (d.Animate);
        d.Fade = g;
        g.prototype.__class__ = "egret.gui.Fade"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function e() {}
            e.END = "end";
            e.STOP = "stop";
            return e
        } ();
        d.InterruptionBehavior = g;
        g.prototype.__class__ = "egret.gui.InterruptionBehavior"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            return function() {
                this.toState = this.fromState = "*";
                this.autoReverse = !1;
                this.interruptionBehavior = d.InterruptionBehavior.END
            }
        } ();
        d.Transition = g;
        g.prototype.__class__ = "egret.gui.Transition"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b, a) {
                void 0 === a && (a = !0);
                e.call(this);
                this.scale9Grid = null;
                this.fillMode = "scale";
                this.sourceChanged = !1;
                this._content = this._source = null;
                this.contentReused = this.createChildrenCalled = this._contentIsTexture = !1;
                this.autoScale = !0;
                this.touchChildren = !1;
                b && (this.source = b);
                this.autoScale = a
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "source", {
                get: function() {
                    return this._source
                },
                set: function(b) {
                    this._source != b && (this._source = b, this.createChildrenCalled ? this.parseSource() : this.sourceChanged = !0, this._setSizeDirty())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "content", {
                get: function() {
                    return this._content
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this.sourceChanged && this.parseSource();
                this.createChildrenCalled = !0
            };
            a.parseSource = function() {
                this.sourceChanged = !1;
                var b = c.assetAdapter;
                b || (b = this.getAdapter());
                if (this._source) {
                    var a = this.contentReused ? null: this._content;
                    this.contentReused = !0;
                    b.getAsset(this._source, this.contentChanged, this, a)
                } else this.contentChanged(null, null)
            };
            a.getAdapter = function() {
                var b;
                try {
                    b = d.Injector.getInstance("egret.gui.IAssetAdapter")
                } catch(a) {
                    b = new f.DefaultAssetAdapter
                }
                return c.assetAdapter = b
            };
            a.contentChanged = function(b, a) {
                if (a === this._source) {
                    var c = this._content;
                    this._content = b;
                    this._content instanceof d.Texture ? (this._texture_to_render = b, this._contentIsTexture = !0) : (this._texture_to_render = null, this._contentIsTexture = !1);
                    c !== b && (c instanceof d.DisplayObject && c.parent == this && (c._sizeChangeCallBack = null, c._sizeChangeCallTarget = null, this._removeFromDisplayList(c)), b instanceof d.DisplayObject && (b._sizeChangeCallBack = this.invalidateSize, b._sizeChangeCallTarget = this, this._addToDisplayListAt(b, 0)));
                    this.invalidateSize();
                    this.invalidateDisplayList();
                    this.contentReused = !1;
                    this.hasEventListener(f.UIEvent.CONTENT_CHANGED) && f.UIEvent.dispatchUIEvent(this, f.UIEvent.CONTENT_CHANGED)
                }
            };
            a.measure = function() {
                e.prototype.measure.call(this);
                var b = this._content;
                if (b instanceof d.DisplayObject) if ("preferredWidth" in b) this.measuredWidth = b.preferredWidth,
                this.measuredHeight = b.preferredHeight;
                else {
                    var a = b.explicitWidth,
                    c = b.explicitHeight;
                    b.width = NaN;
                    b.height = NaN;
                    this.measuredWidth = b.measuredWidth * b.scaleX;
                    this.measuredHeight = b.measuredHeight * b.scaleY;
                    b.width = a;
                    b.height = c
                } else this._contentIsTexture && (this.measuredWidth = b._textureWidth, this.measuredHeight = b._textureHeight)
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                var c = this._content;
                this.autoScale && c instanceof d.DisplayObject && ("setLayoutBoundsSize" in c ? c.setLayoutBoundsSize(b, a) : (c.width = b / c.scaleX, c.height = a / c.scaleY));
                this._setSizeDirty()
            };
            a._render = function(b) {
                if (this._contentIsTexture) {
                    var a = this._content,
                    c, f;
                    this.autoScale ? (c = this._width, f = this._height) : (c = a._textureWidth, f = a._textureHeight);
                    this._texture_to_render = a;
                    d.Bitmap._drawBitmap(b, c, f, this)
                }
                e.prototype._render.call(this, b)
            };
            a._measureBounds = function() {
                if (this._contentIsTexture) {
                    var b = this._content,
                    a = this.width,
                    c = this.height;
                    return d.Rectangle.identity.initialize(Math.floor(b._offsetX * a / b._textureWidth), Math.floor(b._offsetY * c / b._textureHeight), a, c)
                }
                return e.prototype._measureBounds.call(this)
            };
            a.addChild = function(b) {
                throw Error(d.getString(3004, d.getString(3003)));
            };
            a.addChildAt = function(b, a) {
                throw Error(d.getString(3005, d.getString(3003)));
            };
            a.removeChild = function(b) {
                throw Error(d.getString(3006, d.getString(3003)));
            };
            a.removeChildAt = function(b) {
                throw Error(d.getString(3007, d.getString(3003)));
            };
            a.setChildIndex = function(b, a) {
                throw Error(d.getString(3008, d.getString(3003)));
            };
            a.swapChildren = function(b, a) {
                throw Error(d.getString(3009, d.getString(3003)));
            };
            a.swapChildrenAt = function(b, a) {
                throw Error(d.getString(3010, d.getString(3003)));
            };
            c.assetAdapter = null;
            return c
        } (f.UIComponent);
        f.UIAsset = g;
        g.prototype.__class__ = "egret.gui.UIAsset"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.hostComponentKey = null;
                this._skinNameExplicitlySet = !1;
                this._skinName = null;
                this._createChildrenCalled = !1;
                this._skin = null;
                this.stateIsDirty = this.skinLayoutEnabled = !1;
                this.explicitMouseEnabled = this.explicitMouseChildren = this._autoMouseEnabled = !0
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinName", {
                get: function() {
                    return this._skinName
                },
                set: function(b) {
                    this._skinName != b && (this._skinName = b, this._skinNameExplicitlySet = !0, this._createChildrenCalled && this.parseSkinName())
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this.parseSkinName();
                this._createChildrenCalled = !0
            };
            a.parseSkinName = function() {
                var b = c.skinAdapter;
                b || (b = this.getSkinAdapter());
                var a = this.hostComponentKey || d.getQualifiedClassName(this),
                b = b.getSkin(this._skinName, a);
                b || (a = c._defaultTheme) && (b = a.getDefaultSkin(this));
                this._setSkin(b)
            };
            a.getSkinAdapter = function() {
                var b;
                try {
                    b = d.Injector.getInstance("egret.gui.ISkinAdapter")
                } catch(a) {
                    b = new f.DefaultSkinAdapter
                }
                return c.skinAdapter = b
            };
            Object.defineProperty(a, "skin", {
                get: function() {
                    return this._skin
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSkin = function(b) {
                var a = this._skin;
                this.detachSkin(a);
                a instanceof d.DisplayObject && this._removeFromDisplayList(a);
                this._skin = b;
                b instanceof d.DisplayObject && this._addToDisplayListAt(this._skin, 0);
                this.attachSkin(b);
                this.invalidateSkinState();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.hasEventListener(f.UIEvent.SKIN_CHANGED) && f.UIEvent.dispatchUIEvent(this, f.UIEvent.SKIN_CHANGED)
            };
            a.attachSkin = function(b) {
                this.skinLayoutEnabled = !b || b instanceof d.DisplayObject ? !1 : !0;
                b && "hostComponent" in b && (b.hostComponent = this, this.findSkinParts())
            };
            a.findSkinParts = function() {
                var b = this._skin;
                if (b && "skinParts" in b) for (var a = b.skinParts,
                c = a.length,
                e = 0; e < c; e++) {
                    var d = a[e];
                    if (d in b) try {
                        this[d] = b[d],
                        this.partAdded(d, b[d])
                    } catch(f) {}
                }
            };
            a.detachSkin = function(b) {
                if (b) {
                    if ("skinParts" in b) for (var a = b.skinParts,
                    c = a.length,
                    e = 0; e < c; e++) {
                        var d = a[e];
                        d in this && (null != this[d] && this.partRemoved(d, this[d]), this[d] = null)
                    }
                    b.hostComponent = null
                }
            };
            a.partAdded = function(b, a) {
                f.SkinPartEvent.dispatchSkinPartEvent(this, f.SkinPartEvent.PART_ADDED, b, a)
            };
            a.partRemoved = function(b, a) {
                f.SkinPartEvent.dispatchSkinPartEvent(this, f.SkinPartEvent.PART_REMOVED, b, a)
            };
            a.invalidateSkinState = function() {
                this.stateIsDirty || (this.stateIsDirty = !0, this.invalidateProperties())
            };
            a.validateSkinState = function() {
                var b = this.getCurrentSkinState(),
                a = this._skin;
                a && "currentState" in a && (a.currentState = b);
                this.hasEventListener("stateChanged") && this.dispatchEventWith("stateChanged")
            };
            Object.defineProperty(a, "autoTouchEnabled", {
                get: function() {
                    return this._autoMouseEnabled
                },
                set: function(b) {
                    this._autoMouseEnabled != b && ((this._autoMouseEnabled = b) ? (this._touchChildren = this.enabled ? this.explicitMouseChildren: !1, this._touchEnabled = this.enabled ? this.explicitMouseEnabled: !1) : (this._touchChildren = this.explicitMouseChildren, this._touchEnabled = this.explicitMouseEnabled))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "touchChildren", {
                get: function() {
                    return this._touchChildren
                },
                set: function(b) {
                    this.enabled && (this._touchChildren = b);
                    this.explicitMouseChildren = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "touchEnabled", {
                get: function() {
                    return this._touchEnabled
                },
                set: function(b) {
                    this.enabled && (this._touchEnabled = b);
                    this.explicitMouseEnabled = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "enabled", {
                get: function() {
                    return this._enabled
                },
                set: function(b) {
                    this._setEnabled(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setEnabled = function(b) {
                this._enabled != b && (this._enabled = b, this._autoMouseEnabled && (this._touchChildren = b ? this.explicitMouseChildren: !1, this._touchEnabled = b ? this.explicitMouseEnabled: !1), this.invalidateSkinState())
            };
            a.getCurrentSkinState = function() {
                return this.enabled ? "normal": "disabled"
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.stateIsDirty && (this.stateIsDirty = !1, this.validateSkinState())
            };
            a._childXYChanged = function() {
                this.skinLayoutEnabled && (this.invalidateSize(), this.invalidateDisplayList())
            };
            a.measure = function() {
                e.prototype.measure.call(this);
                var b = this._skin;
                b && (this.skinLayoutEnabled ? (b.measure(), this.measuredWidth = b.preferredWidth, this.measuredHeight = b.preferredHeight) : "preferredWidth" in b ? (this.measuredWidth = b.preferredWidth, this.measuredHeight = b.preferredHeight) : (this.measuredWidth = b.width, this.measuredHeight = b.height))
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                var c = this._skin;
                c && (this.skinLayoutEnabled ? c.updateDisplayList(b, a) : "setLayoutBoundsSize" in c ? c.setLayoutBoundsSize(b, a) : c instanceof d.DisplayObject && (c.scaleX = 0 == c.width ? 1 : b / c.width, c.scaleY = 0 == c.height ? 1 : a / c.height))
            };
            a.addChild = function(b) {
                throw Error(d.getString(3004, d.getString(3003)));
            };
            a.addChildAt = function(b, a) {
                throw Error(d.getString(3005, d.getString(3003)));
            };
            a.removeChild = function(b) {
                throw Error(d.getString(3006, d.getString(3003)));
            };
            a.removeChildAt = function(b) {
                throw Error(d.getString(3007, d.getString(3003)));
            };
            a.setChildIndex = function(b, a) {
                throw Error(d.getString(3008, d.getString(3003)));
            };
            a.swapChildren = function(b, a) {
                throw Error(d.getString(3009, d.getString(3003)));
            };
            a.swapChildrenAt = function(b, a) {
                throw Error(d.getString(3010, d.getString(3003)));
            };
            c.skinAdapter = null;
            c._defaultTheme = null;
            return c
        } (f.UIComponent);
        f.SkinnableComponent = g;
        g.prototype.__class__ = "egret.gui.SkinnableComponent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e() {}
            e.prototype.getSkin = function(c, a) {
                if (!c) return null;
                if (c.prototype) return new c;
                if ("string" == typeof c) {
                    var b = d.getDefinitionByName(c);
                    return b ? new b: null
                }
                return c
            };
            return e
        } ();
        f.DefaultSkinAdapter = g;
        g.prototype.__class__ = "egret.gui.DefaultSkinAdapter"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e() {}
            e.prototype.getAsset = function(c, a, b, e) {
                var f = c;
                c.prototype && (f = new c);
                if (f instanceof d.DisplayObject || f instanceof d.Texture) a.call(b, f, c);
                else if ("string" == typeof c) {
                    var g = new d.URLLoader;
                    g.dataFormat = d.URLLoaderDataFormat.TEXTURE;
                    g.addEventListener(d.Event.COMPLETE,
                    function(e) {
                        f = g.data;
                        a.call(b, f, c)
                    },
                    this);
                    g.load(new d.URLRequest(c))
                } else a.call(b, f, c)
            };
            return e
        } ();
        f.DefaultAssetAdapter = g;
        g.prototype.__class__ = "egret.gui.DefaultAssetAdapter"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e(a) {
                this.skinMap = {};
                this.delyList = [];
                this.loadConfig(a)
            }
            var c = e.prototype;
            e.load = function(a) {
                this.initialized || (this.initialized = !0, f.SkinnableComponent._defaultTheme = new e(a))
            };
            c.loadConfig = function(a) {
                var b = new d.URLLoader;
                b.addEventListener(d.Event.COMPLETE, this.onLoadComplete, this);
                b.addEventListener(d.IOErrorEvent.IO_ERROR, this.onLoadError, this);
                b.dataFormat = d.URLLoaderDataFormat.TEXT;
                b.load(new d.URLRequest(a))
            };
            c.onLoadComplete = function(a) {
                a = a.target;
                try {
                    this.skinMap = JSON.parse(a.data).skins
                } catch(b) {
                    d.Logger.warningWithErrorId(1017, a._request.url, a.data)
                }
                this.handleDelyList()
            };
            c.onLoadError = function(a) {
                d.Logger.warningWithErrorId(3E3, a.target._request.url);
                this.handleDelyList()
            };
            c.handleDelyList = function() {
                if (this.skinMap) {
                    var a = this.delyList;
                    this.delyList = [];
                    for (var b = a.length,
                    c = 0; c < b; c++) {
                        var e = a[c];
                        if (!e._skin) {
                            var d = this.getDefaultSkin(e);
                            e._setSkin(d)
                        }
                    }
                } else this.skinMap = {},
                this.delyList = []
            };
            c.getDefaultSkin = function(a) {
                var b = this.skinMap;
                if (!b) return - 1 == this.delyList.indexOf(a) && this.delyList.push(a),
                null;
                var c, e = a.hostComponentKey;
                if (e) c = b[e];
                else for (; a;) {
                    e = d.getQualifiedClassName(a);
                    if (c = b[e]) break;
                    a = d.getDefinitionByName(d.getQualifiedSuperclassName(a))
                }
                if (!c) return null;
                b = d.getDefinitionByName(c);
                return b ? new b: (d.Logger.warningWithErrorId(3001, c), null)
            };
            e.initialized = !1;
            return e
        } ();
        f.Theme = g;
        g.prototype.__class__ = "egret.gui.Theme"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._target = null
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "target", {
                get: function() {
                    return this._target
                },
                set: function(b) {
                    this._target = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.measure = function() {
                if (null != this.target) {
                    for (var b = 0,
                    a = 0,
                    c = this._target,
                    e = c.numElements,
                    d = 0; d < e; d++) {
                        var f = c.getElementAt(d);
                        if (f && f.includeInLayout) {
                            var g = f.horizontalCenter,
                            l = f.verticalCenter,
                            m = f.left,
                            n = f.right,
                            q = f.top,
                            r = f.bottom;
                            isNaN(m) || isNaN(n) ? isNaN(g) ? isNaN(m) && isNaN(n) ? g = f.preferredX: (g = isNaN(m) ? 0 : m, g += isNaN(n) ? 0 : n) : g = 2 * Math.abs(g) : g = m + n;
                            isNaN(q) || isNaN(r) ? isNaN(l) ? isNaN(q) && isNaN(r) ? l = f.preferredY: (l = isNaN(q) ? 0 : q, l += isNaN(r) ? 0 : r) : l = 2 * Math.abs(l) : l = q + r;
                            r = f.preferredHeight;
                            b = Math.ceil(Math.max(b, g + f.preferredWidth));
                            a = Math.ceil(Math.max(a, l + r))
                        }
                    }
                    this.target.measuredWidth = b;
                    this.target.measuredHeight = a
                }
            };
            a.updateDisplayList = function(b, a) {
                if (null != this.target) for (var c = this.target.numElements,
                e = 0; e < c; e++) {
                    var d = this.target.getElementAt(e);
                    if (null != d && d.includeInLayout) {
                        var f = d.horizontalCenter,
                        g = d.verticalCenter,
                        l = d.left,
                        m = d.right,
                        n = d.top,
                        q = d.bottom,
                        r = d.percentWidth,
                        w = d.percentHeight,
                        y = NaN,
                        s = NaN;
                        isNaN(l) || isNaN(m) ? isNaN(r) || (y = Math.round(b * Math.min(0.01 * r, 1))) : y = b - m - l;
                        isNaN(n) || isNaN(q) ? isNaN(w) || (s = Math.round(a * Math.min(0.01 * w, 1))) : s = a - q - n;
                        d.setLayoutBoundsSize(y, s);
                        r = d.layoutBoundsWidth;
                        w = d.layoutBoundsHeight;
                        s = y = NaN;
                        y = isNaN(f) ? isNaN(l) ? isNaN(m) ? d.layoutBoundsX: b - r - m: l: Math.round((b - r) / 2 + f);
                        s = isNaN(g) ? isNaN(n) ? isNaN(q) ? d.layoutBoundsY: a - w - q: n: Math.round((a - w) / 2 + g);
                        d.setLayoutBoundsPosition(y, s)
                    }
                }
            };
            return c
        } (d.HashObject);
        f.SkinBasicLayout = g;
        g.prototype.__class__ = "egret.gui.SkinBasicLayout"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._downEventFired = !1;
                this.labelDisplay = this.autoRepeatTimer = null;
                this._autoRepeat = !1;
                this._repeatInterval = this._repeatDelay = 35;
                this._keepDown = this._hovered = !1;
                this._label = "";
                this.touchChildren = this._stickyHighlighting = this._mouseCaptured = !1;
                this.addHandlers()
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "autoRepeat", {
                get: function() {
                    return this._autoRepeat
                },
                set: function(b) {
                    b != this._autoRepeat && (this._autoRepeat = b, this.checkAutoRepeatTimerConditions(this.isDown()))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "repeatDelay", {
                get: function() {
                    return this._repeatDelay
                },
                set: function(b) {
                    this._repeatDelay = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "repeatInterval", {
                get: function() {
                    return this._repeatInterval
                },
                set: function(b) {
                    this._repeatInterval = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "hovered", {
                get: function() {
                    return this._hovered
                },
                set: function(b) {
                    b != this._hovered && (this._hovered = b, this.invalidateSkinState(), this.checkButtonDownConditions())
                },
                enumerable: !0,
                configurable: !0
            });
            a._setKeepDown = function(b) {
                this._keepDown != b && (this._keepDown = b, this.invalidateSkinState())
            };
            Object.defineProperty(a, "label", {
                get: function() {
                    return this._getLabel()
                },
                set: function(b) {
                    this._setLabel(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getLabel = function() {
                return this.labelDisplay ? this.labelDisplay.text: this._label
            };
            a._setLabel = function(b) {
                this._label = b;
                this.labelDisplay && (this.labelDisplay.text = b)
            };
            Object.defineProperty(a, "mouseCaptured", {
                get: function() {
                    return this._mouseCaptured
                },
                set: function(b) {
                    b != this._mouseCaptured && (this._mouseCaptured = b, this.invalidateSkinState(), b || this.removeStageMouseHandlers(), this.checkButtonDownConditions())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "stickyHighlighting", {
                get: function() {
                    return this._stickyHighlighting
                },
                set: function(b) {
                    b != this._stickyHighlighting && (this._stickyHighlighting = b, this.invalidateSkinState(), this.checkButtonDownConditions())
                },
                enumerable: !0,
                configurable: !0
            });
            a.checkButtonDownConditions = function() {
                var b = this.isDown();
                this._downEventFired != b && (b && f.UIEvent.dispatchUIEvent(this, f.UIEvent.BUTTON_DOWN), this._downEventFired = b, this.checkAutoRepeatTimerConditions(b))
            };
            a.addHandlers = function() {
                this.addEventListener(d.TouchEvent.TOUCH_ROLL_OVER, this.mouseEventHandler, this);
                this.addEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.mouseEventHandler, this);
                this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.mouseEventHandler, this);
                this.addEventListener(d.TouchEvent.TOUCH_END, this.mouseEventHandler, this);
                this.addEventListener(d.TouchEvent.TOUCH_TAP, this.mouseEventHandler, this)
            };
            a.addStageMouseHandlers = function() {
                f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this)
            };
            a.removeStageMouseHandlers = function() {
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this)
            };
            a.isDown = function() {
                return this.enabled ? this.mouseCaptured && (this.hovered || this.stickyHighlighting) ? !0 : !1 : !1
            };
            a.checkAutoRepeatTimerConditions = function(b) {
                b = this.autoRepeat && b;
                b != (null != this.autoRepeatTimer) && (b ? this.startTimer() : this.stopTimer())
            };
            a.startTimer = function() {
                this.autoRepeatTimer = new d.Timer(1);
                this.autoRepeatTimer.delay = this._repeatDelay;
                this.autoRepeatTimer.addEventListener(d.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
                this.autoRepeatTimer.start()
            };
            a.stopTimer = function() {
                this.autoRepeatTimer.stop();
                this.autoRepeatTimer = null
            };
            a.mouseEventHandler = function(b) {
                switch (b.type) {
                case d.TouchEvent.TOUCH_ROLL_OVER:
                    if (b.touchDown && !this.mouseCaptured) break;
                    this.hovered = !0;
                    break;
                case d.TouchEvent.TOUCH_ROLL_OUT:
                    this.hovered = !1;
                    break;
                case d.TouchEvent.TOUCH_BEGIN:
                    this.addStageMouseHandlers();
                    d.InteractionMode.mode == d.InteractionMode.TOUCH && (this.hovered = !0);
                    this.mouseCaptured = !0;
                    break;
                case d.TouchEvent.TOUCH_END:
                    b.target == this && (this.hovered = !0, this.mouseCaptured && (this.buttonReleased(), this.mouseCaptured = !1));
                    break;
                case d.TouchEvent.TOUCH_TAP:
                    this.enabled ? this.clickHandler(b) : b.stopImmediatePropagation()
                }
            };
            a.buttonReleased = function() {};
            a.clickHandler = function(b) {};
            a.stage_mouseUpHandler = function(b) {
                b.target != this && (this.mouseCaptured = !1)
            };
            a.autoRepeat_timerDelayHandler = function(b) {
                this.autoRepeatTimer.reset();
                this.autoRepeatTimer.removeEventListener(d.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
                this.autoRepeatTimer.delay = this._repeatInterval;
                this.autoRepeatTimer.addEventListener(d.TimerEvent.TIMER, this.autoRepeat_timerHandler, this);
                this.autoRepeatTimer.start()
            };
            a.autoRepeat_timerHandler = function(b) {
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.BUTTON_DOWN)
            };
            a.getCurrentSkinState = function() {
                return this.enabled ? this.isDown() || this._keepDown ? "down": d.InteractionMode.mode == d.InteractionMode.MOUSE && (this.hovered || this.mouseCaptured) ? "over": "up": e.prototype.getCurrentSkinState.call(this)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.labelDisplay && (this.labelDisplay.text = this._label)
            };
            return c
        } (f.SkinnableComponent);
        f.ButtonBase = g;
        g.prototype.__class__ = "egret.gui.ButtonBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._selected = !1;
                this._autoSelected = !0
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "selected", {
                get: function() {
                    return this._selected
                },
                set: function(b) {
                    this._setSelected(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSelected = function(b) {
                b != this._selected && (this._selected = b, f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT), this.invalidateSkinState())
            };
            a.getCurrentSkinState = function() {
                var b = e.prototype.getCurrentSkinState.call(this);
                if (this.selected) {
                    var a = b + "AndSelected",
                    c = this.skin;
                    return c && c.hasState(a) ? a: "disabled" == b ? "disabled": "down"
                }
                return b
            };
            a.buttonReleased = function() {
                e.prototype.buttonReleased.call(this);
                this._autoSelected && this.enabled && (this.selected = !this.selected, this.dispatchEventWith(d.Event.CHANGE))
            };
            return c
        } (f.ButtonBase);
        f.ToggleButtonBase = g;
        g.prototype.__class__ = "egret.gui.ToggleButtonBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._textField = null;
                this.fontFamilyChanged = this.allStyleChanged = !1;
                this._fontFamily = "SimSun";
                this._sizeChanged = !1;
                this._size = 30;
                this._focusEnabled = !0;
                this.textAlignChanged = this._italic = this.italicChanged = this._bold = this.boldChanged = !1;
                this._textAlign = d.HorizontalAlign.LEFT;
                this.verticalAlignChanged = !1;
                this._verticalAlign = d.VerticalAlign.TOP;
                this.lineSpacingChanged = !1;
                this._lineSpacing = 0;
                this.textColorChanged = !1;
                this._textColor = 16777215;
                this._textChanged = !1;
                this._text = "";
                this._textFlow = null;
                this._textFlowChanged = !1;
                this._hasNoStyleChild = !0
            }
            __extends(c, e);
            var a = c.prototype;
            a.styleChanged = function(b) {
                if (!this.allStyleChanged) {
                    if (b) switch (b) {
                    case "textColor":
                        this.textColorChanged = !0;
                        break;
                    case "fontFamily":
                        this.fontFamilyChanged = !0;
                        break;
                    case "size":
                        this._sizeChanged = !0;
                        break;
                    case "bold":
                        this.boldChanged = !0;
                        break;
                    case "italic":
                        this.italicChanged = !0;
                        break;
                    case "textAlign":
                        this.textAlignChanged = !0;
                        break;
                    case "verticalAlign":
                        this.verticalAlignChanged = !0
                    } else this.allStyleChanged = !0;
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList()
                }
            };
            Object.defineProperty(a, "fontFamily", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.fontFamily ? b.fontFamily: this._fontFamily
                },
                set: function(b) {
                    this.setStyle("fontFamily", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "size", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.size ? b.size: this._size
                },
                set: function(b) {
                    void 0 === b && (b = 0);
                    this.setStyle("size", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "focusEnabled", {
                get: function() {
                    return this._focusEnabled
                },
                set: function(b) {
                    this._focusEnabled = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.setFocus = function() { ! 1 != this._focusEnabled && this._textField && this._textField.setFocus()
            };
            Object.defineProperty(a, "bold", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.bold ? b.bold: this._bold
                },
                set: function(b) {
                    this.setStyle("bold", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "italic", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.italic ? b.italic: this._italic
                },
                set: function(b) {
                    this.setStyle("italic", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "textAlign", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.textAlign ? b.textAlign: this._textAlign
                },
                set: function(b) {
                    this.setStyle("textAlign", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalAlign", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.verticalAlign ? b.verticalAlign: this._verticalAlign
                },
                set: function(b) {
                    this.setStyle("verticalAlign", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "lineSpacing", {
                get: function() {
                    return this._getLineSpacing()
                },
                set: function(b) {
                    this._setLineSpacing(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getLineSpacing = function() {
                return this._lineSpacing
            };
            a._setLineSpacing = function(b) {
                this._lineSpacing != b && (this._lineSpacing = b, this.lineSpacingChanged = !0, this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
            };
            Object.defineProperty(a, "textColor", {
                get: function() {
                    var b = this._styleProtoChain;
                    return b && void 0 !== b.textColor ? b.textColor: this._textColor
                },
                set: function(b) {
                    this.setStyle("textColor", b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "text", {
                get: function() {
                    return this._text
                },
                set: function(b) {
                    b != this._text && (this._text = b || "", this._textChanged = !0, this._textFlowChanged = !1, this._textFlow = [], this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "textFlow", {
                get: function() {
                    return this._textFlow
                },
                set: function(b) {
                    this._textFlow = b || [];
                    this._textFlowChanged = !0;
                    this._textChanged = !1;
                    this._text = "";
                    this.invalidateProperties();
                    this.invalidateSize();
                    this.invalidateDisplayList()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "textHeight", {
                get: function() {
                    return null == this._textField ? 0 : this._textField.textHeight
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "textWidth", {
                get: function() {
                    return null == this._textField ? 0 : this._textField.textWidth
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this._textField || this.checkTextField()
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this._textField || this.checkTextField();
                this.allStyleChanged && (this.allStyleChanged = !1, this.verticalAlignChanged = this.textAlignChanged = this.italicChanged = this.boldChanged = this._sizeChanged = this.fontFamilyChanged = this.textColorChanged = !0);
                this.fontFamilyChanged && (this._textField.fontFamily = this.fontFamily, this.fontFamilyChanged = !1);
                this._sizeChanged && (this._textField.size = this.size, this._sizeChanged = !1);
                this.boldChanged && (this._textField.bold = this.bold, this.boldChanged = !1);
                this.italic && (this._textField.italic = this.italic, this.italicChanged = !1);
                this.textAlignChanged && (this._textField.textAlign = this.textAlign, this.textAlignChanged = !1);
                this.verticalAlignChanged && (this._textField.verticalAlign = this.verticalAlign, this.verticalAlignChanged = !1);
                this.lineSpacingChanged && (this._textField.lineSpacing = this._lineSpacing, this.lineSpacingChanged = !1);
                this.textColorChanged && (this._textField.textColor = this.textColor, this.textColorChanged = !1);
                this._textChanged && (this._textField.text = this._text);
                this._textFlowChanged && (this._textField.textFlow = this._textFlow);
                if (this._textChanged || this._textFlowChanged) this._text = this._textField.text,
                this._textFlow = this._textField.textFlow,
                this._textFlowChanged = this._textChanged = !1
            };
            a.checkTextField = function() {
                this._textField || (this._createTextField(), this._textChanged && (this._textField.text = this._text), this._textFlowChanged && (this._textField.textFlow = this._textFlow), this.invalidateProperties())
            };
            a._createTextField = function() {
                this._textField = new d.TextField;
                this._textField.fontFamily = this.fontFamily;
                this._textField.size = this.size;
                this._textField.textAlign = this.textAlign;
                this._textField.verticalAlign = this.verticalAlign;
                this._textField.lineSpacing = this._lineSpacing;
                this._textField.textColor = this.textColor;
                this._textField.multiline = !0;
                this._addToDisplayList(this._textField)
            };
            a._textFieldChanged = function() {
                this._text = this._textField.text;
                this._textFlow = this._textField.textFlow
            };
            a.measure = function() {
                e.prototype.measure.call(this);
                this.measuredWidth = c.DEFAULT_MEASURED_WIDTH;
                this.measuredHeight = c.DEFAULT_MEASURED_HEIGHT
            };
            a.$updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a)
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                this._textField.width = b;
                this._textField.height = a
            };
            a.dispatchPropertyChangeEvent = function(b, a, c) {
                this.hasEventListener("propertyChange") && f.PropertyChangeEvent.dispatchPropertyChangeEvent(this, f.PropertyChangeEventKind.UPDATE, b, a, c, this)
            };
            c.DEFAULT_MEASURED_WIDTH = 160;
            c.DEFAULT_MEASURED_HEIGHT = 22;
            return c
        } (f.UIComponent);
        f.TextBase = g;
        g.prototype.__class__ = "egret.gui.TextBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._contentHeight = this._contentWidth = 0;
                this._layout = null;
                this._clipAndEnableScrolling = !1;
                this._verticalScrollPosition = this._horizontalScrollPosition = 0;
                this.touchEnabled = this._layoutInvalidateSizeFlag = this._layoutInvalidateDisplayListFlag = !1
            }
            __extends(c, e);
            var a = c.prototype;
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this._layout || (this.layout = new f.BasicLayout)
            };
            Object.defineProperty(a, "contentWidth", {
                get: function() {
                    return this._contentWidth
                },
                enumerable: !0,
                configurable: !0
            });
            a.setContentWidth = function(b) {
                if (b != this._contentWidth) {
                    var a = this._contentWidth;
                    this._contentWidth = b;
                    this.hasEventListener("propertyChange") && f.PropertyChangeEvent.dispatchPropertyChangeEvent(this, f.PropertyChangeEventKind.UPDATE, "contentWidth", a, b, this)
                }
            };
            Object.defineProperty(a, "contentHeight", {
                get: function() {
                    return this._contentHeight
                },
                enumerable: !0,
                configurable: !0
            });
            a.setContentHeight = function(b) {
                if (b != this._contentHeight) {
                    var a = this._contentHeight;
                    this._contentHeight = b;
                    this.hasEventListener("propertyChange") && f.PropertyChangeEvent.dispatchPropertyChangeEvent(this, f.PropertyChangeEventKind.UPDATE, "contentHeight", a, b, this)
                }
            };
            a.setContentSize = function(b, a) {
                if (b != this._contentWidth || a != this._contentHeight) this.setContentWidth(b),
                this.setContentHeight(a)
            };
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this._layout
                },
                set: function(b) {
                    this._setLayout(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setLayout = function(b) {
                if (this._layout != b) {
                    this._layout && (this._layout.target = null);
                    if (this._layout = b) this._layout.target = this;
                    this.invalidateSize();
                    this.invalidateDisplayList();
                    this.dispatchEventWith("layoutChanged")
                }
            };
            Object.defineProperty(a, "clipAndEnableScrolling", {
                get: function() {
                    return this._clipAndEnableScrolling
                },
                set: function(b) {
                    b != this._clipAndEnableScrolling && (this.scrollRect = (this._clipAndEnableScrolling = b) ? new d.Rectangle(this._horizontalScrollPosition, this._verticalScrollPosition, this.width, this.height) : null)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "horizontalScrollPosition", {
                get: function() {
                    return this._horizontalScrollPosition
                },
                set: function(b) {
                    if (b != this._horizontalScrollPosition) {
                        var a = this._horizontalScrollPosition;
                        this._horizontalScrollPosition = b;
                        this.scrollPositionChanged();
                        f.PropertyChangeEvent.dispatchPropertyChangeEvent(this, f.PropertyChangeEventKind.UPDATE, "horizontalScrollPosition", a, b, this)
                    }
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalScrollPosition", {
                get: function() {
                    return this._verticalScrollPosition
                },
                set: function(b) {
                    if (b != this._verticalScrollPosition) {
                        var a = this._verticalScrollPosition;
                        this._verticalScrollPosition = b;
                        this.scrollPositionChanged();
                        f.PropertyChangeEvent.dispatchPropertyChangeEvent(this, f.PropertyChangeEventKind.UPDATE, "verticalScrollPosition", a, b, this)
                    }
                },
                enumerable: !0,
                configurable: !0
            });
            a.scrollPositionChanged = function() {
                this._clipAndEnableScrolling && (this.updateScrollRect(this.width, this.height), this._invalidateDisplayListExceptLayout(), this._layout && this._layout.scrollPositionChanged())
            };
            a.updateScrollRect = function(b, a) {
                var c = this._scrollRect;
                this._clipAndEnableScrolling ? c ? (c.x = this._horizontalScrollPosition, c.y = this._verticalScrollPosition, c.width = b, c.height = a) : this._scrollRect = new d.Rectangle(this._horizontalScrollPosition, this._verticalScrollPosition, b, a) : c && (this._scrollRect = null)
            };
            a.measure = function() {
                this._layout && this._layoutInvalidateSizeFlag && (e.prototype.measure.call(this), this._layout.measure())
            };
            a._invalidateDisplayListExceptLayout = function() {
                e.prototype.invalidateDisplayList.call(this)
            };
            a.invalidateDisplayList = function() {
                e.prototype.invalidateDisplayList.call(this);
                this._layoutInvalidateDisplayListFlag = !0
            };
            a._childXYChanged = function() {
                this.invalidateSize();
                this.invalidateDisplayList()
            };
            a._invalidateSizeExceptLayout = function() {
                e.prototype.invalidateSize.call(this)
            };
            a.invalidateSize = function() {
                e.prototype.invalidateSize.call(this);
                this._layoutInvalidateSizeFlag = !0
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                this._layoutInvalidateDisplayListFlag && this._layout && (this._layoutInvalidateDisplayListFlag = !1, this._layout.updateDisplayList(b, a), this.updateScrollRect(b, a))
            };
            Object.defineProperty(a, "numElements", {
                get: function() {
                    return - 1
                },
                enumerable: !0,
                configurable: !0
            });
            a.getElementAt = function(b) {
                return null
            };
            a.getElementIndex = function(b) {
                return - 1
            };
            a.getElementIndicesInView = function() {
                var b = [],
                a;
                if (this.scrollRect) for (a = 0; a < this.numChildren; a++) {
                    var c = this.getChildAt(a);
                    if (c) {
                        var e = new d.Rectangle;
                        e.x = c.layoutBoundsX;
                        e.y = c.layoutBoundsY;
                        e.width = c.layoutBoundsWidth;
                        e.height = c.layoutBoundsHeight;
                        this.scrollRect.intersects(e) && b.push(a)
                    }
                } else for (a = 0; a < this.numChildren; a++) b.push(a);
                return b
            };
            a.setVirtualElementIndicesInView = function(b, a) {};
            a.getVirtualElementAt = function(b) {
                return this.getElementAt(b)
            };
            return c
        } (f.UIComponent);
        f.GroupBase = g;
        g.prototype.__class__ = "egret.gui.GroupBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.dataChangedFlag = !1;
                this._data = null;
                this._selected = !1;
                this._itemIndex = -1;
                this.touchChildren = !0
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "data", {
                get: function() {
                    return this._data
                },
                set: function(b) {
                    this._data = b;
                    this.initialized || this.parent ? (this.dataChangedFlag = !1, this.dataChanged()) : (this.dataChangedFlag = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.dataChanged = function() {};
            Object.defineProperty(a, "selected", {
                get: function() {
                    return this._selected
                },
                set: function(b) {
                    this._selected != b && (this._selected = b, this.invalidateSkinState())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemIndex", {
                get: function() {
                    return this._itemIndex
                },
                set: function(b) {
                    this._itemIndex = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.dataChangedFlag && (this.dataChangedFlag = !1, this.dataChanged())
            };
            a.getCurrentSkinState = function() {
                return this._selected ? "down": e.prototype.getCurrentSkinState.call(this)
            };
            return c
        } (d.ButtonBase);
        d.ItemRenderer = g;
        g.prototype.__class__ = "egret.gui.ItemRenderer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.contentGroup = this.disclosureButton = this.iconDisplay = null;
                this._indentation = 17;
                this._iconSkinName = null;
                this._depth = 0;
                this._isOpen = this._hasChildren = !1;
                this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.onItemMouseDown, this, !1, 1E3)
            }
            __extends(c, e);
            var a = c.prototype;
            a.onItemMouseDown = function(b) {
                b.target == this.disclosureButton && b.stopImmediatePropagation()
            };
            Object.defineProperty(a, "indentation", {
                get: function() {
                    return this._indentation
                },
                set: function(b) {
                    this._indentation = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "iconSkinName", {
                get: function() {
                    return this._iconSkinName
                },
                set: function(b) {
                    this._iconSkinName != b && (this._iconSkinName = b, this.iconDisplay && (this.iconDisplay.source = this._iconSkinName))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "depth", {
                get: function() {
                    return this._depth
                },
                set: function(b) {
                    b != this._depth && (this._depth = b, this.contentGroup && (this.contentGroup.x = this._depth * this._indentation))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "hasChildren", {
                get: function() {
                    return this._hasChildren
                },
                set: function(b) {
                    this._hasChildren != b && (this._hasChildren = b, this.disclosureButton && (this.disclosureButton.visible = this._hasChildren))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "opened", {
                get: function() {
                    return this._isOpen
                },
                set: function(b) {
                    this._isOpen != b && (this._isOpen = b, this.disclosureButton && (this.disclosureButton.selected = this._isOpen))
                },
                enumerable: !0,
                configurable: !0
            });
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.iconDisplay ? this.iconDisplay.source = this._iconSkinName: a == this.disclosureButton ? (this.disclosureButton.visible = this._hasChildren, this.disclosureButton.selected = this._isOpen, this.disclosureButton._autoSelected = !1, this.disclosureButton.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.disclosureButton_mouseDownHandler, this)) : a == this.contentGroup && (this.contentGroup.x = this._depth * this._indentation)
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.iconDisplay ? this.iconDisplay.source = null: a == this.disclosureButton && (this.disclosureButton.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.disclosureButton_mouseDownHandler, this), this.disclosureButton._autoSelected = !0, this.disclosureButton.visible = !0)
            };
            a.disclosureButton_mouseDownHandler = function(b) {
                f.TreeEvent.dispatchTreeEvent(this, f.TreeEvent.ITEM_OPENING, this.itemIndex, this.data, this, !this._isOpen)
            };
            return c
        } (f.ItemRenderer);
        f.TreeItemRenderer = g;
        g.prototype.__class__ = "egret.gui.TreeItemRenderer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._maximum = 100;
                this.maxChanged = !1;
                this._minimum = 0;
                this.minChanged = !1;
                this._stepSize = 1;
                this.stepSizeChanged = !1;
                this._changedValue = this._value = 0;
                this.valueChanged = !1;
                this._snapInterval = 1;
                this._explicitSnapInterval = this.snapIntervalChanged = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "maximum", {
                get: function() {
                    return this._maximum
                },
                set: function(b) {
                    this._setMaximun(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setMaximun = function(b) {
                b != this._maximum && (this._maximum = b, this.maxChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "minimum", {
                get: function() {
                    return this._minimum
                },
                set: function(b) {
                    this._setMinimun(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setMinimun = function(b) {
                b != this._minimum && (this._minimum = b, this.minChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "stepSize", {
                get: function() {
                    return this._stepSize
                },
                set: function(b) {
                    b != this._stepSize && (this._stepSize = b, this.stepSizeChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "value", {
                get: function() {
                    return this._getValue()
                },
                set: function(b) {
                    this._setValue(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setValue = function(b) {
                b != this.value && (this._changedValue = b, this.valueChanged = !0, this.invalidateProperties())
            };
            a._getValue = function() {
                return this.valueChanged ? this._changedValue: this._value
            };
            Object.defineProperty(a, "snapInterval", {
                get: function() {
                    return this._snapInterval
                },
                set: function(b) {
                    this._explicitSnapInterval = !0;
                    b != this._snapInterval && (isNaN(b) ? (this._snapInterval = 1, this._explicitSnapInterval = !1) : this._snapInterval = b, this.stepSizeChanged = this.snapIntervalChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.minimum > this.maximum && (this.maxChanged ? this._maximum = this._minimum: this._minimum = this._maximum);
                if (this.valueChanged || this.maxChanged || this.minChanged || this.snapIntervalChanged) {
                    var b = this.valueChanged ? this._changedValue: this._value;
                    this.snapIntervalChanged = this.minChanged = this.maxChanged = this.valueChanged = !1;
                    this.setValue(this.nearestValidValue(b, this.snapInterval))
                }
                this.stepSizeChanged && (this._explicitSnapInterval ? this._stepSize = this.nearestValidSize(this._stepSize) : (this._snapInterval = this._stepSize, this.setValue(this.nearestValidValue(this._value, this.snapInterval))), this.stepSizeChanged = !1)
            };
            a.nearestValidSize = function(b) {
                var a = this.snapInterval;
                if (0 == a) return b;
                b = Math.round(b / a) * a;
                return Math.abs(b) < a ? a: b
            };
            a.nearestValidValue = function(b, a) {
                if (0 == a) return Math.max(this.minimum, Math.min(this.maximum, b));
                var c = this.maximum - this.minimum,
                e = 1;
                b -= this.minimum;
                a != Math.round(a) && (e = (1 + a).toString().split("."), e = Math.pow(10, e[1].length), c *= e, b = Math.round(b * e), a = Math.round(a * e));
                var d = Math.max(0, Math.floor(b / a) * a),
                c = Math.min(c, Math.floor((b + a) / a) * a);
                return (b - d >= (c - d) / 2 ? c: d) / e + this.minimum
            };
            a.setValue = function(b) {
                this._value != b && (isNaN(b) && (b = 0), !isNaN(this.maximum) && !isNaN(this.minimum) && this.maximum > this.minimum ? this._value = Math.min(this.maximum, Math.max(this.minimum, b)) : this._value = b, this.valueChanged = !1, d.UIEvent.dispatchUIEvent(this, d.UIEvent.VALUE_COMMIT))
            };
            a.changeValueByStep = function(b) {
                void 0 === b && (b = !0);
                0 != this.stepSize && this.setValue(this.nearestValidValue(b ? this.value + this.stepSize: this.value - this.stepSize, this.snapInterval))
            };
            return c
        } (d.SkinnableComponent);
        d.Range = g;
        g.prototype.__class__ = "egret.gui.Range"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._slideDuration = 300;
                this.track = this.thumb = null;
                this._clickOffsetY = this._clickOffsetX = NaN;
                this.needUpdateValue = !1;
                this._moveStageY = this._moveStageX = NaN;
                this.mouseDownTarget = null;
                this.addEventListener(d.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.mouseDownHandler, this)
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "slideDuration", {
                get: function() {
                    return this._slideDuration
                },
                set: function(b) {
                    this._slideDuration = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maximum", {
                get: function() {
                    return this._maximum
                },
                set: function(b) {
                    b != this._maximum && (this._setMaximun(b), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "minimum", {
                get: function() {
                    return this._minimum
                },
                set: function(b) {
                    b != this._minimum && (this._setMinimun(b), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "value", {
                get: function() {
                    return this._getValue()
                },
                set: function(b) {
                    b != this._getValue() && (this._setValue(b), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.setValue = function(b) {
                e.prototype.setValue.call(this, b);
                this.invalidateDisplayList()
            };
            a.pointToValue = function(b, a) {
                return this.minimum
            };
            a.changeValueByStep = function(b) {
                void 0 === b && (b = !0);
                var a = this.value;
                e.prototype.changeValueByStep.call(this, b);
                this.value != a && this.dispatchEventWith(d.Event.CHANGE)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.thumb ? (this.thumb.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.thumb_mouseDownHandler, this), this.thumb.addEventListener(f.ResizeEvent.RESIZE, this.thumb_resizeHandler, this), this.thumb.addEventListener(f.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this), this.thumb.stickyHighlighting = !0) : a == this.track && (this.track.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.track_mouseDownHandler, this), this.track.addEventListener(f.ResizeEvent.RESIZE, this.track_resizeHandler, this))
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.thumb ? (this.thumb.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.thumb_mouseDownHandler, this), this.thumb.removeEventListener(f.ResizeEvent.RESIZE, this.thumb_resizeHandler, this), this.thumb.removeEventListener(f.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this)) : a == this.track && (this.track.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.track_mouseDownHandler, this), this.track.removeEventListener(f.ResizeEvent.RESIZE, this.track_resizeHandler, this))
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                this.updateSkinDisplayList()
            };
            a.updateSkinDisplayList = function() {};
            a.addedToStageHandler = function(b) {
                this.updateSkinDisplayList()
            };
            a.track_resizeHandler = function(b) {
                this.updateSkinDisplayList()
            };
            a.thumb_resizeHandler = function(b) {
                this.updateSkinDisplayList()
            };
            a.thumb_updateCompleteHandler = function(b) {
                this.updateSkinDisplayList();
                this.thumb.removeEventListener(f.UIEvent.UPDATE_COMPLETE, this.thumb_updateCompleteHandler, this)
            };
            a.thumb_mouseDownHandler = function(b) {
                f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                this.addEventListener(d.Event.ENTER_FRAME, this.onEnterFrame, this);
                b = this.thumb.globalToLocal(b.stageX, b.stageY, d.Point.identity);
                this._clickOffsetX = b.x;
                this._clickOffsetY = b.y;
                f.TrackBaseEvent.dispatchTrackBaseEvent(this, f.TrackBaseEvent.THUMB_PRESS);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_START)
            };
            a.onEnterFrame = function(b) {
                this.needUpdateValue && this.track && (this.updateWhenMouseMove(), this.needUpdateValue = !1)
            };
            a.updateWhenMouseMove = function() {
                if (this.track) {
                    var b = this.track.globalToLocal(this._moveStageX, this._moveStageY, d.Point.identity),
                    b = this.pointToValue(b.x - this._clickOffsetX, b.y - this._clickOffsetY),
                    b = this.nearestValidValue(b, this.snapInterval);
                    b != this.value && (this.setValue(b), this.validateDisplayList(), f.TrackBaseEvent.dispatchTrackBaseEvent(this, f.TrackBaseEvent.THUMB_DRAG), this.dispatchEventWith(d.Event.CHANGE))
                }
            };
            a.stage_mouseMoveHandler = function(b) {
                this._moveStageX = b.stageX;
                this._moveStageY = b.stageY;
                this.needUpdateValue || (this.needUpdateValue = !0)
            };
            a.stage_mouseUpHandler = function(b) {
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
                f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this);
                this.removeEventListener(d.Event.ENTER_FRAME, this.updateWhenMouseMove, this);
                this.needUpdateValue && (this.updateWhenMouseMove(), this.needUpdateValue = !1);
                f.TrackBaseEvent.dispatchTrackBaseEvent(this, f.TrackBaseEvent.THUMB_RELEASE);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_END)
            };
            a.track_mouseDownHandler = function(b) {};
            a.mouseDownHandler = function(b) {
                f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpSomewhereHandler, this);
                f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpSomewhereHandler, this);
                this.mouseDownTarget = b.target
            };
            a.stage_mouseUpSomewhereHandler = function(b) {
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpSomewhereHandler, this);
                f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpSomewhereHandler, this);
                if (this.mouseDownTarget != b.target && b instanceof d.TouchEvent && this.contains(b.target)) {
                    var a = b.target.localToGlobal(b.localX, b.localY);
                    d.TouchEvent.dispatchTouchEvent(this, d.TouchEvent.TOUCH_TAP, b.touchPointID, a.x, a.y, b.ctrlKey, b.altKey, b.shiftKey, b.touchDown)
                }
                this.mouseDownTarget = null
            };
            return c
        } (f.Range);
        f.TrackBase = g;
        g.prototype.__class__ = "egret.gui.TrackBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.trackHighlight = null;
                this._showTrackHighlight = !0;
                this.animator = null;
                this._pendingValue = 0;
                this.slideToValue = NaN;
                this._liveDragging = !0;
                this.maximum = 10
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "showTrackHighlight", {
                get: function() {
                    return this._showTrackHighlight
                },
                set: function(b) {
                    this._showTrackHighlight != b && (this._showTrackHighlight = b, this.trackHighlight && (this.trackHighlight.visible = b), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "pendingValue", {
                get: function() {
                    return this._pendingValue
                },
                set: function(b) {
                    b != this._pendingValue && (this._pendingValue = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.setValue = function(b) {
                this._pendingValue = b;
                e.prototype.setValue.call(this, b)
            };
            a._animationUpdateHandler = function(b) {
                this.pendingValue = b.currentValue.value
            };
            a.animationEndHandler = function(b) {
                this.setValue(this.slideToValue);
                this.dispatchEventWith(d.Event.CHANGE);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_END)
            };
            a.stopAnimation = function() {
                this.animator.stop();
                this.setValue(this.nearestValidValue(this.pendingValue, this.snapInterval));
                this.dispatchEventWith(d.Event.CHANGE);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_END)
            };
            a.thumb_mouseDownHandler = function(b) {
                this.animator && this.animator.isPlaying && this.stopAnimation();
                e.prototype.thumb_mouseDownHandler.call(this, b)
            };
            Object.defineProperty(a, "liveDragging", {
                get: function() {
                    return this._liveDragging
                },
                set: function(b) {
                    this._liveDragging = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.updateWhenMouseMove = function() {
                if (this.track) {
                    var b = this.track.globalToLocal(this._moveStageX, this._moveStageY, d.Point.identity),
                    b = this.pointToValue(b.x - this._clickOffsetX, b.y - this._clickOffsetY),
                    b = this.nearestValidValue(b, this.snapInterval);
                    b != this.pendingValue && (f.TrackBaseEvent.dispatchTrackBaseEvent(this, f.TrackBaseEvent.THUMB_DRAG), !0 == this.liveDragging ? (this.setValue(b), this.dispatchEventWith(d.Event.CHANGE)) : this.pendingValue = b)
                }
            };
            a.stage_mouseUpHandler = function(b) {
                e.prototype.stage_mouseUpHandler.call(this, b); ! 1 == this.liveDragging && this.value != this.pendingValue && (this.setValue(this.pendingValue), this.dispatchEventWith(d.Event.CHANGE))
            };
            a.track_mouseDownHandler = function(b) {
                this.enabled && (b = this.track.globalToLocal(b.stageX - (this.thumb ? this.thumb.width: 0) / 2, b.stageY - (this.thumb ? this.thumb.height: 0) / 2, d.Point.identity), b = this.pointToValue(b.x, b.y), b = this.nearestValidValue(b, this.snapInterval), b != this.pendingValue && (0 != this.slideDuration ? (this.animator || (this.animator = new f.Animation(this._animationUpdateHandler, this), this.animator.endFunction = this.animationEndHandler), this.animator.isPlaying && this.stopAnimation(), this.slideToValue = b, this.animator.duration = this.slideDuration * (Math.abs(this.pendingValue - this.slideToValue) / (this.maximum - this.minimum)), this.animator.motionPaths = [new f.SimpleMotionPath("value", this.pendingValue, this.slideToValue)], f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_START), this.animator.play()) : (this.setValue(b), this.dispatchEventWith(d.Event.CHANGE))))
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.trackHighlight && (this.trackHighlight.touchEnabled = !1, this.trackHighlight instanceof d.DisplayObjectContainer && (this.trackHighlight.touchChildren = !1), this.trackHighlight.visible = this._showTrackHighlight)
            };
            return c
        } (f.TrackBase);
        f.SliderBase = g;
        g.prototype.__class__ = "egret.gui.SliderBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._focusEnabled = !0;
                this.textDisplay = null;
                this.textDisplayProperties = {};
                this._prompt = this.promptDisplay = null;
                this.focusEnabled = !0;
                this.addEventListener("focus", this.focusInHandler, this);
                this.addEventListener("blur", this.focusOutHandler, this)
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "focusEnabled", {
                get: function() {
                    return this._focusEnabled
                },
                set: function(b) {
                    this._focusEnabled = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.focusInHandler = function(b) {
                b.target == this ? this.setFocus() : this.invalidateSkinState()
            };
            a.focusOutHandler = function(b) {
                b.target != this && this.invalidateSkinState()
            };
            Object.defineProperty(a, "prompt", {
                get: function() {
                    return this._prompt
                },
                set: function(b) {
                    this._prompt != b && (this._prompt = b, this.promptDisplay && (this.promptDisplay.text = b), this.invalidateProperties(), this.invalidateSkinState())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maxWidth", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.maxWidth;
                    var b = this.textDisplayProperties.maxWidth;
                    return void 0 === b ? e.prototype._getMaxWidth.call(this) : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.maxWidth = b, this.textDisplayProperties.maxWidth = !0) : this.textDisplayProperties.maxWidth = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "textColor", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.textColor;
                    var b = this.textDisplayProperties.textColor;
                    return void 0 === b ? 0 : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.textColor = b, this.textDisplayProperties.textColor = !0) : this.textDisplayProperties.textColor = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "displayAsPassword", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.displayAsPassword;
                    var b = this.textDisplayProperties.displayAsPassword;
                    return void 0 === b ? !1 : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.displayAsPassword = b, this.textDisplayProperties.displayAsPassword = !0) : this.textDisplayProperties.displayAsPassword = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "editable", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.editable;
                    var b = this.textDisplayProperties.editable;
                    return void 0 === b ? !0 : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.editable = b, this.textDisplayProperties.editable = !0) : this.textDisplayProperties.editable = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maxChars", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.maxChars;
                    var b = this.textDisplayProperties.maxChars;
                    return void 0 === b ? 0 : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.maxChars = b, this.textDisplayProperties.maxChars = !0) : this.textDisplayProperties.maxChars = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "restrict", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.restrict;
                    var b = this.textDisplayProperties.restrict;
                    return void 0 === b ? null: b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.restrict = b, this.textDisplayProperties.restrict = !0) : this.textDisplayProperties.restrict = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectable", {
                get: function() {
                    if (this.textDisplay) return this.textDisplay.selectable;
                    var b = this.textDisplayProperties.selectable;
                    return void 0 === b ? !0 : b
                },
                set: function(b) {
                    this.textDisplay ? (this.textDisplay.selectable = b, this.textDisplayProperties.selectable = !0) : this.textDisplayProperties.selectable = b;
                    this.invalidateProperties()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectionBeginIndex", {
                get: function() {
                    return this.textDisplay ? this.textDisplay.selectionBeginIndex: void 0 === this.textDisplayProperties.selectionBeginIndex ? -1 : this.textDisplayProperties.selectionBeginIndex
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectionEndIndex", {
                get: function() {
                    return this.textDisplay ? this.textDisplay.selectionEndIndex: void 0 === this.textDisplayProperties.selectionEndIndex ? -1 : this.textDisplayProperties.selectionEndIndex
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "caretIndex", {
                get: function() {
                    return this.textDisplay ? this.textDisplay.caretIndex: 0
                },
                enumerable: !0,
                configurable: !0
            });
            a.setSelection = function(b, a) {
                void 0 === a && (a = 0);
                this.textDisplay ? this.textDisplay.setSelection(b, a) : (this.textDisplayProperties.selectionBeginIndex = b, this.textDisplayProperties.selectionEndIndex = a)
            };
            a.selectAll = function() {
                this.textDisplay ? this.textDisplay.selectAll() : void 0 !== this.textDisplayProperties.text && this.setSelection(0, this.textDisplayProperties.text.length - 1)
            };
            Object.defineProperty(a, "text", {
                get: function() {
                    return this._getText()
                },
                set: function(b) {
                    this._setText(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getText = function() {
                if (this.textDisplay) return this.textDisplay.text;
                var b = this.textDisplayProperties.text;
                return void 0 === b ? "": b
            };
            a._setText = function(b) {
                this.textDisplay ? (this.textDisplay.text = b, this.textDisplayProperties.text = !0) : (this.textDisplayProperties.text = b, this.textDisplayProperties.selectionBeginIndex = 0, this.textDisplayProperties.selectionEndIndex = 0);
                this.invalidateProperties();
                this.invalidateSkinState()
            };
            a._getWidthInChars = function() {
                var b = this.textDisplay;
                if (b) return b.widthInChars;
                b = this.textDisplay ? void 0 : this.textDisplayProperties.widthInChars;
                return void 0 === b ? NaN: b
            };
            a._setWidthInChars = function(b) {
                if (this.textDisplay) {
                    var a = this.textDisplay;
                    a && (a.widthInChars = b);
                    this.textDisplayProperties.widthInChars = !0
                } else this.textDisplayProperties.widthInChars = b;
                this.invalidateProperties()
            };
            a._getHeightInLines = function() {
                var b = this.textDisplay;
                if (b) return b.heightInLines;
                b = this.textDisplay ? void 0 : this.textDisplayProperties.heightInLines;
                return void 0 === b ? NaN: b
            };
            a._setHeightInLines = function(b) {
                if (this.textDisplay) {
                    var a = this.textDisplay;
                    a && (a.heightInLines = b);
                    this.textDisplayProperties.heightInLines = !0
                } else this.textDisplayProperties.heightInLines = b;
                this.invalidateProperties()
            };
            a.getCurrentSkinState = function() {
                var b = f.UIGlobals.stage.focus,
                a = this.skin;
                if (this._prompt && !(b && this.contains(b) || "" != this.text)) {
                    if (this.enabled && a.hasState("normalWithPrompt")) return "normalWithPrompt";
                    if (!this.enabled && a.hasState("disabledWithPrompt")) return "disabledWithPrompt"
                }
                return e.prototype.getCurrentSkinState.call(this)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.textDisplay ? (this.textDisplayAdded(), this.textDisplay.addEventListener("input", this.textDisplay_changingHandler, this), this.textDisplay.addEventListener(d.Event.CHANGE, this.textDisplay_changeHandler, this)) : a == this.promptDisplay && (this.promptDisplay.text = this._prompt)
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.textDisplay && (this.textDisplayRemoved(), this.textDisplay.removeEventListener("input", this.textDisplay_changingHandler, this), this.textDisplay.removeEventListener(d.Event.CHANGE, this.textDisplay_changeHandler, this))
            };
            a.setFocus = function() { ! 1 != this._focusEnabled && this.textDisplay && this.textDisplay.setFocus()
            };
            a._createTextDisplay = function() {};
            a._removeSkinParts = function() {
                this.textDisplay && (this.partRemoved("textDisplay", this.textDisplay), this._removeFromDisplayList(this.textDisplay), this.textDisplay = null)
            };
            a.textDisplayAdded = function() {
                var b = {},
                a = this.textDisplay;
                void 0 !== this.textDisplayProperties.displayAsPassword && (this.textDisplay.displayAsPassword = this.textDisplayProperties.displayAsPassword, b.displayAsPassword = !0);
                void 0 !== this.textDisplayProperties.textColor && (this.textDisplay.textColor = this.textDisplayProperties.textColor, b.textColor = !0);
                void 0 !== this.textDisplayProperties.editable && (this.textDisplay.editable = this.textDisplayProperties.editable, b.editable = !0);
                void 0 !== this.textDisplayProperties.maxChars && (this.textDisplay.maxChars = this.textDisplayProperties.maxChars, b.maxChars = !0);
                void 0 !== this.textDisplayProperties.maxHeight && (this.textDisplay.maxHeight = this.textDisplayProperties.maxHeight, b.maxHeight = !0);
                void 0 !== this.textDisplayProperties.maxWidth && (this.textDisplay.maxWidth = this.textDisplayProperties.maxWidth, b.maxWidth = !0);
                void 0 !== this.textDisplayProperties.restrict && (this.textDisplay.restrict = this.textDisplayProperties.restrict, b.restrict = !0);
                void 0 !== this.textDisplayProperties.selectable && (this.textDisplay.selectable = this.textDisplayProperties.selectable, b.selectable = !0);
                void 0 !== this.textDisplayProperties.text && (this.textDisplay.text = this.textDisplayProperties.text, b.text = !0);
                void 0 !== this.textDisplayProperties.selectionBeginIndex && this.textDisplay.setSelection(this.textDisplayProperties.selectionBeginIndex, this.textDisplayProperties.selectionEndIndex);
                void 0 !== this.textDisplayProperties.widthInChars && a && (a.widthInChars = this.textDisplayProperties.widthInChars, b.widthInChars = !0);
                void 0 !== this.textDisplayProperties.heightInLines && a && (a.heightInLines = this.textDisplayProperties.heightInLines, b.heightInLines = !0);
                this.textDisplayProperties = b
            };
            a.textDisplayRemoved = function() {
                var b = {},
                a = this.textDisplay;
                this.textDisplayProperties.displayAsPassword && (b.displayAsPassword = this.textDisplay.displayAsPassword);
                this.textDisplayProperties.textColor && (b.textColor = this.textDisplay.textColor);
                this.textDisplayProperties.editable && (b.editable = this.textDisplay.editable);
                this.textDisplayProperties.maxChars && (b.maxChars = this.textDisplay.maxChars);
                this.textDisplayProperties.maxHeight && (b.maxHeight = this.textDisplay.maxHeight);
                this.textDisplayProperties.maxWidth && (b.maxWidth = this.textDisplay.maxWidth);
                this.textDisplayProperties.restrict && (b.restrict = this.textDisplay.restrict);
                this.textDisplayProperties.selectable && (b.selectable = this.textDisplay.selectable);
                this.textDisplayProperties.text && (b.text = this.textDisplay.text);
                this.textDisplayProperties.heightInLines && a && (b.heightInLines = a.heightInLines);
                this.textDisplayProperties.widthInChars && a && (b.widthInChars = a.widthInChars);
                this.textDisplayProperties = b
            };
            a.textDisplay_changeHandler = function(b) {
                this.invalidateDisplayList();
                this.dispatchEvent(b)
            };
            a.textDisplay_changingHandler = function(b) {
                var a = new d.Event(b.type, !1, !0);
                a.data = b.data;
                this.dispatchEvent(a);
                a.isDefaultPrevented() && b.preventDefault()
            };
            return c
        } (f.SkinnableComponent);
        f.SkinnableTextBase = g;
        g.prototype.__class__ = "egret.gui.SkinnableTextBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            return c
        } (d.UIComponent);
        d.Spacer = g;
        g.prototype.__class__ = "egret.gui.Spacer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._maxDisplayedLines = 0;
                this.lastUnscaledWidth = NaN;
                this.strokeColorChanged = !1;
                this._stroke = this._strokeColor = 0;
                this.strokeChanged = !1;
                this._padding = 0;
                this._paddingBottom = this._paddingTop = this._paddingRight = this._paddingLeft = NaN;
                this.addEventListener(d.UIEvent.UPDATE_COMPLETE, this.updateCompleteHandler, this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.updateCompleteHandler = function(b) {
                this.lastUnscaledWidth = NaN
            };
            Object.defineProperty(a, "maxDisplayedLines", {
                get: function() {
                    return this._maxDisplayedLines
                },
                set: function(b) {
                    this._maxDisplayedLines != b && (this._maxDisplayedLines = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "strokeColor", {
                get: function() {
                    return this._strokeColor
                },
                set: function(b) {
                    this._setStrokeColor(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setStrokeColor = function(b) {
                this._strokeColor != b && (this._strokeColor = b, this.strokeColorChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "stroke", {
                get: function() {
                    return this._stroke
                },
                set: function(b) {
                    this._stroke != b && (this._stroke = b, this.strokeChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "padding", {
                get: function() {
                    return this._padding
                },
                set: function(b) {
                    this._padding != b && (this._padding = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingLeft", {
                get: function() {
                    return this._paddingLeft
                },
                set: function(b) {
                    this._paddingLeft != b && (this._paddingLeft = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingRight", {
                get: function() {
                    return this._paddingRight
                },
                set: function(b) {
                    this._paddingRight != b && (this._paddingRight = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingTop", {
                get: function() {
                    return this._paddingTop
                },
                set: function(b) {
                    this._paddingTop != b && (this._paddingTop = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingBottom", {
                get: function() {
                    return this._paddingBottom
                },
                set: function(b) {
                    this._paddingBottom != b && (this._paddingBottom = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.strokeColorChanged && (this._textField.strokeColor = this._strokeColor, this.strokeColorChanged = !1);
                this.strokeChanged && (this._textField.stroke = this._stroke, this.strokeChanged = !1)
            };
            a.measure = function() {
                this._invalidatePropertiesFlag && this.validateProperties();
                if (this.isSpecialCase()) if (isNaN(this.lastUnscaledWidth)) this._oldPreferHeight = this._oldPreferWidth = NaN;
                else {
                    this.measureUsingWidth(this.lastUnscaledWidth);
                    return
                }
                var b;
                isNaN(this.explicitWidth) ? 1E4 != this.maxWidth && (b = this.maxWidth) : b = this.explicitWidth;
                this.measureUsingWidth(b)
            };
            a.isSpecialCase = function() {
                return 1 != this._maxDisplayedLines && (!isNaN(this.percentWidth) || !isNaN(this.left) && !isNaN(this.right)) && isNaN(this.explicitHeight) && isNaN(this.percentHeight)
            };
            a.measureUsingWidth = function(b) {
                this._textChanged && (this._textField.text = this._text);
                this._textFlowChanged && (this._textField.textFlow = this._textFlow);
                var a = isNaN(this._padding) ? 0 : this._padding,
                c = isNaN(this._paddingLeft) ? a: this._paddingLeft,
                e = isNaN(this._paddingRight) ? a: this._paddingRight,
                d = isNaN(this._paddingTop) ? a: this._paddingTop,
                a = isNaN(this._paddingBottom) ? a: this._paddingBottom;
                this._textField.width = NaN;
                this._textField.height = NaN;
                isNaN(b) || (this._textField.width = b - c - e);
                this.measuredWidth = Math.ceil(this._textField.measuredWidth);
                this.measuredHeight = Math.ceil(this._textField.measuredHeight);
                0 < this._maxDisplayedLines && this._textField.numLines > this._maxDisplayedLines && (b = this._textField.lineSpacing, this.measuredHeight = (this._textField.size + b) * this._maxDisplayedLines - b);
                this.measuredWidth += c + e;
                this.measuredHeight += d + a
            };
            a.updateDisplayList = function(b, a) {
                this.$updateDisplayList(b, a);
                var c = isNaN(this._padding) ? 0 : this._padding,
                e = isNaN(this._paddingLeft) ? c: this._paddingLeft,
                d = isNaN(this._paddingRight) ? c: this._paddingRight,
                f = isNaN(this._paddingTop) ? c: this._paddingTop,
                c = isNaN(this._paddingBottom) ? c: this._paddingBottom;
                this._textField.x = e;
                this._textField.y = f;
                if (this.isSpecialCase()) {
                    var g = isNaN(this.lastUnscaledWidth) || this.lastUnscaledWidth != b;
                    this.lastUnscaledWidth = b;
                    if (g) {
                        this._oldPreferHeight = this._oldPreferWidth = NaN;
                        this.invalidateSize();
                        return
                    }
                }
                this._invalidateSizeFlag && this.validateSize();
                this._textField.visible || (this._textField.visible = !0);
                this._textField.width = b - e - d;
                e = a - f - c;
                this._textField.height = e;
                0 < this._maxDisplayedLines && this._textField.numLines > this._maxDisplayedLines && (d = this._textField.lineSpacing, this._textField.height = Math.min(e, (this._textField.size + d) * this._maxDisplayedLines - d))
            };
            return c
        } (d.TextBase);
        d.Label = g;
        g.prototype.__class__ = "egret.gui.Label"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._bitmapText = null;
                this._textChanged = !1;
                this._text = "";
                this.createChildrenCalled = this.fontChanged = !1;
                this.lastUnscaledWidth = NaN;
                this._padding = 0;
                this._paddingBottom = this._paddingTop = this._paddingRight = this._paddingLeft = NaN;
                this.addEventListener(f.UIEvent.UPDATE_COMPLETE, this.updateCompleteHandler, this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.updateCompleteHandler = function(b) {
                this.lastUnscaledWidth = NaN
            };
            Object.defineProperty(a, "text", {
                get: function() {
                    return this._text
                },
                set: function(b) {
                    this._text != b && (this._text = b, this._textChanged = !0, this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "font", {
                get: function() {
                    return this._font
                },
                set: function(b) {
                    this._font != b && (this._font = b, this.createChildrenCalled ? this.parseFont() : this.fontChanged = !0, this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this._bitmapText || this.checkBitmapText();
                this.fontChanged && this.parseFont();
                this.createChildrenCalled = !0
            };
            a.parseFont = function() {
                this.fontChanged = !1;
                var b = c.assetAdapter;
                b || (b = this.getAdapter());
                if (this._font) b.getAsset(this._font, this.onFontChanged, this, null);
                else this.onFontChanged(null, null)
            };
            a.getAdapter = function() {
                var b;
                try {
                    b = d.Injector.getInstance("egret.gui.IAssetAdapter")
                } catch(a) {
                    b = new f.DefaultAssetAdapter
                }
                return c.assetAdapter = b
            };
            a.onFontChanged = function(b, a) {
                a === this._font && (this._bitmapText.font = b, this.invalidateSize(), this.invalidateDisplayList())
            };
            Object.defineProperty(a, "padding", {
                get: function() {
                    return this._padding
                },
                set: function(b) {
                    this._padding != b && (this._padding = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingLeft", {
                get: function() {
                    return this._paddingLeft
                },
                set: function(b) {
                    this._paddingLeft != b && (this._paddingLeft = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingRight", {
                get: function() {
                    return this._paddingRight
                },
                set: function(b) {
                    this._paddingRight != b && (this._paddingRight = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingTop", {
                get: function() {
                    return this._paddingTop
                },
                set: function(b) {
                    this._paddingTop != b && (this._paddingTop = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingBottom", {
                get: function() {
                    return this._paddingBottom
                },
                set: function(b) {
                    this._paddingBottom != b && (this._paddingBottom = b, this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.measure = function() {
                this._invalidatePropertiesFlag && this.validateProperties();
                if (this.isSpecialCase()) if (isNaN(this.lastUnscaledWidth)) this._oldPreferHeight = this._oldPreferWidth = NaN;
                else {
                    this.measureUsingWidth(this.lastUnscaledWidth);
                    return
                }
                var b;
                isNaN(this.explicitWidth) ? 1E4 != this.maxWidth && (b = this.maxWidth) : b = this.explicitWidth;
                this.measureUsingWidth(b)
            };
            a.isSpecialCase = function() {
                return (!isNaN(this.percentWidth) || !isNaN(this.left) && !isNaN(this.right)) && isNaN(this.explicitHeight) && isNaN(this.percentHeight)
            };
            a.measureUsingWidth = function(b) {
                this._textChanged && (this._bitmapText.text = this._text);
                var a = isNaN(this._padding) ? 0 : this._padding,
                c = isNaN(this._paddingLeft) ? a: this._paddingLeft,
                e = isNaN(this._paddingRight) ? a: this._paddingRight,
                d = isNaN(this._paddingTop) ? a: this._paddingTop,
                a = isNaN(this._paddingBottom) ? a: this._paddingBottom;
                this._bitmapText.width = NaN;
                this._bitmapText.height = NaN;
                isNaN(b) || (this._bitmapText.width = b - c - e);
                this.measuredWidth = Math.ceil(this._bitmapText.measuredWidth);
                this.measuredHeight = Math.ceil(this._bitmapText.measuredHeight);
                this.measuredWidth += c + e;
                this.measuredHeight += d + a
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                if (this._bitmapText) {
                    var c = isNaN(this._padding) ? 0 : this._padding,
                    d = isNaN(this._paddingLeft) ? c: this._paddingLeft,
                    f = isNaN(this._paddingRight) ? c: this._paddingRight,
                    g = isNaN(this._paddingTop) ? c: this._paddingTop,
                    c = isNaN(this._paddingBottom) ? c: this._paddingBottom;
                    this._bitmapText.x = d;
                    this._bitmapText.y = g;
                    if (this.isSpecialCase()) {
                        var k = isNaN(this.lastUnscaledWidth) || this.lastUnscaledWidth != b;
                        this.lastUnscaledWidth = b;
                        if (k) {
                            this._oldPreferHeight = this._oldPreferWidth = NaN;
                            this.invalidateSize();
                            return
                        }
                    }
                    this._invalidateSizeFlag && this.validateSize();
                    this._bitmapText.visible || (this._bitmapText.visible = !0);
                    this._bitmapText.width = b - d - f;
                    this._bitmapText.height = a - g - c
                }
            };
            a.checkBitmapText = function() {
                this._bitmapText || (this._bitmapText = new d.BitmapText, this._bitmapText.text = this._text, this._textChanged = !1, this._addToDisplayList(this._bitmapText))
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this._bitmapText || this.checkBitmapText();
                this._textChanged && (this._bitmapText.text = this._text, this._textChanged = !1)
            };
            return c
        } (f.UIComponent);
        f.BitmapLabel = g;
        g.prototype.__class__ = "egret.gui.BitmapLabel"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._graphics = null;
                this._fillColor = 16777215;
                this._fillAlpha = 1;
                this._strokeColor = 4473924;
                this._strokeAlpha = 0;
                this._strokeWeight = 1;
                this.touchChildren = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "graphics", {
                get: function() {
                    this._graphics || (this._graphics = new d.Graphics, this.needDraw = !0);
                    return this._graphics
                },
                enumerable: !0,
                configurable: !0
            });
            a._render = function(b) {
                this._graphics && this._graphics._draw(b);
                e.prototype._render.call(this, b)
            };
            Object.defineProperty(a, "fillColor", {
                get: function() {
                    return this._fillColor
                },
                set: function(b) {
                    this._fillColor != b && (this._fillColor = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "fillAlpha", {
                get: function() {
                    return this._fillAlpha
                },
                set: function(b) {
                    this._fillAlpha != b && (this._fillAlpha = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "strokeColor", {
                get: function() {
                    return this._strokeColor
                },
                set: function(b) {
                    this._strokeColor != b && (this._strokeColor = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "strokeAlpha", {
                get: function() {
                    return this._strokeAlpha
                },
                set: function(b) {
                    this._strokeAlpha != b && (this._strokeAlpha = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "strokeWeight", {
                get: function() {
                    return this._strokeWeight
                },
                set: function(b) {
                    this._strokeWeight != b && (this._strokeWeight = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a._measureBounds = function() {
                var b = e.prototype._measureBounds.call(this),
                a = this.width,
                c = this.height;
                0 < b.x && (b.x = 0);
                0 < b.y && (b.y = 0);
                0 + a > b.right && (b.right = 0 + a);
                0 + c > b.bottom && (b.bottom = 0 + c);
                return b
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, b);
                var c = this.graphics;
                c.clear();
                c.beginFill(this._fillColor, this._fillAlpha);
                0 < this._strokeAlpha && c.lineStyle(this._strokeWeight, this._strokeColor, this._strokeAlpha, !0, "normal", "square", "miter");
                c.drawRect(0, 0, b, a);
                c.endFill()
            };
            a.hitTest = function(b, a, c) {
                void 0 === c && (c = !1);
                var f = e.prototype.hitTest.call(this, b, a, c);
                return f ? f: this._graphics ? d.DisplayObject.prototype.hitTest.call(this, b, a, c) : null
            };
            return c
        } (f.UIComponent);
        f.Rect = g;
        g.prototype.__class__ = "egret.gui.Rect"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._icon = this.iconDisplay = null
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "icon", {
                get: function() {
                    return this._getIcon()
                },
                set: function(b) {
                    this._setIcon(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getIcon = function() {
                return this.iconDisplay ? this.iconDisplay.source: this._icon
            };
            a._setIcon = function(b) {
                this._icon = b;
                this.iconDisplay && (this.iconDisplay.source = b)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.iconDisplay && (this.iconDisplay.source = this._icon)
            };
            return c
        } (d.ButtonBase);
        d.Button = g;
        g.prototype.__class__ = "egret.gui.Button"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            return c
        } (d.ToggleButtonBase);
        d.ToggleSwitch = g;
        g.prototype.__class__ = "egret.gui.ToggleSwitch"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._icon = this.iconDisplay = null
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "icon", {
                get: function() {
                    return this._getIcon()
                },
                set: function(b) {
                    this._setIcon(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getIcon = function() {
                return this.iconDisplay ? this.iconDisplay.source: this._icon
            };
            a._setIcon = function(b) {
                this._icon = b;
                this.iconDisplay && (this.iconDisplay.source = b)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.iconDisplay && (this.iconDisplay.source = this._icon)
            };
            return c
        } (d.ToggleButtonBase);
        d.ToggleButton = g;
        g.prototype.__class__ = "egret.gui.ToggleButton"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this)
            }
            __extends(c, d);
            return c
        } (d.ToggleButtonBase);
        d.CheckBox = g;
        g.prototype.__class__ = "egret.gui.CheckBox"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._name = null;
                this.radioButtons = [];
                this._enabled = !0;
                this._selection = this._selectedValue = null;
                this._name = "_radioButtonGroup" + c.groupCount;
                c.groupCount++
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "enabled", {
                get: function() {
                    return this._enabled
                },
                set: function(b) {
                    if (this._enabled != b) for (this._enabled = b, b = 0; b < this.numRadioButtons; b++) this.getRadioButtonAt(b).invalidateSkinState()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "numRadioButtons", {
                get: function() {
                    return this.radioButtons.length
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedValue", {
                get: function() {
                    return this.selection ? null != this.selection.value ? this.selection.value: this.selection.label: null
                },
                set: function(b) {
                    this._selectedValue = b;
                    if (null == b) this._setSelection(null, !1);
                    else for (var a = this.numRadioButtons,
                    c = 0; c < a; c++) {
                        var d = this.getRadioButtonAt(c);
                        if (d.value == b || d.label == b) {
                            this.changeSelection(c, !1);
                            this._selectedValue = null;
                            f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT);
                            break
                        }
                    }
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selection", {
                get: function() {
                    return this._selection
                },
                set: function(b) {
                    this._selection != b && this._setSelection(b, !1)
                },
                enumerable: !0,
                configurable: !0
            });
            a.getRadioButtonAt = function(b) {
                return 0 <= b && b < this.numRadioButtons ? this.radioButtons[b] : null
            };
            a._addInstance = function(b) {
                function a(b, c) {
                    var d = b.parent,
                    e = c.parent;
                    if (!d || !e) return 0;
                    var g = b instanceof f.UIComponent ? b.nestLevel: -1,
                    F = c instanceof f.UIComponent ? c.nestLevel: -1,
                    n = 0,
                    q = 0;
                    d == e && (n = "getElementIndex" in d && "ownerChanged" in b ? d.getElementIndex(b) : d.getChildIndex(b), q = "getElementIndex" in e && "ownerChanged" in c ? e.getElementIndex(c) : e.getChildIndex(c));
                    return g > F || n > q ? 1 : g < F || q > n ? -1 : b == c ? 0 : a(d, e)
                }
                b.addEventListener(d.Event.REMOVED, this.radioButton_removedHandler, this);
                this.radioButtons.push(b);
                this.radioButtons.sort(a);
                for (var c = 0; c < this.radioButtons.length; c++) this.radioButtons[c]._indexNumber = c;
                this._selectedValue && (this.selectedValue = this._selectedValue); ! 0 == b.selected && (this.selection = b);
                b._radioButtonGroup = this;
                b.invalidateSkinState();
                this.dispatchEventWith("numRadioButtonsChanged")
            };
            a._removeInstance = function(b) {
                this.doRemoveInstance(b, !1)
            };
            a.doRemoveInstance = function(b, a) {
                void 0 === a && (a = !0);
                if (b) {
                    for (var c = !1,
                    e = 0; e < this.numRadioButtons; e++) {
                        var f = this.getRadioButtonAt(e);
                        c ? f._indexNumber -= 1 : f == b && (a && b.addEventListener(d.Event.ADDED, this.radioButton_addedHandler, this), b == this._selection && (this._selection = null), b._radioButtonGroup = null, b.invalidateSkinState(), this.radioButtons.splice(e, 1), c = !0, e--)
                    }
                    c && this.dispatchEventWith("numRadioButtonsChanged")
                }
            };
            a._setSelection = function(b, a) {
                void 0 === a && (a = !0);
                if (this._selection != b) {
                    if (b) for (var c = this.numRadioButtons,
                    e = 0; e < c; e++) {
                        if (b == this.getRadioButtonAt(e)) {
                            this.changeSelection(e, a);
                            break
                        }
                    } else this.selection && (this._selection.selected = !1, this._selection = null, a && this.dispatchEventWith(d.Event.CHANGE));
                    f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT)
                }
            };
            a.changeSelection = function(b, a) {
                void 0 === a && (a = !0);
                var c = this.getRadioButtonAt(b);
                c && c != this._selection && (this._selection && (this._selection.selected = !1), this._selection = c, this._selection.selected = !0, a && this.dispatchEventWith(d.Event.CHANGE))
            };
            a.radioButton_addedHandler = function(b) {
                if (b = b.target) b.removeEventListener(d.Event.ADDED, this.radioButton_addedHandler, this),
                this._addInstance(b)
            };
            a.radioButton_removedHandler = function(b) {
                if (b = b.target) b.removeEventListener(d.Event.REMOVED, this.radioButton_removedHandler, this),
                this.doRemoveInstance(b)
            };
            c.groupCount = 0;
            return c
        } (d.EventDispatcher);
        f.RadioButtonGroup = g;
        g.prototype.__class__ = "egret.gui.RadioButtonGroup"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._indexNumber = 0;
                this._group = this._radioButtonGroup = null;
                this.groupChanged = !1;
                this._groupName = "radioGroup";
                this._value = null;
                this.groupName = "radioGroup"
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "enabled", {
                get: function() {
                    return this._enabled ? !this._radioButtonGroup || this._radioButtonGroup.enabled: !1
                },
                set: function(b) {
                    this._setEnabled(b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "group", {
                get: function() {
                    if (!this._group && this._groupName) {
                        c.automaticRadioButtonGroups || (c.automaticRadioButtonGroups = {});
                        var b = c.automaticRadioButtonGroups[this._groupName];
                        b || (b = new d.RadioButtonGroup, b._name = this._groupName, c.automaticRadioButtonGroups[this._groupName] = b);
                        this._group = b
                    }
                    return this._group
                },
                set: function(b) {
                    this._group != b && (this._radioButtonGroup && this._radioButtonGroup._removeInstance(this), this._groupName = (this._group = b) ? this.group._name: "radioGroup", this.groupChanged = !0, this.invalidateProperties(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "groupName", {
                get: function() {
                    return this._groupName
                },
                set: function(b) {
                    b && "" != b && (this._groupName = b, this._radioButtonGroup && this._radioButtonGroup._removeInstance(this), this._group = null, this.groupChanged = !0, this.invalidateProperties(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSelected = function(b) {
                e.prototype._setSelected.call(this, b);
                this.invalidateDisplayList()
            };
            Object.defineProperty(a, "value", {
                get: function() {
                    return this._value
                },
                set: function(b) {
                    this._value != b && (this._value = b, this.selected && this.group && d.UIEvent.dispatchUIEvent(this.group, d.UIEvent.VALUE_COMMIT))
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                this.groupChanged && (this.addToGroup(), this.groupChanged = !1);
                e.prototype.commitProperties.call(this)
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                this.group && (this.selected ? this._group.selection = this: this.group.selection == this && (this._group.selection = null))
            };
            a.buttonReleased = function() {
                this.enabled && !this.selected && (this._radioButtonGroup || this.addToGroup(), e.prototype.buttonReleased.call(this), this.group._setSelection(this))
            };
            a.addToGroup = function() {
                var b = this.group;
                b && b._addInstance(this);
                return b
            };
            c.automaticRadioButtonGroups = null;
            return c
        } (d.ToggleButtonBase);
        d.RadioButton = g;
        g.prototype.__class__ = "egret.gui.RadioButton"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.elementsContentChanged = this.createChildrenCalled = !1;
                this._elementsContent = []
            }
            __extends(c, e);
            var a = c.prototype;
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                this.createChildrenCalled = !0;
                this.elementsContentChanged && (this.elementsContentChanged = !1, this.setElementsContent(this._elementsContent))
            };
            a._getElementsContent = function() {
                return this._elementsContent
            };
            Object.defineProperty(a, "elementsContent", {
                set: function(b) {
                    null == b && (b = []);
                    if (b != this._elementsContent) if (this.createChildrenCalled) this.setElementsContent(b);
                    else {
                        this.elementsContentChanged = !0;
                        for (var a = this._elementsContent.length - 1; 0 <= a; a--) this._elementRemoved(this._elementsContent[a], a);
                        this._elementsContent = b
                    }
                },
                enumerable: !0,
                configurable: !0
            });
            a.setElementsContent = function(b) {
                var a;
                for (a = this._elementsContent.length - 1; 0 <= a; a--) this._elementRemoved(this._elementsContent[a], a);
                this._elementsContent = b.concat();
                b = this._elementsContent.length;
                for (a = 0; a < b; a++) {
                    var c = this._elementsContent[a];
                    c.parent && "removeElement" in c.parent ? c.parent.removeElement(c) : c.owner && "removeElement" in c.owner && c.owner.removeElement(c);
                    this._elementAdded(c, a)
                }
            };
            Object.defineProperty(a, "numElements", {
                get: function() {
                    return this._elementsContent.length
                },
                enumerable: !0,
                configurable: !0
            });
            a.getElementAt = function(b) {
                this.checkForRangeError(b);
                return this._elementsContent[b]
            };
            a.checkForRangeError = function(b, a) {
                void 0 === a && (a = !1);
                var c = this._elementsContent.length - 1;
                a && c++;
                if (0 > b || b > c) throw new RangeError(d.getString(3011, b));
            };
            a.addElement = function(b) {
                var a = this.numElements;
                b.parent == this && (a = this.numElements - 1);
                return this.addElementAt(b, a)
            };
            a.addElementAt = function(b, a) {
                if (b == this) return b;
                this.checkForRangeError(a, !0);
                var c = b.owner;
                if (c == this || b.parent == this) return this.setElementIndex(b, a),
                b;
                c && "removeElement" in c && b.owner.removeElement(b);
                this._elementsContent.splice(a, 0, b);
                this.elementsContentChanged || this._elementAdded(b, a);
                return b
            };
            a.removeElement = function(b) {
                return this.removeElementAt(this.getElementIndex(b))
            };
            a.removeElementAt = function(b) {
                this.checkForRangeError(b);
                var a = this._elementsContent[b];
                this.elementsContentChanged || this._elementRemoved(a, b);
                this._elementsContent.splice(b, 1);
                return a
            };
            a.removeAllElements = function() {
                for (var b = this.numElements - 1; 0 <= b; b--) this.removeElementAt(b)
            };
            a.getElementIndex = function(b) {
                return this._elementsContent.indexOf(b)
            };
            a.setElementIndex = function(b, a) {
                this.checkForRangeError(a);
                var c = this.getElementIndex(b); - 1 != c && c != a && (this.elementsContentChanged || this._elementRemoved(b, c, !1), this._elementsContent.splice(c, 1), this._elementsContent.splice(a, 0, b), this.elementsContentChanged || this._elementAdded(b, a, !1))
            };
            a.swapElements = function(b, a) {
                this.swapElementsAt(this.getElementIndex(b), this.getElementIndex(a))
            };
            a.swapElementsAt = function(b, a) {
                this.checkForRangeError(b);
                this.checkForRangeError(a);
                if (b > a) {
                    var c = a;
                    a = b;
                    b = c
                } else if (b == a) return;
                var c = this._elementsContent,
                d = c[b],
                e = c[a];
                this.elementsContentChanged || (this._elementRemoved(d, b, !1), this._elementRemoved(e, a, !1));
                c[b] = e;
                c[a] = d;
                this.elementsContentChanged || (this._elementAdded(e, b, !1), this._elementAdded(d, a, !1))
            };
            a._elementAdded = function(b, a, c) {
                void 0 === c && (c = !0);
                b instanceof d.DisplayObject && this._addToDisplayListAt(b, a, c);
                c && this.hasEventListener(f.ElementExistenceEvent.ELEMENT_ADD) && f.ElementExistenceEvent.dispatchElementExistenceEvent(this, f.ElementExistenceEvent.ELEMENT_ADD, b, a);
                this.invalidateSize();
                this.invalidateDisplayList()
            };
            a._elementRemoved = function(b, a, c) {
                void 0 === c && (c = !0);
                c && this.hasEventListener(f.ElementExistenceEvent.ELEMENT_REMOVE) && f.ElementExistenceEvent.dispatchElementExistenceEvent(this, f.ElementExistenceEvent.ELEMENT_REMOVE, b, a);
                b instanceof d.DisplayObject && b.parent == this && this._removeFromDisplayList(b, c);
                this.invalidateSize();
                this.invalidateDisplayList()
            };
            a.addChild = function(b) {
                throw Error(d.getString(3004, d.getString(3003)));
            };
            a.addChildAt = function(b, a) {
                throw Error(d.getString(3005, d.getString(3003)));
            };
            a.removeChild = function(b) {
                throw Error(d.getString(3006, d.getString(3003)));
            };
            a.removeChildAt = function(b) {
                throw Error(d.getString(3007, d.getString(3003)));
            };
            a.setChildIndex = function(b, a) {
                throw Error(d.getString(3008, d.getString(3003)));
            };
            a.swapChildren = function(b, a) {
                throw Error(d.getString(3009, d.getString(3003)));
            };
            a.swapChildrenAt = function(b, a) {
                throw Error(d.getString(3010, d.getString(3003)));
            };
            return c
        } (f.GroupBase);
        f.Group = g;
        g.prototype.__class__ = "egret.gui.Group"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._createAllChildren = !1;
                this._selectedChild = null;
                this.proposedSelectedIndex = c.NO_PROPOSED_SELECTION;
                this._selectedIndex = -1;
                this.childOrderingChanged = this.notifyTabBar = !1;
                this._setLayout(new f.BasicLayout)
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this._layout
                },
                set: function(b) {},
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "createAllChildren", {
                get: function() {
                    return this._createAllChildren
                },
                set: function(b) {
                    if (this._createAllChildren != b && (this._createAllChildren = b)) {
                        b = this._getElementsContent();
                        for (var a = b.length,
                        c = 0; c < a; c++) {
                            var e = b[c];
                            e instanceof d.DisplayObject && e.parent != this && (this.childOrderingChanged = !0, this._addToDisplayList(e))
                        }
                        this.childOrderingChanged && this.invalidateProperties()
                    }
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedChild", {
                get: function() {
                    var b = this.selectedIndex;
                    return 0 <= b && b < this.numElements ? this.getElementAt(b) : null
                },
                set: function(b) {
                    b = this.getElementIndex(b);
                    0 <= b && b < this.numElements && this._setSelectedIndex(b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedIndex", {
                get: function() {
                    return this.proposedSelectedIndex != c.NO_PROPOSED_SELECTION ? this.proposedSelectedIndex: this._selectedIndex
                },
                set: function(b) {
                    this._setSelectedIndex(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSelectedIndex = function(b, a) {
                void 0 === a && (a = !0);
                b != this.selectedIndex && (this.proposedSelectedIndex = b, this.invalidateProperties(), f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT), this.notifyTabBar = this.notifyTabBar || a)
            };
            a._elementAdded = function(b, a, c) {
                void 0 === c && (c = !0);
                this._createAllChildren && b instanceof d.DisplayObject && this._addToDisplayListAt(b, a, c);
                c && this.hasEventListener(f.ElementExistenceEvent.ELEMENT_ADD) && f.ElementExistenceEvent.dispatchElementExistenceEvent(this, f.ElementExistenceEvent.ELEMENT_ADD, b, a);
                b.visible = !1;
                b.includeInLayout = !1; - 1 == this.selectedIndex ? this._setSelectedIndex(a, !1) : a <= this.selectedIndex && this.initialized && this._setSelectedIndex(this.selectedIndex + 1);
                this.dispatchCoEvent(f.CollectionEventKind.ADD, a, -1, [b.name])
            };
            a._elementRemoved = function(b, a, c) {
                void 0 === c && (c = !0);
                e.prototype._elementRemoved.call(this, b, a, c);
                b.visible = !0;
                b.includeInLayout = !0;
                a == this.selectedIndex ? 0 < this.numElements ? 0 == a ? (this.proposedSelectedIndex = 0, this.invalidateProperties()) : this._setSelectedIndex(0, !1) : this._setSelectedIndex( - 1) : a < this.selectedIndex && this._setSelectedIndex(this.selectedIndex - 1);
                this.dispatchCoEvent(f.CollectionEventKind.REMOVE, a, -1, [b.name])
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.proposedSelectedIndex != c.NO_PROPOSED_SELECTION && (this.commitSelection(this.proposedSelectedIndex), this.proposedSelectedIndex = c.NO_PROPOSED_SELECTION);
                if (this.childOrderingChanged) {
                    this.childOrderingChanged = !1;
                    for (var b = this._getElementsContent(), a = b.length, f = 0; f < a; f++) {
                        var g = b[f];
                        g instanceof d.DisplayObject && g.parent == this && this._addToDisplayList(g)
                    }
                }
                this.notifyTabBar && (this.notifyTabBar = !0, this.dispatchEventWith("IndexChanged"))
            };
            a.commitSelection = function(b) {
                0 <= b && b < this.numElements ? (this._selectedIndex = b, this._selectedChild && this._selectedChild.parent == this && (this._selectedChild.visible = !1, this._selectedChild.includeInLayout = !1), this._selectedChild = this.getElementAt(this._selectedIndex), this._selectedChild.visible = !0, this._selectedChild.includeInLayout = !0, this._selectedChild.parent != this && this._selectedChild instanceof d.DisplayObject && (this._addToDisplayList(this._selectedChild), this.childOrderingChanged || (this.childOrderingChanged = !0))) : (this._selectedChild = null, this._selectedIndex = -1);
                this.invalidateSize();
                this.invalidateDisplayList()
            };
            Object.defineProperty(a, "length", {
                get: function() {
                    return this.numElements
                },
                enumerable: !0,
                configurable: !0
            });
            a.getItemAt = function(b) {
                return (b = this.getElementAt(b)) ? b.name: ""
            };
            a.getItemIndex = function(b) {
                for (var a = this._getElementsContent(), c = a.length, d = 0; d < c; d++) if (a[d].name === b) return d;
                return - 1
            };
            a.dispatchCoEvent = function(b, a, c, d, e) {
                void 0 === b && (b = null);
                void 0 === a && (a = -1);
                void 0 === c && (c = -1);
                void 0 === d && (d = null);
                void 0 === e && (e = null);
                f.CollectionEvent.dispatchCollectionEvent(this, f.CollectionEvent.COLLECTION_CHANGE, b, a, c, d, e)
            };
            c.NO_PROPOSED_SELECTION = -2;
            return c
        } (f.Group);
        f.ViewStack = g;
        g.prototype.__class__ = "egret.gui.ViewStack"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.maxWidth = 1E4;
                this.minWidth = 0;
                this.maxHeight = 1E4;
                this.minHeight = 0;
                this._hasWidthSet = !1;
                this._width = NaN;
                this._hasHeightSet = !1;
                this._height = NaN;
                this.measuredHeight = this.measuredWidth = 0;
                this._initialized = !1;
                this._hostComponent = null;
                this._elementsContent = [];
                this.skinLayout = null;
                this._states = [];
                this.playStateTransition = !0;
                this.currentStateChanged = !1;
                this.requestedCurrentState = this._currentState = null;
                this.initialized = !1;
                this.skinLayout = new f.SkinBasicLayout;
                this.skinLayout.target = this
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "width", {
                get: function() {
                    return this._width
                },
                set: function(b) {
                    this._width != b && (this._width = b, this._hasWidthSet = d.NumberUtils.isNumber(b))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "height", {
                get: function() {
                    return this._height
                },
                set: function(b) {
                    this._height != b && (this._height = b, this._hasHeightSet = d.NumberUtils.isNumber(b))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "preferredWidth", {
                get: function() {
                    return this._hasWidthSet ? this._width: this.measuredWidth
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "preferredHeight", {
                get: function() {
                    return this._hasHeightSet ? this._height: this.measuredHeight
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {};
            Object.defineProperty(a, "hostComponent", {
                get: function() {
                    return this._hostComponent
                },
                set: function(b) {
                    this._setHostComponent(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setHostComponent = function(b) {
                if (this._hostComponent != b) {
                    var a;
                    if (this._hostComponent) for (a = this._elementsContent.length - 1; 0 <= a; a--) this._elementRemoved(this._elementsContent[a], a);
                    this._hostComponent = b;
                    this._initialized || (this._initialized = !0, this.createChildren());
                    if (this._hostComponent) {
                        b = this._elementsContent.length;
                        for (a = 0; a < b; a++) this._elementAdded(this._elementsContent[a], a);
                        this.initializeStates();
                        this.currentStateChanged && this.commitCurrentState()
                    }
                }
            };
            a._getElementsContent = function() {
                return this._elementsContent
            };
            Object.defineProperty(a, "elementsContent", {
                set: function(b) {
                    null == b && (b = []);
                    if (b != this._elementsContent) if (this._hostComponent) {
                        var a;
                        for (a = this._elementsContent.length - 1; 0 <= a; a--) this._elementRemoved(this._elementsContent[a], a);
                        this._elementsContent = b.concat();
                        b = this._elementsContent.length;
                        for (a = 0; a < b; a++) {
                            var c = this._elementsContent[a];
                            c.parent && "removeElement" in c.parent ? c.parent.removeElement(c) : c.owner && "removeElement" in c.owner && c.owner.removeElement(c);
                            this._elementAdded(c, a)
                        }
                    } else this._elementsContent = b.concat()
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "numElements", {
                get: function() {
                    return this._elementsContent.length
                },
                enumerable: !0,
                configurable: !0
            });
            a.getElementAt = function(b) {
                this.checkForRangeError(b);
                return this._elementsContent[b]
            };
            a.checkForRangeError = function(b, a) {
                void 0 === a && (a = !1);
                var c = this._elementsContent.length - 1;
                a && c++;
                if (0 > b || b > c) throw new RangeError(d.getString(3011, b));
            };
            a.addElement = function(b) {
                var a = this.numElements;
                b.owner == this && (a = this.numElements - 1);
                return this.addElementAt(b, a)
            };
            a.addElementAt = function(b, a) {
                this.checkForRangeError(a, !0);
                var c = b.owner;
                if (c == this) return this.setElementIndex(b, a),
                b;
                c && "removeElement" in c && c.removeElement(b);
                this._elementsContent.splice(a, 0, b);
                this._hostComponent ? this._elementAdded(b, a) : b.ownerChanged(this);
                return b
            };
            a.removeElement = function(b) {
                return this.removeElementAt(this.getElementIndex(b))
            };
            a.removeElementAt = function(b) {
                this.checkForRangeError(b);
                var a = this._elementsContent[b];
                this._hostComponent ? this._elementRemoved(a, b) : a.ownerChanged(null);
                this._elementsContent.splice(b, 1);
                return a
            };
            a.getElementIndex = function(b) {
                return this._elementsContent.indexOf(b)
            };
            a.setElementIndex = function(b, a) {
                this.checkForRangeError(a);
                var c = this.getElementIndex(b); - 1 != c && c != a && (this._hostComponent && this._elementRemoved(b, c, !1), this._elementsContent.splice(c, 1), this._elementsContent.splice(a, 0, b), this._hostComponent && this._elementAdded(b, a, !1))
            };
            a._elementAdded = function(b, a, c) {
                void 0 === c && (c = !0);
                b.ownerChanged(this);
                b instanceof d.DisplayObject && this._hostComponent._addToDisplayListAt(b, a, c);
                c && this.hasEventListener(f.ElementExistenceEvent.ELEMENT_ADD) && f.ElementExistenceEvent.dispatchElementExistenceEvent(this, f.ElementExistenceEvent.ELEMENT_ADD, b, a);
                this._hostComponent.invalidateSize();
                this._hostComponent.invalidateDisplayList()
            };
            a._elementRemoved = function(b, a, c) {
                void 0 === c && (c = !0);
                c && this.hasEventListener(f.ElementExistenceEvent.ELEMENT_REMOVE) && f.ElementExistenceEvent.dispatchElementExistenceEvent(this, f.ElementExistenceEvent.ELEMENT_REMOVE, b, a);
                b instanceof d.DisplayObject && b.parent == this._hostComponent && this._hostComponent._removeFromDisplayList(b, c);
                b.ownerChanged(null);
                this._hostComponent.invalidateSize();
                this._hostComponent.invalidateDisplayList()
            };
            a.measure = function() {
                this.skinLayout.measure();
                this.measuredWidth < this.minWidth && (this.measuredWidth = this.minWidth);
                this.measuredWidth > this.maxWidth && (this.measuredWidth = this.maxWidth);
                this.measuredHeight < this.minHeight && (this.measuredHeight = this.minHeight);
                this.measuredHeight > this.maxHeight && (this.measuredHeight = this.maxHeight)
            };
            a.updateDisplayList = function(b, a) {
                this.skinLayout.updateDisplayList(b, a)
            };
            Object.defineProperty(a, "states", {
                get: function() {
                    return this._states
                },
                set: function(b) {
                    this._setStates(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setStates = function(b) {
                b || (b = []);
                if ("string" == typeof b[0]) for (var a = b.length,
                c = 0; c < a; c++) {
                    var d = new f.State(b[c], []);
                    b[c] = d
                }
                this._states = b;
                this.currentStateChanged = !0;
                this.requestedCurrentState = this._currentState;
                this.hasState(this.requestedCurrentState) || (this.requestedCurrentState = this.getDefaultState())
            };
            Object.defineProperty(a, "transitions", {
                get: function() {
                    return this._transitions
                },
                set: function(b) {
                    this._transitions = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "currentState", {
                get: function() {
                    return this.currentStateChanged ? this.requestedCurrentState: this._currentState ? this._currentState: this.getDefaultState()
                },
                set: function(b) {
                    b || (b = this.getDefaultState());
                    b != this.currentState && b && this.currentState && (this.requestedCurrentState = b, this.currentStateChanged = !0, this._hostComponent && this.commitCurrentState())
                },
                enumerable: !0,
                configurable: !0
            });
            a.hasState = function(b) {
                return null != this.getState(b)
            };
            a.getDefaultState = function() {
                return 0 < this._states.length ? this._states[0].name: null
            };
            a.commitCurrentState = function() {
                if (this.currentStateChanged) {
                    this.currentStateChanged = !1;
                    this.getState(this.requestedCurrentState) || (this.requestedCurrentState = this.getDefaultState());
                    var b;
                    this.playStateTransition && (b = this.getTransition(this._currentState, this.requestedCurrentState));
                    var a, c;
                    this._currentTransition && (this._currentTransition.effect.removeEventListener(f.EffectEvent.EFFECT_END, this.transition_effectEndHandler, this), b && this._currentTransition.interruptionBehavior == f.InterruptionBehavior.STOP ? (c = this._currentTransition.effect, c.stop()) : (this._currentTransition.autoReverse && this.transitionFromState == this.requestedCurrentState && this.transitionToState == this._currentState && (a = 0 == this._currentTransition.effect.duration ? 0 : this._currentTransition.effect.playheadTime / this.getTotalDuration(this._currentTransition.effect)), this._currentTransition.effect.end()), this._currentTransition = null);
                    c = this._currentState ? this._currentState: "";
                    this.hasEventListener(f.StateChangeEvent.CURRENT_STATE_CHANGING) && f.StateChangeEvent.dispatchStateChangeEvent(this, f.StateChangeEvent.CURRENT_STATE_CHANGING, c, this.requestedCurrentState ? this.requestedCurrentState: "");
                    this.removeState(this._currentState); (this._currentState = this.requestedCurrentState) && this.applyState(this._currentState);
                    this.hasEventListener(f.StateChangeEvent.CURRENT_STATE_CHANGE) && f.StateChangeEvent.dispatchStateChangeEvent(this, f.StateChangeEvent.CURRENT_STATE_CHANGE, c, this._currentState ? this._currentState: "");
                    if (b) {
                        var d = b && b.autoReverse && (b.toState == c || b.fromState == this._currentState);
                        f.UIGlobals._layoutManager.validateNow();
                        this._currentTransition = b;
                        this.transitionFromState = c;
                        this.transitionToState = this._currentState;
                        b.effect.addEventListener(f.EffectEvent.EFFECT_END, this.transition_effectEndHandler, this);
                        b.effect.play(null, d);
                        isNaN(a) || 0 == b.effect.duration || (b.effect.playheadTime = (1 - a) * this.getTotalDuration(b.effect))
                    } else this.hasEventListener(f.StateChangeEvent.STATE_CHANGE_COMPLETE) && f.StateChangeEvent.dispatchStateChangeEvent(this, f.StateChangeEvent.CURRENT_STATE_CHANGE)
                }
            };
            a.transition_effectEndHandler = function(b) {
                this._currentTransition = null;
                this.hasEventListener(f.StateChangeEvent.STATE_CHANGE_COMPLETE) && f.StateChangeEvent.dispatchStateChangeEvent(this, f.StateChangeEvent.CURRENT_STATE_CHANGE)
            };
            a.getState = function(b) {
                if (!b) return null;
                for (var a = this._states,
                c = a.length,
                d = 0; d < c; d++) {
                    var e = a[d];
                    if (e.name == b) return e
                }
                return null
            };
            a.removeState = function(b) {
                if (b = this.getState(b)) {
                    b = b.overrides;
                    for (var a = b.length - 1; 0 <= a; a--) b[a].remove(this)
                }
            };
            a.applyState = function(b) {
                if (b = this.getState(b)) {
                    b = b.overrides;
                    for (var a = b.length,
                    c = 0; c < a; c++) b[c].apply(this)
                }
            };
            a.initializeStates = function() {
                if (!this.initialized) {
                    this.initialized = !0;
                    for (var b = this._states,
                    a = b.length,
                    c = 0; c < a; c++) b[c].initialize(this)
                }
            };
            a.getTransition = function(b, a) {
                var c = null,
                d = 0;
                if (!this.transitions) return null;
                b || (b = "");
                a || (a = "");
                for (var e = 0; e < this.transitions.length; e++) {
                    var f = this.transitions[e];
                    if ("*" == f.fromState && "*" == f.toState && 1 > d) c = f,
                    d = 1;
                    else if (f.toState == b && "*" == f.fromState && f.autoReverse && 2 > d) c = f,
                    d = 2;
                    else if ("*" == f.toState && f.fromState == a && f.autoReverse && 3 > d) c = f,
                    d = 3;
                    else if (f.toState == b && f.fromState == a && f.autoReverse && 4 > d) c = f,
                    d = 4;
                    else if (f.fromState == b && "*" == f.toState && 5 > d) c = f,
                    d = 5;
                    else if ("*" == f.fromState && f.toState == a && 6 > d) c = f,
                    d = 6;
                    else if (f.fromState == b && f.toState == a && 7 > d) {
                        c = f;
                        break
                    }
                }
                c && !c.effect && (c = null);
                return c
            };
            a.getTotalDuration = function(b) {
                var a = 0,
                a = b instanceof f.CompositeEffect ? b.compositeDuration: b.duration,
                c = "repeatCount" in b ? b.repeatCount: 0;
                return a = a * c + ("repeatDelay" in b ? b.repeatDelay: 0) * (c - 1) + ("startDelay" in b ? b.startDelay: 0)
            };
            return c
        } (d.EventDispatcher);
        f.Skin = g;
        g.prototype.__class__ = "egret.gui.Skin"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(b, a, c) {
                void 0 === b && (b = null);
                void 0 === a && (a = null);
                void 0 === c && (c = null);
                e.call(this);
                this.labelDisplay = new d.gui.Label;
                this.iconDisplay = new d.gui.UIAsset;
                var f = {};
                f.up = b;
                f.down = a;
                f.disabled = c;
                this.stateMap = f;
                this._setStates(["up", "down", "disabled"])
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.createChildren = function() {
                e.prototype.createChildren.call(this);
                var b = new f.UIAsset;
                b.left = b.top = b.bottom = b.right = 0;
                this.addElement(b);
                this.backgroundAsset = b;
                this.iconDisplay.includeInLayout = !1;
                this.addElement(this.iconDisplay);
                this.labelDisplay.includeInLayout = !1;
                this.labelDisplay.paddingLeft = 5;
                this.labelDisplay.paddingRight = 5;
                this.addElement(this.labelDisplay)
            };
            a.commitCurrentState = function() {
                e.prototype.commitCurrentState.call(this);
                var b = this.currentState;
                this.stateMap[b] && (this.backgroundAsset.source = this.stateMap[b])
            };
            a.measure = function() {
                e.prototype.measure.call(this);
                var b = this.iconDisplay.preferredWidth + this.labelDisplay.preferredWidth + 20,
                a = Math.max(this.iconDisplay.preferredHeight, this.labelDisplay.preferredHeight) + 20;
                b > this.measuredWidth && (b < this.minWidth && (b = this.minWidth), b > this.maxWidth && (b = this.maxWidth), this.measuredWidth = b);
                a > this.measuredHeight && (a < this.minHeight && (a = this.minHeight), a > this.maxHeight && (a = this.maxHeight), this.measuredHeight = a)
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                var c = this.iconDisplay.layoutBoundsWidth,
                d = this.labelDisplay.layoutBoundsHeight,
                f = 0.5 * (b - c - this.labelDisplay.layoutBoundsWidth);
                this.iconDisplay.setLayoutBoundsPosition(f, 0.5 * (a - this.iconDisplay.layoutBoundsHeight));
                this.labelDisplay.setLayoutBoundsPosition(f + c, 0.5 * (a - d))
            };
            c._skinParts = ["labelDisplay", "iconDisplay"];
            return c
        } (f.Skin);
        f.ButtonSkin = g;
        g.prototype.__class__ = "egret.gui.ButtonSkin"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._rendererOwner = null;
                this.useVirtualLayoutChanged = !1;
                this.rendererToClassMap = [];
                this.freeRenderers = [];
                this.createNewRendererFlag = !1;
                this.cleanTimer = null;
                this.dataProviderChanged = !1;
                this._dataProvider = null;
                this.recyclerDic = [];
                this.itemRendererChanged = !1;
                this._itemRenderer = null;
                this.itemRendererSkinNameChange = !1;
                this._itemRendererFunction = this._itemRendererSkinName = null;
                this.typicalItemChanged = this.virtualLayoutUnderway = !1;
                this.typicalLayoutRect = null;
                this.indexToRenderer = [];
                this.renderersBeingUpdated = this.cleanFreeRenderer = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this._layout
                },
                set: function(b) {
                    b != this.layout && (this.layout && (this.layout.typicalLayoutRect = null, this.layout.removeEventListener("useVirtualLayoutChanged", this.layout_useVirtualLayoutChangedHandler, this)), this.layout && b && this.layout.useVirtualLayout != b.useVirtualLayout && this.changeUseVirtualLayout(), this._setLayout(b), b && (b.typicalLayoutRect = this.typicalLayoutRect, b.addEventListener("useVirtualLayoutChanged", this.layout_useVirtualLayoutChangedHandler, this)))
                },
                enumerable: !0,
                configurable: !0
            });
            a.layout_useVirtualLayoutChangedHandler = function(b) {
                this.changeUseVirtualLayout()
            };
            a.setVirtualElementIndicesInView = function(b, a) {
                if (this.layout && this.layout.useVirtualLayout) {
                    this.virtualRendererIndices = [];
                    for (var c = b; c <= a; c++) this.virtualRendererIndices.push(c);
                    for (var d in this.indexToRenderer) d = parseInt(d),
                    -1 == this.virtualRendererIndices.indexOf(d) && this.freeRendererByIndex(d)
                }
            };
            a.getVirtualElementAt = function(b) {
                if (0 > b || b >= this.dataProvider.length) return null;
                var a = this.indexToRenderer[b];
                if (!a) {
                    var a = this.dataProvider.getItemAt(b),
                    c = this.createVirtualRenderer(b);
                    this.indexToRenderer[b] = c;
                    this.updateRenderer(c, b, a);
                    this.createNewRendererFlag && ("validateNow" in c && c.validateNow(), this.createNewRendererFlag = !1, f.RendererExistenceEvent.dispatchRendererExistenceEvent(this, f.RendererExistenceEvent.RENDERER_ADD, c, b, a));
                    a = c
                }
                return a
            };
            a.freeRendererByIndex = function(b) {
                if (this.indexToRenderer[b]) {
                    var a = this.indexToRenderer[b];
                    delete this.indexToRenderer[b];
                    a && a instanceof d.DisplayObject && this.doFreeRenderer(a)
                }
            };
            a.doFreeRenderer = function(b) {
                var a = this.rendererToClassMap[b.hashCode].hashCode;
                this.freeRenderers[a] || (this.freeRenderers[a] = []);
                this.freeRenderers[a].push(b);
                b.visible = !1
            };
            a.invalidateSize = function() {
                this.createNewRendererFlag || e.prototype.invalidateSize.call(this)
            };
            a.createVirtualRenderer = function(b) {
                b = this.dataProvider.getItemAt(b);
                b = this.itemToRendererClass(b);
                var a = b.hashCode,
                c = this.freeRenderers;
                if (c[a] && 0 < c[a].length) return b = c[a].pop(),
                b.visible = !0,
                b;
                this.createNewRendererFlag = !0;
                return this.createOneRenderer(b)
            };
            a.createOneRenderer = function(b) {
                var a, c = b.hashCode,
                e = this.recyclerDic[c];
                e && (a = e.pop(), 0 == e.length && delete this.recyclerDic[c]);
                a || (a = b.newInstance(), this.rendererToClassMap[a.hashCode] = b);
                if (! (a && a instanceof d.DisplayObject)) return null;
                this._itemRendererSkinName && this.setItemRenderSkinName(a);
                this._addToDisplayList(a);
                a.setLayoutBoundsSize(NaN, NaN);
                return a
            };
            a.setItemRenderSkinName = function(b) {
                b && (b ? b._skinNameExplicitlySet || (b.skinName = this._itemRendererSkinName) : b && !b.skinName && (b.skinName = this._itemRendererSkinName))
            };
            a.finishVirtualLayout = function() {
                if (this.virtualLayoutUnderway) {
                    var b = this.virtualLayoutUnderway = !1,
                    a;
                    for (a in this.freeRenderers) if (0 < this.freeRenderers[a].length) {
                        b = !0;
                        break
                    }
                    b && (this.cleanTimer || (this.cleanTimer = new d.Timer(3E3, 1), this.cleanTimer.addEventListener(d.TimerEvent.TIMER, this.cleanAllFreeRenderer, this)), this.cleanTimer.reset(), this.cleanTimer.start())
                }
            };
            a.cleanAllFreeRenderer = function(b) {
                var a = this.freeRenderers,
                c;
                for (c in a) for (var d = a[c], e = d.length, f = 0; f < e; f++) b = d[f],
                b.visible = !0,
                this.recycle(b);
                this.freeRenderers = [];
                this.cleanFreeRenderer = !1
            };
            a.getElementIndicesInView = function() {
                return this.layout && this.layout.useVirtualLayout ? this.virtualRendererIndices ? this.virtualRendererIndices: [] : e.prototype.getElementIndicesInView.call(this)
            };
            a.changeUseVirtualLayout = function() {
                this.cleanFreeRenderer = this.useVirtualLayoutChanged = !0;
                this.removeDataProviderListener();
                this.invalidateProperties()
            };
            Object.defineProperty(a, "dataProvider", {
                get: function() {
                    return this._dataProvider
                },
                set: function(b) {
                    this._dataProvider != b && (this.removeDataProviderListener(), this._dataProvider = b, this.cleanFreeRenderer = this.dataProviderChanged = !0, this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.removeDataProviderListener = function() {
                this._dataProvider && this._dataProvider.removeEventListener(f.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this)
            };
            a.onCollectionChange = function(b) {
                switch (b.kind) {
                case f.CollectionEventKind.ADD:
                    this.itemAddedHandler(b.items, b.location);
                    break;
                case f.CollectionEventKind.MOVE:
                    this.itemMovedHandler(b.items[0], b.location, b.oldLocation);
                    break;
                case f.CollectionEventKind.REMOVE:
                    this.itemRemovedHandler(b.items, b.location);
                    break;
                case f.CollectionEventKind.UPDATE:
                    this.itemUpdatedHandler(b.items[0], b.location);
                    break;
                case f.CollectionEventKind.REPLACE:
                    this.itemRemoved(b.oldItems[0], b.location);
                    this.itemAdded(b.items[0], b.location);
                    break;
                case f.CollectionEventKind.RESET:
                case f.CollectionEventKind.REFRESH:
                    if (this.layout && this.layout.useVirtualLayout) for (var a in this.indexToRenderer) a = parseInt(a),
                    this.freeRendererByIndex(a);
                    this.dataProviderChanged = !0;
                    this.invalidateProperties()
                }
                this.invalidateSize();
                this.invalidateDisplayList()
            };
            a.itemAddedHandler = function(b, a) {
                for (var c = b.length,
                d = 0; d < c; d++) this.itemAdded(b[d], a + d);
                this.resetRenderersIndices()
            };
            a.itemMovedHandler = function(b, a, c) {
                this.itemRemoved(b, c);
                this.itemAdded(b, a);
                this.resetRenderersIndices()
            };
            a.itemRemovedHandler = function(b, a) {
                for (var c = b.length - 1; 0 <= c; c--) this.itemRemoved(b[c], a + c);
                this.resetRenderersIndices()
            };
            a.itemAdded = function(b, a) {
                this.layout && this.layout.elementAdded(a);
                if (this.layout && this.layout.useVirtualLayout) {
                    var c = this.virtualRendererIndices;
                    if (c) {
                        for (var d = c.length,
                        e = 0; e < d; e++) {
                            var g = c[e];
                            g >= a && (c[e] = g + 1)
                        }
                        this.indexToRenderer.splice(a, 0, null)
                    }
                } else c = this.itemToRendererClass(b),
                c = this.createOneRenderer(c),
                this.indexToRenderer.splice(a, 0, c),
                c && (this.updateRenderer(c, a, b), f.RendererExistenceEvent.dispatchRendererExistenceEvent(this, f.RendererExistenceEvent.RENDERER_ADD, c, a, b))
            };
            a.itemRemoved = function(b, a) {
                this.layout && this.layout.elementRemoved(a);
                var c = this.virtualRendererIndices;
                if (c && 0 < c.length) {
                    for (var e = -1,
                    g = c.length,
                    p = 0; p < g; p++) {
                        var k = c[p];
                        k == a ? e = p: k > a && (c[p] = k - 1)
                    } - 1 != e && c.splice(e, 1)
                }
                c = this.indexToRenderer[a];
                this.indexToRenderer.length > a && this.indexToRenderer.splice(a, 1);
                f.RendererExistenceEvent.dispatchRendererExistenceEvent(this, f.RendererExistenceEvent.RENDERER_REMOVE, c, a, b);
                c && c instanceof d.DisplayObject && this.recycle(c)
            };
            a.recycle = function(b) {
                this._removeFromDisplayList(b);
                "ownerChanged" in b && b.ownerChanged(null);
                var a = this.rendererToClassMap[b.hashCode].hashCode;
                this.recyclerDic[a] || (this.recyclerDic[a] = new d.Recycler);
                this.recyclerDic[a].push(b)
            };
            a.resetRenderersIndices = function() {
                if (0 != this.indexToRenderer.length) if (this.layout && this.layout.useVirtualLayout) for (var b = this.virtualRendererIndices,
                a = b.length,
                c = 0; c < a; c++) {
                    var d = b[c];
                    this.resetRendererItemIndex(d)
                } else for (b = this.indexToRenderer.length, d = 0; d < b; d++) this.resetRendererItemIndex(d)
            };
            a.itemUpdatedHandler = function(b, a) {
                if (!this.renderersBeingUpdated) {
                    var c = this.indexToRenderer[a];
                    c && this.updateRenderer(c, a, b)
                }
            };
            a.resetRendererItemIndex = function(b) {
                var a = this.indexToRenderer[b];
                a && (a.itemIndex = b)
            };
            Object.defineProperty(a, "itemRenderer", {
                get: function() {
                    return this._itemRenderer
                },
                set: function(b) {
                    this._itemRenderer !== b && (this._itemRenderer = b, this.cleanFreeRenderer = this.typicalItemChanged = this.itemRendererChanged = !0, this.removeDataProviderListener(), this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemRendererSkinName", {
                get: function() {
                    return this._itemRendererSkinName
                },
                set: function(b) {
                    this._itemRendererSkinName != b && (this._itemRendererSkinName = b) && this.initialized && (this.itemRendererSkinNameChange = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemRendererFunction", {
                get: function() {
                    return this._itemRendererFunction
                },
                set: function(b) {
                    this._itemRendererFunction != b && (this._itemRendererFunction = b, this.typicalItemChanged = this.itemRendererChanged = !0, this.removeDataProviderListener(), this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.itemToRendererClass = function(b) {
                null != this._itemRendererFunction ? (b = this._itemRendererFunction(b), b || (b = this._itemRenderer)) : b = this._itemRenderer;
                return b ? b: c.defaultRendererFactory
            };
            a.createChildren = function() {
                if (!this.layout) {
                    var b = new f.VerticalLayout;
                    b.gap = 0;
                    b.horizontalAlign = d.HorizontalAlign.CONTENT_JUSTIFY;
                    this.layout = b
                }
                e.prototype.createChildren.call(this)
            };
            a.commitProperties = function() {
                if (this.itemRendererChanged || this.dataProviderChanged || this.useVirtualLayoutChanged) this.removeAllRenderers(),
                this.layout && this.layout.clearVirtualLayoutCache(),
                this.setTypicalLayoutRect(null),
                this.itemRendererChanged = this.useVirtualLayoutChanged = !1,
                this._dataProvider && this._dataProvider.addEventListener(f.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this),
                this.layout && this.layout.useVirtualLayout ? (this.invalidateSize(), this.invalidateDisplayList()) : this.createRenderers(),
                this.dataProviderChanged && (this.dataProviderChanged = !1, this.verticalScrollPosition = this.horizontalScrollPosition = 0);
                e.prototype.commitProperties.call(this);
                this.typicalItemChanged && (this.typicalItemChanged = !1, this._dataProvider && 0 < this._dataProvider.length && (this.typicalItem = this._dataProvider.getItemAt(0), this.measureRendererSize()));
                if (this.itemRendererSkinNameChange) {
                    this.itemRendererSkinNameChange = !1;
                    for (var b = this.indexToRenderer.length,
                    a = 0; a < b; a++) this.setItemRenderSkinName(this.indexToRenderer[a]);
                    var c = this.freeRenderers,
                    d;
                    for (d in c) {
                        var g = c[d];
                        if (g) for (b = g.length, a = 0; a < b; a++) this.setItemRenderSkinName(g[a])
                    }
                }
            };
            a.measure = function() {
                this.layout && this.layout.useVirtualLayout && this.ensureTypicalLayoutElement();
                e.prototype.measure.call(this)
            };
            a.updateDisplayList = function(b, a) {
                this._layoutInvalidateDisplayListFlag && this.layout && this.layout.useVirtualLayout && (this.virtualLayoutUnderway = !0, this.ensureTypicalLayoutElement());
                e.prototype.updateDisplayList.call(this, b, a);
                this.virtualLayoutUnderway && this.finishVirtualLayout()
            };
            a.ensureTypicalLayoutElement = function() { ! this.layout.typicalLayoutRect && this._dataProvider && 0 < this._dataProvider.length && (this.typicalItem = this._dataProvider.getItemAt(0), this.measureRendererSize())
            };
            a.measureRendererSize = function() {
                if (this.typicalItem) {
                    var b = this.itemToRendererClass(this.typicalItem);
                    if (b = this.createOneRenderer(b)) {
                        this.createNewRendererFlag = !0;
                        this.updateRenderer(b, 0, this.typicalItem);
                        "validateNow" in b && b.validateNow();
                        var a = new d.Rectangle(0, 0, b.preferredWidth, b.preferredHeight);
                        this.recycle(b);
                        this.setTypicalLayoutRect(a);
                        this.createNewRendererFlag = !1
                    } else this.setTypicalLayoutRect(null)
                } else this.setTypicalLayoutRect(null)
            };
            a.setTypicalLayoutRect = function(b) {
                this.typicalLayoutRect = b;
                this.layout && (this.layout.typicalLayoutRect = b)
            };
            a.removeAllRenderers = function() {
                for (var b = this.indexToRenderer.length,
                a, c = 0; c < b; c++) if (a = this.indexToRenderer[c]) this.recycle(a),
                f.RendererExistenceEvent.dispatchRendererExistenceEvent(this, f.RendererExistenceEvent.RENDERER_REMOVE, a, a.itemIndex, a.data);
                this.indexToRenderer = [];
                this.virtualRendererIndices = null;
                this.cleanFreeRenderer && this.cleanAllFreeRenderer()
            };
            a.createRenderers = function() {
                if (this._dataProvider) for (var b = 0,
                a = this._dataProvider.length,
                c = 0; c < a; c++) {
                    var d = this._dataProvider.getItemAt(c),
                    e = this.itemToRendererClass(d);
                    if (e = this.createOneRenderer(e)) this.indexToRenderer[b] = e,
                    this.updateRenderer(e, b, d),
                    f.RendererExistenceEvent.dispatchRendererExistenceEvent(this, f.RendererExistenceEvent.RENDERER_ADD, e, b, d),
                    b++
                }
            };
            a.updateRenderer = function(b, a, c) {
                this.renderersBeingUpdated = !0;
                this._rendererOwner ? b = this._rendererOwner.updateRenderer(b, a, c) : ("ownerChanged" in b && b.ownerChanged(this), b.itemIndex = a, b.label = this.itemToLabel(c), b.data = c);
                this.renderersBeingUpdated = !1;
                return b
            };
            a.itemToLabel = function(b) {
                return b ? b.toString() : " "
            };
            a.getElementAt = function(b) {
                return this.indexToRenderer[b]
            };
            a.getElementIndex = function(b) {
                return b ? this.indexToRenderer.indexOf(b) : -1
            };
            Object.defineProperty(a, "numElements", {
                get: function() {
                    return this._dataProvider ? this._dataProvider.length: 0
                },
                enumerable: !0,
                configurable: !0
            });
            a.addChild = function(b) {
                throw Error(d.getString(3004, d.getString(3003)));
            };
            a.addChildAt = function(b, a) {
                throw Error(d.getString(3005, d.getString(3003)));
            };
            a.removeChild = function(b) {
                throw Error(d.getString(3006, d.getString(3003)));
            };
            a.removeChildAt = function(b) {
                throw Error(d.getString(3007, d.getString(3003)));
            };
            a.setChildIndex = function(b, a) {
                throw Error(d.getString(3008, d.getString(3003)));
            };
            a.swapChildren = function(b, a) {
                throw Error(d.getString(3009, d.getString(3003)));
            };
            a.swapChildrenAt = function(b, a) {
                throw Error(d.getString(3010, d.getString(3003)));
            };
            c.defaultRendererFactory = new f.ClassFactory(f.ItemRenderer);
            return c
        } (f.GroupBase);
        f.DataGroup = g;
        g.prototype.__class__ = "egret.gui.DataGroup"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._placeHolderGroup = this.contentGroup = null;
                this.contentGroupProperties = {}
            }
            __extends(c, e);
            var a = c.prototype;
            a._getCurrentContentGroup = function() {
                return null == this.contentGroup ? (null == this._placeHolderGroup && (this._placeHolderGroup = new d.Group, this._placeHolderGroup.visible = !1, this._addToDisplayList(this._placeHolderGroup)), this._placeHolderGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this), this._placeHolderGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this), this._placeHolderGroup) : this.contentGroup
            };
            Object.defineProperty(a, "elementsContent", {
                set: function(b) {
                    this._getCurrentContentGroup().elementsContent = b
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "numElements", {
                get: function() {
                    return this._getCurrentContentGroup().numElements
                },
                enumerable: !0,
                configurable: !0
            });
            a.getElementAt = function(b) {
                return this._getCurrentContentGroup().getElementAt(b)
            };
            a.addElement = function(b) {
                return this._getCurrentContentGroup().addElement(b)
            };
            a.addElementAt = function(b, a) {
                return this._getCurrentContentGroup().addElementAt(b, a)
            };
            a.removeElement = function(b) {
                return this._getCurrentContentGroup().removeElement(b)
            };
            a.removeElementAt = function(b) {
                return this._getCurrentContentGroup().removeElementAt(b)
            };
            a.removeAllElements = function() {
                this._getCurrentContentGroup().removeAllElements()
            };
            a.getElementIndex = function(b) {
                return this._getCurrentContentGroup().getElementIndex(b)
            };
            a.setElementIndex = function(b, a) {
                this._getCurrentContentGroup().setElementIndex(b, a)
            };
            a.swapElements = function(b, a) {
                this._getCurrentContentGroup().swapElements(b, a)
            };
            a.swapElementsAt = function(b, a) {
                this._getCurrentContentGroup().swapElementsAt(b, a)
            };
            Object.defineProperty(a, "layout", {
                get: function() {
                    return null != this.contentGroup ? this.contentGroup.layout: this.contentGroupProperties.layout
                },
                set: function(b) {
                    null != this.contentGroup ? this.contentGroup.layout = b: this.contentGroupProperties.layout = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                if (a == this.contentGroup) {
                    void 0 !== this.contentGroupProperties.layout && (this.contentGroup.layout = this.contentGroupProperties.layout, this.contentGroupProperties = {});
                    if (this._placeHolderGroup) {
                        this._placeHolderGroup.removeEventListener(d.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                        this._placeHolderGroup.removeEventListener(d.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this);
                        for (var c = this._placeHolderGroup._getElementsContent().concat(), g = this._placeHolderGroup.numElements; 0 < g; g--) {
                            var t = this._placeHolderGroup.removeElementAt(0);
                            t.ownerChanged(null)
                        }
                        this._removeFromDisplayList(this._placeHolderGroup);
                        this.contentGroup.elementsContent = c;
                        for (g = c.length - 1; 0 <= g; g--) t = c[g],
                        t.ownerChanged(this);
                        this._placeHolderGroup = null
                    }
                    this.contentGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                    this.contentGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this)
                }
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                if (a == this.contentGroup && (this.contentGroup.removeEventListener(d.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this), this.contentGroup.removeEventListener(d.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this), this.contentGroupProperties.layout = this.contentGroup.layout, this.contentGroup.layout = null, 0 < this.contentGroup.numElements)) {
                    for (this._placeHolderGroup = new d.Group; 0 < this.contentGroup.numElements;) this._placeHolderGroup.addElement(this.contentGroup.getElementAt(0));
                    this._placeHolderGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_ADD, this._contentGroup_elementAddedHandler, this);
                    this._placeHolderGroup.addEventListener(d.ElementExistenceEvent.ELEMENT_REMOVE, this._contentGroup_elementRemovedHandler, this)
                }
            };
            a._contentGroup_elementAddedHandler = function(b) {
                b.element.ownerChanged(this);
                this.dispatchEvent(b)
            };
            a._contentGroup_elementRemovedHandler = function(b) {
                b.element.ownerChanged(null);
                this.dispatchEvent(b)
            };
            return c
        } (d.SkinnableComponent);
        d.SkinnableContainer = g;
        g.prototype.__class__ = "egret.gui.SkinnableContainer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.dataGroup = null;
                this._dataGroupProperties = {}
            }
            __extends(c, e);
            var a = c.prototype;
            a.updateRenderer = function(b, a, c) {
                "ownerChanged" in b && b.ownerChanged(this);
                b.itemIndex = a;
                b.label = this.itemToLabel(c);
                b.data = c;
                return b
            };
            a.itemToLabel = function(b) {
                return null !== b ? b.toString() : " "
            };
            Object.defineProperty(a, "dataProvider", {
                get: function() {
                    return this._getDataProvider()
                },
                set: function(b) {
                    this._setDataProvider(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getDataProvider = function() {
                return null != this.dataGroup ? this.dataGroup.dataProvider: this._dataGroupProperties.dataProvider
            };
            a._setDataProvider = function(b) {
                null == this.dataGroup ? this._dataGroupProperties.dataProvider = b: (this.dataGroup.dataProvider = b, this._dataGroupProperties.dataProvider = !0)
            };
            Object.defineProperty(a, "itemRenderer", {
                get: function() {
                    return this.dataGroup ? this.dataGroup.itemRenderer: this._dataGroupProperties.itemRenderer
                },
                set: function(b) {
                    null == this.dataGroup ? this._dataGroupProperties.itemRenderer = b: (this.dataGroup.itemRenderer = b, this._dataGroupProperties.itemRenderer = !0)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemRendererSkinName", {
                get: function() {
                    return this.dataGroup ? this.dataGroup.itemRendererSkinName: this._dataGroupProperties.itemRendererSkinName
                },
                set: function(b) {
                    null == this.dataGroup ? this._dataGroupProperties.itemRendererSkinName = b: (this.dataGroup.itemRendererSkinName = b, this._dataGroupProperties.itemRendererSkinName = !0)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemRendererFunction", {
                get: function() {
                    return this.dataGroup ? this.dataGroup.itemRendererFunction: this._dataGroupProperties.itemRendererFunction
                },
                set: function(b) {
                    null == this.dataGroup ? this._dataGroupProperties.itemRendererFunction = b: (this.dataGroup.itemRendererFunction = b, this._dataGroupProperties.itemRendererFunction = !0)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this.dataGroup ? this.dataGroup.layout: this._dataGroupProperties.layout
                },
                set: function(b) {
                    this._setLayout(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setLayout = function(b) {
                null == this.dataGroup ? this._dataGroupProperties.layout = b: (this.dataGroup.layout = b, this._dataGroupProperties.layout = !0)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                if (a == this.dataGroup) {
                    var c = {};
                    void 0 !== this._dataGroupProperties.layout && (this.dataGroup.layout = this._dataGroupProperties.layout, c.layout = !0);
                    void 0 !== this._dataGroupProperties.dataProvider && (this.dataGroup.dataProvider = this._dataGroupProperties.dataProvider, c.dataProvider = !0);
                    void 0 !== this._dataGroupProperties.itemRenderer && (this.dataGroup.itemRenderer = this._dataGroupProperties.itemRenderer, c.itemRenderer = !0);
                    void 0 !== this._dataGroupProperties.itemRendererSkinName && (this.dataGroup.itemRendererSkinName = this._dataGroupProperties.itemRendererSkinName, c.itemRendererSkinName = !0);
                    void 0 !== this._dataGroupProperties.itemRendererFunction && (this.dataGroup.itemRendererFunction = this._dataGroupProperties.itemRendererFunction, c.itemRendererFunction = !0);
                    this.dataGroup._rendererOwner = this;
                    this._dataGroupProperties = c;
                    this.hasEventListener(d.RendererExistenceEvent.RENDERER_ADD) && this.dataGroup.addEventListener(d.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                    this.hasEventListener(d.RendererExistenceEvent.RENDERER_REMOVE) && this.dataGroup.addEventListener(d.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this)
                }
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                if (a == this.dataGroup) {
                    this.dataGroup.removeEventListener(d.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                    this.dataGroup.removeEventListener(d.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this);
                    var c = {};
                    this._dataGroupProperties.layout && (c.layout = this.dataGroup.layout);
                    this._dataGroupProperties.dataProvider && (c.dataProvider = this.dataGroup.dataProvider);
                    this._dataGroupProperties.itemRenderer && (c.itemRenderer = this.dataGroup.itemRenderer);
                    this._dataGroupProperties.itemRendererSkinName && (c.itemRendererSkinName = this.dataGroup.itemRendererSkinName);
                    this._dataGroupProperties.itemRendererFunction && (c.itemRendererFunction = this.dataGroup.itemRendererFunction);
                    this._dataGroupProperties = c;
                    this.dataGroup._rendererOwner = null;
                    this.dataGroup.dataProvider = null;
                    this.dataGroup.layout = null
                }
            };
            a.addEventListener = function(b, a, c, g, t) {
                void 0 === g && (g = !1);
                void 0 === t && (t = 0);
                e.prototype.addEventListener.call(this, b, a, c, g, t);
                b == d.RendererExistenceEvent.RENDERER_ADD && this.dataGroup && this.dataGroup.addEventListener(d.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this);
                b == d.RendererExistenceEvent.RENDERER_REMOVE && this.dataGroup && this.dataGroup.addEventListener(d.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this)
            };
            a.removeEventListener = function(b, a, c, g) {
                void 0 === g && (g = !1);
                e.prototype.removeEventListener.call(this, b, a, c, g);
                b == d.RendererExistenceEvent.RENDERER_ADD && this.dataGroup && (this.hasEventListener(d.RendererExistenceEvent.RENDERER_ADD) || this.dataGroup.removeEventListener(d.RendererExistenceEvent.RENDERER_ADD, this.dispatchEvent, this));
                b == d.RendererExistenceEvent.RENDERER_REMOVE && this.dataGroup && (this.hasEventListener(d.RendererExistenceEvent.RENDERER_REMOVE) || this.dataGroup.removeEventListener(d.RendererExistenceEvent.RENDERER_REMOVE, this.dispatchEvent, this))
            };
            return c
        } (d.SkinnableComponent);
        d.SkinnableDataContainer = g;
        g.prototype.__class__ = "egret.gui.SkinnableDataContainer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.dataProviderChanged = this._doingWholesaleChanges = !1;
                this._labelField = "label";
                this.labelFieldOrFunctionChanged = !1;
                this._labelFunction = null;
                this.requireSelectionChanged = this._requireSelection = !1;
                this._proposedSelectedIndex = c.NO_PROPOSED_SELECTION;
                this._selectedIndex = c.NO_SELECTION;
                this._dispatchChangeAfterSelection = this._allowCustomSelectedItem = !1;
                this._pendingSelectedItem = void 0;
                this._selectedItem = null;
                this.selectedIndexAdjusted = this._useVirtualLayout = !1
            }
            __extends(c, e);
            var a = c.prototype;
            a._setDataProvider = function(b) {
                this.dataProvider && this.dataProvider.removeEventListener(f.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this);
                this._doingWholesaleChanges = this.dataProviderChanged = !0;
                b && b.addEventListener(f.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this);
                e.prototype._setDataProvider.call(this, b);
                this.invalidateProperties()
            };
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this.dataGroup ? this.dataGroup.layout: this._dataGroupProperties.layout
                },
                set: function(b) {
                    b && this.useVirtualLayout && (b.useVirtualLayout = !0);
                    this._setLayout(b)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "labelField", {
                get: function() {
                    return this._labelField
                },
                set: function(b) {
                    this._setLabelField(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setLabelField = function(b) {
                b != this._labelField && (this._labelField = b, this.labelFieldOrFunctionChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "labelFunction", {
                get: function() {
                    return this._labelFunction
                },
                set: function(b) {
                    this._setLabelFunction(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setLabelFunction = function(b) {
                b != this._labelFunction && (this._labelFunction = b, this.labelFieldOrFunctionChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "requireSelection", {
                get: function() {
                    return this._requireSelection
                },
                set: function(b) {
                    this._setRequireSelection(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setRequireSelection = function(b) {
                b != this._requireSelection && (this._requireSelection = b) && (this.requireSelectionChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "selectedIndex", {
                get: function() {
                    return this._getSelectedIndex()
                },
                set: function(b) {
                    this._setSelectedIndex(b, !1)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getSelectedIndex = function() {
                return this._proposedSelectedIndex != c.NO_PROPOSED_SELECTION ? this._proposedSelectedIndex: this._selectedIndex
            };
            a._setSelectedIndex = function(b, a) {
                void 0 === a && (a = !1);
                b != this.selectedIndex && (a && (this._dispatchChangeAfterSelection = this._dispatchChangeAfterSelection || a), this._proposedSelectedIndex = b, this.invalidateProperties())
            };
            Object.defineProperty(a, "selectedItem", {
                get: function() {
                    return void 0 !== this._pendingSelectedItem ? this._pendingSelectedItem: this._allowCustomSelectedItem && this.selectedIndex == c.CUSTOM_SELECTED_ITEM ? this._selectedItem: this.selectedIndex == c.NO_SELECTION || null == this.dataProvider ? void 0 : this.dataProvider.length > this.selectedIndex ? this.dataProvider.getItemAt(this.selectedIndex) : void 0
                },
                set: function(b) {
                    this._setSelectedItem(b, !1)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSelectedItem = function(b, a) {
                void 0 === a && (a = !1);
                this.selectedItem !== b && (a && (this._dispatchChangeAfterSelection = this._dispatchChangeAfterSelection || a), this._pendingSelectedItem = b, this.invalidateProperties())
            };
            Object.defineProperty(a, "useVirtualLayout", {
                get: function() {
                    return this._getUseVirtualLayout()
                },
                set: function(b) {
                    this._setUseVirtualLayout(b)
                },
                enumerable: !0,
                configurable: !0
            });
            a._getUseVirtualLayout = function() {
                return this.layout ? this.layout.useVirtualLayout: this._useVirtualLayout
            };
            a._setUseVirtualLayout = function(b) {
                b != this.useVirtualLayout && (this._useVirtualLayout = b, this.layout && (this.layout.useVirtualLayout = b))
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.dataProviderChanged && (this._doingWholesaleChanges = this.dataProviderChanged = !1, 0 <= this.selectedIndex && this.dataProvider && this.selectedIndex < this.dataProvider.length ? this.itemSelected(this.selectedIndex, !0) : this.requireSelection ? this._proposedSelectedIndex = 0 : this._setSelectedIndex( - 1, !1));
                this.requireSelectionChanged && (this.requireSelectionChanged = !1, this.requireSelection && this.selectedIndex == c.NO_SELECTION && this.dataProvider && 0 < this.dataProvider.length && (this._proposedSelectedIndex = 0));
                void 0 !== this._pendingSelectedItem && (this._proposedSelectedIndex = this.dataProvider ? this.dataProvider.getItemIndex(this._pendingSelectedItem) : c.NO_SELECTION, this._allowCustomSelectedItem && -1 == this._proposedSelectedIndex && (this._proposedSelectedIndex = c.CUSTOM_SELECTED_ITEM, this._selectedItem = this._pendingSelectedItem), this._pendingSelectedItem = void 0);
                var b = !1;
                this._proposedSelectedIndex != c.NO_PROPOSED_SELECTION && (b = this.commitSelection());
                this.selectedIndexAdjusted && (this.selectedIndexAdjusted = !1, b || f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT));
                if (this.labelFieldOrFunctionChanged) {
                    if (null != this.dataGroup) if (this.layout && this.layout.useVirtualLayout) for (var a = this.dataGroup.getElementIndicesInView(), d = a.length, g = 0; g < d; g++) b = a[g],
                    this.updateRendererLabelProperty(b);
                    else for (a = this.dataGroup.numElements, b = 0; b < a; b++) this.updateRendererLabelProperty(b);
                    this.labelFieldOrFunctionChanged = !1
                }
            };
            a.updateRendererLabelProperty = function(b) {
                if (b = this.dataGroup.getElementAt(b)) b.label = this.itemToLabel(b.data)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.dataGroup && (this._useVirtualLayout && this.dataGroup.layout && (this.dataGroup.layout.useVirtualLayout = !0), this.dataGroup.addEventListener(f.RendererExistenceEvent.RENDERER_ADD, this.dataGroup_rendererAddHandler, this), this.dataGroup.addEventListener(f.RendererExistenceEvent.RENDERER_REMOVE, this.dataGroup_rendererRemoveHandler, this))
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.dataGroup && (this.dataGroup.removeEventListener(f.RendererExistenceEvent.RENDERER_ADD, this.dataGroup_rendererAddHandler, this), this.dataGroup.removeEventListener(f.RendererExistenceEvent.RENDERER_REMOVE, this.dataGroup_rendererRemoveHandler, this))
            };
            a.updateRenderer = function(b, a, c) {
                this.itemSelected(a, this._isItemIndexSelected(a));
                return e.prototype.updateRenderer.call(this, b, a, c)
            };
            a.itemToLabel = function(b) {
                if (null != this._labelFunction) return this._labelFunction(b);
                if ("string" == typeof b) return b;
                if (b instanceof d.XML) try {
                    0 != b[this.labelField].length() && (b = b[this.labelField])
                } catch(a) {} else if (b instanceof Object) try {
                    null != b[this.labelField] && (b = b[this.labelField])
                } catch(c) {}
                if ("string" == typeof b) return b;
                try {
                    if (null !== b) return b.toString()
                } catch(e) {}
                return " "
            };
            a.itemSelected = function(b, a) {
                if (this.dataGroup) {
                    var c = this.dataGroup.getElementAt(b);
                    null != c && (c.selected = a)
                }
            };
            a._isItemIndexSelected = function(b) {
                return b == this.selectedIndex
            };
            a.commitSelection = function(b) {
                void 0 === b && (b = !0);
                var a = this.dataProvider ? this.dataProvider.length - 1 : -1,
                d = this._selectedIndex;
                if (!this._allowCustomSelectedItem || this._proposedSelectedIndex != c.CUSTOM_SELECTED_ITEM) if (this._proposedSelectedIndex < c.NO_SELECTION && (this._proposedSelectedIndex = c.NO_SELECTION), this._proposedSelectedIndex > a && (this._proposedSelectedIndex = a), this.requireSelection && this._proposedSelectedIndex == c.NO_SELECTION && this.dataProvider && 0 < this.dataProvider.length) return this._proposedSelectedIndex = c.NO_PROPOSED_SELECTION,
                this._dispatchChangeAfterSelection = !1;
                a = this._proposedSelectedIndex;
                if (this._dispatchChangeAfterSelection && !f.IndexChangeEvent.dispatchIndexChangeEvent(this, f.IndexChangeEvent.CHANGING, this._selectedIndex, this._proposedSelectedIndex, !0)) return this.itemSelected(this._proposedSelectedIndex, !1),
                this._proposedSelectedIndex = c.NO_PROPOSED_SELECTION,
                this._dispatchChangeAfterSelection = !1;
                this._selectedIndex = a;
                this._proposedSelectedIndex = c.NO_PROPOSED_SELECTION;
                d != c.NO_SELECTION && this.itemSelected(d, !1);
                this._selectedIndex != c.NO_SELECTION && this.itemSelected(this._selectedIndex, !0);
                b && (this._dispatchChangeAfterSelection && (f.IndexChangeEvent.dispatchIndexChangeEvent(this, f.IndexChangeEvent.CHANGE, d, this._selectedIndex), this._dispatchChangeAfterSelection = !1), f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT));
                return ! 0
            };
            a.adjustSelection = function(b, a) {
                this._proposedSelectedIndex != c.NO_PROPOSED_SELECTION ? this._proposedSelectedIndex = b: this._selectedIndex = b;
                this.selectedIndexAdjusted = !0;
                this.invalidateProperties()
            };
            a.itemAdded = function(b) {
                this._doingWholesaleChanges || (this.selectedIndex == c.NO_SELECTION ? this.requireSelection && this.adjustSelection(b, !0) : b <= this.selectedIndex && this.adjustSelection(this.selectedIndex + 1, !0))
            };
            a.itemRemoved = function(b) {
                this.selectedIndex == c.NO_SELECTION || this._doingWholesaleChanges || (b == this.selectedIndex ? this.requireSelection && this.dataProvider && 0 < this.dataProvider.length ? 0 == b ? (this._proposedSelectedIndex = 0, this.invalidateProperties()) : this._setSelectedIndex(0, !1) : this.adjustSelection( - 1, !1) : b < this.selectedIndex && this.adjustSelection(this.selectedIndex - 1, !1))
            };
            a.dataGroup_rendererAddHandler = function(b) {
                b = b.renderer;
                null != b && (b.addEventListener(d.TouchEvent.TOUCH_ROLL_OVER, this.item_mouseEventHandler, this), b.addEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.item_mouseEventHandler, this))
            };
            a.dataGroup_rendererRemoveHandler = function(b) {
                b = b.renderer;
                null != b && (b.removeEventListener(d.TouchEvent.TOUCH_ROLL_OVER, this.item_mouseEventHandler, this), b.removeEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.item_mouseEventHandler, this))
            };
            a.item_mouseEventHandler = function(b) {
                var a = b.type,
                a = c.TYPE_MAP[a];
                this.hasEventListener(a) && this._dispatchListEvent(b, a, b.currentTarget)
            };
            a._dispatchListEvent = function(b, a, c) {
                var d = -1,
                d = c ? c.itemIndex: this.dataGroup.getElementIndex(b.currentTarget),
                e = this.dataProvider.getItemAt(d);
                f.ListEvent.dispatchListEvent(this, a, b, d, e, c)
            };
            a.dataProvider_collectionChangeHandler = function(b) {
                var a = b.items;
                if (b.kind == f.CollectionEventKind.ADD) for (var a = a.length,
                d = 0; d < a; d++) this.itemAdded(b.location + d);
                else if (b.kind == f.CollectionEventKind.REMOVE) for (a = a.length, d = a - 1; 0 <= d; d--) this.itemRemoved(b.location + d);
                else b.kind == f.CollectionEventKind.MOVE ? (this.itemRemoved(b.oldLocation), this.itemAdded(b.location)) : b.kind == f.CollectionEventKind.RESET ? 0 == this.dataProvider.length ? this._setSelectedIndex(c.NO_SELECTION, !1) : (this.dataProviderChanged = !0, this.invalidateProperties()) : b.kind == f.CollectionEventKind.REFRESH && this.dataProviderRefreshed()
            };
            a.dataProviderRefreshed = function() {
                this._setSelectedIndex(c.NO_SELECTION, !1)
            };
            c.NO_SELECTION = -1;
            c.NO_PROPOSED_SELECTION = -2;
            c.CUSTOM_SELECTED_ITEM = -3;
            c.TYPE_MAP = {
                rollOver: "itemRollOver",
                rollOut: "itemRollOut"
            };
            return c
        } (f.SkinnableDataContainer);
        f.ListBase = g;
        g.prototype.__class__ = "egret.gui.ListBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.titleDisplay = null;
                this._title = "";
                this.touchEnabled = this.titleChanged = !1
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "title", {
                get: function() {
                    return this._title
                },
                set: function(b) {
                    this._title = b;
                    this.titleDisplay && (this.titleDisplay.text = this.title)
                },
                enumerable: !0,
                configurable: !0
            });
            a.partAdded = function(b, a) {
                d.prototype.partAdded.call(this, b, a);
                a == this.titleDisplay && (this.titleDisplay.text = this.title)
            };
            return c
        } (d.SkinnableContainer);
        d.Panel = g;
        g.prototype.__class__ = "egret.gui.Panel"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.moveArea = this.closeButton = null;
                this._autoBackToStage = this._showCloseButton = !0;
                this._offsetPointY = this._offsetPointX = NaN;
                this.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.onWindowMouseDown, this, !0, 100)
            }
            __extends(c, e);
            var a = c.prototype;
            a.onWindowMouseDown = function(b) {
                this.enabled && this.isPopUp && b.target != this.closeButton && f.PopUpManager.bringToFront(this)
            };
            Object.defineProperty(a, "showCloseButton", {
                get: function() {
                    return this._showCloseButton
                },
                set: function(b) {
                    this._showCloseButton != b && (this._showCloseButton = b, this.closeButton && (this.closeButton.visible = this._showCloseButton))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "autoBackToStage", {
                get: function() {
                    return this._autoBackToStage
                },
                set: function(b) {
                    this._autoBackToStage = b
                },
                enumerable: !0,
                configurable: !0
            });
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.moveArea ? this.moveArea.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.moveArea_mouseDownHandler, this) : a == this.closeButton && (this.closeButton.addEventListener(d.TouchEvent.TOUCH_TAP, this.closeButton_clickHandler, this), this.closeButton.visible = this._showCloseButton)
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.moveArea ? this.moveArea.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.moveArea_mouseDownHandler, this) : a == this.closeButton && this.closeButton.removeEventListener(d.TouchEvent.TOUCH_TAP, this.closeButton_clickHandler, this)
            };
            a.closeButton_clickHandler = function(b) {
                f.CloseEvent.dispatchCloseEvent(this, f.CloseEvent.CLOSE)
            };
            a.moveArea_mouseDownHandler = function(b) {
                this.enabled && this.isPopUp && (b = this.globalToLocal(b.stageX, b.stageY, d.Point.identity), this._offsetPointX = b.x, this._offsetPointY = b.y, this._includeInLayout = !1, f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_MOVE, this.moveArea_mouseMoveHandler, this), f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.moveArea_mouseUpHandler, this), f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.moveArea_mouseUpHandler, this))
            };
            a.moveArea_mouseMoveHandler = function(b) {
                b = this.globalToLocal(b.stageX, b.stageY, d.Point.identity);
                this.x += b.x - this._offsetPointX;
                this.y += b.y - this._offsetPointY
            };
            a.moveArea_mouseUpHandler = function(b) {
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_MOVE, this.moveArea_mouseMoveHandler, this);
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.moveArea_mouseUpHandler, this);
                f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.moveArea_mouseUpHandler, this);
                this._autoBackToStage && this.adjustPosForStage();
                f.LayoutUtil.adjustRelativeByXY(this);
                this.includeInLayout = !0
            };
            a.adjustPosForStage = function() {
                if (this.moveArea && this.stage) {
                    var b = this.moveArea.localToGlobal(0, 0),
                    a = b.x,
                    c = b.y;
                    35 > b.x + this.moveArea.width && (a = 35 - this.moveArea.width);
                    b.x > this.stage.stageWidth - 20 && (a = this.stage.stageWidth - 20);
                    20 > b.y + this.moveArea.height && (c = 20 - this.moveArea.height);
                    b.y > this.stage.stageHeight - 20 && (c = this.stage.stageHeight - 20);
                    this.x += a - b.x;
                    this.y += c - b.y
                }
            };
            return c
        } (f.Panel);
        f.TitleWindow = g;
        g.prototype.__class__ = "egret.gui.TitleWindow"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._contentText = this._secondButtonLabel = this._firstButtonLabel = "";
                this.secondButton = this.firstButton = this.contentDisplay = this.closeHandler = null
            }
            __extends(c, e);
            var a = c.prototype;
            c.show = function(b, a, d, e, g, p, k, l) {
                void 0 === b && (b = "");
                void 0 === a && (a = "");
                void 0 === d && (d = null);
                void 0 === e && (e = "OK");
                void 0 === g && (g = "");
                void 0 === p && (p = !0);
                void 0 === k && (k = !0);
                var m = new c;
                m.contentText = b;
                m.title = a;
                m._firstButtonLabel = e;
                m._secondButtonLabel = g;
                m.closeHandler = d;
                m.thisObject = l;
                f.PopUpManager.addPopUp(m, p, k);
                return m
            };
            Object.defineProperty(a, "firstButtonLabel", {
                get: function() {
                    return this._firstButtonLabel
                },
                set: function(b) {
                    this._firstButtonLabel != b && (this._firstButtonLabel = b, this.firstButton && (this.firstButton.label = b))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "secondButtonLabel", {
                get: function() {
                    return this._secondButtonLabel
                },
                set: function(b) {
                    this._secondButtonLabel != b && (this._secondButtonLabel = b, !this.secondButton || null != b && "" != b || (this.secondButton.includeInLayout = this.secondButton.visible = "" != this._secondButtonLabel && null != this._secondButtonLabel))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "contentText", {
                get: function() {
                    return this._contentText
                },
                set: function(b) {
                    this._contentText != b && (this._contentText = b, this.contentDisplay && (this.contentDisplay.text = b))
                },
                enumerable: !0,
                configurable: !0
            });
            a.onClose = function(b) {
                f.PopUpManager.removePopUp(this);
                if (null != this.closeHandler) {
                    var a = new f.CloseEvent(f.CloseEvent.CLOSE);
                    switch (b.currentTarget) {
                    case this.firstButton:
                        a.detail = c.FIRST_BUTTON;
                        break;
                    case this.secondButton:
                        a.detail = c.SECOND_BUTTON
                    }
                    this.callCloseHandler(a)
                }
            };
            a.closeButton_clickHandler = function(b) {
                e.prototype.closeButton_clickHandler.call(this, b);
                f.PopUpManager.removePopUp(this);
                b = new f.CloseEvent(f.CloseEvent.CLOSE, !1, !1, c.CLOSE_BUTTON);
                this.callCloseHandler(b)
            };
            a.callCloseHandler = function(b) {
                null != this.closeHandler && this.closeHandler.call(this.thisObject || this, b)
            };
            a.partAdded = function(b, a) {
                e.prototype.partAdded.call(this, b, a);
                a == this.contentDisplay ? this.contentDisplay.text = this._contentText: a == this.firstButton ? (this.firstButton.label = this._firstButtonLabel, this.firstButton.addEventListener(d.TouchEvent.TOUCH_TAP, this.onClose, this)) : a == this.secondButton && (this.secondButton.label = this._secondButtonLabel, this.secondButton.includeInLayout = this.secondButton.visible = "" != this._secondButtonLabel && null != this._secondButtonLabel, this.secondButton.addEventListener(d.TouchEvent.TOUCH_TAP, this.onClose, this))
            };
            a.partRemoved = function(b, a) {
                e.prototype.partRemoved.call(this, b, a);
                a == this.firstButton ? this.firstButton.removeEventListener(d.TouchEvent.TOUCH_TAP, this.onClose, this) : a == this.secondButton && this.secondButton.removeEventListener(d.TouchEvent.TOUCH_TAP, this.onClose, this)
            };
            c.FIRST_BUTTON = "firstButton";
            c.SECOND_BUTTON = "secondButton";
            c.CLOSE_BUTTON = "closeButton";
            return c
        } (f.TitleWindow);
        f.Alert = g;
        g.prototype.__class__ = "egret.gui.Alert"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._labelFunction = this.labelDisplay = this.track = this.thumb = null;
                this._slideDuration = 500;
                this._direction = f.ProgressBarDirection.LEFT_TO_RIGHT;
                this.animator = null;
                this.slideToValue = NaN;
                this.animationValue = 0;
                this.trackResizedOrMoved = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "labelFunction", {
                get: function() {
                    return this._labelFunction
                },
                set: function(b) {
                    this._labelFunction != b && (this._labelFunction = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.valueToLabel = function(b, a) {
                return null != this.labelFunction ? this._labelFunction(b, a) : b + " / " + a
            };
            Object.defineProperty(a, "slideDuration", {
                get: function() {
                    return this._slideDuration
                },
                set: function(b) {
                    this._slideDuration != b && (this._slideDuration = b, this.animator && this.animator.isPlaying && (this.animator.stop(), this._setValue(this.slideToValue)))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "direction", {
                get: function() {
                    return this._direction
                },
                set: function(b) {
                    this._direction != b && (this._direction = b, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "value", {
                get: function() {
                    return this._getValue()
                },
                set: function(b) {
                    this._getValue() != b && (this._setValue(b), 0 < this._slideDuration && this.stage ? (this.validateProperties(), this.animator || (this.animator = new f.Animation(this.animationUpdateHandler, this)), this.animator.isPlaying && (this.animationValue = this.slideToValue, this.invalidateDisplayList(), this.animator.stop()), this.slideToValue = this.nearestValidValue(b, this.snapInterval), this.slideToValue != this.animationValue && (b = this._slideDuration * (Math.abs(this.animationValue - this.slideToValue) / (this.maximum - this.minimum)), this.animator.duration = Infinity === b ? 0 : b, this.animator.motionPaths = [new f.SimpleMotionPath("value", this.animationValue, this.slideToValue)], this.animator.play())) : this.animationValue = this._getValue())
                },
                enumerable: !0,
                configurable: !0
            });
            a.animationUpdateHandler = function(b) {
                b = this.nearestValidValue(b.currentValue.value, this.snapInterval);
                this.animationValue = Math.min(this.maximum, Math.max(this.minimum, b));
                this.invalidateDisplayList()
            };
            a.setValue = function(b) {
                e.prototype.setValue.call(this, b);
                this.invalidateDisplayList()
            };
            a.updateDisplayList = function(b, a) {
                e.prototype.updateDisplayList.call(this, b, a);
                this.updateSkinDisplayList()
            };
            a.partAdded = function(b, a) {
                a == this.track && this.track instanceof f.UIComponent && (this.track.addEventListener(f.ResizeEvent.RESIZE, this.onTrackResizeOrMove, this), this.track.addEventListener(f.MoveEvent.MOVE, this.onTrackResizeOrMove, this))
            };
            a.partRemoved = function(b, a) {
                a == this.track && this.track instanceof f.UIComponent && (this.track.removeEventListener(f.ResizeEvent.RESIZE, this.onTrackResizeOrMove, this), this.track.removeEventListener(f.MoveEvent.MOVE, this.onTrackResizeOrMove, this))
            };
            a.onTrackResizeOrMove = function(b) {
                this.trackResizedOrMoved = !0;
                this.invalidateProperties()
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.trackResizedOrMoved && (this.trackResizedOrMoved = !1, this.updateSkinDisplayList())
            };
            a.updateSkinDisplayList = function() {
                this.trackResizedOrMoved = !1;
                var b = this.value;
                this.animator && this.animator.isPlaying ? b = this.animationValue: (b = this.value, isNaN(b) && (b = 0));
                var a = isNaN(this.maximum) ? 0 : this.maximum;
                if (this.thumb && this.track) {
                    var c = isNaN(this.track.width) ? 0 : this.track.width,
                    c = c * this.track.scaleX,
                    e = isNaN(this.track.height) ? 0 : this.track.height,
                    e = e * this.track.scaleY,
                    g = Math.round(b / a * c);
                    if (isNaN(g) || 0 > g || Infinity === g) g = 0;
                    var p = Math.round(b / a * e);
                    if (isNaN(p) || 0 > p || Infinity === p) p = 0;
                    var k = this.track.localToGlobal(0, 0),
                    l = this.globalToLocal(k.x, k.y, d.Point.identity),
                    k = l.x,
                    l = l.y;
                    switch (this._direction) {
                    case f.ProgressBarDirection.LEFT_TO_RIGHT:
                        this.thumb.width = g;
                        this.thumb.height = e;
                        this.thumb.x = k;
                        break;
                    case f.ProgressBarDirection.RIGHT_TO_LEFT:
                        this.thumb.width = g;
                        this.thumb.height = e;
                        this.thumb.x = k + c - g;
                        break;
                    case f.ProgressBarDirection.TOP_TO_BOTTOM:
                        this.thumb.width = c;
                        this.thumb.height = p;
                        this.thumb.y = l;
                        break;
                    case f.ProgressBarDirection.BOTTOM_TO_TOP:
                        this.thumb.width = c,
                        this.thumb.height = p,
                        this.thumb.y = l + e - p
                    }
                }
                this.labelDisplay && (this.labelDisplay.text = this.valueToLabel(b, a))
            };
            return c
        } (f.Range);
        f.ProgressBar = g;
        g.prototype.__class__ = "egret.gui.ProgressBar"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.LEFT_TO_RIGHT = "leftToRight";
            d.RIGHT_TO_LEFT = "rightToLeft";
            d.TOP_TO_BOTTOM = "topToBottom";
            d.BOTTOM_TO_TOP = "bottomToTop";
            return d
        } ();
        d.ProgressBarDirection = g;
        g.prototype.__class__ = "egret.gui.ProgressBarDirection"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.pointToValue = function(b, a) {
                if (!this.thumb || !this.track) return 0;
                var c = this.maximum - this.minimum,
                d = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth;
                return this.minimum + (0 != d ? b / d * c: 0)
            };
            a.updateSkinDisplayList = function() {
                if (this.thumb && this.track) {
                    var b = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth,
                    a = this.maximum - this.minimum,
                    b = 0 < a ? (this.pendingValue - this.minimum) / a * b: 0,
                    c = this.track.localToGlobal(b, 0),
                    a = c.x,
                    c = c.y,
                    e = this.thumb.parent.globalToLocal(a, c, d.Point.identity).x;
                    this.thumb.setLayoutBoundsPosition(Math.round(e), this.thumb.layoutBoundsY);
                    this.showTrackHighlight && this.trackHighlight && this.trackHighlight.parent && (a = this.trackHighlight.parent.globalToLocal(a, c, d.Point.identity).x - b, this.trackHighlight.x = Math.round(a), this.trackHighlight.width = Math.round(b))
                }
            };
            return c
        } (f.SliderBase);
        f.HSlider = g;
        g.prototype.__class__ = "egret.gui.HSlider"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.apply(this, arguments);
                this._thumbLengthRatio = 1
            }
            __extends(c, e);
            var a = c.prototype;
            a._setViewportMetric = function(b, a) {
                var c = Math.max(0, a - b);
                this._setMaximun(c);
                this._setMinimun(0);
                this._thumbLengthRatio = a > b ? b / a: 1
            };
            Object.defineProperty(a, "trackAlpha", {
                get: function() {
                    return 1
                },
                set: function(b) {
                    d.Logger.warningWithErrorId(1016, "HScrollBar.trackAlpha")
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "thumbAlpha", {
                get: function() {
                    return 1
                },
                set: function(b) {
                    d.Logger.warningWithErrorId(1016, "HScrollBar.thumbAlpha")
                },
                enumerable: !0,
                configurable: !0
            });
            a.setPosition = function(b) {
                this._setValue(b)
            };
            a.getPosition = function() {
                return this._getValue()
            };
            a._setValue = function(b) {
                b = Math.max(0, b);
                e.prototype._setValue.call(this, b)
            };
            a.setValue = function(b) {
                e.prototype.setValue.call(this, b)
            };
            a._animationUpdateHandler = function(b) {
                this.value = this.pendingValue = b.currentValue.value;
                this.dispatchEventWith(d.Event.CHANGE)
            };
            a.updateSkinDisplayList = function() {
                if (this.thumb && this.track) {
                    var b = this.track.layoutBoundsWidth * this._thumbLengthRatio,
                    a = this.thumb.layoutBoundsWidth,
                    c = this.track.layoutBoundsWidth - this.thumb.layoutBoundsWidth,
                    e = this.maximum - this.minimum,
                    c = this.track.localToGlobal(0 < e ? (this.pendingValue - this.minimum) / e * c: 0, 0),
                    c = this.thumb.parent.globalToLocal(c.x, c.y, d.Point.identity).x;
                    this.thumb.setLayoutBoundsPosition(Math.round(c), this.thumb.layoutBoundsY);
                    b != a && this.thumb.setLayoutBoundsSize(b, this.thumb.layoutBoundsHeight)
                }
            };
            return c
        } (f.HSlider);
        f.HScrollBar = g;
        g.prototype.__class__ = "egret.gui.HScrollBar"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.pointToValue = function(a, c) {
                if (!this.thumb || !this.track) return 0;
                var d = this.maximum - this.minimum,
                e = this.track.layoutBoundsHeight - this.thumb.layoutBoundsHeight;
                return this.minimum + (0 != e ? (e - c) / e * d: 0)
            };
            a.updateSkinDisplayList = function() {
                if (this.thumb && this.track) {
                    var a = this.thumb.layoutBoundsHeight,
                    c = this.track.layoutBoundsHeight - a,
                    e = this.maximum - this.minimum,
                    f = this.track.localToGlobal(0, 0 < e ? c - (this.pendingValue - this.minimum) / e * c: 0),
                    e = f.x,
                    f = f.y,
                    g = this.thumb.parent.globalToLocal(e, f, d.Point.identity).y;
                    this.thumb.setLayoutBoundsPosition(this.thumb.layoutBoundsX, Math.round(g));
                    this.showTrackHighlight && this.trackHighlight && this.trackHighlight._parent && (e = this.trackHighlight._parent.globalToLocal(e, f, d.Point.identity).y, this.trackHighlight.y = Math.round(e + a), this.trackHighlight.height = Math.round(c - e))
                }
            };
            return c
        } (f.SliderBase);
        f.VSlider = g;
        g.prototype.__class__ = "egret.gui.VSlider"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._thumbLengthRatio = 1
            }
            __extends(c, e);
            var a = c.prototype;
            a._setViewportMetric = function(a, c) {
                var d = Math.max(0, c - a);
                this._thumbLengthRatio = c <= a ? 1 : a / c;
                this._setMaximun(d);
                this._setMinimun(0)
            };
            Object.defineProperty(a, "trackAlpha", {
                get: function() {
                    return 1
                },
                set: function(a) {
                    d.Logger.warningWithErrorId(1016, "VScrollBar.trackAlpha")
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "thumbAlpha", {
                get: function() {
                    return 1
                },
                set: function(a) {
                    d.Logger.warningWithErrorId(1016, "VScrollBar.thumbAlpha")
                },
                enumerable: !0,
                configurable: !0
            });
            a.setPosition = function(a) {
                this._setValue(a)
            };
            a.getPosition = function() {
                return this._getValue()
            };
            a._setValue = function(a) {
                a = Math.max(0, a);
                e.prototype._setValue.call(this, a)
            };
            a.setValue = function(a) {
                e.prototype.setValue.call(this, a)
            };
            a._animationUpdateHandler = function(a) {
                this.value = this.pendingValue = a.currentValue.value;
                this.dispatchEventWith(d.Event.CHANGE)
            };
            a.pointToValue = function(a, c) {
                if (!this.thumb || !this.track) return 0;
                var d = this.maximum - this.minimum,
                e = this.track.layoutBoundsHeight - this.thumb.layoutBoundsHeight;
                return this.minimum + (0 != e ? c / e * d: 0)
            };
            a.updateSkinDisplayList = function() {
                if (this.thumb && this.track) {
                    var a = this.track.layoutBoundsHeight * this._thumbLengthRatio,
                    c = this.thumb.layoutBoundsHeight,
                    e = this.track.layoutBoundsHeight - a,
                    f = this.maximum - this.minimum,
                    e = this.track.localToGlobal(0, 0 < f ? (this.pendingValue - this.minimum) / f * e: 0),
                    e = this.thumb.parent.globalToLocal(e.x, e.y, d.Point.identity).y;
                    this.thumb.setLayoutBoundsPosition(this.thumb.layoutBoundsX, Math.round(e));
                    a != c && this.thumb.setLayoutBoundsSize(this.thumb.layoutBoundsWidth, a)
                }
            };
            return c
        } (f.VSlider);
        f.VScrollBar = g;
        g.prototype.__class__ = "egret.gui.VScrollBar"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                var a = this;
                e.call(this);
                this._allowMultipleSelection = !1;
                this._selectedIndices = [];
                this.isValidIndex = function(c, d, e) {
                    return a.dataProvider && 0 <= c && c < a.dataProvider.length
                };
                this._captureItemRenderer = !0;
                this._mouseDownItemRenderer = null;
                this.useVirtualLayout = !0
            }
            __extends(c, e);
            var a = c.prototype;
            a.createChildren = function() {
                this.itemRenderer || (this.itemRenderer = f.DataGroup.defaultRendererFactory);
                e.prototype.createChildren.call(this)
            };
            Object.defineProperty(a, "useVirtualLayout", {
                get: function() {
                    return this._getUseVirtualLayout()
                },
                set: function(a) {
                    this._setUseVirtualLayout(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "allowMultipleSelection", {
                get: function() {
                    return this._allowMultipleSelection
                },
                set: function(a) {
                    this._allowMultipleSelection = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedIndices", {
                get: function() {
                    return this._proposedSelectedIndices ? this._proposedSelectedIndices: this._selectedIndices
                },
                set: function(a) {
                    this._setSelectedIndices(a, !1)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedIndex", {
                get: function() {
                    return this._proposedSelectedIndices ? 0 < this._proposedSelectedIndices.length ? this._proposedSelectedIndices[0] : -1 : this._getSelectedIndex()
                },
                set: function(a) {
                    this._setSelectedIndex(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectedItems", {
                get: function() {
                    var a = [],
                    c = this.selectedIndices;
                    if (c) for (var d = c.length,
                    e = 0; e < d; e++) a[e] = this.dataProvider.getItemAt(c[e]);
                    return a
                },
                set: function(a) {
                    var c = [];
                    if (a) for (var d = a.length,
                    e = 0; e < d; e++) {
                        var f = this.dataProvider.getItemIndex(a[e]); - 1 != f && c.splice(0, 0, f);
                        if ( - 1 == f) {
                            c = [];
                            break
                        }
                    }
                    this._setSelectedIndices(c, !1)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setSelectedIndices = function(a, c) {
                void 0 === c && (c = !1);
                c && (this._dispatchChangeAfterSelection = this._dispatchChangeAfterSelection || c);
                this._proposedSelectedIndices = a ? a: [];
                this.invalidateProperties()
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this._proposedSelectedIndices && this.commitSelection()
            };
            a.commitSelection = function(a) {
                void 0 === a && (a = !0);
                var c = this._selectedIndex;
                if (this._proposedSelectedIndices) {
                    this._proposedSelectedIndices = this._proposedSelectedIndices.filter(this.isValidIndex);
                    if (!this.allowMultipleSelection && 0 < this._proposedSelectedIndices.length) {
                        var d = [];
                        d.push(this._proposedSelectedIndices[0]);
                        this._proposedSelectedIndices = d
                    }
                    this._proposedSelectedIndex = 0 < this._proposedSelectedIndices.length ? this._proposedSelectedIndices[0] : -1
                }
                d = e.prototype.commitSelection.call(this, !1);
                if (!d) return this._proposedSelectedIndices = null,
                !1;
                this.selectedIndex > f.ListBase.NO_SELECTION && (this._proposedSelectedIndices ? -1 == this._proposedSelectedIndices.indexOf(this.selectedIndex) && this._proposedSelectedIndices.push(this.selectedIndex) : this._proposedSelectedIndices = [this.selectedIndex]);
                this._proposedSelectedIndices && ( - 1 != this._proposedSelectedIndices.indexOf(c) && this.itemSelected(c, !0), this.commitMultipleSelection());
                a && d && (this._dispatchChangeAfterSelection && (f.IndexChangeEvent.dispatchIndexChangeEvent(this, f.IndexChangeEvent.CHANGE, c, this._selectedIndex), this._dispatchChangeAfterSelection = !1), f.UIEvent.dispatchUIEvent(this, f.UIEvent.VALUE_COMMIT));
                return d
            };
            a.commitMultipleSelection = function() {
                var a = [],
                c = [],
                d,
                e;
                if (0 < this._selectedIndices.length && 0 < this._proposedSelectedIndices.length) {
                    e = this._proposedSelectedIndices.length;
                    for (d = 0; d < e; d++) - 1 == this._selectedIndices.indexOf(this._proposedSelectedIndices[d]) && c.push(this._proposedSelectedIndices[d]);
                    e = this._selectedIndices.length;
                    for (d = 0; d < e; d++) - 1 == this._proposedSelectedIndices.indexOf(this._selectedIndices[d]) && a.push(this._selectedIndices[d])
                } else 0 < this._selectedIndices.length ? a = this._selectedIndices: 0 < this._proposedSelectedIndices.length && (c = this._proposedSelectedIndices);
                this._selectedIndices = this._proposedSelectedIndices;
                if (0 < a.length) for (e = a.length, d = 0; d < e; d++) this.itemSelected(a[d], !1);
                if (0 < c.length) for (e = c.length, d = 0; d < e; d++) this.itemSelected(c[d], !0);
                this._proposedSelectedIndices = null
            };
            a._isItemIndexSelected = function(a) {
                return this._allowMultipleSelection ? -1 != this._selectedIndices.indexOf(a) : e.prototype._isItemIndexSelected.call(this, a)
            };
            a.dataGroup_rendererAddHandler = function(a) {
                e.prototype.dataGroup_rendererAddHandler.call(this, a);
                a = a.renderer;
                null != a && (a.addEventListener(d.TouchEvent.TOUCH_BEGIN, this._item_touchBeginHandler, this), a.addEventListener(d.TouchEvent.TOUCH_END, this._item_touchEndHandler, this))
            };
            a.dataProviderRefreshed = function() {
                this._allowMultipleSelection || e.prototype.dataProviderRefreshed.call(this)
            };
            a.dataGroup_rendererRemoveHandler = function(a) {
                e.prototype.dataGroup_rendererRemoveHandler.call(this, a);
                a = a.renderer;
                null != a && (a.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this._item_touchBeginHandler, this), a.removeEventListener(d.TouchEvent.TOUCH_END, this._item_touchEndHandler, this))
            };
            a._item_touchBeginHandler = function(a) {
                a._isDefaultPrevented || (this._mouseDownItemRenderer = a.currentTarget, f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_touchEndHandler, this), f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.stage_touchEndHandler, this))
            };
            a.calculateSelectedIndices = function(a, c, d) {
                var e = [];
                if (c) if (c = 0 < this._selectedIndices.length ? this._selectedIndices[this._selectedIndices.length - 1] : 0, c < a) for (; c <= a; c++) e.splice(0, 0, c);
                else for (; c >= a; c--) e.splice(0, 0, c);
                else if (d) if (0 < this._selectedIndices.length) if (1 == this._selectedIndices.length && this._selectedIndices[0] == a) {
                    if (!this.requireSelection) return e;
                    e.splice(0, 0, this._selectedIndices[0])
                } else {
                    d = !1;
                    for (c = 0; c < this._selectedIndices.length; c++) this._selectedIndices[c] == a ? d = !0 : this._selectedIndices[c] != a && e.splice(0, 0, this._selectedIndices[c]);
                    d || e.splice(0, 0, a)
                } else e.splice(0, 0, a);
                else e.splice(0, 0, a);
                return e
            };
            a._item_touchEndHandler = function(a) {
                var c = a.currentTarget;
                if (c == this._mouseDownItemRenderer) {
                    var d;
                    d = c ? c.itemIndex: this.dataGroup.getElementIndex(a.currentTarget);
                    this._allowMultipleSelection ? this._setSelectedIndices(this.calculateSelectedIndices(d, a.shiftKey, a.ctrlKey), !0) : this._setSelectedIndex(d, !0);
                    this._captureItemRenderer && this._dispatchListEvent(a, f.ListEvent.ITEM_CLICK, c)
                }
            };
            a.stage_touchEndHandler = function(a) {
                f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_touchEndHandler, this);
                f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_touchEndHandler, this);
                this._mouseDownItemRenderer = null
            };
            return c
        } (f.ListBase);
        f.List = g;
        g.prototype.__class__ = "egret.gui.List"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._displayPopUp = this._popUpWidthMatchesAnchorWidth = this._popUpHeightMatchesAnchorHeight = this.addedToStage = this.popUpIsDisplayed = !1;
                this._popUp = null;
                this._relativeToStage = !1;
                this._popUpPosition = f.PopUpPosition.TOP_LEFT;
                this.inAnimation = !1;
                this.animator = null;
                this._openDuration = 250;
                this._closeDuration = 150;
                this.valueRange = 1;
                this.addEventListener(d.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                this.addEventListener(d.Event.REMOVED_FROM_STAGE, this.removedFromStageHandler, this)
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "popUpHeightMatchesAnchorHeight", {
                get: function() {
                    return this._popUpHeightMatchesAnchorHeight
                },
                set: function(a) {
                    this._popUpHeightMatchesAnchorHeight != a && (this._popUpHeightMatchesAnchorHeight = a, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "popUpWidthMatchesAnchorWidth", {
                get: function() {
                    return this._popUpWidthMatchesAnchorWidth
                },
                set: function(a) {
                    this._popUpWidthMatchesAnchorWidth != a && (this._popUpWidthMatchesAnchorWidth = a, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "displayPopUp", {
                get: function() {
                    return this._displayPopUp
                },
                set: function(a) {
                    this._displayPopUp != a && (this._displayPopUp = a, this.addOrRemovePopUp())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "popUp", {
                get: function() {
                    return this._popUp
                },
                set: function(a) {
                    this._popUp != a && (this._popUp = a, this.dispatchEventWith("popUpChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "popUpPosition", {
                get: function() {
                    return this._popUpPosition
                },
                set: function(a) {
                    this._popUpPosition != a && (this._relativeToStage = a == f.PopUpPosition.SCREEN_CENTER, this._popUpPosition = a, this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            a.updateDisplayList = function(a, c) {
                e.prototype.updateDisplayList.call(this, a, c);
                this.applyPopUpTransform(a, c)
            };
            a.updatePopUpTransform = function() {
                this.applyPopUpTransform(this.width, this.height)
            };
            a.calculatePopUpPosition = function() {
                var a = d.Point.identity;
                switch (this._popUpPosition) {
                case f.PopUpPosition.BELOW:
                    a.x = 0;
                    a.y = this.height;
                    break;
                case f.PopUpPosition.ABOVE:
                    a.x = 0;
                    a.y = -this.popUp.layoutBoundsHeight;
                    break;
                case f.PopUpPosition.LEFT:
                    a.x = -this.popUp.layoutBoundsWidth;
                    a.y = 0;
                    break;
                case f.PopUpPosition.RIGHT:
                    a.x = this.width;
                    a.y = 0;
                    break;
                case f.PopUpPosition.CENTER:
                    a.x = 0.5 * (this.width - this.popUp.layoutBoundsWidth),
                    a.y = 0.5 * (this.height - this.popUp.layoutBoundsHeight)
                }
                a = this.localToGlobal(a.x, a.y, a);
                return a = this.popUp.parent.globalToLocal(a.x, a.y, a)
            };
            Object.defineProperty(a, "openDuration", {
                get: function() {
                    return this._openDuration
                },
                set: function(a) {
                    this._openDuration = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "closeDuration", {
                get: function() {
                    return this._closeDuration
                },
                set: function(a) {
                    this._closeDuration = a
                },
                enumerable: !0,
                configurable: !0
            });
            a.animationStartHandler = function(a) {
                this.inAnimation = !0;
                this.popUp && "enabled" in this.popUp && (this.popUp.enabled = !1)
            };
            a.animationUpdateHandler = function(a) {
                var c = this.popUp._scrollRect,
                e = Math.round(a.currentValue.x);
                a = Math.round(a.currentValue.y);
                c ? (c.x = e, c.y = a, c.width = this.popUp.width, c.height = this.popUp.height, this.popUp._setScrollRect(c)) : this.popUp._scrollRect = new d.Rectangle(e, a, this.popUp.width, this.popUp.height)
            };
            a.animationEndHandler = function(a) {
                this.inAnimation = !1;
                this.popUp && "enabled" in this.popUp && (this.popUp.enabled = !0);
                this.popUp.scrollRect = null;
                this.popUpIsDisplayed || (f.PopUpManager.removePopUp(this.popUp), this.popUp.ownerChanged(null))
            };
            a.addOrRemovePopUp = function() {
                this.addedToStage && this.popUp && (null == this.popUp.parent && this.displayPopUp ? (f.PopUpManager.addPopUp(this.popUp, this._relativeToStage, this._relativeToStage), this.popUp.ownerChanged(this), this.popUpIsDisplayed = !0, this.inAnimation && this.animator.end(), this.initialized ? (this.applyPopUpTransform(this.width, this.height), 0 < this._openDuration && this.startAnimation()) : d.callLater(function() {
                    0 < this.openDuration && this.startAnimation()
                },
                this)) : null == this.popUp.parent || this.displayPopUp || this.removeAndResetPopUp())
            };
            a.removeAndResetPopUp = function() {
                this.inAnimation && this.animator.end();
                this.popUpIsDisplayed = !1;
                0 < this._closeDuration ? this.startAnimation() : (f.PopUpManager.removePopUp(this.popUp), this.popUp.ownerChanged(null))
            };
            a.applyPopUpTransform = function(a, c) {
                if (this.popUpIsDisplayed) {
                    this.popUpWidthMatchesAnchorWidth && (this.popUp.width = a);
                    this.popUpHeightMatchesAnchorHeight && (this.popUp.height = c);
                    "validateNow" in this.popUp && this.popUp.validateNow();
                    var d = this.calculatePopUpPosition();
                    this.popUp.x = d.x;
                    this.popUp.y = d.y
                }
            };
            a.startAnimation = function() {
                this.animator || (this.animator = new f.Animation(this.animationUpdateHandler, this), this.animator.endFunction = this.animationEndHandler, this.animator.startFunction = this.animationStartHandler);
                this.animator.motionPaths = this.createMotionPath();
                this.animator.duration = this.popUpIsDisplayed ? this._openDuration: this._closeDuration;
                this.animator.play()
            };
            a.createMotionPath = function() {
                var a = new f.SimpleMotionPath("x"),
                c = new f.SimpleMotionPath("y"),
                d = [a, c];
                switch (this._popUpPosition) {
                case f.PopUpPosition.TOP_LEFT:
                case f.PopUpPosition.CENTER:
                case f.PopUpPosition.BELOW:
                    a.valueFrom = a.valueTo = 0;
                    c.valueFrom = this.popUp.height;
                    c.valueTo = 0;
                    this.valueRange = this.popUp.height;
                    break;
                case f.PopUpPosition.ABOVE:
                    a.valueFrom = a.valueTo = 0;
                    c.valueFrom = -this.popUp.height;
                    c.valueTo = 0;
                    this.valueRange = this.popUp.height;
                    break;
                case f.PopUpPosition.LEFT:
                    c.valueFrom = c.valueTo = 0;
                    a.valueFrom = -this.popUp.width;
                    a.valueTo = 0;
                    this.valueRange = this.popUp.width;
                    break;
                case f.PopUpPosition.RIGHT:
                    c.valueFrom = c.valueTo = 0;
                    a.valueFrom = this.popUp.width;
                    a.valueTo = 0;
                    this.valueRange = this.popUp.width;
                    break;
                default:
                    this.valueRange = 1
                }
                this.valueRange = Math.abs(this.valueRange);
                if (!this.popUpIsDisplayed) {
                    var e = a.valueFrom;
                    a.valueFrom = a.valueTo;
                    a.valueTo = e;
                    e = c.valueFrom;
                    c.valueFrom = c.valueTo;
                    c.valueTo = e
                }
                return d
            };
            a.addedToStageHandler = function(a) {
                this.addedToStage = !0;
                d.callLater(this.checkPopUpState, this)
            };
            a.checkPopUpState = function() {
                this.addedToStage ? this.addOrRemovePopUp() : null != this.popUp && null != this.popUp.parent && this.removeAndResetPopUp()
            };
            a.removedFromStageHandler = function(a) {
                this.addedToStage = !1;
                d.callLater(this.checkPopUpState, this)
            };
            return c
        } (f.UIComponent);
        f.PopUpAnchor = g;
        g.prototype.__class__ = "egret.gui.PopUpAnchor"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.mouseIsDown = !1;
                this._dropDown = this._openButton = null;
                this._isOpen = !1;
                this._closeOnResize = !0;
                this._rollOverOpenDelay = NaN;
                this.rollOverOpenDelayTimer = null
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "openButton", {
                get: function() {
                    return this._openButton
                },
                set: function(a) {
                    this._openButton !== a && (this.removeOpenTriggers(), this._openButton = a, this.addOpenTriggers())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "dropDown", {
                get: function() {
                    return this._dropDown
                },
                set: function(a) {
                    this._dropDown !== a && (this._dropDown = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "isOpen", {
                get: function() {
                    return this._isOpen
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "closeOnResize", {
                get: function() {
                    return this._closeOnResize
                },
                set: function(a) {
                    this._closeOnResize != a && (this.isOpen && this.removeCloseOnResizeTrigger(), this._closeOnResize = a, this.addCloseOnResizeTrigger())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "rollOverOpenDelay", {
                get: function() {
                    return this._rollOverOpenDelay
                },
                set: function(a) {
                    this._rollOverOpenDelay != a && (this.removeOpenTriggers(), this._rollOverOpenDelay = a, this.addOpenTriggers())
                },
                enumerable: !0,
                configurable: !0
            });
            a.addOpenTriggers = function() {
                this.openButton && (isNaN(this.rollOverOpenDelay) ? this.openButton.addEventListener(f.UIEvent.BUTTON_DOWN, this._openButton_buttonDownHandler, this) : this.openButton.addEventListener(d.TouchEvent.TOUCH_ROLL_OVER, this._openButton_rollOverHandler, this))
            };
            a.removeOpenTriggers = function() {
                this.openButton && (isNaN(this.rollOverOpenDelay) ? this.openButton.removeEventListener(f.UIEvent.BUTTON_DOWN, this._openButton_buttonDownHandler, this) : this.openButton.removeEventListener(d.TouchEvent.TOUCH_ROLL_OVER, this._openButton_rollOverHandler, this))
            };
            a.addCloseTriggers = function() {
                f.UIGlobals.stage && (isNaN(this.rollOverOpenDelay) ? (f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this), f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler_noRollOverOpenDelay, this)) : f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this), this.addCloseOnResizeTrigger())
            };
            a.removeCloseTriggers = function() {
                f.UIGlobals.stage && (isNaN(this.rollOverOpenDelay) ? (f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this), f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler_noRollOverOpenDelay, this)) : (f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this), f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this), f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this)), this.removeCloseOnResizeTrigger())
            };
            a.addCloseOnResizeTrigger = function() {
                this.closeOnResize && f.UIGlobals.stage.addEventListener(d.Event.RESIZE, this.stage_resizeHandler, this)
            };
            a.removeCloseOnResizeTrigger = function() {
                this.closeOnResize && f.UIGlobals.stage.removeEventListener(d.Event.RESIZE, this.stage_resizeHandler, this)
            };
            a.isTargetOverDropDownOrOpenButton = function(a) {
                if (a) {
                    if (this.openButton && this.openButton.contains(a)) return ! 0;
                    if (null != this.hitAreaAdditions) for (var c = 0; c < this.hitAreaAdditions.length; c++) if (this.hitAreaAdditions[c] == a || this.hitAreaAdditions[c] instanceof d.DisplayObjectContainer && this.hitAreaAdditions[c].contains(a)) return ! 0;
                    if (this.dropDown instanceof d.DisplayObjectContainer) {
                        if (this.dropDown.contains(a)) return ! 0
                    } else if (a == this.dropDown) return ! 0
                }
                return ! 1
            };
            a.openDropDown = function() {
                this.openDropDownHelper()
            };
            a.openDropDownHelper = function() {
                this.isOpen || (this.addCloseTriggers(), this._isOpen = !0, this.openButton && this.openButton._setKeepDown(!0), f.UIEvent.dispatchUIEvent(this, f.UIEvent.OPEN))
            };
            a.closeDropDown = function(a) {
                if (this.isOpen) {
                    this._isOpen = !1;
                    this.openButton && this.openButton._setKeepDown(!1);
                    var c = new f.UIEvent(f.UIEvent.CLOSE, !1, !0);
                    a || c.preventDefault();
                    this.dispatchEvent(c);
                    this.removeCloseTriggers()
                }
            };
            a._openButton_buttonDownHandler = function(a) {
                this.isOpen ? this.closeDropDown(!0) : (this.mouseIsDown = !0, this.openDropDownHelper())
            };
            a._openButton_rollOverHandler = function(a) {
                0 == this.rollOverOpenDelay ? this.openDropDownHelper() : (this.openButton.addEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this), this.rollOverOpenDelayTimer = new d.Timer(this.rollOverOpenDelay, 1), this.rollOverOpenDelayTimer.addEventListener(d.TimerEvent.TIMER_COMPLETE, this.rollOverDelay_timerCompleteHandler, this), this.rollOverOpenDelayTimer.start())
            };
            a.openButton_rollOutHandler = function(a) {
                this.rollOverOpenDelayTimer && this.rollOverOpenDelayTimer.running && (this.rollOverOpenDelayTimer.stop(), this.rollOverOpenDelayTimer = null);
                this.openButton.removeEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this)
            };
            a.rollOverDelay_timerCompleteHandler = function(a) {
                this.openButton.removeEventListener(d.TouchEvent.TOUCH_ROLL_OUT, this.openButton_rollOutHandler, this);
                this.rollOverOpenDelayTimer = null;
                this.openDropDownHelper()
            };
            a.stage_mouseDownHandler = function(a) {
                if (this.mouseIsDown) this.mouseIsDown = !1;
                else if (!this.dropDown || this.dropDown && (a.target == this.dropDown || this.dropDown instanceof d.DisplayObjectContainer && !this.dropDown.contains(a.target))) {
                    var c = a.target;
                    if (! (this.openButton && c && this.openButton.contains(c))) {
                        if (null != this.hitAreaAdditions) for (c = 0; c < this.hitAreaAdditions.length; c++) if (this.hitAreaAdditions[c] == a.target || this.hitAreaAdditions[c] instanceof d.DisplayObjectContainer && this.hitAreaAdditions[c].contains(a.target)) return;
                        this.closeDropDown(!0)
                    }
                }
            };
            a.stage_mouseMoveHandler = function(a) {
                this.isTargetOverDropDownOrOpenButton(a.target) || (a instanceof d.TouchEvent && a.touchDown ? (f.UIGlobals.stage.addEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this), f.UIGlobals.stage.addEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this)) : this.closeDropDown(!0))
            };
            a.stage_mouseUpHandler_noRollOverOpenDelay = function(a) {
                this.mouseIsDown && (this.mouseIsDown = !1)
            };
            a.stage_mouseUpHandler = function(a) {
                this.isTargetOverDropDownOrOpenButton(a.target) ? (f.UIGlobals.stage.removeEventListener(d.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this), f.UIGlobals.stage.removeEventListener(d.Event.LEAVE_STAGE, this.stage_mouseUpHandler, this)) : this.closeDropDown(!0)
            };
            a.stage_resizeHandler = function(a) {
                this.closeDropDown(!0)
            };
            a.stage_mouseWheelHandler = function(a) { ! this.dropDown || this.dropDown.contains(a.target) && a.isDefaultPrevented() || this.closeDropDown(!1)
            };
            return c
        } (d.EventDispatcher);
        f.DropDownController = g;
        g.prototype.__class__ = "egret.gui.DropDownController"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.openButton = this.dropDown = null;
                this._labelChanged = !1;
                this._dropDownController = null;
                this._userProposedSelectedIndex = d.ListBase.NO_SELECTION;
                this._captureItemRenderer = !1;
                this.dropDownController = new d.DropDownController
            }
            __extends(c, e);
            var a = c.prototype;
            a._setDataProvider = function(a) {
                this.dataProvider !== a && (e.prototype._setDataProvider.call(this, a), this._labelChanged = !0, this.invalidateProperties())
            };
            a._setLabelField = function(a) {
                this.labelField != a && (e.prototype._setLabelField.call(this, a), this._labelChanged = !0, this.invalidateProperties())
            };
            a._setLabelFunction = function(a) {
                this.labelFunction != a && (e.prototype._setLabelFunction.call(this, a), this._labelChanged = !0, this.invalidateProperties())
            };
            Object.defineProperty(a, "dropDownController", {
                get: function() {
                    return this._dropDownController
                },
                set: function(a) {
                    this._dropDownController != a && (this._dropDownController = a, this._dropDownController.addEventListener(d.UIEvent.OPEN, this._dropDownController_openHandler, this), this._dropDownController.addEventListener(d.UIEvent.CLOSE, this.dropDownController_closeHandler, this), this.openButton && (this._dropDownController.openButton = this.openButton), this.dropDown && (this._dropDownController.dropDown = this.dropDown))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "isDropDownOpen", {
                get: function() {
                    return this.dropDownController ? this.dropDownController.isOpen: !1
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this._labelChanged && (this._labelChanged = !1, this.updateLabelDisplay())
            };
            a.partAdded = function(a, c) {
                e.prototype.partAdded.call(this, a, c);
                c == this.openButton ? this.dropDownController && (this.dropDownController.openButton = this.openButton) : c == this.dropDown && this.dropDownController && (this.dropDownController.dropDown = this.dropDown)
            };
            a.partRemoved = function(a, c) {
                this.dropDownController && (c == this.openButton && (this.dropDownController.openButton = null), c == this.dropDown && (this.dropDownController.dropDown = null));
                e.prototype.partRemoved.call(this, a, c)
            };
            a.getCurrentSkinState = function() {
                return this.enabled ? this.isDropDownOpen ? "open": "normal": "disabled"
            };
            a.commitSelection = function(a) {
                void 0 === a && (a = !0);
                a = e.prototype.commitSelection.call(this, a);
                this.updateLabelDisplay();
                return a
            };
            a._isItemIndexSelected = function(a) {
                return this._userProposedSelectedIndex == a
            };
            a.openDropDown = function() {
                this.dropDownController.openDropDown()
            };
            a.closeDropDown = function(a) {
                this.dropDownController.closeDropDown(a)
            };
            a.updateLabelDisplay = function(a) {};
            a._changeHighlightedSelection = function(a, c) {
                this.itemSelected(this._userProposedSelectedIndex, !1);
                this._userProposedSelectedIndex = a;
                this.itemSelected(this._userProposedSelectedIndex, !0)
            };
            a.dataProvider_collectionChangeHandler = function(a) {
                e.prototype.dataProvider_collectionChangeHandler.call(this, a);
                this._labelChanged = !0;
                this.invalidateProperties()
            };
            a._item_touchEndHandler = function(a) {
                e.prototype._item_touchEndHandler.call(this, a);
                var c = a.currentTarget;
                c == this._mouseDownItemRenderer && (this._dispatchListEvent(a, d.ListEvent.ITEM_CLICK, c), this._userProposedSelectedIndex = this.selectedIndex, this.closeDropDown(!0))
            };
            a._dropDownController_openHandler = function(a) {
                this.addEventListener(d.UIEvent.UPDATE_COMPLETE, this._open_updateCompleteHandler, this);
                this._userProposedSelectedIndex = this.selectedIndex;
                this.invalidateSkinState()
            };
            a._open_updateCompleteHandler = function(a) {
                this.removeEventListener(d.UIEvent.UPDATE_COMPLETE, this._open_updateCompleteHandler, this);
                d.UIEvent.dispatchUIEvent(this, d.UIEvent.OPEN)
            };
            a.dropDownController_closeHandler = function(a) {
                this.addEventListener(d.UIEvent.UPDATE_COMPLETE, this.close_updateCompleteHandler, this);
                this.invalidateSkinState();
                a.isDefaultPrevented() ? this._changeHighlightedSelection(this.selectedIndex) : this._setSelectedIndex(this._userProposedSelectedIndex, !0)
            };
            a.close_updateCompleteHandler = function(a) {
                this.removeEventListener(d.UIEvent.UPDATE_COMPLETE, this.close_updateCompleteHandler, this);
                d.UIEvent.dispatchUIEvent(this, d.UIEvent.CLOSE)
            };
            c.PAGE_SIZE = 5;
            return c
        } (d.List);
        d.DropDownListBase = g;
        g.prototype.__class__ = "egret.gui.DropDownListBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.iconFieldOrFunctionChanged = !1;
                this._iconFunction = this._iconField = null
            }
            __extends(c, e);
            var a = c.prototype;
            a.createChildren = function() {
                this.itemRenderer || (this.itemRenderer = c.defaultTreeRendererFactory);
                e.prototype.createChildren.call(this)
            };
            a.updateRenderer = function(a, c, d) {
                if ("hasChildren" in a && "hasChildren" in this.dataProvider) {
                    var f = this.dataProvider;
                    a.hasChildren = f.hasChildren(d);
                    a.opened = f.isItemOpen(d);
                    a.depth = f.getDepth(d);
                    a.iconSkinName = this.itemToIcon(d)
                }
                return e.prototype.updateRenderer.call(this, a, c, d)
            };
            a.itemToIcon = function(a) {
                if (!a) return null;
                if (null != this._iconFunction) return this._iconFunction(a);
                var c;
                if (a instanceof Object) try {
                    a[this.iconField] && (c = a[this.iconField])
                } catch(d) {}
                return c
            };
            a.dataGroup_rendererAddHandler = function(a) {
                e.prototype.dataGroup_rendererAddHandler.call(this, a);
                a.renderer && "hasChildren" in a.renderer && a.renderer.addEventListener(d.TreeEvent.ITEM_OPENING, this.onItemOpening, this)
            };
            a.onItemOpening = function(a) {
                var c = a.itemRenderer,
                e = a.item,
                g = this._getDataProvider();
                c && g && "hasChildren" in g && this.dispatchEvent(a) && (a = !c.opened, g.expandItem(e, a), d.TreeEvent.dispatchTreeEvent(this, a ? d.TreeEvent.ITEM_OPEN: d.TreeEvent.ITEM_CLOSE, c.itemIndex, e, c))
            };
            a.dataGroup_rendererRemoveHandler = function(a) {
                e.prototype.dataGroup_rendererRemoveHandler.call(this, a);
                a.renderer && "hasChildren" in a.renderer && a.renderer.removeEventListener(d.TreeEvent.ITEM_OPENING, this.onItemOpening, this)
            };
            Object.defineProperty(a, "iconField", {
                get: function() {
                    return this._iconField
                },
                set: function(a) {
                    this._iconField != a && (this._iconField = a, this.iconFieldOrFunctionChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "iconFunction", {
                get: function() {
                    return this._iconFunction
                },
                set: function(a) {
                    this._iconFunction != a && (this._iconFunction = a, this.iconFieldOrFunctionChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.expandItem = function(a, c) {
                void 0 === c && (c = !0);
                var d = this._getDataProvider();
                d && "hasChildren" in d && d.expandItem(a, c)
            };
            a.isItemOpen = function(a) {
                var c = this._getDataProvider();
                return c && "hasChildren" in c ? c.isItemOpen(a) : !1
            };
            a.dataProvider_collectionChangeHandler = function(a) {
                e.prototype.dataProvider_collectionChangeHandler.call(this, a);
                if (a.kind == d.CollectionEventKind.OPEN || a.kind == d.CollectionEventKind.CLOSE) {
                    var c = this.dataGroup ? this.dataGroup.getElementAt(a.location) : null;
                    c && (this.updateRenderer(c, a.location, a.items[0]), a.kind == d.CollectionEventKind.CLOSE && this.layout && this.layout.useVirtualLayout && (this.layout.clearVirtualLayoutCache(), this.invalidateSize()))
                }
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                if (this.iconFieldOrFunctionChanged) {
                    if (null != this.dataGroup) {
                        var a;
                        if (this.layout && this.layout.useVirtualLayout) for (var c = this.dataGroup.getElementIndicesInView(), d = c.length, f = 0; f < d; f++) a = c[f],
                        this.updateRendererIconProperty(a);
                        else for (c = this.dataGroup.numElements, a = 0; a < c; a++) this.updateRendererIconProperty(a)
                    }
                    this.iconFieldOrFunctionChanged = !1
                }
            };
            a.updateRendererIconProperty = function(a) {
                if (a = this.dataGroup.getElementAt(a)) a.iconSkinName = this.itemToIcon(a.data)
            };
            c.defaultTreeRendererFactory = new d.ClassFactory(d.TreeItemRenderer);
            return c
        } (d.List);
        d.Tree = g;
        g.prototype.__class__ = "egret.gui.Tree"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.labelDisplay = null;
                this._prompt = ""
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "prompt", {
                get: function() {
                    return this._prompt
                },
                set: function(a) {
                    this._prompt != a && (this._prompt = a, this._labelChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.partAdded = function(a, c) {
                d.prototype.partAdded.call(this, a, c);
                c == this.labelDisplay && (this._labelChanged = !0, this.invalidateProperties())
            };
            a.updateLabelDisplay = function(a) {
                void 0 === a && (a = void 0);
                this.labelDisplay && (void 0 == a && (a = this.selectedItem), this.labelDisplay.text = null != a && void 0 != a ? this.itemToLabel(a) : this._prompt)
            };
            return c
        } (d.DropDownListBase);
        d.DropDownList = g;
        g.prototype.__class__ = "egret.gui.DropDownList"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this._allowDeselection = !0;
                this._data = null;
                this._itemIndex = NaN
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "allowDeselection", {
                get: function() {
                    return this._allowDeselection
                },
                set: function(a) {
                    this._allowDeselection = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "data", {
                get: function() {
                    return this._data
                },
                set: function(a) {
                    this._data = a;
                    this.dispatchEventWith("dataChange")
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "itemIndex", {
                get: function() {
                    return this._itemIndex
                },
                set: function(a) {
                    this._itemIndex = a
                },
                enumerable: !0,
                configurable: !0
            });
            a._setLabel = function(a) {
                a != this._getLabel() && (d.prototype._setLabel.call(this, a), this.labelDisplay && (this.labelDisplay.text = this._getLabel()))
            };
            a.buttonReleased = function() {
                this.selected && !this.allowDeselection || d.prototype.buttonReleased.call(this)
            };
            return c
        } (d.ToggleButtonBase);
        d.TabBarButton = g;
        g.prototype.__class__ = "egret.gui.TabBarButton"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.requireSelectionChanged_tabBar = !1;
                this.requireSelection = !0
            }
            __extends(c, e);
            var a = c.prototype;
            a.createChildren = function() {
                d.ListBase.prototype.createChildren.call(this)
            };
            Object.defineProperty(a, "requireSelection", {
                get: function() {
                    return this._requireSelection
                },
                set: function(a) {
                    a != this._requireSelection && (e.prototype._setRequireSelection.call(this, a), this.requireSelectionChanged_tabBar = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a._setDataProvider = function(a) {
                this.dataProvider instanceof d.ViewStack && (this.dataProvider.removeEventListener("IndexChanged", this.onViewStackIndexChange, this), this.removeEventListener(d.IndexChangeEvent.CHANGE, this.onIndexChanged, this));
                a instanceof d.ViewStack && (a.addEventListener("IndexChanged", this.onViewStackIndexChange, this), this.addEventListener(d.IndexChangeEvent.CHANGE, this.onIndexChanged, this));
                e.prototype._setDataProvider.call(this, a)
            };
            a.onIndexChanged = function(a) {
                this.dataProvider._setSelectedIndex(a.newIndex, !1)
            };
            a.onViewStackIndexChange = function(a) {
                this._setSelectedIndex(this.dataProvider.selectedIndex, !1)
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                if (this.requireSelectionChanged_tabBar && this.dataGroup) {
                    this.requireSelectionChanged_tabBar = !1;
                    for (var a = this.dataGroup.numElements,
                    c = 0; c < a; c++) {
                        var d = this.dataGroup.getElementAt(c);
                        d && (d.allowDeselection = !this.requireSelection)
                    }
                }
            };
            a.dataGroup_rendererAddHandler = function(a) {
                e.prototype.dataGroup_rendererAddHandler.call(this, a);
                null != a.renderer && a.renderer instanceof d.TabBarButton && (a.renderer.allowDeselection = !this.requireSelection)
            };
            a._item_touchEndHandler = function(a) {
                var c = a.currentTarget;
                if (c == this._mouseDownItemRenderer) {
                    var e;
                    e = c ? c.itemIndex: this.dataGroup.getElementIndex(a.currentTarget);
                    e == this.selectedIndex ? this.requireSelection || this._setSelectedIndex(d.ListBase.NO_SELECTION, !0) : this._setSelectedIndex(e, !0);
                    this._captureItemRenderer && this._dispatchListEvent(a, d.ListEvent.ITEM_CLICK, c)
                }
            };
            return c
        } (d.List);
        d.TabBar = g;
        g.prototype.__class__ = "egret.gui.TabBar"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(a) {
            function b() {
                a.call(this);
                this._scrollTop = this._scrollLeft = 0;
                this._content = null;
                this.scrollBeginThreshold = 10;
                this.scrollSpeed = 1;
                this.verticalScrollBar = this.horizontalScrollBar = null;
                this._scroller = this;
                this._horizontalScrollPolicy = this._verticalScrollPolicy = "auto";
                this._viewport = null;
                this._autoHideScrollBars = !0;
                this._autoHideTimer = NaN;
                this._autoHideDelay = 300;
                this._autoHideShowAnimat = null;
                this._animatTargetIsShow = !1;
                d.ScrollView.call(this)
            }
            __extends(b, a);
            var c = b.prototype;
            c.setContent = function(a) {
                this._content = a;
                this._scroller._removeEvents();
                this._scroller._addEvents();
                this._scrollLeft = a.horizontalScrollPosition;
                this._scrollTop = a.verticalScrollPosition
            };
            c._updateContentPosition = function() {
                var a = this._content;
                a.horizontalScrollPosition = this._scrollLeft;
                a.verticalScrollPosition = this._scrollTop;
                a.setLayoutBoundsSize(this._width, this._height);
                this.dispatchEvent(new d.Event(d.Event.CHANGE))
            };
            c.getMaxScrollLeft = function() {
                var a = this._content;
                return Math.max(a.contentWidth - a.width, a.initialized ? 0 : a.horizontalScrollPosition || 0)
            };
            c.getMaxScrollTop = function() {
                var a = this._content;
                return Math.max(a.contentHeight - a.height, a.initialized ? 0 : a.verticalScrollPosition || 0)
            };
            c._getContentWidth = function() {
                return this._content.contentWidth
            };
            c._getContentHeight = function() {
                return this._content.contentHeight
            };
            c._onScrollStarted = function() {
                d.ScrollView.prototype._onScrollStarted.call(this);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_START)
            };
            c._onScrollFinished = function() {
                d.ScrollView.prototype._onScrollFinished.call(this);
                f.UIEvent.dispatchUIEvent(this, f.UIEvent.CHANGE_END)
            };
            c.measure = function() {
                this._viewport && (this.measuredWidth = this._viewport.preferredWidth, this.measuredHeight = this._viewport.preferredHeight)
            };
            c.updateDisplayList = function(a, b) {
                this.viewport && this.viewport.setLayoutBoundsSize(a, b);
                this._scroller._checkScrollPolicy();
                if ("off" != this._horizontalScrollPolicy) {
                    var c = this.viewport.horizontalScrollPosition,
                    d = this._scroller.getMaxScrollLeft(),
                    c = Math.min(c, d);
                    this.setViewportHScrollPosition(c);
                    if (c = this.horizontalScrollBar) c._setViewportMetric(a, this._viewport.contentWidth),
                    c._setWidth(a - (c.left || 0) - (c.right || 0)),
                    c.x = c.left || 0,
                    c.y = b - this.horizontalScrollBar.layoutBoundsHeight,
                    c.visible = this._horizontalScrollPolicy == f.ScrollPolicy.ON || this._scroller._hCanScroll,
                    this._autoHideScrollBars && (c.alpha = 0)
                }
                "off" != this._verticalScrollPolicy && (c = this.viewport.verticalScrollPosition, d = this._scroller.getMaxScrollTop(), c = Math.min(c, d), this.setViewportVScrollPosition(c), c = this.verticalScrollBar) && (c._setViewportMetric(b, this._viewport.contentHeight), c._setHeight(b - (c.top || 0) - (c.bottom || 0)), c.y = c.top || 0, c.x = a - this.verticalScrollBar.layoutBoundsWidth, c.visible = this._verticalScrollPolicy == f.ScrollPolicy.ON || this._scroller._vCanScroll, this._autoHideScrollBars && (c.alpha = 0))
            };
            Object.defineProperty(c, "verticalScrollPolicy", {
                get: function() {
                    return this._verticalScrollPolicy
                },
                set: function(a) {
                    a != this._verticalScrollPolicy && (this._verticalScrollPolicy = a, this._checkVbar(), this._scroller.verticalScrollPolicy = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "horizontalScrollPolicy", {
                get: function() {
                    return this._horizontalScrollPolicy
                },
                set: function(a) {
                    a != this._horizontalScrollPolicy && (this._horizontalScrollPolicy = a, this._checkHbar(), this._scroller.horizontalScrollPolicy = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "viewport", {
                get: function() {
                    return this._viewport
                },
                set: function(a) {
                    a != this._viewport && (this.uninstallViewport(), this._viewport = a, this.installViewport(), this.dispatchEventWith("viewportChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            c.installViewport = function() {
                var a = this.viewport;
                this.addEventListener(d.Event.CHANGE, this._scrollerChangedHandler, this);
                this._createChildrenCalled && a && (a.clipAndEnableScrolling = !0, this.setContent(a), this._addToDisplayListAt(a, 0), a.addEventListener(d.gui.PropertyChangeEvent.PROPERTY_CHANGE, this._viewportChangedHandler, this))
            };
            c.uninstallViewport = function() {
                this.viewport && (this.viewport.clipAndEnableScrolling = !1, this.viewport.removeEventListener(d.gui.PropertyChangeEvent.PROPERTY_CHANGE, this._viewportChangedHandler, this), this._removeFromDisplayList(this.viewport))
            };
            c._viewportChangedHandler = function(a) {
                "horizontalScrollPosition" == a.property && this.setViewportHScrollPosition(this.viewport.horizontalScrollPosition);
                "verticalScrollPosition" == a.property && this.setViewportVScrollPosition(this.viewport.verticalScrollPosition);
                if ("contentWidth" == a.property || "contentHeight" == a.property) this.invalidateDisplayList(),
                this.invalidateSize()
            };
            c._scrollerChangedHandler = function(a) {
                this.setViewportHScrollPosition(this._scroller.scrollLeft);
                this.setViewportVScrollPosition(this._scroller.scrollTop)
            };
            c.setViewportVScrollPosition = function(a) {
                this._scroller.scrollTop != a && (this._scroller.scrollTop = a);
                this.verticalScrollBar && this.verticalScrollBar.value != a && (this.verticalScrollBar.setPosition(a), this.hideOrShow(!0), this.setAutoHideTimer())
            };
            c.setViewportHScrollPosition = function(a) {
                this._scroller.scrollLeft != a && (this._scroller.scrollLeft = a);
                this.horizontalScrollBar && this.horizontalScrollBar.value != a && (this.horizontalScrollBar._setValue(a), this.hideOrShow(!0), this.setAutoHideTimer())
            };
            c.throwHorizontally = function(a, b) {
                void 0 === b && (b = 500);
                this._scroller.setScrollLeft(a, b)
            };
            c.throwVertically = function(a, b) {
                void 0 === b && (b = 500);
                this._scroller.setScrollTop(a, b)
            };
            Object.defineProperty(c, "autoHideScrollBars", {
                get: function() {
                    return this._autoHideScrollBars
                },
                set: function(a) {
                    this._autoHideScrollBars != a && ((this._autoHideScrollBars = a) ? this.setAutoHideTimer() : this.hideOrShow(!0))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(c, "autoHideDelay", {
                get: function() {
                    return this._autoHideDelay
                },
                set: function(a) {
                    this._autoHideDelay != a && (this._autoHideDelay = a)
                },
                enumerable: !0,
                configurable: !0
            });
            c.setAutoHideTimer = function() {
                this._autoHideScrollBars && this.initialized && (this.horizontalScrollBar || this.verticalScrollBar) && (NaN != this._autoHideTimer && d.clearTimeout(this._autoHideTimer), this._autoHideTimer = d.setTimeout(this.hideOrShow.bind(this, !1), this, this._autoHideDelay))
            };
            c.hideOrShow = function(a) {
                var b = this;
                if (this.initialized && (this.horizontalScrollBar || this.verticalScrollBar)) {
                    if (null == this._autoHideShowAnimat) this._autoHideShowAnimat = new f.Animation(function(a) {
                        a = a.currentValue.alpha;
                        b.horizontalScrollBar && (b.horizontalScrollBar.alpha = a);
                        b.verticalScrollBar && (b.verticalScrollBar.alpha = a)
                    },
                    this);
                    else {
                        if (this._animatTargetIsShow == a) return;
                        this._autoHideShowAnimat.isPlaying && this._autoHideShowAnimat.stop()
                    }
                    this._animatTargetIsShow = a;
                    var c = this._autoHideShowAnimat;
                    c.motionPaths = [new f.SimpleMotionPath("alpha", a ? 0 : 1, a ? 1 : 0)];
                    c.duration = a ? 100 : 300;
                    c.play()
                }
            };
            Object.defineProperty(c, "numElements", {
                get: function() {
                    return this.viewport ? 1 : 0
                },
                enumerable: !0,
                configurable: !0
            });
            c.throwRangeError = function(a) {
                throw new RangeError(d.getString(3011, a));
            };
            c.getElementAt = function(a) {
                if (this.viewport && 0 == a) return this.viewport;
                this.throwRangeError(a);
                return null
            };
            c.getElementIndex = function(a) {
                return null != a && a == this.viewport ? 0 : -1
            };
            c.containsElement = function(a) {
                return null != a && a == this.viewport ? !0 : !1
            };
            c.throwNotSupportedError = function() {
                throw Error(d.getString(3012));
            };
            c.addElement = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.addElementAt = function(a, b) {
                this.throwNotSupportedError();
                return null
            };
            c.removeElement = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.removeElementAt = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.removeAllElements = function() {
                this.throwNotSupportedError()
            };
            c.setElementIndex = function(a, b) {
                this.throwNotSupportedError()
            };
            c.swapElements = function(a, b) {
                this.throwNotSupportedError()
            };
            c.swapElementsAt = function(a, b) {
                this.throwNotSupportedError()
            };
            c.addChild = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.addChildAt = function(a, b) {
                this.throwNotSupportedError();
                return null
            };
            c.removeChild = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.removeChildAt = function(a) {
                this.throwNotSupportedError();
                return null
            };
            c.setChildIndex = function(a, b) {
                this.throwNotSupportedError()
            };
            c.swapChildren = function(a, b) {
                this.throwNotSupportedError()
            };
            c.swapChildrenAt = function(a, b) {
                this.throwNotSupportedError()
            };
            c._checkHbar = function() {
                if ("off" == this._horizontalScrollPolicy) this._uninstallHorizontalScrollBar();
                else if (this.horizontalScrollBar) {
                    var a = this.horizontalScrollBar;
                    a.addEventListener(d.Event.CHANGE, this.hBarChanged, this, !1);
                    a._setViewportMetric(this._viewport.width, this._viewport.contentWidth);
                    a.owner && "removeElement" in a.owner && a.owner.removeElement(a);
                    this._addToDisplayList(this.horizontalScrollBar)
                }
            };
            c._checkVbar = function() {
                if ("off" == this._verticalScrollPolicy) this._uninstallVerticalScrollBar();
                else if (this.verticalScrollBar && this.verticalScrollBar.owner != this) {
                    var a = this.verticalScrollBar;
                    a.addEventListener(d.Event.CHANGE, this.vBarChanged, this, !1);
                    a._setViewportMetric(this._viewport.height, this._viewport.contentHeight);
                    a.owner && "removeElement" in a.owner && a.owner.removeElement(a);
                    this._addToDisplayList(this.verticalScrollBar)
                }
            };
            c.createChildren = function() {
                a.prototype.createChildren.call(this);
                this.installViewport()
            };
            c.partAdded = function(b, c) {
                a.prototype.partAdded.call(this, b, c);
                c == this.horizontalScrollBar && this._checkHbar();
                c == this.verticalScrollBar && this._checkVbar()
            };
            c.partRemoved = function(b, c) {
                a.prototype.partRemoved.call(this, b, c);
                this.horizontalScrollBar == c && (this.horizontalScrollBar.parent == this && this._uninstallHorizontalScrollBar(), this.horizontalScrollBar = null);
                this.verticalScrollBar == c && (this.verticalScrollBar.parent == this && this._uninstallVerticalScrollBar(), this.verticalScrollBar = null)
            };
            c._uninstallHorizontalScrollBar = function() {
                null != this.horizontalScrollBar && (this._removeFromDisplayList(this.horizontalScrollBar), this.horizontalScrollBar.removeEventListener(d.Event.CHANGE, this.hBarChanged, this, !1))
            };
            c._uninstallVerticalScrollBar = function() {
                null != this.verticalScrollBar && (this._removeFromDisplayList(this.verticalScrollBar), this.verticalScrollBar.removeEventListener(d.Event.CHANGE, this.vBarChanged, this, !1))
            };
            c.hBarChanged = function(a) {
                this.setViewportHScrollPosition(this.horizontalScrollBar._getValue())
            };
            c.vBarChanged = function(a) {
                this.setViewportVScrollPosition(this.verticalScrollBar.getPosition())
            };
            c.hitTest = function(b, c, d) {
                void 0 === d && (d = !1);
                var e = a.prototype.hitTest.call(this, b, c, d);
                return e ? e: this._visible && (d || this._touchEnabled) ? 0 <= b && b < this.width && 0 <= c && c < this.height ? this: null: null
            };
            return b
        } (f.SkinnableComponent);
        f.Scroller = g;
        g.prototype.__class__ = "egret.gui.Scroller";
        for (var e in d.ScrollView.prototype) if (d.ScrollView.prototype.hasOwnProperty(e) && !g.prototype.hasOwnProperty(e) && !f.SkinnableComponent.prototype.hasOwnProperty(e) && !f.UIComponent.prototype.hasOwnProperty(e)) {
            var c = Object.getOwnPropertyDescriptor(d.ScrollView.prototype, e);
            c && (c.get || c.set) ? Object.defineProperty(g.prototype, e, c) : g.prototype[e] = d.ScrollView.prototype[e]
        }
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._selectable = !0;
                this._displayAsPassword = !1;
                this._editable = this.pendingEditable = this.displayAsPasswordChanged = !0;
                this.editableChanged = !1;
                this._maxChars = 0;
                this.maxCharsChanged = !1;
                this._multiline = !0;
                this.multilineChanged = !1;
                this._restrict = null;
                this.restrictChanged = !1;
                this._heightInLines = NaN;
                this.heightInLinesChanged = !1;
                this._widthInChars = NaN;
                this.widthInCharsChanged = !1;
                this._verticalScrollPosition = this._horizontalScrollPosition = this._contentHeight = this._contentWidth = 0;
                this._clipAndEnableScrolling = !1;
                this.defaultWidth = this.defaultHeight = NaN;
                this.isValidating = !1;
                this.selectable = !0
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "selectable", {
                get: function() {
                    return this._selectable
                },
                set: function(a) {
                    this._selectable = a
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "displayAsPassword", {
                get: function() {
                    return this._displayAsPassword
                },
                set: function(a) {
                    a != this._displayAsPassword && (this._displayAsPassword = a, this.displayAsPasswordChanged = !0, this.invalidateProperties(), this.invalidateSize(), this.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "editable", {
                get: function() {
                    return this._enabled ? this._editable: this.pendingEditable
                },
                set: function(a) {
                    this._editable != a && (this._enabled ? (this._editable = a, this.editableChanged = !0, this.invalidateProperties()) : this.pendingEditable = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "enabled", {
                get: function() {
                    return this._editable
                },
                set: function(a) {
                    a != this._enabled && ((this._enabled = a) ? (this._editable != this.pendingEditable && (this.editableChanged = !0), this._editable = this.pendingEditable) : (this.editable && (this.editableChanged = !0), this.pendingEditable = this._editable, this._editable = !1), this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "maxChars", {
                get: function() {
                    return this._maxChars
                },
                set: function(a) {
                    void 0 === a && (a = 0);
                    a != this._maxChars && (this._maxChars = a, this.maxCharsChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "multiline", {
                get: function() {
                    return this._multiline
                },
                set: function(a) {
                    a != this.multiline && (this._multiline = a, this.multilineChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "restrict", {
                get: function() {
                    return this._restrict
                },
                set: function(a) {
                    a != this._restrict && (this._restrict = a, this.restrictChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a.styleChanged = function(a) {
                e.prototype.styleChanged.call(this, a);
                a && "size" != a || (this.widthInCharsChanged = this.heightInLinesChanged = !0)
            };
            a._setLineSpacing = function(a) {
                this._lineSpacing != a && (e.prototype._setLineSpacing.call(this, a), this.heightInLinesChanged = !0)
            };
            Object.defineProperty(a, "heightInLines", {
                get: function() {
                    return this._heightInLines
                },
                set: function(a) {
                    this._heightInLines != a && (this._heightInLines = a, this.heightInLinesChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "widthInChars", {
                get: function() {
                    return this._widthInChars
                },
                set: function(a) {
                    this._widthInChars != a && (this._widthInChars = a, this.widthInCharsChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "contentWidth", {
                get: function() {
                    return this._contentWidth
                },
                enumerable: !0,
                configurable: !0
            });
            a.setContentWidth = function(a) {
                if (a != this._contentWidth) {
                    var c = this._contentWidth;
                    this._contentWidth = a;
                    this.dispatchPropertyChangeEvent("contentWidth", c, a)
                }
            };
            Object.defineProperty(a, "contentHeight", {
                get: function() {
                    return this._contentHeight
                },
                enumerable: !0,
                configurable: !0
            });
            a.setContentHeight = function(a) {
                if (a != this._contentHeight) {
                    var c = this._contentHeight;
                    this._contentHeight = a;
                    this.dispatchPropertyChangeEvent("contentHeight", c, a)
                }
            };
            Object.defineProperty(a, "horizontalScrollPosition", {
                get: function() {
                    return this._horizontalScrollPosition
                },
                set: function(a) {
                    this._horizontalScrollPosition != a && (this._horizontalScrollPosition = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalScrollPosition", {
                get: function() {
                    return this._verticalScrollPosition
                },
                set: function(a) {
                    this._verticalScrollPosition != a && (this._verticalScrollPosition = a = Math.round(a))
                },
                enumerable: !0,
                configurable: !0
            });
            a.getScrollVByVertitcalPos = function(a) {
                if (0 == this._textField.numLines) return 1;
                var c = this._textField._getLineHeight();
                return this._textField.height + (this.height - 4) % c - this.height == a ? this._textField.maxScrollV: parseInt((a - 2) / c) + 1
            };
            a.getVerticalPosByScrollV = function(a) {
                void 0 === a && (a = 0);
                if (1 == a || 0 == this._textField.numLines) return 0;
                var c = this._textField._getLineHeight();
                return a == this._textField.maxScrollV ? this._textField.height + (this.height - 4) % c - this.height: c * (a - 1) + 2
            };
            a.getHorizontalScrollPositionDelta = function(a) {
                void 0 === a && (a = 0);
                var c = 0,
                d = this._contentWidth - this._horizontalScrollPosition - this.width,
                e = -this._horizontalScrollPosition;
                switch (a) {
                case f.NavigationUnit.LEFT:
                    c = 0 >= this._horizontalScrollPosition ? 0 : Math.max(e, -this.size);
                    break;
                case f.NavigationUnit.RIGHT:
                    c = this._horizontalScrollPosition + this.width >= this.contentWidth ? 0 : Math.min(d, this.size);
                    break;
                case f.NavigationUnit.PAGE_LEFT:
                    c = Math.max(e, -this.width);
                    break;
                case f.NavigationUnit.PAGE_RIGHT:
                    c = Math.min(d, this.width);
                    break;
                case f.NavigationUnit.HOME:
                    c = e;
                    break;
                case f.NavigationUnit.END:
                    c = d
                }
                return c
            };
            a.getVerticalScrollPositionDelta = function(a) {
                void 0 === a && (a = 0);
                var c = 0,
                d = this._contentHeight - this._verticalScrollPosition - this.height,
                e = -this._verticalScrollPosition;
                switch (a) {
                case f.NavigationUnit.UP:
                    c = this.getVScrollDelta( - 1);
                    break;
                case f.NavigationUnit.DOWN:
                    c = this.getVScrollDelta(1);
                    break;
                case f.NavigationUnit.PAGE_UP:
                    c = Math.max(e, -this.width);
                    break;
                case f.NavigationUnit.PAGE_DOWN:
                    c = Math.min(d, this.width);
                    break;
                case f.NavigationUnit.HOME:
                    c = e;
                    break;
                case f.NavigationUnit.END:
                    c = d
                }
                return c
            };
            a.getVScrollDelta = function(a) {
                void 0 === a && (a = 0);
                if (!this._textField) return 0;
                a = this.getScrollVByVertitcalPos(this._verticalScrollPosition) + a;
                a = Math.max(1, Math.min(this._textField.maxScrollV, a));
                return this.getVerticalPosByScrollV(a) - this._verticalScrollPosition
            };
            Object.defineProperty(a, "clipAndEnableScrolling", {
                get: function() {
                    return this._clipAndEnableScrolling
                },
                set: function(a) {
                    this._clipAndEnableScrolling != a && (this._clipAndEnableScrolling = a)
                },
                enumerable: !0,
                configurable: !0
            });
            a.commitProperties = function() {
                this._textField || (this.restrictChanged = this.multilineChanged = this.maxCharsChanged = this.displayAsPasswordChanged = this.editableChanged = !0);
                e.prototype.commitProperties.call(this);
                this.editableChanged && (this._textField.type = this._editable ? d.TextFieldType.INPUT: d.TextFieldType.DYNAMIC, this.editableChanged = !1);
                this.displayAsPasswordChanged && (this._textField.displayAsPassword = this._displayAsPassword, this.displayAsPasswordChanged = !1);
                this.maxCharsChanged && (this._textField.maxChars = this._maxChars, this.maxCharsChanged = !1);
                this.multilineChanged && (this._textField.multiline = this._multiline, this.multilineChanged = !1);
                this.restrictChanged && (this.restrictChanged = !1);
                if (this.heightInLinesChanged) if (this.heightInLinesChanged = !1, isNaN(this._heightInLines)) this.defaultHeight = NaN;
                else {
                    var a = parseInt(this.heightInLines),
                    c = 22,
                    f = this._textField._properties;
                    0 < f._text.length ? c = this._textField._getLineHeight() : (f._text = "M", c = this._textField._getLineHeight(), f._text = "");
                    this.defaultHeight = a * c + 4
                }
                this.widthInCharsChanged && (this.widthInCharsChanged = !1, isNaN(this._widthInChars) ? this.defaultWidth = NaN: (a = parseInt(this._widthInChars), this.defaultWidth = this.size * a + 5))
            };
            a.updateDisplayList = function(a, c) {
                this.isValidating = !0;
                e.prototype.updateDisplayList.call(this, a, c);
                this.updateContentSize();
                this.isValidating = !1
            };
            a.updateContentSize = function() {
                if (this.clipAndEnableScrolling) {
                    this.setContentWidth(this._textField.width);
                    var a = 0;
                    0 == this._textField.numLines ? a = 4 : (a = this._textField._getLineHeight(), a = this._textField.height + (this.height - 4) % a);
                    this.setContentHeight(a)
                }
            };
            Object.defineProperty(a, "selectionBeginIndex", {
                get: function() {
                    this.validateProperties();
                    return this._textField ? this._textField.selectionBeginIndex: 0
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "selectionEndIndex", {
                get: function() {
                    this.validateProperties();
                    return this._textField ? this._textField.selectionEndIndex: 0
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "caretIndex", {
                get: function() {
                    this.validateProperties();
                    return this._textField ? this._textField.caretIndex: 0
                },
                enumerable: !0,
                configurable: !0
            });
            a.setSelection = function(a, c) {
                void 0 === c && (c = 0);
                this.validateProperties();
                this._textField && this._textField._setSelection(a, c)
            };
            a.selectAll = function() {
                this.validateProperties();
                this._textField && this._textField._setSelection(0, this._textField.text.length)
            };
            a.measure = function() {
                this.measuredWidth = isNaN(this.defaultWidth) ? f.TextBase.DEFAULT_MEASURED_WIDTH: this.defaultWidth;
                0 != this._maxChars && (this.measuredWidth = Math.min(this.measuredWidth, this._textField.width));
                this.measuredHeight = this._multiline ? isNaN(this.defaultHeight) ? 2 * f.TextBase.DEFAULT_MEASURED_HEIGHT: this.defaultHeight: this._textField.height
            };
            a._createTextField = function() {
                e.prototype._createTextField.call(this);
                this._textField.type = this._editable ? d.TextFieldType.INPUT: d.TextFieldType.DYNAMIC;
                this._textField.multiline = this._multiline;
                this._textField.addEventListener(d.Event.CHANGE, this.textField_changeHandler, this);
                this._textField.addEventListener("scroll", this.textField_scrollHandler, this);
                this._textField.addEventListener("input", this.textField_textInputHandler, this)
            };
            a.textField_changeHandler = function(a) {
                this._textFieldChanged();
                a.stopImmediatePropagation();
                this.dispatchEvent(new d.Event(d.Event.CHANGE));
                this.invalidateSize();
                this.invalidateDisplayList();
                this.updateContentSize()
            };
            a.textField_scrollHandler = function(a) {};
            a.textField_textInputHandler = function(a) {
                a.stopImmediatePropagation();
                var c = new d.Event(a.type, !1, !0);
                c.data = a.data;
                this.dispatchEvent(c);
                c.isDefaultPrevented() && a.preventDefault()
            };
            return c
        } (f.TextBase);
        f.EditableText = g;
        g.prototype.__class__ = "egret.gui.EditableText"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.horizontalScrollPolicyChanged = !1;
                this._horizontalScrollPolicy = null;
                this.verticalScrollPolicyChanged = !1;
                this.scroller = this._verticalScrollPolicy = null
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "widthInChars", {
                get: function() {
                    return this._getWidthInChars()
                },
                set: function(a) {
                    this._setWidthInChars(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "heightInLines", {
                get: function() {
                    return this._getHeightInLines()
                },
                set: function(a) {
                    this._setHeightInLines(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "horizontalScrollPolicy", {
                get: function() {
                    return this._horizontalScrollPolicy
                },
                set: function(a) {
                    this._horizontalScrollPolicy != a && (this._horizontalScrollPolicy = a, this.horizontalScrollPolicyChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalScrollPolicy", {
                get: function() {
                    return this._verticalScrollPolicy
                },
                set: function(a) {
                    this._verticalScrollPolicy != a && (this._verticalScrollPolicy = a, this.verticalScrollPolicyChanged = !0, this.invalidateProperties())
                },
                enumerable: !0,
                configurable: !0
            });
            a._setText = function(a) {
                e.prototype._setText.call(this, a);
                this.dispatchEvent(new d.Event(d.Event.CHANGE))
            };
            a.commitProperties = function() {
                e.prototype.commitProperties.call(this);
                this.horizontalScrollPolicyChanged && (this.scroller && (this.scroller.horizontalScrollPolicy = this.horizontalScrollPolicy), this.horizontalScrollPolicyChanged = !1);
                this.verticalScrollPolicyChanged && (this.scroller && (this.scroller.verticalScrollPolicy = this.verticalScrollPolicy), this.verticalScrollPolicyChanged = !1)
            };
            a.partAdded = function(a, c) {
                e.prototype.partAdded.call(this, a, c);
                c == this.textDisplay && (this.textDisplay.multiline = !0)
            };
            a.createSkinParts = function() {
                this.textDisplay = new f.EditableText;
                this.textDisplay.widthInChars = 15;
                this.textDisplay.heightInLines = 10;
                this._addToDisplayList(this.textDisplay);
                this.partAdded("textDisplay", this.textDisplay)
            };
            return c
        } (f.SkinnableTextBase);
        f.TextArea = g;
        g.prototype.__class__ = "egret.gui.TextArea"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this)
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "widthInChars", {
                get: function() {
                    return e.prototype._getWidthInChars.call(this)
                },
                set: function(a) {
                    e.prototype._setWidthInChars.call(this, a)
                },
                enumerable: !0,
                configurable: !0
            });
            a._setText = function(a) {
                e.prototype._setText.call(this, a);
                this.dispatchEvent(new d.Event(d.Event.CHANGE))
            };
            a.partAdded = function(a, c) {
                e.prototype.partAdded.call(this, a, c);
                c == this.textDisplay && (this.textDisplay.multiline = !1)
            };
            a.createSkinParts = function() {
                this.textDisplay = new f.EditableText;
                this.textDisplay.widthInChars = 10;
                this.textDisplay.multiline = !1;
                this.textDisplay.left = 1;
                this.textDisplay.right = 1;
                this.textDisplay.top = 1;
                this.textDisplay.bottom = 1;
                this._addToDisplayList(this.textDisplay);
                this.partAdded("textDisplay", this.textDisplay)
            };
            return c
        } (f.SkinnableTextBase);
        f.TextInput = g;
        g.prototype.__class__ = "egret.gui.TextInput"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                e.call(this, a, b, c)
            }
            __extends(c, e);
            c.dispatchUIEvent = function(a, b) {
                d.Event._dispatchByTarget(c, a, b)
            };
            c.INITIALIZE = "initialize";
            c.CREATION_COMPLETE = "creationComplete";
            c.UPDATE_COMPLETE = "updateComplete";
            c.BUTTON_DOWN = "buttonDown";
            c.CHANGE_END = "changeEnd";
            c.CHANGE_START = "changeStart";
            c.CHANGING = "changing";
            c.VALUE_COMMIT = "valueCommit";
            c.SKIN_CHANGED = "skinChanged";
            c.CONTENT_CHANGED = "contentChanged";
            c.OPEN = "open";
            c.CLOSE = "close";
            c.PLAY_COMPLETE = "playComplete";
            return c
        } (d.Event);
        f.UIEvent = g;
        g.prototype.__class__ = "egret.gui.UIEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f, g, p, k) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = null);
                void 0 === g && (g = null);
                void 0 === p && (p = null);
                void 0 === k && (k = null);
                e.call(this, a, b, c);
                this.source = this.property = this.oldValue = this.newValue = this.kind = null;
                this.kind = d;
                this.property = f;
                this.oldValue = g;
                this.newValue = p;
                this.source = k
            }
            __extends(c, e);
            c.dispatchPropertyChangeEvent = function(a, b, e, f, g, t) {
                void 0 === b && (b = null);
                void 0 === e && (e = null);
                void 0 === f && (f = null);
                void 0 === g && (g = null);
                void 0 === t && (t = null);
                var p = d.Event._getPropertyData(c);
                p.kind = b;
                p.property = e;
                p.oldValue = f;
                p.newValue = g;
                p.source = t;
                d.Event._dispatchByTarget(c, a, c.PROPERTY_CHANGE, p)
            };
            c.PROPERTY_CHANGE = "propertyChange";
            return c
        } (d.Event);
        f.PropertyChangeEvent = g;
        g.prototype.__class__ = "egret.gui.PropertyChangeEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.UPDATE = "update";
            d.DELETE = "delete";
            return d
        } ();
        d.PropertyChangeEventKind = g;
        g.prototype.__class__ = "egret.gui.PropertyChangeEventKind"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = NaN);
                void 0 === c && (c = NaN);
                void 0 === d && (d = !1);
                void 0 === f && (f = !1);
                e.call(this, a, d, f);
                this.oldY = this.oldX = NaN;
                this.oldX = b;
                this.oldY = c
            }
            __extends(c, e);
            c.dispatchMoveEvent = function(a, b, e) {
                void 0 === b && (b = NaN);
                void 0 === e && (e = NaN);
                var f = d.Event._getPropertyData(c);
                f.oldX = b;
                f.oldY = e;
                d.Event._dispatchByTarget(c, a, c.MOVE, f)
            };
            c.MOVE = "move";
            return c
        } (d.Event);
        f.MoveEvent = g;
        g.prototype.__class__ = "egret.gui.MoveEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = NaN);
                void 0 === c && (c = NaN);
                void 0 === d && (d = !1);
                void 0 === f && (f = !1);
                e.call(this, a, d, f);
                this.oldWidth = this.oldHeight = NaN;
                this.oldWidth = b;
                this.oldHeight = c
            }
            __extends(c, e);
            c.dispatchResizeEvent = function(a, b, e) {
                void 0 === b && (b = NaN);
                void 0 === e && (e = NaN);
                var f = d.Event._getPropertyData(c);
                f.oldWidth = b;
                f.oldHeight = e;
                d.Event._dispatchByTarget(c, a, c.RESIZE, f)
            };
            c.RESIZE = "resize";
            return c
        } (d.Event);
        f.ResizeEvent = g;
        g.prototype.__class__ = "egret.gui.ResizeEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = null);
                e.call(this, a, b, c);
                this.partName = this.instance = null;
                this.partName = d;
                this.instance = f
            }
            __extends(c, e);
            c.dispatchSkinPartEvent = function(a, b, e, f) {
                void 0 === e && (e = null);
                void 0 === f && (f = null);
                var g = d.Event._getPropertyData(c);
                g.partName = e;
                g.instance = f;
                d.Event._dispatchByTarget(c, a, b, g)
            };
            c.PART_ADDED = "partAdded";
            c.PART_REMOVED = "partRemoved";
            return c
        } (d.Event);
        f.SkinPartEvent = g;
        g.prototype.__class__ = "egret.gui.SkinPartEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = -1);
                e.call(this, a, b, c);
                this.detail = null;
                this.detail = d
            }
            __extends(c, e);
            c.dispatchCloseEvent = function(a, b, e) {
                void 0 === e && (e = -1);
                var f = d.Event._getPropertyData(c);
                f.detail = e;
                d.Event._dispatchByTarget(c, a, b, f)
            };
            c.CLOSE = "close";
            return c
        } (d.Event);
        f.CloseEvent = g;
        g.prototype.__class__ = "egret.gui.CloseEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f, g, p, k) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = -1);
                void 0 === g && (g = -1);
                void 0 === p && (p = null);
                void 0 === k && (k = null);
                e.call(this, a, b, c);
                this.oldItems = this.items = this.kind = null;
                this.kind = d;
                this.location = f;
                this.oldLocation = g;
                this.items = p ? p: [];
                this.oldItems = k ? k: []
            }
            __extends(c, e);
            c.dispatchCollectionEvent = function(a, b, e, f, g, t, p) {
                void 0 === e && (e = null);
                void 0 === f && (f = -1);
                void 0 === g && (g = -1);
                void 0 === t && (t = null);
                void 0 === p && (p = null);
                var k = d.Event._getPropertyData(c);
                k.kind = e;
                k.location = f;
                k.oldLocation = g;
                k.items = t;
                k.oldItems = p;
                d.Event._dispatchByTarget(c, a, b, k)
            };
            c.COLLECTION_CHANGE = "collectionChange";
            return c
        } (d.Event);
        f.CollectionEvent = g;
        g.prototype.__class__ = "egret.gui.CollectionEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.ADD = "add";
            d.MOVE = "move";
            d.REFRESH = "refresh";
            d.REMOVE = "remove";
            d.REPLACE = "replace";
            d.RESET = "reset";
            d.UPDATE = "update";
            d.OPEN = "open";
            d.CLOSE = "close";
            return d
        } ();
        d.CollectionEventKind = g;
        g.prototype.__class__ = "egret.gui.CollectionEventKind"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = -1);
                e.call(this, a, b, c);
                this.index = NaN;
                this.element = null;
                this.element = d;
                this.index = f
            }
            __extends(c, e);
            c.dispatchElementExistenceEvent = function(a, b, e, f) {
                void 0 === e && (e = null);
                void 0 === f && (f = -1);
                var g = d.Event._getPropertyData(c);
                g.element = e;
                g.index = f;
                d.Event._dispatchByTarget(c, a, b, g)
            };
            c.ELEMENT_ADD = "elementAdd";
            c.ELEMENT_REMOVE = "elementRemove";
            return c
        } (d.Event);
        f.ElementExistenceEvent = g;
        g.prototype.__class__ = "egret.gui.ElementExistenceEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = -1);
                void 0 === f && (f = -1);
                e.call(this, a, b, c);
                this.oldIndex = this.newIndex = NaN;
                this.oldIndex = d;
                this.newIndex = f
            }
            __extends(c, e);
            c.dispatchIndexChangeEvent = function(a, b, e, f, g) {
                void 0 === e && (e = -1);
                void 0 === f && (f = -1);
                void 0 === g && (g = !1);
                var t = d.Event._getPropertyData(c);
                t.oldIndex = e;
                t.newIndex = f;
                return d.Event._dispatchByTarget(c, a, b, t, !1, g)
            };
            c.CHANGE = "change";
            c.CHANGING = "changing";
            return c
        } (d.Event);
        f.IndexChangeEvent = g;
        g.prototype.__class__ = "egret.gui.IndexChangeEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f, g, p, k, l, m, n, q, r) {
                void 0 === b && (b = !0);
                void 0 === c && (c = !0);
                void 0 === d && (d = 0);
                void 0 === f && (f = 0);
                void 0 === g && (g = 0);
                void 0 === p && (p = !1);
                void 0 === k && (k = !1);
                void 0 === l && (l = !1);
                void 0 === m && (m = !1);
                void 0 === n && (n = -1);
                void 0 === q && (q = null);
                void 0 === r && (r = null);
                e.call(this, a, b, c, d, f, g, p, k, l, m);
                this.itemRenderer = this.item = null;
                this.itemIndex = NaN;
                this.itemIndex = n;
                this.item = q;
                this.itemRenderer = r
            }
            __extends(c, e);
            c.dispatchListEvent = function(a, b, e, f, g, t) {
                void 0 === e && (e = null);
                void 0 === f && (f = -1);
                void 0 === g && (g = null);
                void 0 === t && (t = null);
                var p = d.Event._getPropertyData(c);
                p.touchPointID = e.touchPointID;
                p._stageX = e.stageX;
                p._stageY = e.stageY;
                p.ctrlKey = e.ctrlKey;
                p.altKey = e.altKey;
                p.shiftKey = e.shiftKey;
                p.touchDown = e.touchDown;
                p.itemIndex = f;
                p.item = g;
                p.itemRenderer = t;
                d.Event._dispatchByTarget(c, a, b, p)
            };
            c.ITEM_ROLL_OUT = "itemRollOut";
            c.ITEM_ROLL_OVER = "itemRollOver";
            c.ITEM_CLICK = "itemClick";
            return c
        } (d.TouchEvent);
        f.ListEvent = g;
        g.prototype.__class__ = "egret.gui.ListEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = !1);
                e.call(this, a, b, c);
                this.popUp = null;
                this.modal = !1;
                this.popUp = d;
                this.modal = f
            }
            __extends(c, e);
            c.dispatchPopUpEvent = function(a, b, e, f) {
                void 0 === e && (e = null);
                void 0 === f && (f = !1);
                var g = d.Event._getPropertyData(c);
                g.popUp = e;
                g.modal = f;
                d.Event._dispatchByTarget(c, a, b, g)
            };
            c.ADD_POPUP = "addPopUp";
            c.REMOVE_POPUP = "removePopUp";
            c.BRING_TO_FRONT = "bringToFront";
            return c
        } (d.Event);
        f.PopUpEvent = g;
        g.prototype.__class__ = "egret.gui.PopUpEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f, g) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = -1);
                void 0 === g && (g = null);
                e.call(this, a, b, c);
                this.data = null;
                this.index = NaN;
                this.renderer = null;
                this.renderer = d;
                this.index = f;
                this.data = g
            }
            __extends(c, e);
            c.dispatchRendererExistenceEvent = function(a, b, e, f, g) {
                void 0 === e && (e = null);
                void 0 === f && (f = -1);
                void 0 === g && (g = null);
                var t = d.Event._getPropertyData(c);
                t.renderer = e;
                t.index = f;
                t.data = g;
                d.Event._dispatchByTarget(c, a, b, t)
            };
            c.RENDERER_ADD = "rendererAdd";
            c.RENDERER_REMOVE = "rendererRemove";
            return c
        } (d.Event);
        f.RendererExistenceEvent = g;
        g.prototype.__class__ = "egret.gui.RendererExistenceEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === d && (d = null);
                void 0 === f && (f = null);
                e.call(this, a, b, c);
                this.oldState = this.newState = null;
                this.oldState = d;
                this.newState = f
            }
            __extends(c, e);
            c.dispatchStateChangeEvent = function(a, b, e, f) {
                void 0 === e && (e = null);
                void 0 === f && (f = null);
                var g = d.Event._getPropertyData(c);
                g.oldState = e;
                g.newState = f;
                d.Event._dispatchByTarget(c, a, b, g)
            };
            c.CURRENT_STATE_CHANGE = "currentStateChange";
            c.CURRENT_STATE_CHANGING = "currentStateChanging";
            c.STATE_CHANGE_COMPLETE = "stateChangeComplete";
            return c
        } (d.Event);
        f.StateChangeEvent = g;
        g.prototype.__class__ = "egret.gui.StateChangeEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                e.call(this, a, b, c)
            }
            __extends(c, e);
            c.dispatchTrackBaseEvent = function(a, b) {
                d.Event._dispatchByTarget(c, a, b)
            };
            c.THUMB_DRAG = "thumbDrag";
            c.THUMB_PRESS = "thumbPress";
            c.THUMB_RELEASE = "thumbRelease";
            return c
        } (d.Event);
        f.TrackBaseEvent = g;
        g.prototype.__class__ = "egret.gui.TrackBaseEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c(a, b, c, d, f, g) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !0);
                void 0 === d && (d = -1);
                void 0 === f && (f = null);
                void 0 === g && (g = null);
                e.call(this, a, b, c);
                this.itemRenderer = this.item = null;
                this.itemIndex = NaN;
                this.opening = !1;
                this.item = f;
                this.itemRenderer = g;
                this.itemIndex = d
            }
            __extends(c, e);
            c.dispatchTreeEvent = function(a, b, e, f, g, t) {
                void 0 === e && (e = -1);
                void 0 === f && (f = null);
                void 0 === g && (g = null);
                void 0 === t && (t = !1);
                var p = d.Event._getPropertyData(c);
                p.itemIndex = e;
                p.item = f;
                p.itemRenderer = g;
                p.opening = t;
                d.Event._dispatchByTarget(c, a, b, p)
            };
            c.ITEM_CLOSE = "itemClose";
            c.ITEM_OPEN = "itemOpen";
            c.ITEM_OPENING = "itemOpening";
            return c
        } (d.Event);
        f.TreeEvent = g;
        g.prototype.__class__ = "egret.gui.TreeEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(d) {
            function c(a, b, c, f) {
                void 0 === b && (b = !1);
                void 0 === c && (c = !1);
                void 0 === f && (f = null);
                d.call(this, a, b, c);
                this.effectInstance = f
            }
            __extends(c, d);
            c.EFFECT_END = "effectEnd";
            c.EFFECT_STOP = "effectStop";
            c.EFFECT_START = "effectStart";
            c.EFFECT_REPEAT = "effectRepeat";
            c.EFFECT_UPDATE = "effectUpdate";
            return c
        } (d.Event);
        f.EffectEvent = g;
        g.prototype.__class__ = "egret.gui.EffectEvent"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(d) {
            function c() {
                d.call(this);
                this._target = null;
                this._useVirtualLayout = !1;
                this._typicalLayoutRect = null
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "target", {
                get: function() {
                    return this._target
                },
                set: function(a) {
                    this._target != a && (this._target = a, this.clearVirtualLayoutCache())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "useVirtualLayout", {
                get: function() {
                    return this._useVirtualLayout
                },
                set: function(a) {
                    this._useVirtualLayout != a && (this._useVirtualLayout = a, this.dispatchEventWith("useVirtualLayoutChanged"), this._useVirtualLayout && !a && this.clearVirtualLayoutCache(), this.target && this.target.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "typicalLayoutRect", {
                get: function() {
                    return this._typicalLayoutRect
                },
                set: function(a) {
                    this._typicalLayoutRect != a && (this._typicalLayoutRect = a, this.target && this.target.invalidateSize())
                },
                enumerable: !0,
                configurable: !0
            });
            a.scrollPositionChanged = function() {};
            a.clearVirtualLayoutCache = function() {};
            a.elementAdded = function(a) {};
            a.elementRemoved = function(a) {};
            a.measure = function() {};
            a.updateDisplayList = function(a, c) {};
            return c
        } (d.EventDispatcher);
        f.LayoutBase = g;
        g.prototype.__class__ = "egret.gui.LayoutBase"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._mouseWheelSpeed = 20
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "useVirtualLayout", {
                set: function(a) {},
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "mouseWheelSpeed", {
                get: function() {
                    return this._mouseWheelSpeed
                },
                set: function(a) {
                    0 == a && (a = 1);
                    this._mouseWheelSpeed = a
                },
                enumerable: !0,
                configurable: !0
            });
            a.getElementBoundsLeftOfScrollRect = function(a) {
                var c = new d.Rectangle;
                c.x = a.x - this._mouseWheelSpeed;
                c.right = a.x;
                return c
            };
            a.getElementBoundsRightOfScrollRect = function(a) {
                var c = new d.Rectangle;
                c.x = a.right;
                c.right = a.right + this._mouseWheelSpeed;
                return c
            };
            a.getElementBoundsAboveScrollRect = function(a) {
                var c = new d.Rectangle;
                c.y = a.y - this._mouseWheelSpeed;
                c.bottom = a.y;
                return c
            };
            a.getElementBoundsBelowScrollRect = function(a) {
                var c = new d.Rectangle;
                c.y = a.bottom;
                c.bottom = a.bottom + this._mouseWheelSpeed;
                return c
            };
            a.measure = function() {
                e.prototype.measure.call(this);
                if (null != this.target) {
                    for (var a = 0,
                    c = 0,
                    d = this.target.numElements,
                    f = 0; f < d; f++) {
                        var g = this.target.getElementAt(f);
                        if (g && g.includeInLayout) {
                            var p = g.horizontalCenter,
                            k = g.verticalCenter,
                            l = g.left,
                            m = g.right,
                            n = g.top,
                            q = g.bottom;
                            isNaN(l) || isNaN(m) ? isNaN(p) ? isNaN(l) && isNaN(m) ? p = g.preferredX: (p = isNaN(l) ? 0 : l, p += isNaN(m) ? 0 : m) : p = 2 * Math.abs(p) : p = l + m;
                            isNaN(n) || isNaN(q) ? isNaN(k) ? isNaN(n) && isNaN(q) ? k = g.preferredY: (k = isNaN(n) ? 0 : n, k += isNaN(q) ? 0 : q) : k = 2 * Math.abs(k) : k = n + q;
                            q = g.preferredHeight;
                            a = Math.ceil(Math.max(a, p + g.preferredWidth));
                            c = Math.ceil(Math.max(c, k + q))
                        }
                    }
                    this.target.measuredWidth = a;
                    this.target.measuredHeight = c
                }
            };
            a.updateDisplayList = function(a, c) {
                e.prototype.updateDisplayList.call(this, a, c);
                if (null != this.target) {
                    for (var d = this.target.numElements,
                    f = 0,
                    g = 0,
                    p = 0; p < d; p++) {
                        var k = this.target.getElementAt(p);
                        if (null != k && k.includeInLayout) {
                            var l = k.horizontalCenter,
                            m = k.verticalCenter,
                            n = k.left,
                            q = k.right,
                            r = k.top,
                            w = k.bottom,
                            y = k.percentWidth,
                            s = k.percentHeight,
                            x = NaN,
                            v = NaN;
                            isNaN(n) || isNaN(q) ? isNaN(y) || (x = Math.round(a * Math.min(0.01 * y, 1))) : x = a - q - n;
                            isNaN(r) || isNaN(w) ? isNaN(s) || (v = Math.round(c * Math.min(0.01 * s, 1))) : v = c - w - r;
                            k.setLayoutBoundsSize(x, v);
                            y = k.layoutBoundsWidth;
                            s = k.layoutBoundsHeight;
                            v = x = NaN;
                            x = isNaN(l) ? isNaN(n) ? isNaN(q) ? k.layoutBoundsX: a - y - q: n: Math.round((a - y) / 2 + l);
                            v = isNaN(m) ? isNaN(r) ? isNaN(w) ? k.layoutBoundsY: c - s - w: r: Math.round((c - s) / 2 + m);
                            k.setLayoutBoundsPosition(x, v);
                            f = Math.max(f, x + y);
                            g = Math.max(g, v + s)
                        }
                    }
                    this.target.setContentSize(f, g)
                }
            };
            return c
        } (f.LayoutBase);
        f.BasicLayout = g;
        g.prototype.__class__ = "egret.gui.BasicLayout"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.LEFT = "left";
            d.JUSTIFY_USING_GAP = "justifyUsingGap";
            d.JUSTIFY_USING_WIDTH = "justifyUsingWidth";
            return d
        } ();
        d.ColumnAlign = g;
        g.prototype.__class__ = "egret.gui.ColumnAlign"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.TOP = "top";
            d.JUSTIFY_USING_GAP = "justifyUsingGap";
            d.JUSTIFY_USING_HEIGHT = "justifyUsingHeight";
            return d
        } ();
        d.RowAlign = g;
        g.prototype.__class__ = "egret.gui.RowAlign"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.ROWS = "rows";
            d.COLUMNS = "columns";
            return d
        } ();
        d.TileOrientation = g;
        g.prototype.__class__ = "egret.gui.TileOrientation"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(c) {
            function a() {
                c.call(this);
                this._horizontalAlign = d.HorizontalAlign.LEFT;
                this._verticalAlign = d.VerticalAlign.TOP;
                this._gap = 6;
                this._padding = 0;
                this._paddingBottom = this._paddingTop = this._paddingRight = this._paddingLeft = NaN;
                this.elementSizeTable = [];
                this.endIndex = this.startIndex = -1;
                this.indexInViewCalculated = !1;
                this.maxElementWidth = 0
            }
            __extends(a, c);
            var b = a.prototype;
            Object.defineProperty(b, "horizontalAlign", {
                get: function() {
                    return this._horizontalAlign
                },
                set: function(a) {
                    this._horizontalAlign != a && (this._horizontalAlign = a, this.target && this.target.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "verticalAlign", {
                get: function() {
                    return this._verticalAlign
                },
                set: function(a) {
                    this._verticalAlign != a && (this._verticalAlign = a, this.target && this.target.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "gap", {
                get: function() {
                    return this._gap
                },
                set: function(a) {
                    this._gap != a && (this._gap = a, this.invalidateTargetSizeAndDisplayList(), this.hasEventListener("gapChanged") && this.dispatchEventWith("gapChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "padding", {
                get: function() {
                    return this._padding
                },
                set: function(a) {
                    this._padding != a && (this._padding = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingLeft", {
                get: function() {
                    return this._paddingLeft
                },
                set: function(a) {
                    this._paddingLeft != a && (this._paddingLeft = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingRight", {
                get: function() {
                    return this._paddingRight
                },
                set: function(a) {
                    this._paddingRight != a && (this._paddingRight = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingTop", {
                get: function() {
                    return this._paddingTop
                },
                set: function(a) {
                    this._paddingTop != a && (this._paddingTop = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingBottom", {
                get: function() {
                    return this._paddingBottom
                },
                set: function(a) {
                    this._paddingBottom != a && (this._paddingBottom = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            b.invalidateTargetSizeAndDisplayList = function() {
                this.target && (this.target.invalidateSize(), this.target.invalidateDisplayList())
            };
            b.measure = function() {
                c.prototype.measure.call(this);
                this.target && (this.useVirtualLayout ? this.measureVirtual() : this.measureReal())
            };
            b.measureVirtual = function() {
                for (var a = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22, b = Math.max(this.maxElementWidth, this.typicalLayoutRect ? this.typicalLayoutRect.width: 71), c = this.getElementTotalSize(), d = this.target.getElementIndicesInView(), e = d.length, f = 0; f < e; f++) {
                    var g = d[f],
                    m = this.target.getElementAt(g);
                    if (null != m && m.includeInLayout) var n = m.preferredWidth,
                    c = c + m.preferredHeight,
                    c = c - (isNaN(this.elementSizeTable[g]) ? a: this.elementSizeTable[g]),
                    b = Math.max(b, n)
                }
                f = isNaN(this._padding) ? 0 : this._padding;
                a = isNaN(this._paddingLeft) ? f: this._paddingLeft;
                d = isNaN(this._paddingRight) ? f: this._paddingRight;
                e = isNaN(this._paddingTop) ? f: this._paddingTop;
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom;
                e += f;
                this.target.measuredWidth = Math.ceil(b + (a + d));
                this.target.measuredHeight = Math.ceil(c + e)
            };
            b.measureReal = function() {
                for (var a = this.target.numElements,
                b = a,
                c = 0,
                d = 0,
                e = 0; e < a; e++) {
                    var f = this.target.getElementAt(e);
                    if (f && f.includeInLayout) var g = f.preferredWidth,
                    d = d + f.preferredHeight,
                    c = Math.max(c, g);
                    else b--
                }
                a = isNaN(this._gap) ? 0 : this._gap;
                d += (b - 1) * a;
                f = isNaN(this._padding) ? 0 : this._padding;
                b = isNaN(this._paddingLeft) ? f: this._paddingLeft;
                a = isNaN(this._paddingRight) ? f: this._paddingRight;
                e = isNaN(this._paddingTop) ? f: this._paddingTop;
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom;
                e += f;
                this.target.measuredWidth = Math.ceil(c + (b + a));
                this.target.measuredHeight = Math.ceil(d + e)
            };
            b.updateDisplayList = function(a, b) {
                c.prototype.updateDisplayList.call(this, a, b);
                if (this.target) if (0 == this.target.numElements) {
                    var d = isNaN(this._padding) ? 0 : this._padding,
                    e = isNaN(this._paddingLeft) ? d: this._paddingLeft,
                    f = isNaN(this._paddingRight) ? d: this._paddingRight,
                    g = isNaN(this._paddingTop) ? d: this._paddingTop,
                    d = isNaN(this._paddingBottom) ? d: this._paddingBottom;
                    this.target.setContentSize(Math.ceil(e + f), Math.ceil(g + d))
                } else this.useVirtualLayout ? this.updateDisplayListVirtual(a, b) : this.updateDisplayListReal(a, b)
            };
            b.getStartPosition = function(a) {
                var b = isNaN(this._padding) ? 0 : this._padding,
                c = isNaN(this._paddingTop) ? b: this._paddingTop,
                b = isNaN(this._gap) ? 0 : this._gap;
                if (!this.useVirtualLayout) {
                    var d;
                    this.target && (d = this.target.getElementAt(a));
                    return d ? d.y: c
                }
                d = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22;
                for (var e = 0; e < a; e++) {
                    var f = this.elementSizeTable[e];
                    isNaN(f) && (f = d);
                    c += f + b
                }
                return c
            };
            b.getElementSize = function(a) {
                return this.useVirtualLayout ? (a = this.elementSizeTable[a], isNaN(a) && (a = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22), a) : this.target ? this.target.getElementAt(a).height: 0
            };
            b.getElementTotalSize = function() {
                for (var a = isNaN(this._gap) ? 0 : this._gap, b = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22, c = 0, d = this.target.numElements, e = 0; e < d; e++) {
                    var f = this.elementSizeTable[e];
                    isNaN(f) && (f = b);
                    c += f + a
                }
                return c - a
            };
            b.elementAdded = function(a) {
                c.prototype.elementAdded.call(this, a);
                this.elementSizeTable.splice(a, 0, this.typicalLayoutRect ? this.typicalLayoutRect.height: 22)
            };
            b.elementRemoved = function(a) {
                c.prototype.elementRemoved.call(this, a);
                this.elementSizeTable.splice(a, 1)
            };
            b.clearVirtualLayoutCache = function() {
                c.prototype.clearVirtualLayoutCache.call(this);
                this.elementSizeTable = [];
                this.maxElementWidth = 0
            };
            b.findIndexAt = function(a, b, c) {
                var d = Math.floor(0.5 * (b + c)),
                e = this.getStartPosition(d),
                f = this.getElementSize(d),
                g = isNaN(this._gap) ? 0 : this._gap;
                return a >= e && a < e + f + g ? d: b == c ? -1 : a < e ? this.findIndexAt(a, b, Math.max(b, d - 1)) : this.findIndexAt(a, Math.min(d + 1, c), c)
            };
            b.scrollPositionChanged = function() {
                c.prototype.scrollPositionChanged.call(this);
                this.useVirtualLayout && this.getIndexInView() && (this.indexInViewCalculated = !0, this.target.invalidateDisplayList())
            };
            b.getIndexInView = function() {
                if (!this.target || 0 == this.target.numElements || isNaN(this.target.width) || 0 == this.target.width || isNaN(this.target.height) || 0 == this.target.height) return this.startIndex = this.endIndex = -1,
                !1;
                var a = isNaN(this._padding) ? 0 : this._padding,
                b = isNaN(this._paddingTop) ? a: this._paddingTop,
                c = isNaN(this._paddingBottom) ? a: this._paddingBottom,
                a = this.target.numElements,
                d = this.getStartPosition(a - 1) + this.elementSizeTable[a - 1] + c,
                e = this.target.verticalScrollPosition;
                if (e > d - c) return this.endIndex = this.startIndex = -1,
                !1;
                c = this.target.verticalScrollPosition + this.target.height;
                if (c < b) return this.endIndex = this.startIndex = -1,
                !1;
                b = this.startIndex;
                d = this.endIndex;
                this.startIndex = this.findIndexAt(e, 0, a - 1); - 1 == this.startIndex && (this.startIndex = 0);
                this.endIndex = this.findIndexAt(c, 0, a - 1); - 1 == this.endIndex && (this.endIndex = a - 1);
                return b != this.startIndex || d != this.endIndex
            };
            b.updateDisplayListVirtual = function(a, b) {
                this.indexInViewCalculated ? this.indexInViewCalculated = !1 : this.getIndexInView();
                var c = isNaN(this._padding) ? 0 : this._padding,
                e = isNaN(this._paddingLeft) ? c: this._paddingLeft,
                f = isNaN(this._paddingRight) ? c: this._paddingRight,
                g = isNaN(this._paddingBottom) ? c: this._paddingBottom,
                l = isNaN(this._gap) ? 0 : this._gap,
                m = this.target.numElements;
                if ( - 1 == this.startIndex || -1 == this.endIndex) e = this.getStartPosition(m) - l + g,
                this.target.setContentSize(this.target.contentWidth, Math.ceil(e));
                else {
                    this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                    var n = this._horizontalAlign == d.HorizontalAlign.JUSTIFY || this._horizontalAlign == d.HorizontalAlign.CONTENT_JUSTIFY,
                    q = this._horizontalAlign == d.HorizontalAlign.CONTENT_JUSTIFY,
                    r = 0;
                    n || (this._horizontalAlign == d.HorizontalAlign.CENTER ? r = 0.5 : this._horizontalAlign == d.HorizontalAlign.RIGHT && (r = 1));
                    var w = Math.max(0, a - e - f),
                    y = Math.ceil(w),
                    s,
                    x = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22,
                    c = Math.max(this.typicalLayoutRect ? this.typicalLayoutRect.width: 71, this.maxElementWidth);
                    if (q) {
                        for (var v = this.startIndex; v <= this.endIndex; v++)(s = this.target.getVirtualElementAt(v)) && s.includeInLayout && (this.maxElementWidth = Math.max(this.maxElementWidth, s.preferredWidth));
                        y = Math.ceil(Math.max(w, this.maxElementWidth))
                    }
                    for (var z = 0,
                    u = 0,
                    v = 0,
                    D = !1,
                    B = this.startIndex; B <= this.endIndex; B++) if (z = 0, s = this.target.getVirtualElementAt(B)) s.includeInLayout ? (n ? (z = e, s.setLayoutBoundsSize(y, NaN)) : (z = (w - s.layoutBoundsWidth) * r, z = 0 < z ? z: 0, z = e + z), q || (this.maxElementWidth = Math.max(this.maxElementWidth, s.preferredWidth)), v = Math.max(v, s.layoutBoundsWidth), D || (u = isNaN(this.elementSizeTable[B]) ? x: this.elementSizeTable[B], u != s.layoutBoundsHeight && (D = !0)), 0 == B && 0 < this.elementSizeTable.length && this.elementSizeTable[B] != s.layoutBoundsHeight && (this.typicalLayoutRect = null), this.elementSizeTable[B] = s.layoutBoundsHeight, u = this.getStartPosition(B), s.setLayoutBoundsPosition(Math.round(z), Math.round(u))) : this.elementSizeTable[B] = 0;
                    v += e + f;
                    e = this.getStartPosition(m) - l + g;
                    this.target.setContentSize(Math.ceil(v), Math.ceil(e)); (D || c < this.maxElementWidth) && this.target.invalidateSize()
                }
            };
            b.updateDisplayListReal = function(b, c) {
                var f = isNaN(this._padding) ? 0 : this._padding,
                g = isNaN(this._paddingLeft) ? f: this._paddingLeft,
                p = isNaN(this._paddingRight) ? f: this._paddingRight,
                k = isNaN(this._paddingTop) ? f: this._paddingTop,
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom,
                l = isNaN(this._gap) ? 0 : this._gap,
                m = Math.max(0, b - g - p),
                n = Math.max(0, c - k - f),
                q = this._verticalAlign == d.VerticalAlign.JUSTIFY,
                r = this._horizontalAlign == d.HorizontalAlign.JUSTIFY || this._horizontalAlign == d.HorizontalAlign.CONTENT_JUSTIFY,
                w = 0;
                r || (this._horizontalAlign == d.HorizontalAlign.CENTER ? w = 0.5 : this._horizontalAlign == d.HorizontalAlign.RIGHT && (w = 1));
                var y = this.target.numElements,
                s = y,
                x = g,
                v = k,
                z, u, D = 0,
                x = 0,
                B = [],
                C,
                A = n;
                for (z = 0; z < y; z++)(u = this.target.getElementAt(z)) && u.includeInLayout ? (this.maxElementWidth = Math.max(this.maxElementWidth, u.preferredWidth), q ? D += u.preferredHeight: isNaN(u.percentHeight) ? A -= u.preferredHeight: (x += u.percentHeight, C = new e, C.layoutElement = u, C.percent = u.percentHeight, C.min = u.minHeight, C.max = u.maxHeight, B.push(C))) : s--;
                var A = A - (s - 1) * l,
                A = 0 < A ? A: 0,
                H = n - D - l * (s - 1),
                G,
                I = s,
                J = [];
                if (q) {
                    if (0 > H) {
                        G = A / s;
                        for (z = 0; z < y; z++)(u = this.target.getElementAt(z)) && u.includeInLayout && (u = u.preferredHeight, u <= G && (A -= u, I--));
                        A = 0 < A ? A: 0
                    }
                } else if (0 < x) {
                    a.flexChildrenProportionally(n, A, x, B);
                    n = 0;
                    u = B.length;
                    for (z = 0; z < u; z++) C = B[z],
                    x = Math.round(C.size + n),
                    n += C.size - x,
                    J[C.layoutElement.hashCode] = x,
                    A -= x;
                    A = 0 < A ? A: 0
                }
                this._verticalAlign == d.VerticalAlign.MIDDLE ? v = k + 0.5 * A: this._verticalAlign == d.VerticalAlign.BOTTOM && (v = k + A);
                B = g;
                u = s = 0;
                C = Math.ceil(m);
                this._horizontalAlign == d.HorizontalAlign.CONTENT_JUSTIFY && (C = Math.ceil(Math.max(m, this.maxElementWidth)));
                n = 0;
                s = NaN;
                for (z = 0; z < y; z++) x = 0,
                (u = this.target.getElementAt(z)) && u.includeInLayout && (s = NaN, q ? (x = NaN, 0 < H ? x = A * u.preferredHeight / D: 0 > H && u.preferredHeight > G && (x = A / I), isNaN(x) || (s = Math.round(x + n), n += x - s)) : s = J[u.hashCode], r ? (x = g, u.setLayoutBoundsSize(C, s)) : (x = NaN, isNaN(u.percentWidth) || (x = Math.min(100, u.percentWidth), x = Math.round(m * x * 0.01)), u.setLayoutBoundsSize(x, s), x = (m - u.layoutBoundsWidth) * w, x = 0 < x ? x: 0, x = g + x), u.setLayoutBoundsPosition(Math.round(x), Math.round(v)), s = Math.ceil(u.layoutBoundsWidth), u = Math.ceil(u.layoutBoundsHeight), B = Math.max(B, x + s), k = Math.max(k, v + u), v += u + l);
                this.target.setContentSize(Math.ceil(B + p), Math.ceil(k + f))
            };
            a.flexChildrenProportionally = function(a, b, c, d) {
                var e = d.length,
                f;
                do {
                    f = !0;
                    var g = b - a * c / 100;
                    0 < g ? b -= g: g = 0;
                    for (var m = b / c,
                    n = 0; n < e; n++) {
                        var q = d[n],
                        r = q.percent * m;
                        if (r < q.min) {
                            f = q.min;
                            q.size = f;
                            d[n] = d[--e];
                            d[e] = q;
                            c -= q.percent;
                            g >= f || (b -= f - g);
                            f = !1;
                            break
                        } else if (r > q.max) {
                            f = q.max;
                            q.size = f;
                            d[n] = d[--e];
                            d[e] = q;
                            c -= q.percent;
                            g >= f || (b -= f - g);
                            f = !1;
                            break
                        } else q.size = r
                    }
                } while (! f )
            };
            return a
        } (f.LayoutBase);
        f.VerticalLayout = g;
        g.prototype.__class__ = "egret.gui.VerticalLayout";
        var e = function() {
            return function() {
                this.layoutElement = null;
                this.size = 0;
                this.max = this.min = this.percent = NaN
            }
        } ();
        e.prototype.__class__ = "egret.gui.ChildInfo"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(c) {
            function a() {
                c.call(this);
                this._horizontalAlign = d.HorizontalAlign.LEFT;
                this._verticalAlign = d.VerticalAlign.TOP;
                this._gap = 6;
                this._padding = 0;
                this._paddingBottom = this._paddingTop = this._paddingRight = this._paddingLeft = NaN;
                this.elementSizeTable = [];
                this.endIndex = this.startIndex = -1;
                this.indexInViewCalculated = !1;
                this.maxElementHeight = 0
            }
            __extends(a, c);
            var b = a.prototype;
            Object.defineProperty(b, "horizontalAlign", {
                get: function() {
                    return this._horizontalAlign
                },
                set: function(a) {
                    this._horizontalAlign != a && (this._horizontalAlign = a, this.target && this.target.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "verticalAlign", {
                get: function() {
                    return this._verticalAlign
                },
                set: function(a) {
                    this._verticalAlign != a && (this._verticalAlign = a, this.target && this.target.invalidateDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "gap", {
                get: function() {
                    return this._gap
                },
                set: function(a) {
                    this._gap != a && (this._gap = a, this.invalidateTargetSizeAndDisplayList(), this.hasEventListener("gapChanged") && this.dispatchEventWith("gapChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "padding", {
                get: function() {
                    return this._padding
                },
                set: function(a) {
                    this._padding != a && (this._padding = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingLeft", {
                get: function() {
                    return this._paddingLeft
                },
                set: function(a) {
                    this._paddingLeft != a && (this._paddingLeft = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingRight", {
                get: function() {
                    return this._paddingRight
                },
                set: function(a) {
                    this._paddingRight != a && (this._paddingRight = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingTop", {
                get: function() {
                    return this._paddingTop
                },
                set: function(a) {
                    this._paddingTop != a && (this._paddingTop = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "paddingBottom", {
                get: function() {
                    return this._paddingBottom
                },
                set: function(a) {
                    this._paddingBottom != a && (this._paddingBottom = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            b.invalidateTargetSizeAndDisplayList = function() {
                this.target && (this.target.invalidateSize(), this.target.invalidateDisplayList())
            };
            b.measure = function() {
                c.prototype.measure.call(this);
                this.target && (this.useVirtualLayout ? this.measureVirtual() : this.measureReal())
            };
            b.measureVirtual = function() {
                for (var a = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22, b = this.typicalLayoutRect ? this.typicalLayoutRect.width: 71, c = this.getElementTotalSize(), a = Math.max(this.maxElementHeight, a), d = this.target.getElementIndicesInView(), e = d.length, f = 0; f < e; f++) {
                    var g = d[f],
                    m = this.target.getElementAt(g);
                    if (null != m && m.includeInLayout) var n = m.preferredHeight,
                    c = c + m.preferredWidth,
                    c = c - (isNaN(this.elementSizeTable[g]) ? b: this.elementSizeTable[g]),
                    a = Math.max(a, n)
                }
                f = isNaN(this._padding) ? 0 : this._padding;
                b = isNaN(this._paddingLeft) ? f: this._paddingLeft;
                d = isNaN(this._paddingRight) ? f: this._paddingRight;
                e = isNaN(this._paddingTop) ? f: this._paddingTop;
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom;
                e += f;
                this.target.measuredWidth = Math.ceil(c + (b + d));
                this.target.measuredHeight = Math.ceil(a + e)
            };
            b.measureReal = function() {
                for (var a = this.target.numElements,
                b = a,
                c = 0,
                d = 0,
                e = 0; e < a; e++) {
                    var f = this.target.getElementAt(e);
                    if (f && f.includeInLayout) var g = f.preferredHeight,
                    c = c + f.preferredWidth,
                    d = Math.max(d, g);
                    else b--
                }
                a = isNaN(this._gap) ? 0 : this._gap;
                c += (b - 1) * a;
                f = isNaN(this._padding) ? 0 : this._padding;
                b = isNaN(this._paddingLeft) ? f: this._paddingLeft;
                a = isNaN(this._paddingRight) ? f: this._paddingRight;
                e = isNaN(this._paddingTop) ? f: this._paddingTop;
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom;
                e += f;
                this.target.measuredWidth = Math.ceil(c + (b + a));
                this.target.measuredHeight = Math.ceil(d + e)
            };
            b.updateDisplayList = function(a, b) {
                c.prototype.updateDisplayList.call(this, a, b);
                if (this.target) if (0 == this.target.numElements) {
                    var d = isNaN(this._padding) ? 0 : this._padding,
                    e = isNaN(this._paddingLeft) ? d: this._paddingLeft,
                    f = isNaN(this._paddingRight) ? d: this._paddingRight,
                    g = isNaN(this._paddingTop) ? d: this._paddingTop,
                    d = isNaN(this._paddingBottom) ? d: this._paddingBottom;
                    this.target.setContentSize(Math.ceil(e + f), Math.ceil(g + d))
                } else this.useVirtualLayout ? this.updateDisplayListVirtual(a, b) : this.updateDisplayListReal(a, b)
            };
            b.getStartPosition = function(a) {
                var b = isNaN(this._padding) ? 0 : this._padding,
                c = isNaN(this._paddingLeft) ? b: this._paddingLeft,
                b = isNaN(this._gap) ? 0 : this._gap;
                if (!this.useVirtualLayout) {
                    var d;
                    this.target && (d = this.target.getElementAt(a));
                    return d ? d.x: c
                }
                d = this.typicalLayoutRect ? this.typicalLayoutRect.width: 71;
                for (var e = 0; e < a; e++) {
                    var f = this.elementSizeTable[e];
                    isNaN(f) && (f = d);
                    c += f + b
                }
                return c
            };
            b.getElementSize = function(a) {
                return this.useVirtualLayout ? (a = this.elementSizeTable[a], isNaN(a) && (a = this.typicalLayoutRect ? this.typicalLayoutRect.width: 71), a) : this.target ? this.target.getElementAt(a).width: 0
            };
            b.getElementTotalSize = function() {
                for (var a = this.typicalLayoutRect ? this.typicalLayoutRect.width: 71, b = isNaN(this._gap) ? 0 : this._gap, c = 0, d = this.target.numElements, e = 0; e < d; e++) {
                    var f = this.elementSizeTable[e];
                    isNaN(f) && (f = a);
                    c += f + b
                }
                return c - b
            };
            b.elementAdded = function(a) {
                this.useVirtualLayout && (c.prototype.elementAdded.call(this, a), this.elementSizeTable.splice(a, 0, this.typicalLayoutRect ? this.typicalLayoutRect.width: 71))
            };
            b.elementRemoved = function(a) {
                this.useVirtualLayout && (c.prototype.elementRemoved.call(this, a), this.elementSizeTable.splice(a, 1))
            };
            b.clearVirtualLayoutCache = function() {
                this.useVirtualLayout && (c.prototype.clearVirtualLayoutCache.call(this), this.elementSizeTable = [], this.maxElementHeight = 0)
            };
            b.findIndexAt = function(a, b, c) {
                var d = Math.floor(0.5 * (b + c)),
                e = this.getStartPosition(d),
                f = this.getElementSize(d),
                g = isNaN(this._gap) ? 0 : this._gap;
                return a >= e && a < e + f + g ? d: b == c ? -1 : a < e ? this.findIndexAt(a, b, Math.max(b, d - 1)) : this.findIndexAt(a, Math.min(d + 1, c), c)
            };
            b.scrollPositionChanged = function() {
                c.prototype.scrollPositionChanged.call(this);
                this.useVirtualLayout && this.getIndexInView() && (this.indexInViewCalculated = !0, this.target.invalidateDisplayList())
            };
            b.getIndexInView = function() {
                if (!this.target || 0 == this.target.numElements || isNaN(this.target.width) || 0 == this.target.width || isNaN(this.target.height) || 0 == this.target.height) return this.startIndex = this.endIndex = -1,
                !1;
                var a = isNaN(this._padding) ? 0 : this._padding,
                b = isNaN(this._paddingLeft) ? a: this._paddingLeft,
                c = isNaN(this._paddingRight) ? a: this._paddingRight;
                isNaN(this._paddingTop);
                isNaN(this._paddingBottom);
                var a = this.target.numElements,
                d = this.getStartPosition(a - 1) + this.elementSizeTable[a - 1] + c,
                e = this.target.horizontalScrollPosition;
                if (e > d - c) return this.endIndex = this.startIndex = -1,
                !1;
                c = this.target.horizontalScrollPosition + this.target.width;
                if (c < b) return this.endIndex = this.startIndex = -1,
                !1;
                b = this.startIndex;
                d = this.endIndex;
                this.startIndex = this.findIndexAt(e, 0, a - 1); - 1 == this.startIndex && (this.startIndex = 0);
                this.endIndex = this.findIndexAt(c, 0, a - 1); - 1 == this.endIndex && (this.endIndex = a - 1);
                return b != this.startIndex || d != this.endIndex
            };
            b.updateDisplayListVirtual = function(a, b) {
                this.indexInViewCalculated ? this.indexInViewCalculated = !1 : this.getIndexInView();
                var c = isNaN(this._padding) ? 0 : this._padding,
                e = isNaN(this._paddingRight) ? c: this._paddingRight,
                f = isNaN(this._paddingTop) ? c: this._paddingTop,
                g = isNaN(this._paddingBottom) ? c: this._paddingBottom,
                l = isNaN(this._gap) ? 0 : this._gap,
                m = this.target.numElements;
                if ( - 1 == this.startIndex || -1 == this.endIndex) e = this.getStartPosition(m) - l + e,
                this.target.setContentSize(Math.ceil(e), this.target.contentHeight);
                else {
                    this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                    var n = this._verticalAlign == d.VerticalAlign.JUSTIFY || this._verticalAlign == d.VerticalAlign.CONTENT_JUSTIFY,
                    q = this._verticalAlign == d.VerticalAlign.CONTENT_JUSTIFY,
                    r = 0;
                    n || (this._verticalAlign == d.VerticalAlign.MIDDLE ? r = 0.5 : this._verticalAlign == d.VerticalAlign.BOTTOM && (r = 1));
                    var w = Math.max(0, b - f - g),
                    y = Math.ceil(w),
                    s,
                    x = this.typicalLayoutRect ? this.typicalLayoutRect.width: 71,
                    c = Math.max(this.typicalLayoutRect ? this.typicalLayoutRect.height: 22, this.maxElementHeight);
                    if (q) {
                        for (var v = this.startIndex; v <= this.endIndex; v++)(s = this.target.getVirtualElementAt(v)) && s.includeInLayout && (this.maxElementHeight = Math.max(this.maxElementHeight, s.preferredHeight));
                        y = Math.ceil(Math.max(w, this.maxElementHeight))
                    }
                    for (var z = 0,
                    u = 0,
                    v = 0,
                    D = !1,
                    B = this.startIndex; B <= this.endIndex; B++) if (u = 0, s = this.target.getVirtualElementAt(B)) s.includeInLayout ? (n ? (u = f, s.setLayoutBoundsSize(NaN, y)) : (u = (w - s.layoutBoundsHeight) * r, u = 0 < u ? u: 0, u = f + u), q || (this.maxElementHeight = Math.max(this.maxElementHeight, s.preferredHeight)), v = Math.max(v, s.layoutBoundsHeight), D || (z = isNaN(this.elementSizeTable[B]) ? x: this.elementSizeTable[B], z != s.layoutBoundsWidth && (D = !0)), 0 == B && 0 < this.elementSizeTable.length && this.elementSizeTable[B] != s.layoutBoundsWidth && (this.typicalLayoutRect = null), this.elementSizeTable[B] = s.layoutBoundsWidth, z = this.getStartPosition(B), s.setLayoutBoundsPosition(Math.round(z), Math.round(u))) : this.elementSizeTable[B] = 0;
                    v += f + g;
                    e = this.getStartPosition(m) - l + e;
                    this.target.setContentSize(Math.ceil(e), Math.ceil(v)); (D || c < this.maxElementHeight) && this.target.invalidateSize()
                }
            };
            b.updateDisplayListReal = function(b, c) {
                var f = isNaN(this._padding) ? 0 : this._padding,
                g = isNaN(this._paddingLeft) ? f: this._paddingLeft,
                p = isNaN(this._paddingRight) ? f: this._paddingRight,
                k = isNaN(this._paddingTop) ? f: this._paddingTop,
                f = isNaN(this._paddingBottom) ? f: this._paddingBottom,
                l = isNaN(this._gap) ? 0 : this._gap,
                m = Math.max(0, b - g - p),
                n = Math.max(0, c - k - f),
                q = this._horizontalAlign == d.HorizontalAlign.JUSTIFY,
                r = this._verticalAlign == d.VerticalAlign.JUSTIFY || this._verticalAlign == d.VerticalAlign.CONTENT_JUSTIFY,
                w = 0;
                r || (this._verticalAlign == d.VerticalAlign.MIDDLE ? w = 0.5 : this._verticalAlign == d.VerticalAlign.BOTTOM && (w = 1));
                var y = this.target.numElements,
                s = y,
                x = g,
                v = k,
                z, u, D = 0,
                v = 0,
                B = [],
                C,
                A = m;
                for (z = 0; z < y; z++)(u = this.target.getElementAt(z)) && u.includeInLayout ? (this.maxElementHeight = Math.max(this.maxElementHeight, u.preferredHeight), q ? D += u.preferredWidth: isNaN(u.percentWidth) ? A -= u.preferredWidth: (v += u.percentWidth, C = new e, C.layoutElement = u, C.percent = u.percentWidth, C.min = u.minWidth, C.max = u.maxWidth, B.push(C))) : s--;
                var A = A - l * (s - 1),
                A = 0 < A ? A: 0,
                H = m - D - l * (s - 1),
                G,
                I = s,
                J = [];
                if (q) {
                    if (0 > H) {
                        G = A / s;
                        for (z = 0; z < y; z++)(u = this.target.getElementAt(z)) && u.includeInLayout && (u = u.preferredWidth, u <= G && (A -= u, I--));
                        A = 0 < A ? A: 0
                    }
                } else if (0 < v) {
                    a.flexChildrenProportionally(m, A, v, B);
                    m = 0;
                    u = B.length;
                    for (z = 0; z < u; z++) C = B[z],
                    v = Math.round(C.size + m),
                    m += C.size - v,
                    J[C.layoutElement.hashCode] = v,
                    A -= v;
                    A = 0 < A ? A: 0
                }
                this._horizontalAlign == d.HorizontalAlign.CENTER ? x = g + 0.5 * A: this._horizontalAlign == d.HorizontalAlign.RIGHT && (x = g + A);
                B = k;
                u = s = 0;
                C = Math.ceil(n);
                this._verticalAlign == d.VerticalAlign.CONTENT_JUSTIFY && (C = Math.ceil(Math.max(n, this.maxElementHeight)));
                for (z = m = 0; z < y; z++) v = 0,
                (u = this.target.getElementAt(z)) && u.includeInLayout && (s = NaN, q ? (v = NaN, 0 < H ? v = A * u.preferredWidth / D: 0 > H && u.preferredWidth > G && (v = A / I), isNaN(v) || (s = Math.round(v + m), m += v - s)) : s = J[u.hashCode], r ? (v = k, u.setLayoutBoundsSize(s, C)) : (v = NaN, isNaN(u.percentHeight) || (v = Math.min(100, u.percentHeight), v = Math.round(n * v * 0.01)), u.setLayoutBoundsSize(s, v), v = (n - u.layoutBoundsHeight) * w, v = 0 < v ? v: 0, v = k + v), u.setLayoutBoundsPosition(Math.round(x), Math.round(v)), s = Math.ceil(u.layoutBoundsWidth), u = Math.ceil(u.layoutBoundsHeight), g = Math.max(g, x + s), B = Math.max(B, v + u), x += s + l);
                this.target.setContentSize(Math.ceil(g + p), Math.ceil(B + f))
            };
            a.flexChildrenProportionally = function(a, b, c, d) {
                var e = d.length,
                f;
                do {
                    f = !0;
                    var g = b - a * c / 100;
                    0 < g ? b -= g: g = 0;
                    for (var m = b / c,
                    n = 0; n < e; n++) {
                        var q = d[n],
                        r = q.percent * m;
                        if (r < q.min) {
                            f = q.min;
                            q.size = f;
                            d[n] = d[--e];
                            d[e] = q;
                            c -= q.percent;
                            g >= f || (b -= f - g);
                            f = !1;
                            break
                        } else if (r > q.max) {
                            f = q.max;
                            q.size = f;
                            d[n] = d[--e];
                            d[e] = q;
                            c -= q.percent;
                            g >= f || (b -= f - g);
                            f = !1;
                            break
                        } else q.size = r
                    }
                } while (! f )
            };
            return a
        } (f.LayoutBase);
        f.HorizontalLayout = g;
        g.prototype.__class__ = "egret.gui.HorizontalLayout";
        var e = function() {
            return function() {
                this.layoutElement = null;
                this.size = 0;
                this.max = this.min = this.percent = NaN
            }
        } ();
        e.prototype.__class__ = "egret.gui.ChildInfo"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.explicitHorizontalGap = NaN;
                this._horizontalGap = 6;
                this.explicitVerticalGap = NaN;
                this._verticalGap = 6;
                this._columnCount = -1;
                this._requestedColumnCount = 0;
                this._rowCount = -1;
                this._requestedRowCount = 0;
                this._rowHeight = this.explicitRowHeight = this._columnWidth = this.explicitColumnWidth = NaN;
                this._padding = 0;
                this._paddingBottom = this._paddingTop = this._paddingRight = this._paddingLeft = NaN;
                this._horizontalAlign = d.HorizontalAlign.JUSTIFY;
                this._verticalAlign = d.VerticalAlign.JUSTIFY;
                this._columnAlign = f.ColumnAlign.LEFT;
                this._rowAlign = f.RowAlign.TOP;
                this._orientation = f.TileOrientation.ROWS;
                this.maxElementHeight = this.maxElementWidth = 0;
                this.endIndex = this.startIndex = -1;
                this.indexInViewCalculated = !1
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "horizontalGap", {
                get: function() {
                    return this._horizontalGap
                },
                set: function(a) {
                    a != this._horizontalGap && (this._horizontalGap = this.explicitHorizontalGap = a, this.invalidateTargetSizeAndDisplayList(), this.hasEventListener("gapChanged") && this.dispatchEventWith("gapChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalGap", {
                get: function() {
                    return this._verticalGap
                },
                set: function(a) {
                    a != this._verticalGap && (this._verticalGap = this.explicitVerticalGap = a, this.invalidateTargetSizeAndDisplayList(), this.hasEventListener("gapChanged") && this.dispatchEventWith("gapChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "columnCount", {
                get: function() {
                    return this._columnCount
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "requestedColumnCount", {
                get: function() {
                    return this._requestedColumnCount
                },
                set: function(a) {
                    this._requestedColumnCount != a && (this._columnCount = this._requestedColumnCount = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "rowCount", {
                get: function() {
                    return this._rowCount
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "requestedRowCount", {
                get: function() {
                    return this._requestedRowCount
                },
                set: function(a) {
                    this._requestedRowCount != a && (this._rowCount = this._requestedRowCount = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "columnWidth", {
                get: function() {
                    return this._columnWidth
                },
                set: function(a) {
                    a != this._columnWidth && (this._columnWidth = this.explicitColumnWidth = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "rowHeight", {
                get: function() {
                    return this._rowHeight
                },
                set: function(a) {
                    a != this._rowHeight && (this._rowHeight = this.explicitRowHeight = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "padding", {
                get: function() {
                    return this._padding
                },
                set: function(a) {
                    this._padding != a && (this._padding = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingLeft", {
                get: function() {
                    return this._paddingLeft
                },
                set: function(a) {
                    this._paddingLeft != a && (this._paddingLeft = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingRight", {
                get: function() {
                    return this._paddingRight
                },
                set: function(a) {
                    this._paddingRight != a && (this._paddingRight = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingTop", {
                get: function() {
                    return this._paddingTop
                },
                set: function(a) {
                    this._paddingTop != a && (this._paddingTop = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "paddingBottom", {
                get: function() {
                    return this._paddingBottom
                },
                set: function(a) {
                    this._paddingBottom != a && (this._paddingBottom = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "horizontalAlign", {
                get: function() {
                    return this._horizontalAlign
                },
                set: function(a) {
                    this._horizontalAlign != a && (this._horizontalAlign = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "verticalAlign", {
                get: function() {
                    return this._verticalAlign
                },
                set: function(a) {
                    this._verticalAlign != a && (this._verticalAlign = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "columnAlign", {
                get: function() {
                    return this._columnAlign
                },
                set: function(a) {
                    this._columnAlign != a && (this._columnAlign = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "rowAlign", {
                get: function() {
                    return this._rowAlign
                },
                set: function(a) {
                    this._rowAlign != a && (this._rowAlign = a, this.invalidateTargetSizeAndDisplayList())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "orientation", {
                get: function() {
                    return this._orientation
                },
                set: function(a) {
                    this._orientation != a && (this._orientation = a, this.invalidateTargetSizeAndDisplayList(), this.hasEventListener("orientationChanged") && this.dispatchEventWith("orientationChanged"))
                },
                enumerable: !0,
                configurable: !0
            });
            a.invalidateTargetSizeAndDisplayList = function() {
                this.target && (this.target.invalidateSize(), this.target.invalidateDisplayList())
            };
            a.measure = function() {
                if (this.target) {
                    var a = this._columnCount,
                    c = this._rowCount,
                    d = this._columnWidth,
                    e = this._rowHeight,
                    f = 0,
                    g = 0;
                    this.calculateRowAndColumn(this.target.explicitWidth, this.target.explicitHeight);
                    var k = 0 < this._requestedColumnCount ? this._requestedColumnCount: this._columnCount,
                    l = 0 < this._requestedRowCount ? this._requestedRowCount: this._rowCount,
                    m = isNaN(this._horizontalGap) ? 0 : this._horizontalGap,
                    n = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                    0 < k && (f = k * (this._columnWidth + m) - m);
                    0 < l && (g = l * (this._rowHeight + n) - n);
                    n = isNaN(this._padding) ? 0 : this._padding;
                    k = isNaN(this._paddingLeft) ? n: this._paddingLeft;
                    l = isNaN(this._paddingRight) ? n: this._paddingRight;
                    m = isNaN(this._paddingTop) ? n: this._paddingTop;
                    n = isNaN(this._paddingBottom) ? n: this._paddingBottom;
                    m += n;
                    this.target.measuredWidth = Math.ceil(f + (k + l));
                    this.target.measuredHeight = Math.ceil(g + m);
                    this._columnCount = a;
                    this._rowCount = c;
                    this._columnWidth = d;
                    this._rowHeight = e
                }
            };
            a.calculateRowAndColumn = function(a, c) {
                var d = isNaN(this._horizontalGap) ? 0 : this._horizontalGap,
                e = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                this._rowCount = this._columnCount = -1;
                for (var g = this.target.numElements,
                p = g,
                k = 0; k < p; k++) {
                    var l = this.target.getElementAt(k);
                    l && !l.includeInLayout && g--
                }
                if (0 == g) this._rowCount = this._columnCount = 0;
                else { (isNaN(this.explicitColumnWidth) || isNaN(this.explicitRowHeight)) && this.updateMaxElementSize();
                    isNaN(this.explicitColumnWidth) ? this._columnWidth = this.maxElementWidth: this._columnWidth = this.explicitColumnWidth;
                    isNaN(this.explicitRowHeight) ? this._rowHeight = this.maxElementHeight: this._rowHeight = this.explicitRowHeight;
                    p = this._columnWidth + d;
                    0 >= p && (p = 1);
                    k = this._rowHeight + e;
                    0 >= k && (k = 1);
                    var l = this.orientation == f.TileOrientation.COLUMNS,
                    m = !isNaN(a),
                    n = !isNaN(c),
                    q = isNaN(this._padding) ? 0 : this._padding,
                    r = isNaN(this._paddingLeft) ? q: this._paddingLeft,
                    w = isNaN(this._paddingRight) ? q: this._paddingRight,
                    y = isNaN(this._paddingTop) ? q: this._paddingTop,
                    q = isNaN(this._paddingBottom) ? q: this._paddingBottom;
                    0 < this._requestedColumnCount || 0 < this._requestedRowCount ? (0 < this._requestedRowCount && (this._rowCount = Math.min(this._requestedRowCount, g)), 0 < this._requestedColumnCount && (this._columnCount = Math.min(this._requestedColumnCount, g))) : m || n ? !m || n && l ? (d = Math.max(0, c - y - q), this._rowCount = Math.floor((d + e) / k), this._rowCount = Math.max(1, Math.min(this._rowCount, g))) : (e = Math.max(0, a - r - w), this._columnCount = Math.floor((e + d) / p), this._columnCount = Math.max(1, Math.min(this._columnCount, g))) : (d = Math.sqrt(g * p * k), l ? this._rowCount = Math.max(1, Math.round(d / k)) : this._columnCount = Math.max(1, Math.round(d / p))); - 1 == this._rowCount && (this._rowCount = Math.max(1, Math.ceil(g / this._columnCount))); - 1 == this._columnCount && (this._columnCount = Math.max(1, Math.ceil(g / this._rowCount)));
                    0 < this._requestedColumnCount && 0 < this._requestedRowCount && (this.orientation == f.TileOrientation.ROWS ? this._rowCount = Math.max(1, Math.ceil(g / this._requestedColumnCount)) : this._columnCount = Math.max(1, Math.ceil(g / this._requestedRowCount)))
                }
            };
            a.updateMaxElementSize = function() {
                this.target && (this.useVirtualLayout ? this.updateMaxElementSizeVirtual() : this.updateMaxElementSizeReal())
            };
            a.updateMaxElementSizeVirtual = function() {
                var a = this.typicalLayoutRect ? this.typicalLayoutRect.height: 22;
                this.maxElementWidth = Math.max(this.maxElementWidth, this.typicalLayoutRect ? this.typicalLayoutRect.width: 22);
                this.maxElementHeight = Math.max(this.maxElementHeight, a);
                if ( - 1 != this.startIndex && -1 != this.endIndex) for (a = this.startIndex; a <= this.endIndex; a++) {
                    var c = this.target.getVirtualElementAt(a);
                    c && c.includeInLayout && (this.maxElementWidth = Math.max(this.maxElementWidth, c.preferredWidth), this.maxElementHeight = Math.max(this.maxElementHeight, c.preferredHeight))
                }
            };
            a.updateMaxElementSizeReal = function() {
                for (var a = this.target.numElements,
                c = 0; c < a; c++) {
                    var d = this.target.getElementAt(c);
                    d && d.includeInLayout && (this.maxElementWidth = Math.max(this.maxElementWidth, d.preferredWidth), this.maxElementHeight = Math.max(this.maxElementHeight, d.preferredHeight))
                }
            };
            a.clearVirtualLayoutCache = function() {
                e.prototype.clearVirtualLayoutCache.call(this);
                this.maxElementHeight = this.maxElementWidth = 0
            };
            a.scrollPositionChanged = function() {
                e.prototype.scrollPositionChanged.call(this);
                this.useVirtualLayout && this.getIndexInView() && (this.indexInViewCalculated = !0, this.target.invalidateDisplayList())
            };
            a.getIndexInView = function() {
                if (!this.target || 0 == this.target.numElements) return this.startIndex = this.endIndex = -1,
                !1;
                var a = this.target.numElements;
                if (!this.useVirtualLayout) return this.startIndex = 0,
                this.endIndex = a - 1,
                !1;
                if (isNaN(this.target.width) || 0 == this.target.width || isNaN(this.target.height) || 0 == this.target.height) return this.startIndex = this.endIndex = -1,
                !1;
                var c = this.startIndex,
                d = this.endIndex,
                e = isNaN(this._padding) ? 0 : this._padding,
                g = isNaN(this._paddingLeft) ? e: this._paddingLeft,
                e = isNaN(this._paddingTop) ? e: this._paddingTop,
                p = isNaN(this._horizontalGap) ? 0 : this._horizontalGap,
                k = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                if (this.orientation == f.TileOrientation.COLUMNS) {
                    p = this._columnWidth + p;
                    if (0 >= p) return this.startIndex = 0,
                    this.endIndex = a - 1,
                    !1;
                    k = this.target.horizontalScrollPosition + this.target.width;
                    e = Math.floor((this.target.horizontalScrollPosition - g) / p);
                    0 > e && (e = 0);
                    g = Math.ceil((k - g) / p);
                    0 > g && (g = 0);
                    this.startIndex = Math.min(a - 1, Math.max(0, e * this._rowCount));
                    this.endIndex = Math.min(a - 1, Math.max(0, g * this._rowCount - 1))
                } else {
                    p = this._rowHeight + k;
                    if (0 >= p) return this.startIndex = 0,
                    this.endIndex = a - 1,
                    !1;
                    k = this.target.verticalScrollPosition + this.target.height;
                    g = Math.floor((this.target.verticalScrollPosition - e) / p);
                    0 > g && (g = 0);
                    e = Math.ceil((k - e) / p);
                    0 > e && (e = 0);
                    this.startIndex = Math.min(a - 1, Math.max(0, g * this._columnCount));
                    this.endIndex = Math.min(a - 1, Math.max(0, e * this._columnCount - 1))
                }
                return this.startIndex != c || this.endIndex != d
            };
            a.updateDisplayList = function(a, c) {
                e.prototype.updateDisplayList.call(this, a, c);
                if (this.target) {
                    var d = isNaN(this._padding) ? 0 : this._padding,
                    g = isNaN(this._paddingLeft) ? d: this._paddingLeft,
                    t = isNaN(this._paddingRight) ? d: this._paddingRight,
                    p = isNaN(this._paddingTop) ? d: this._paddingTop,
                    k = isNaN(this._paddingBottom) ? d: this._paddingBottom;
                    if (this.indexInViewCalculated) this.indexInViewCalculated = !1;
                    else {
                        this.calculateRowAndColumn(a, c);
                        if (0 == this._rowCount || 0 == this._columnCount) {
                            this.target.setContentSize(g + t, p + k);
                            return
                        }
                        this.adjustForJustify(a, c);
                        this.getIndexInView()
                    }
                    this.useVirtualLayout && (this.calculateRowAndColumn(a, c), this.adjustForJustify(a, c));
                    if ( - 1 == this.startIndex || -1 == this.endIndex) this.target.setContentSize(0, 0);
                    else {
                        this.target.setVirtualElementIndicesInView(this.startIndex, this.endIndex);
                        for (var l, m, n, q = this.orientation == f.TileOrientation.COLUMNS,
                        r = this.startIndex,
                        d = isNaN(this._horizontalGap) ? 0 : this._horizontalGap, w = isNaN(this._verticalGap) ? 0 : this._verticalGap, y = this.startIndex; y <= this.endIndex; y++) l = this.useVirtualLayout ? this.target.getVirtualElementAt(y) : this.target.getElementAt(y),
                        null != l && l.includeInLayout && (q ? (m = Math.ceil((r + 1) / this._rowCount) - 1, n = Math.ceil((r + 1) % this._rowCount) - 1, -1 == n && (n = this._rowCount - 1)) : (m = Math.ceil((r + 1) % this._columnCount) - 1, -1 == m && (m = this._columnCount - 1), n = Math.ceil((r + 1) / this._columnCount) - 1), m = m * (this._columnWidth + d) + g, n = n * (this._rowHeight + w) + p, this.sizeAndPositionElement(l, m, n, this._columnWidth, this.rowHeight), r++);
                        p += k;
                        w = (this._rowHeight + w) * this._rowCount - w;
                        this.target.setContentSize(Math.ceil((this._columnWidth + d) * this._columnCount - d + (g + t)), Math.ceil(w + p))
                    }
                }
            };
            a.sizeAndPositionElement = function(a, c, e, f, g) {
                var p = NaN,
                k = NaN;
                this.horizontalAlign == d.HorizontalAlign.JUSTIFY ? p = f: isNaN(a.percentWidth) || (p = f * a.percentWidth * 0.01);
                this.verticalAlign == d.VerticalAlign.JUSTIFY ? k = g: isNaN(a.percentHeight) || (k = g * a.percentHeight * 0.01);
                a.setLayoutBoundsSize(Math.round(p), Math.round(k));
                p = c;
                switch (this.horizontalAlign) {
                case d.HorizontalAlign.RIGHT:
                    p += f - a.layoutBoundsWidth;
                    break;
                case d.HorizontalAlign.CENTER:
                    p = c + (f - a.layoutBoundsWidth) / 2
                }
                c = e;
                switch (this.verticalAlign) {
                case d.VerticalAlign.BOTTOM:
                    c += g - a.layoutBoundsHeight;
                    break;
                case d.VerticalAlign.MIDDLE:
                    c += (g - a.layoutBoundsHeight) / 2
                }
                a.setLayoutBoundsPosition(Math.round(p), Math.round(c))
            };
            a.adjustForJustify = function(a, c) {
                var d = isNaN(this._padding) ? 0 : this._padding,
                e = isNaN(this._paddingLeft) ? d: this._paddingLeft,
                g = isNaN(this._paddingRight) ? d: this._paddingRight,
                p = isNaN(this._paddingTop) ? d: this._paddingTop,
                d = isNaN(this._paddingBottom) ? d: this._paddingBottom,
                e = Math.max(0, a - e - g),
                p = Math.max(0, c - p - d);
                isNaN(this.explicitVerticalGap) || (this._verticalGap = this.explicitVerticalGap);
                isNaN(this.explicitHorizontalGap) || (this._horizontalGap = this.explicitHorizontalGap);
                this._verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
                this._horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
                p -= this._rowHeight * this._rowCount;
                e -= this._columnWidth * this._columnCount;
                0 < p && (this.rowAlign == f.RowAlign.JUSTIFY_USING_GAP ? (g = Math.max(1, this._rowCount - 1), this._verticalGap = p / g) : this.rowAlign == f.RowAlign.JUSTIFY_USING_HEIGHT && 0 < this._rowCount && (this._rowHeight += (p - (this._rowCount - 1) * this._verticalGap) / this._rowCount));
                0 < e && (this.columnAlign == f.ColumnAlign.JUSTIFY_USING_GAP ? (g = Math.max(1, this._columnCount - 1), this._horizontalGap = e / g) : this.columnAlign == f.ColumnAlign.JUSTIFY_USING_WIDTH && 0 < this._columnCount && (this._columnWidth += (e - (this._columnCount - 1) * this._horizontalGap) / this._columnCount))
            };
            return c
        } (f.LayoutBase);
        f.TileLayout = g;
        g.prototype.__class__ = "egret.gui.TileLayout"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(d) {
        var g = function() {
            function d(a, b, c) {
                this.upperBoundReference = this.lowerBoundReference = this.owner = null;
                this.raw_getElementAt = "raw_getElementAt";
                this.raw_addElementAt = "raw_addElementAt";
                this.raw_getElementIndex = "raw_getElementIndex";
                this.raw_removeElement = "raw_removeElement";
                this.raw_removeElementAt = "raw_removeElementAt";
                this.raw_setElementIndex = "raw_setElementIndex";
                this.owner = a;
                this.lowerBoundReference = b;
                this.upperBoundReference = c
            }
            var c = d.prototype;
            Object.defineProperty(c, "numElements", {
                get: function() {
                    return this.owner[this.upperBoundReference] - this.owner[this.lowerBoundReference]
                },
                enumerable: !0,
                configurable: !0
            });
            c.getElementAt = function(a) {
                return this.owner[this.raw_getElementAt](this.owner[this.lowerBoundReference] + a)
            };
            c.addElement = function(a) {
                var b = this.owner[this.upperBoundReference];
                a.parent === this.owner && b--;
                this.owner[this.upperBoundReference]++;
                this.owner[this.raw_addElementAt](a, b);
                a.ownerChanged(this);
                return a
            };
            c.addElementAt = function(a, b) {
                this.owner[this.upperBoundReference]++;
                this.owner[this.raw_addElementAt](a, this.owner[this.lowerBoundReference] + b);
                a.ownerChanged(this);
                return a
            };
            c.removeElement = function(a) {
                var b = this.owner[this.raw_getElementIndex](a);
                this.owner[this.lowerBoundReference] <= b && b < this.owner[this.upperBoundReference] && (this.owner[this.raw_removeElement](a), this.owner[this.upperBoundReference]--);
                a.ownerChanged(null);
                return a
            };
            c.removeElementAt = function(a) {
                a += this.owner[this.lowerBoundReference];
                var b;
                this.owner[this.lowerBoundReference] <= a && a < this.owner[this.upperBoundReference] && (b = this.owner[this.raw_removeElementAt](a), this.owner[this.upperBoundReference]--);
                b.ownerChanged(null);
                return b
            };
            c.getElementIndex = function(a) {
                a = this.owner[this.raw_getElementIndex](a);
                return a -= this.owner[this.lowerBoundReference]
            };
            c.setElementIndex = function(a, b) {
                this.owner[this.raw_setElementIndex](a, this.owner[this.lowerBoundReference] + b)
            };
            return d
        } ();
        d.UILayer = g;
        g.prototype.__class__ = "egret.gui.UILayer"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this._autoResize = !0;
                this._cursorContainer = this._toolTipContainer = this._popUpContainer = null;
                this._cursorIndex = this._toolTipIndex = this._topMostIndex = this._noTopMostIndex = 0;
                this.touchEnabled = !1;
                this.addEventListener(d.Event.ADDED_TO_STAGE, this.onAddToStage, this);
                this.addEventListener(d.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this)
            }
            __extends(c, e);
            var a = c.prototype;
            a.onAddToStage = function(a) {
                if (f.UIGlobals._uiStage) throw Error(d.getString(3013));
                f.UIGlobals._uiStage = this;
                this._autoResize && (this.stage.addEventListener(d.Event.RESIZE, this.onResize, this), this.onResize())
            };
            a.onRemoveFromStage = function(a) {
                f.UIGlobals._uiStage = null;
                this._autoResize && this.stage.removeEventListener(d.Event.RESIZE, this.onResize, this)
            };
            a.onResize = function(a) {
                this._setWidth(this.stage.stageWidth);
                this._setHeight(this.stage.stageHeight)
            };
            Object.defineProperty(a, "autoResize", {
                get: function() {
                    return this._autoResize
                },
                set: function(a) {
                    this._autoResize != a && (this._autoResize = a, this.stage && (this._autoResize ? (this.stage.addEventListener(d.Event.RESIZE, this.onResize, this), this.onResize()) : this.stage.removeEventListener(d.Event.RESIZE, this.onResize, this)))
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "x", {
                get: function() {
                    return this._x
                },
                set: function(a) {
                    this._autoResize || (this._x = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "y", {
                get: function() {
                    return this._y
                },
                set: function(a) {
                    this._autoResize || (this._y = a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "width", {
                get: function() {
                    return this._width
                },
                set: function(a) {
                    this._autoResize || this._setWidth(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "height", {
                get: function() {
                    return this._height
                },
                set: function(a) {
                    this._autoResize || this._setHeight(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "scaleX", {
                get: function() {
                    return this._scaleX
                },
                set: function(a) {
                    this._autoResize || this._setScaleX(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "scaleY", {
                get: function() {
                    return this._scaleY
                },
                set: function(a) {
                    this._autoResize || this._setScaleY(a)
                },
                enumerable: !0,
                configurable: !0
            });
            a.setActualSize = function(a, c) {
                this._autoResize || e.prototype.setActualSize.call(this, a, c)
            };
            a.setLayoutBoundsPosition = function(a, c) {
                this._autoResize || e.prototype.setLayoutBoundsPosition.call(this, a, c)
            };
            a.setLayoutBoundsSize = function(a, c) {
                this._autoResize || e.prototype.setLayoutBoundsSize.call(this, a, c)
            };
            Object.defineProperty(a, "layout", {
                get: function() {
                    return this._layout
                },
                set: function(a) {
                    a instanceof f.BasicLayout && this._setLayout(a)
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "popUpContainer", {
                get: function() {
                    this._popUpContainer || (this._popUpContainer = new f.UILayer(this, "noTopMostIndex", "topMostIndex"));
                    return this._popUpContainer
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "toolTipContainer", {
                get: function() {
                    this._toolTipContainer || (this._toolTipContainer = new f.UILayer(this, "topMostIndex", "toolTipIndex"));
                    return this._toolTipContainer
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "cursorContainer", {
                get: function() {
                    this._cursorContainer || (this._cursorContainer = new f.UILayer(this, "toolTipIndex", "cursorIndex"));
                    return this._cursorContainer
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "noTopMostIndex", {
                get: function() {
                    return this._noTopMostIndex
                },
                set: function(a) {
                    var c = a - this._noTopMostIndex;
                    this._noTopMostIndex = a;
                    this.topMostIndex += c
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "topMostIndex", {
                get: function() {
                    return this._topMostIndex
                },
                set: function(a) {
                    var c = a - this._topMostIndex;
                    this._topMostIndex = a;
                    this.toolTipIndex += c
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "toolTipIndex", {
                get: function() {
                    return this._toolTipIndex
                },
                set: function(a) {
                    var c = a - this._toolTipIndex;
                    this._toolTipIndex = a;
                    this.cursorIndex += c
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(a, "cursorIndex", {
                get: function() {
                    return this._cursorIndex
                },
                set: function(a) {
                    this._cursorIndex = a
                },
                enumerable: !0,
                configurable: !0
            });
            a.addElement = function(a) {
                var c = this._noTopMostIndex;
                a.parent == this && c--;
                return this.addElementAt(a, c)
            };
            a.addElementAt = function(a, c) {
                if (a.parent == this) {
                    var d = this.getElementIndex(a);
                    d < this._noTopMostIndex ? this.noTopMostIndex--:d >= this._noTopMostIndex && d < this._topMostIndex ? this.topMostIndex--:d >= this._topMostIndex && d < this._toolTipIndex ? this.toolTipIndex--:this.cursorIndex--
                }
                c <= this._noTopMostIndex ? this.noTopMostIndex++:c > this._noTopMostIndex && c <= this._topMostIndex ? this.topMostIndex++:c > this._topMostIndex && c <= this._toolTipIndex ? this.toolTipIndex++:this.cursorIndex++;
                return e.prototype.addElementAt.call(this, a, c)
            };
            a.removeElement = function(a) {
                return this.removeElementAt(e.prototype.getElementIndex.call(this, a))
            };
            a.removeElementAt = function(a) {
                var c = e.prototype.removeElementAt.call(this, a);
                a < this._noTopMostIndex ? this.noTopMostIndex--:a >= this._noTopMostIndex && a < this._topMostIndex ? this.topMostIndex--:a >= this._topMostIndex && a < this._toolTipIndex ? this.toolTipIndex--:this.cursorIndex--;
                return c
            };
            a.removeAllElements = function() {
                for (; 0 < this._noTopMostIndex;) e.prototype.removeElementAt.call(this, 0),
                this.noTopMostIndex--
            };
            a._elementRemoved = function(a, c, f) {
                void 0 === f && (f = !0);
                f && d.Event.dispatchEvent(a, "removeFromUIStage");
                e.prototype._elementRemoved.call(this, a, c, f)
            };
            a.raw_getElementAt = function(a) {
                return e.prototype.getElementAt.call(this, a)
            };
            a.raw_addElement = function(a) {
                var c = this.numElements;
                a.parent == this && c--;
                return this.raw_addElementAt(a, c)
            };
            a.raw_addElementAt = function(a, c) {
                if (a.parent == this) {
                    var d = this.getElementIndex(a);
                    d < this._noTopMostIndex ? this.noTopMostIndex--:d >= this._noTopMostIndex && d < this._topMostIndex ? this.topMostIndex--:d >= this._topMostIndex && d < this._toolTipIndex ? this.toolTipIndex--:this.cursorIndex--
                }
                return e.prototype.addElementAt.call(this, a, c)
            };
            a.raw_removeElement = function(a) {
                return e.prototype.removeElementAt.call(this, e.prototype.getElementIndex.call(this, a))
            };
            a.raw_removeElementAt = function(a) {
                return e.prototype.removeElementAt.call(this, a)
            };
            a.raw_removeAllElements = function() {
                for (; 0 < this.numElements;) e.prototype.removeElementAt.call(this, 0)
            };
            a.raw_getElementIndex = function(a) {
                return e.prototype.getElementIndex.call(this, a)
            };
            a.raw_setElementIndex = function(a, c) {
                e.prototype.setElementIndex.call(this, a, c)
            };
            a.raw_swapElements = function(a, c) {
                e.prototype.swapElementsAt.call(this, e.prototype.getElementIndex.call(this, a), e.prototype.getElementIndex.call(this, c))
            };
            a.raw_swapElementsAt = function(a, c) {
                e.prototype.swapElementsAt.call(this, a, c)
            };
            return c
        } (f.Group);
        f.UIStage = g;
        g.prototype.__class__ = "egret.gui.UIStage"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function(c) {
            function a() {
                c.call(this);
                this._popUpList = [];
                this.popUpDataList = [];
                this._modalColor = 0;
                this._modalAlpha = 0.5;
                this.invalidateModalFlag = !1;
                this.modalMask = null
            }
            __extends(a, c);
            var b = a.prototype;
            Object.defineProperty(b, "popUpList", {
                get: function() {
                    return this._popUpList.concat()
                },
                enumerable: !0,
                configurable: !0
            });
            b.findPopUpData = function(a) {
                for (var b = this.popUpDataList,
                c = b.length,
                d = 0; d < c; d++) {
                    var e = b[d];
                    if (e.popUp == a) return e
                }
                return null
            };
            b.addPopUp = function(b, c, d) {
                void 0 === c && (c = !1);
                void 0 === d && (d = !0);
                var g = f.UIGlobals.uiStage,
                p = this.findPopUpData(b);
                p ? (p.modal = c, b.removeEventListener(a.REMOVE_FROM_UISTAGE, this.onRemoved, this)) : (p = new e(b, c), this.popUpDataList.push(p), this._popUpList.push(b));
                g.popUpContainer.addElement(b);
                d && this.centerPopUp(b);
                "isPopUp" in b && (b.isPopUp = !0);
                c && this.invalidateModal();
                b.addEventListener(a.REMOVE_FROM_UISTAGE, this.onRemoved, this)
            };
            b.onRemoved = function(b) {
                for (var c = 0,
                d = this.popUpDataList,
                e = d.length,
                f = 0; f < e; f++) {
                    var g = d[f];
                    if (g.popUp == b.target) {
                        "isPopUp" in g.popUp && (g.popUp.isPopUp = !1);
                        g.popUp.removeEventListener(a.REMOVE_FROM_UISTAGE, this.onRemoved, this);
                        this.popUpDataList.splice(c, 1);
                        this._popUpList.splice(c, 1);
                        this.invalidateModal();
                        break
                    }
                    c++
                }
            };
            Object.defineProperty(b, "modalColor", {
                get: function() {
                    return this._modalColor
                },
                set: function(a) {
                    this._modalColor != a && (this._modalColor = a, this.invalidateModal())
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(b, "modalAlpha", {
                get: function() {
                    return this._modalAlpha
                },
                set: function(a) {
                    this._modalAlpha != a && (this._modalAlpha = a, this.invalidateModal())
                },
                enumerable: !0,
                configurable: !0
            });
            b.invalidateModal = function() {
                this.invalidateModalFlag || (this.invalidateModalFlag = !0, f.UIGlobals.stage.addEventListener(d.Event.ENTER_FRAME, this.validateModal, this), f.UIGlobals.stage.addEventListener(d.Event.RENDER, this.validateModal, this), f.UIGlobals.stage.invalidate())
            };
            b.validateModal = function(a) {
                this.invalidateModalFlag = !1;
                f.UIGlobals.stage.removeEventListener(d.Event.ENTER_FRAME, this.validateModal, this);
                f.UIGlobals.stage.removeEventListener(d.Event.RENDER, this.validateModal, this);
                this.updateModal(f.UIGlobals.uiStage)
            };
            b.updateModal = function(a) {
                for (var b = a.popUpContainer,
                c = !1,
                d = b.numElements - 1; 0 <= d; d--) {
                    var e = b.getElementAt(d);
                    if ((e = this.findPopUpData(e)) && e.modal) {
                        c = !0;
                        break
                    }
                }
                c ? (this.modalMask || (this.modalMask = new f.Rect, this.modalMask.touchEnabled = !0, this.modalMask.top = this.modalMask.left = this.modalMask.right = this.modalMask.bottom = 0), this.modalMask.fillColor = this._modalColor, this.modalMask.alpha = this._modalAlpha, this.modalMask.parent == a ? (b.getElementIndex(this.modalMask) < d && d--, b.setElementIndex(this.modalMask, d)) : b.addElementAt(this.modalMask, d)) : this.modalMask && this.modalMask.parent == a && b.removeElement(this.modalMask)
            };
            b.removePopUp = function(a) {
                a && a.parent && this.findPopUpData(a) && ("removeElement" in a.parent ? a.parent.removeElement(a) : a.parent instanceof f.UIComponent ? a.parent._removeFromDisplayList(a) : a instanceof d.DisplayObject && a.parent.removeChild(a))
            };
            b.centerPopUp = function(a) {
                a.top = a.bottom = a.left = a.right = NaN;
                a.verticalCenter = a.horizontalCenter = 0;
                var b = a.parent;
                b && ("validateNow" in a && a.validateNow(), a.x = 0.5 * (b.width - a.layoutBoundsWidth), a.y = 0.5 * (b.height - a.layoutBoundsHeight))
            };
            b.bringToFront = function(a) {
                if (this.findPopUpData(a) && a.parent && "popUpContainer" in a.parent) {
                    var b = a.parent;
                    b.popUpContainer.setElementIndex(a, b.popUpContainer.numElements - 1);
                    this.invalidateModal()
                }
            };
            a.REMOVE_FROM_UISTAGE = "removeFromUIStage";
            return a
        } (d.EventDispatcher);
        f.PopUpManagerImpl = g;
        g.prototype.__class__ = "egret.gui.PopUpManagerImpl";
        var e = function() {
            return function(c, a) {
                this.popUp = null;
                this.modal = !1;
                this.popUp = c;
                this.modal = a
            }
        } ();
        e.prototype.__class__ = "egret.gui.PopUpData"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {})); (function(d) { (function(f) {
        var g = function() {
            function e() {}
            e.getImpl = function() {
                if (!e._impl) try {
                    e._impl = d.Injector.getInstance("egret.gui.IPopUpManager")
                } catch(c) {
                    e._impl = new f.PopUpManagerImpl
                }
                return e._impl
            };
            Object.defineProperty(e, "modalColor", {
                get: function() {
                    return e.getImpl().modalColor
                },
                set: function(c) {
                    e.getImpl().modalColor = c
                },
                enumerable: !0,
                configurable: !0
            });
            Object.defineProperty(e, "modalAlpha", {
                get: function() {
                    return e.getImpl().modalAlpha
                },
                set: function(c) {
                    e.getImpl().modalAlpha = c
                },
                enumerable: !0,
                configurable: !0
            });
            e.addPopUp = function(c, a, b) {
                void 0 === a && (a = !1);
                void 0 === b && (b = !0);
                e.getImpl().addPopUp(c, a, b);
                f.PopUpEvent.dispatchPopUpEvent(e.getImpl(), f.PopUpEvent.ADD_POPUP, c, a)
            };
            e.removePopUp = function(c) {
                e.getImpl().removePopUp(c);
                f.PopUpEvent.dispatchPopUpEvent(e.getImpl(), f.PopUpEvent.REMOVE_POPUP, c)
            };
            e.centerPopUp = function(c) {
                e.getImpl().centerPopUp(c)
            };
            e.bringToFront = function(c) {
                e.getImpl().bringToFront(c);
                f.PopUpEvent.dispatchPopUpEvent(e.getImpl(), f.PopUpEvent.BRING_TO_FRONT, c)
            };
            Object.defineProperty(e, "popUpList", {
                get: function() {
                    return e.getImpl().popUpList
                },
                enumerable: !0,
                configurable: !0
            });
            e.addEventListener = function(c, a, b, d, f) {
                void 0 === d && (d = !1);
                void 0 === f && (f = 0);
                e.getImpl().addEventListener(c, a, b, d, f)
            };
            e.removeEventListener = function(c, a, b, d) {
                void 0 === d && (d = !1);
                e.getImpl().removeEventListener(c, a, b, d)
            };
            return e
        } ();
        f.PopUpManager = g;
        g.prototype.__class__ = "egret.gui.PopUpManager"
    })(d.gui || (d.gui = {}))
})(egret || (egret = {}));
var alien; (function(d) {
    var f = function(d) {
        function e() {
            var a = this;
            d.call(this);
            this._laterCalls = [];
            this.onEnterFrame = function(b) {
                for (var c, d; 0 < a._laterCalls.length;) d = a._laterCalls.shift(),
                b = d.func,
                c = d.thisObj,
                d = d.params,
                b.apply(c, d)
            };
            this.touchChildren = !1;
            this.addEventListener(egret.Event.ENTER_FRAME, this.onEnterFrame, this)
        }
        __extends(e, d);
        var c = e.prototype;
        c.setDirty = function() {
            this.callLater(this.updateDisplay, this)
        };
        c.updateDisplay = function() {};
        c.callLater = function(a, b, c) {
            void 0 === c && (c = null);
            for (var d = this._laterCalls.length - 1; 0 <= d && this._laterCalls[d].func != a; d--);
            0 > d && this._laterCalls.push({
                func: a,
                params: c,
                thisObj: b
            })
        };
        c.move = function(a, b) {
            this.x = a;
            this.y = b
        };
        return e
    } (egret.Sprite);
    d.Drawable = f;
    f.prototype.__class__ = "alien.Drawable"
})(alien || (alien = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.apply(this, arguments);
            this._stroke = this._fill = -1;
            this._weight = 1
        }
        __extends(e, d);
        var c = e.prototype;
        c.updateDisplay = function() {
            this.graphics.clear();
            0 <= this._fill && this.graphics.beginFill(this._fill);
            0 <= this._stroke && this.graphics.lineStyle(this._weight, this._stroke);
            this.onDraw(this.graphics);
            0 <= this._fill && this.graphics.endFill()
        };
        c.onDraw = function(a) {};
        Object.defineProperty(c, "fill", {
            get: function() {
                return this._fill
            },
            set: function(a) {
                this._fill != a && (this._fill = a, this.setDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "stroke", {
            get: function() {
                return this._stroke
            },
            set: function(a) {
                this._stroke != a && (this._stroke = a, this.setDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "weight", {
            get: function() {
                return this._weight
            },
            set: function(a) {
                this._weight != a && (this._weight = a, this.setDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        return e
    } (d.Drawable);
    d.Shape = f;
    f.prototype.__class__ = "alien.Shape"
})(alien || (alien = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.width = d.StageProxy.stage.stageWidth;
            this.height = d.StageProxy.stage.stageHeight;
            this.touchChildren = !0;
            this.touchEnabled = !1
        }
        __extends(e, f);
        var c = e.prototype;
        c.onAdded = function(a) {};
        c.onRemoved = function() {};
        return e
    } (egret.gui.SkinnableContainer);
    d.SceneBase = f;
    f.prototype.__class__ = "alien.SceneBase"
})(alien || (alien = {}));
var PanelBase = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    var g = f.prototype;
    g.popup = function(d, c) {
        void 0 === d && (d = null);
        void 0 === c && (c = !0);
        alien.PopUpManager.addPopUp(this, alien.dialogEffect.Flew, {
            direction: "up"
        },
        d, c);
        alien.Global.showBanner()
    };
    g.close = function() {
        alien.PopUpManager.removePopUp(this, alien.dialogEffect.Flew, {
            direction: "up"
        });
        alien.Global.hideBanner()
    };
    return f
} (egret.gui.SkinnableComponent);
PanelBase.prototype.__class__ = "PanelBase"; (function(d) {
    var f = function() {
        function d() {
            this.clear()
        }
        var e = d.prototype;
        e.containsKey = function(c) {
            return c in this.obj
        };
        e.containsValue = function(c) {
            for (var a in this.obj) if (this.obj[a] == c) return ! 0;
            return ! 1
        };
        e.put = function(c, a) {
            this.containsKey(c) || (this.obj[c] = a, this._length++)
        };
        e.get = function(c) {
            return this.containsKey(c) ? this.obj[c] : null
        };
        e.remove = function(c) {
            if (this.containsKey(c)) {
                var a = this.obj;
                delete this.obj[c];
                this._length--;
                return a
            }
            return null
        };
        e.foreach = function(c, a) {
            for (var b in this.obj) if (!c.call(a, b, this.obj[b])) break
        };
        e.randomGet = function() {
            var c = this.valueSet;
            return c[Math.floor(Math.random() * c.length)]
        };
        Object.defineProperty(e, "keySet", {
            get: function() {
                var c = [],
                a;
                for (a in this.obj) c.push(a);
                return c
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(e, "valueSet", {
            get: function() {
                var c = [],
                a;
                for (a in this.obj) c.push(this.obj[a]);
                return c
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(e, "size", {
            get: function() {
                return this._length
            },
            enumerable: !0,
            configurable: !0
        });
        e.clear = function() {
            this._length = 0;
            this.obj = {}
        };
        return d
    } ();
    d.HashMap = f;
    f.prototype.__class__ = "alien.HashMap"
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function f() {}
        f.foreach = function(d, c, a) {
            void 0 === a && (a = null);
            for (var b = {},
            f = 0,
            g = d.length; f < g; f++) b[f] = d[f];
            for (var E in b) if (!c.call(a, b[E], E)) break
        };
        f.arrayToMap = function(e, c) {
            void 0 === c && (c = "id");
            var a = new d.HashMap;
            f.foreach(e,
            function(b) {
                a.put(b[c], b);
                return ! 0
            },
            this);
            return a
        };
        f.arrayToObj = function(d, c) {
            void 0 === c && (c = "id");
            var a = {};
            f.foreach(d,
            function(b) {
                a[b[c]] = b;
                return ! 0
            },
            this);
            return a
        };
        f.distance = function(d, c, a, b) {
            return Math.sqrt((d - a) * (d - a) + (c - b) * (c - b))
        };
        f.injectProp = function(d, c) {
            void 0 === c && (c = null);
            if (!c) return ! 1;
            for (var a in c) d[a] = c[a];
            return ! 0
        };
        f.getDefinitionByName = function(d) {
            if (!d) return null;
            var c = f.__getDefinitionByName__cache[d];
            if (c) return c;
            for (var a = d.split("."), b = a.length, c = __global, h = 0; h < b; h++) if (c = c[a[h]], !c) return null;
            return f.__getDefinitionByName__cache[d] = c
        };
        f.makeRandomInt = function(d, c) {
            void 0 === c && (c = 0);
            return Math.floor(Math.random() * (d - c)) + c
        };
        f.makeOrderIntArray = function(d, c, a) {
            void 0 === c && (c = 0);
            void 0 === a && (a = 1);
            for (var b = []; c < d; c += a) b.push(c);
            return b
        };
        f.mixArray = function(d) {
            for (var c = 0,
            a = Math.round(d.length / 2); c < a; c++) {
                var b = f.makeRandomInt(d.length),
                h = f.makeRandomInt(d.length),
                F = d[b];
                d[b] = d[h];
                d[h] = F
            }
            return d
        };
        f.mixArray2 = function(d) {
            for (var c = d[0].length, a = d.length, b, h, F = 0, E = Math.round(c * a / 2); F < E; F++) {
                b = [f.makeRandomInt(c), f.makeRandomInt(a)];
                h = [f.makeRandomInt(c), f.makeRandomInt(a)];
                var t = d[b[0]][b[1]];
                d[b[0]][b[1]] = d[h[0]][h[1]];
                d[h[0]][h[1]] = t
            }
            return d
        };
        f.getRandomFromArray = function(d) {
            return d[f.makeRandomInt(d.length)]
        };
        f.fixRange = function(d, c, a) {
            d < c ? d = c: d > a && (d = a);
            return d
        };
        f.roundFix = function(d, c, a) {
            void 0 === a && (a = 0);
            d < a ? d += c - a: d >= c && (d -= c - a);
            return d
        };
        f.radiusToAngle = function(d) {
            return 180 * d / Math.PI
        };
        f.angleToRadius = function(d) {
            return d * Math.PI / 180
        };
        f.format = function(d) {
            for (var c = [], a = 1; a < arguments.length; a++) c[a - 1] = arguments[a];
            for (var a = d,
            b = 0,
            f = c.length; b < f; b++) a = a.replace("{" + b + "}", c[b]);
            return a
        };
        f.arrayConcat = function(d) {
            for (var c = [], a = 1; a < arguments.length; a++) c[a - 1] = arguments[a];
            f.foreach(c,
            function(a) {
                f.foreach(a,
                function(a) {
                    0 > d.indexOf(a) && d.push(a);
                    return ! 0
                },
                this);
                return ! 0
            },
            this)
        };
        f.setBgColor = function(d) {};
        f.supplement = function(d, c) {
            var a = c - d.toString().length - 1;
            return 0 > a ? d.toString() : f.zeros[a] + d
        };
        f.getUrlParams = function() {
            var d = {},
            c = window.location.href,
            a = c.indexOf("?");
            if (0 > a) return d;
            c = c.substr(a + 1).split("&");
            for (a = 0; a < c.length; a++) {
                var b = c[a].split("=");
                d[b[0]] = b[1]
            }
            return d
        };
        f.getUrlBase = function() {
            var d = window.location.href,
            c = d.indexOf("?");
            return d.substring(0, 0 > c ? d.length: c)
        };
        f.anchorCenter = function(d, c, a) {
            void 0 === c && (c = 0);
            void 0 === a && (a = 0);
            c |= d.width;
            a |= d.height;
            d instanceof egret.gui.UIAsset && (c = d.content.textureWidth, a = d.content.textureHeight);
            d.anchorX = d.anchorY = 0.5;
            d.x += c / 2;
            d.y += a / 2
        };
        f.arrToIntArr = function(d) {
            for (var c = 0,
            a = d.length; c < a; c++) d[c] = parseInt(d[c]);
            return d
        };
        f.makeRandomString = function(d) {
            for (var c = "",
            a = f.chars.length,
            b = 0; b < d; b++) c += f.chars.charAt(f.makeRandomInt(a));
            return c
        };
        f.turnRight = function(d) {
            for (var c = [], a = 0, b = d.length; a < b; a++) c.push([]);
            a = 0;
            for (b = d.length; a < b; a++) for (var f = 0,
            g = d[a].length; f < g; f++) c[a][f] = d[g - f - 1][a];
            return c
        };
        f.turnLeft = function(d) {
            for (var c = [], a = 0, b = d.length; a < b; a++) c.push([]);
            a = 0;
            for (b = d.length; a < b; a++) for (var f = 0,
            g = d[a].length; f < g; f++) c[a][f] = d[f][g - a - 1];
            return c
        };
        f.stringCut = function(d, c, a) {
            void 0 === a && (a = "...");
            var b = d;
            d.length > c && (b = d.substr(0, c) + a);
            return b
        };
        f.__getDefinitionByName__cache = {};
        f.zeros = "0 00 000 0000 00000 000000 0000000 00000000 000000000 0000000000".split(" ");
        f.chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        return f
    } ();
    d.Utils = f;
    f.prototype.__class__ = "alien.Utils"
})(alien || (alien = {})); (function(d) {
    var f = function(d) {
        function e() {
            d.call(this);
            this._scale9Grid = this._iconSource = this._bgSource = "";
            this.hostComponentKey = "alien.IconButton"
        }
        __extends(e, d);
        var c = e.prototype;
        Object.defineProperty(c, "bgSource", {
            get: function() {
                return this._bgSource
            },
            set: function(a) {
                this._bgSource = a;
                this.bgDisplay && this.applyBgSource()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "iconSource", {
            get: function() {
                return this._iconSource
            },
            set: function(a) {
                this._iconSource = a;
                this.iconDisplay && this.applyIconSource()
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "scale9Grid", {
            get: function() {
                return this._scale9Grid
            },
            set: function(a) {
                this._scale9Grid = a;
                this.applyScale9Grid()
            },
            enumerable: !0,
            configurable: !0
        });
        c.partAdded = function(a, b) {
            d.prototype.partAdded.call(this, a, b);
            switch (a) {
            case "iconDisplay":
                this.applyIconSource();
                break;
            case "bgDisplay":
                this.applyBgSource()
            }
        };
        c.applyIconSource = function() {
            this.iconDisplay.source = this._iconSource
        };
        c.applyBgSource = function() {
            this.bgDisplay.source = this._bgSource;
            this.applyScale9Grid()
        };
        c.applyScale9Grid = function() {
            if (this.bgDisplay && this._scale9Grid) {
                var a = this._scale9Grid.split(",");
                this.bgDisplay.scale9Grid = new egret.Rectangle(parseInt(a[0]), parseInt(a[1]), parseInt(a[2]), parseInt(a[3]))
            }
        };
        return e
    } (egret.gui.ButtonBase);
    d.IconButton = f;
    f.prototype.__class__ = "alien.IconButton"
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function f() {}
        f.timeFormat = function(e, c, a) {
            void 0 === c && (c = 0);
            void 0 === a && (a = !0);
            var b = e % 60,
            h = Math.floor(e / 60) % 60;
            e = Math.floor(e / 3600) % 24;
            a && (b = d.Utils.supplement(b, 2), h = d.Utils.supplement(h, 2), e = d.Utils.supplement(e, 2));
            return d.Utils.format(f.timeFormats[c], b, h, e)
        };
        f.setTimeout = function(d, c, a) {
            for (var b = [], f = 3; f < arguments.length; f++) b[f - 3] = arguments[f];
            f = new egret.Timer(a, 1);
            f.addEventListener(egret.TimerEvent.TIMER_COMPLETE,
            function() {
                d.apply(c, b)
            },
            this);
            f.start();
            return f
        };
        f.setInterval = function(d, c, a) {
            for (var b = [], f = 3; f < arguments.length; f++) b[f - 3] = arguments[f];
            f = new egret.Timer(a);
            f.addEventListener(egret.TimerEvent.TIMER,
            function() {
                d.apply(c, b)
            },
            this);
            f.start();
            return f
        };
        f.timeFormats = ["{1}:{0}", "{2}:{1}:{0}"];
        return f
    } ();
    d.TimeUtils = f;
    f.prototype.__class__ = "alien.TimeUtils"
})(alien || (alien = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.apply(this, arguments);
            this._h = this._w = 5
        }
        __extends(e, f);
        var c = e.prototype;
        e.create = function(a) {
            var b = new e;
            d.Utils.injectProp(b, a);
            return b
        };
        c.onDraw = function(a) {
            a.drawRect(0, 0, this._w, this._h)
        };
        Object.defineProperty(c, "w", {
            get: function() {
                return this._w
            },
            set: function(a) {
                this._w != a && (this._w = a, this.setDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(c, "h", {
            get: function() {
                return this._h
            },
            set: function(a) {
                this._h != a && (this._h = a, this.setDirty())
            },
            enumerable: !0,
            configurable: !0
        });
        return e
    } (d.Shape);
    d.Rect = f;
    f.prototype.__class__ = "alien.Rect"
})(alien || (alien = {}));
var GameConfig = function() {
    function d() {}
    d.gameName = "ZombieInfect";
    d.version = "1.0";
    d.appRecommendUrl = "http://mobile.thehotgames.com";
    d.language = {
        loading: "loading...",
        home: "http://mobile.thehotgames.com",
        url_google_play: "http://mobile.thehotgames.com",
        url_app_store: "http://mobile.thehotgames.com"
    };
    d.tutorialConfig = {
        width: 356,
        height: 179,
        pointsSelect: "img_point_select",
        pointsNormal: "img_point_normal",
        pointGap: 5,
        tutorials: [{
            level: 0,
            tutorial: ["tutorial_0"]
        },
        {
            level: 3,
            tutorial: ["tutorial_1"]
        },
        {
            level: 8,
            tutorial: ["tutorial_2_0", "tutorial_2_1"]
        },
        {
            level: 13,
            tutorial: ["tutorial_3_0", "tutorial_3_1"]
        }]
    };
    d.width = 8;
    d.height = 8;
    d.size = 55;
    d.fallSpeed = 11;
    d.levels = [{
        id: 0,
        star2: 2,
        star1: 3,
        map: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 6, 0, 0, 7, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    {
        id: 1,
        star2: 4,
        star1: 5,
        map: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 7, 0, 1, 6, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    {
        id: 2,
        star2: 8,
        star1: 11,
        map: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 7, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 6, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    {
        id: 3,
        star2: 6,
        star1: 8,
        map: [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 7, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 7, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 6, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0]
    },
    {
        id: 4,
        star2: 5,
        star1: 7,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 7, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 5,
        star2: 8,
        star1: 11,
        map: [0, 1, 1, 1, 1, 1, 1, 0, 1, 7, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 6, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0]
    },
    {
        id: 6,
        star2: 8,
        star1: 11,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 6, 1, 4, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 7, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 7,
        star2: 4,
        star1: 5,
        map: [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 4, 1, 0, 0, 1, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 6, 0, 0, 4, 1, 0, 0, 1, 1, 4, 1, 7, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0]
    },
    {
        id: 8,
        star2: 9,
        star1: 13,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 1, 1, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 7, 0, 1, 1, 6, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 9,
        star2: 5,
        star1: 7,
        map: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 6, 2, 2, 5, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 5, 2, 2, 7, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
    },
    {
        id: 10,
        star2: 14,
        star1: 20,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 1, 0, 5, 0, 1, 1, 2, 4, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 6, 1, 0, 1, 1, 0, 1, 0, 1, 4, 2, 1, 1, 0, 5, 0, 1, 4, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 11,
        star2: 11,
        star1: 15,
        map: [0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 5, 0, 2, 2, 2, 0, 0, 2, 1, 0, 2, 6, 2, 0, 0, 2, 4, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 4, 2, 0, 0, 2, 7, 2, 0, 1, 2, 0, 0, 2, 2, 2, 0, 5, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0]
    },
    {
        id: 12,
        star2: 13,
        star1: 19,
        map: [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 5, 4, 4, 5, 6, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 7, 0, 0, 0, 0, 0, 1, 0, 1, 5, 4, 4, 5, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0]
    },
    {
        id: 13,
        star2: 5,
        star1: 7,
        map: [0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 6, 0, 1, 0, 7, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0]
    },
    {
        id: 14,
        star2: 16,
        star1: 22,
        map: [1, 1, 1, 0, 0, 1, 1, 1, 1, 4, 0, 1, 1, 0, 0, 1, 1, 1, 6, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 3, 1, 0, 1, 4, 0, 1, 1, 4, 7, 1, 1, 1, 1, 0, 0, 1, 1, 1]
    },
    {
        id: 15,
        star2: 7,
        star1: 10,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 5, 6, 1, 1, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 1, 1, 4, 0, 0, 0, 7, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 16,
        star2: 8,
        star1: 12,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 0, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 5, 0, 3, 0, 5, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 4, 4, 4, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 17,
        star2: 11,
        star1: 15,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 7, 7, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 7, 0, 1, 1, 0, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 18,
        star2: 12,
        star1: 16,
        map: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 5, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 6, 1, 0, 2, 7, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    },
    {
        id: 19,
        star2: 17,
        star1: 14,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 4, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 4, 0, 1, 1, 0, 4, 1, 1, 7, 0, 1, 1, 0, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 20,
        star2: 14,
        star1: 20,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 7, 1, 1, 3, 4, 0, 4, 7, 7, 1, 1, 1, 1, 0, 4, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 6, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0]
    },
    {
        id: 21,
        star2: 24,
        star1: 34,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 7, 4, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 7, 4, 0, 0, 0, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 22,
        star2: 7,
        star1: 10,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 6, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0, 0, 1, 1, 1, 4, 4, 4, 4, 4, 1, 1, 7, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 23,
        star2: 17,
        star1: 24,
        map: [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 6, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 5, 0, 0, 0, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 7, 2, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0]
    },
    {
        id: 24,
        star2: 26,
        star1: 36,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 4, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 25,
        star2: 19,
        star1: 27,
        map: [2, 2, 2, 1, 1, 2, 2, 2, 2, 6, 2, 2, 2, 2, 7, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 5, 2, 2, 2, 3, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 7, 2, 2, 2, 2, 7, 2, 2, 2, 2, 1, 1, 2, 2, 2]
    },
    {
        id: 26,
        star2: 11,
        star1: 15,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 3, 3, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 4, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 27,
        star2: 9,
        star1: 12,
        map: [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 7, 0, 4, 0, 4, 0, 1, 1, 1, 0, 1, 3, 1, 7, 1, 1, 1, 6, 1, 4, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    },
    {
        id: 28,
        star2: 14,
        star1: 20,
        map: [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 6, 0, 0, 1, 1, 1, 3, 0, 1, 1, 0, 4, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 7, 1, 1, 1, 0, 4, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0]
    },
    {
        id: 29,
        star2: 26,
        star1: 36,
        map: [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 7, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 4, 0, 0, 0, 0, 1, 1, 6, 4, 3, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    }];
    return d
} ();
GameConfig.prototype.__class__ = "GameConfig";
var skins; (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [95, 374]);
                this.elementsContent = [this.imgIcon_i(), this.labName_i(), this.labIntro_i(), this.__4_i(), this.btnDownload_i(), this.__5_i()];
                this.states = [new egret.gui.State("up", []), new egret.gui.State("down", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__5_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["bottom", "source"], [0, "img_line"]);
                return a
            };
            a.btnDownload_i = function() {
                var a = new alien.IconButton;
                this.btnDownload = a;
                this.__s(a, "bgSource height iconSource name width x".split(" "), ["button_0_bg", 57, "symbol_download", "download", 60, 310]);
                return a
            };
            a.imgIcon_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgIcon = a;
                this.__s(a, ["height", "width"], [80, 80]);
                return a
            };
            a.labIntro_i = function() {
                var a = new egret.gui.Label;
                this.labIntro = a;
                this.__s(a, "fontFamily size text textColor top x".split(" "), ["\u5fae\u8f6f\u96c5\u9ed1", 20, "\u6807\u7b7e", 7292690, 39, 90]);
                return a
            };
            a.labName_i = function() {
                var a = new egret.gui.Label;
                this.labName = a;
                this.__s(a, "fontFamily size text textColor top x".split(" "), ["\u5fae\u8f6f\u96c5\u9ed1", 28, "\u6807\u7b7e", 597544, 0, 90]);
                return a
            };
            a.__4_i = function() {
                var a = new egret.gui.Label;
                this.__s(a, "fontFamily size text textColor top x".split(" "), ["\u5fae\u8f6f\u96c5\u9ed1", 18, "Install", 13355427, 60, 312]);
                return a
            };
            c._skinParts = ["imgIcon", "labName", "labIntro", "btnDownload"];
            return c
        } (egret.gui.Skin);
        d.IRAppSkin = g;
        g.prototype.__class__ = "skins.components.IRAppSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [506, 374]);
                this.elementsContent = [this.__6_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.VerticalLayout;
                this.__s(a, ["gap", "horizontalAlign", "paddingTop"], [15, "justify", 15]);
                return a
            };
            a.__5_i = function() {
                var a = new egret.gui.Group;
                a.elementsContent = [this.__3_i(), this.dataGroup_i()];
                return a
            };
            a.__6_i = function() {
                var a = new egret.gui.Scroller;
                this.__s(a, ["percentHeight", "percentWidth"], [100, 100]);
                a.viewport = this.__5_i();
                return a
            };
            a.dataGroup_i = function() {
                var a = new egret.gui.DataGroup;
                this.dataGroup = a;
                a.percentWidth = 100;
                a.layout = this.__4_i();
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "img_line";
                return a
            };
            c._skinParts = ["dataGroup"];
            return c
        } (egret.gui.Skin);
        d.ListAppSkin = g;
        g.prototype.__class__ = "skins.components.ListAppSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [7, 100]);
                this.elementsContent = [this.track_i(), this.thumb_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.thumb_i = function() {
                var a = new egret.gui.Rect;
                this.thumb = a;
                this.__s(a, ["fillColor", "percentHeight", "width"], [14026760, 100, 10]);
                return a
            };
            a.track_i = function() {
                var a = new egret.gui.Rect;
                this.track = a;
                this.__s(a, ["fillColor", "percentHeight", "percentWidth"], [13355427, 100, 100]);
                return a
            };
            c._skinParts = ["track", "thumb"];
            return c
        } (egret.gui.Skin);
        d.MoveProgressBarSkin = g;
        g.prototype.__class__ = "skins.components.MoveProgressBarSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.star0_i(), this.star1_i(), this.star2_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.star0_i = function() {
                var a = new egret.gui.UIAsset;
                this.star0 = a;
                this.__s(a, ["source", "x", "y"], ["star_big", 0, 20]);
                return a
            };
            a.star1_i = function() {
                var a = new egret.gui.UIAsset;
                this.star1 = a;
                this.__s(a, ["source", "x"], ["star_big", 134]);
                return a
            };
            a.star2_i = function() {
                var a = new egret.gui.UIAsset;
                this.star2 = a;
                this.__s(a, ["source", "x", "y"], ["star_big", 266, 20]);
                return a
            };
            c._skinParts = ["star0", "star1", "star2"];
            return c
        } (egret.gui.Skin);
        d.StarBarSkin = g;
        g.prototype.__class__ = "skins.components.StarBarSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {}));
var StarBar = function(d) {
    function f() {
        d.apply(this, arguments);
        this.imgs = []
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        for (var e = 0; 3 > e; e++) {
            var c = this["star" + e];
            this.imgs.push(c);
            c.anchorX = 0.5;
            c.anchorY = 1;
            c.x += 54.5;
            c.y += 107;
            c.alpha = 0
        }
    };
    g.show = function(d) {
        for (var c = 0; 3 > c; c++) this.imgs[c].alpha = 0;
        for (c = 0; c < d; c++) this.showStar(this.imgs[c], 200 * c + 200)
    };
    g.showStar = function(d, c) {
        alien.TimeUtils.setTimeout(function() {
            d.scaleX = d.scaleY = 0;
            egret.Tween.get(d).to({
                scaleX: 1,
                scaleY: 1,
                alpha: 1
            },
            200, egret.Ease.backOut)
        },
        this, c)
    };
    g.hide = function() {
        this.imgs.forEach(function(d) {
            d.alpha = 0
        },
        this)
    };
    return f
} (egret.gui.SkinnableComponent);
StarBar.prototype.__class__ = "StarBar"; (function(d) { (function(d) {
        var g = function() {
            function d() {}
            d.prototype.handover = function(c, a, b, d) {
                void 0 === d && (d = null);
                c && (c.visible = !1, b.removeElement(c));
                a.visible = !0;
                a.alpha = 1;
                b.addElement(a);
                d && d()
            };
            return d
        } ();
        d.None = g;
        g.prototype.__class__ = "alien.sceneEffect.None";
        g = function() {
            function d() {}
            d.prototype.handover = function(c, a, b, d) {
                void 0 === d && (d = null);
                egret.Tween.get(c).to({
                    alpha: 0
                },
                500);
                a.alpha = 0;
                a.visible = !0;
                b.addElement(a);
                egret.Tween.get(a).to({
                    alpha: 1
                },
                500).call(function() {
                    b.removeElement(c);
                    d && d()
                })
            };
            return d
        } ();
        d.Fade = g;
        g.prototype.__class__ = "alien.sceneEffect.Fade";
        g = function() {
            function d() {}
            d.prototype.handover = function(c, a, b, d) {
                function e() {
                    egret.Tween.get(a).to({
                        alpha: 1
                    },
                    500).call(function() {
                        d && d()
                    },
                    this)
                }
                void 0 === d && (d = null);
                a.alpha = 0;
                a.visible = !0;
                b.addElement(a);
                c ? egret.Tween.get(c).to({
                    alpha: 0
                },
                500).call(function() {
                    b.removeElement(c);
                    e()
                },
                this) : e()
            };
            return d
        } ();
        d.FadeBlack = g;
        g.prototype.__class__ = "alien.sceneEffect.FadeBlack"
    })(d.sceneEffect || (d.sceneEffect = {}))
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function d() {}
        d.init = function() {
            d.eventDispatcher = new egret.EventDispatcher
        };
        d.dispatch = function(e, c) {
            void 0 === c && (c = null);
            c ? d.eventDispatcher.dispatchEventWith(e, !1, c) : d.eventDispatcher.dispatchEvent(new egret.Event(e))
        };
        d.addListener = function(e, c, a) {
            d.eventDispatcher.addEventListener(e, c, a)
        };
        d.removeListener = function(e, c, a) {
            d.eventDispatcher.removeEventListener(e, c, a)
        };
        return d
    } ();
    d.Dispatcher = f;
    f.prototype.__class__ = "alien.Dispatcher"
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function d() {
            this._systemType = d.SYSTEM_ANDROID
        }
        var e = d.prototype;
        d.getInstance = function() {
            void 0 == this._instance && (this._instance = new d);
            return this._instance
        };
        d.call = function(c, a) {
            void 0 === a && (a = null);
            this.getInstance().call(c, a)
        };
        d.navigateToUrl = function(c) {
            this.getInstance().navigateToUrl(c)
        };
        d.closeApp = function() {
            this.getInstance().closeApp()
        };
        d.showBanner = function() {
            this.getInstance().showBanner()
        };
        d.hideBanner = function() {
            this.getInstance().hideBanner()
        };
        d.showInterstitial = function() {
            this.getInstance().showInterstitial()
        };
        d.jumpApp = function(c) {
            this.getInstance().jumpApp(c)
        };
        Object.defineProperty(e, "systemType", {
            get: function() {
                return this._systemType
            },
            set: function(c) {
                this._systemType = c
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(e, "isNative", {
            get: function() {
                return egret.MainContext.runtimeType == egret.MainContext.RUNTIME_HTML5 ? 0 : 1
            },
            enumerable: !0,
            configurable: !0
        });
        e.call = function(c, a) {
            void 0 === a && (a = null);
            a = a || {};
            a.method = c;
            egret.ExternalInterface.call("nativeCall", JSON.stringify(a))
        };
        e.navigateToUrl = function(c) {
            1 == this.isNative ? this.call("navigateToUrl", {
                url: c
            }) : location.href = c
        };
        e.closeApp = function() {
            this.call("closeApp")
        };
        e.showBanner = function() {
            console.log("showBanner");
            1 == this.isNative && this.call("showBanner");

        };
        e.hideBanner = function() {
            console.log("hideBanner");
            1 == this.isNative && this.call("hideBanner")
        };
        e.showInterstitial = function() {
            console.log("showInterstitial");
            1 == this.isNative && this.call("showInterstitial")
        };
        e.jumpApp = function(c) {
            console.log("download");
            1 == this.isNative ? this.call("jumpApp", c) : this.navigateToUrl(c.android_apk_url)
        };
        d.SYSTEM_HTML5 = 0;
        d.SYSTEM_IOS = 1;
        d.SYSTEM_ANDROID = 2;
        return d
    } ();
    d.Global = f;
    f.prototype.__class__ = "alien.Global"
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function d() {}
        d.init = function(e, c, a) {
            d.stage = e;
            d.root = c;
            d.uiStage = a
        };
        Object.defineProperty(d, "width", {
            get: function() {
                return d.stage.stageWidth
            },
            enumerable: !0,
            configurable: !0
        });
        Object.defineProperty(d, "height", {
            get: function() {
                return d.stage.stageHeight
            },
            enumerable: !0,
            configurable: !0
        });
        return d
    } ();
    d.StageProxy = f;
    f.prototype.__class__ = "alien.StageProxy"
})(alien || (alien = {}));
var Block = function(d) {
    function f() {
        d.call(this);
        this.playingExplosion = this.isFalling = !1;
        this.setup()
    }
    __extends(f, d);
    var g = f.prototype;
    f.init = function() {
        this.mdBoom = (new egret.MovieClipDataFactory(RES.getRes("boom_json"), RES.getRes("boom_png"))).generateMovieClipData("boom")
    };
    g.setup = function() {
        this.width = this.height = GameConfig.size;
        this.touchChildren = !1;
        this.touchEnabled = !0;
        var d = new alien.Rect;
        d.touchEnabled = !0;
        d.w = d.h = GameConfig.size;
        this.addChild(d)
    };
    g.hitTest = function(d, c, a) {
        if (this.playingExplosion) return null;
        a = this.getChildAt(0)._getMatrix();
        a.invert();
        d = egret.Matrix.transformCoords(a, d, c);
        return 0 <= d.x && d.x < this.width && 0 <= d.y && d.y < this.height ? this: null
    };
    g.setBody = function(d) {
        d = new egret.Bitmap(RES.getRes(d));
        d.anchorX = d.anchorY = 0.5;
        d.x = this.width / 2;
        d.y = this.height / 2;
        this.addChild(d);
        this.body = d
    };
    g.adjustBody = function(d) {
        this.body.rotation -= d
    };
    g.rotateDownPoint = function(d) {
        switch (d) {
        case 0:
            this.speedX = 0;
            this.speedY = GameConfig.fallSpeed;
            this.hitX = this.width / 2;
            this.hitY = this.height + 1;
            break;
        case 90:
            this.speedX = GameConfig.fallSpeed;
            this.speedY = 0;
            this.hitX = this.width + 1;
            this.hitY = this.height / 2;
            break;
        case 180:
            this.speedX = 0;
            this.speedY = -GameConfig.fallSpeed;
            this.hitX = this.width / 2;
            this.hitY = -1;
            break;
        case 270:
            this.speedX = -GameConfig.fallSpeed,
            this.speedY = 0,
            this.hitX = -1,
            this.hitY = this.height / 2
        }
    };
    g.update = function() {
        this.move()
    };
    g.move = function() {
        this.isFalling && (this.x += this.speedX, this.y += this.speedY)
    };
    g.shake = function() {
        egret.Tween.get(this.body).to({
            rotation: this.body.rotation + 5
        },
        100).to({
            rotation: this.body.rotation
        },
        100)
    };
    g.playExplosion = function(d) {
        this.playingExplosion = !0;
        egret.Tween.get(this.body).to({
            alpha: 0
        },
        300);
        var c = new egret.MovieClip(f.mdBoom);
        this.addChild(c);
        c.addEventListener(egret.Event.COMPLETE,
        function(a) {
            c.parent.removeChild(c);
            d()
        },
        this);
        c.play(1)
    };
    f.create = function(d) {
        var c = new[0, WallBlock, WoodenBlock, SpikesBlock, MetalBlock, ExplBlock, ZombieBlock, HumanBlock][d];
        c.data = d;
        return c
    };
    return f
} (egret.DisplayObjectContainer);
Block.prototype.__class__ = "Block";
var HumanBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    var g = f.prototype;
    g.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("human_" + alien.Utils.makeRandomInt(4))
    };
    g.changeToZombie = function() {
        this.data = 6;
        var d = this.body.rotation;
        this.removeChildAt(1);
        this.setBody("zombie_" + alien.Utils.makeRandomInt(2));
        this.body.rotation = d
    };
    return f
} (Block);
HumanBlock.prototype.__class__ = "HumanBlock";
var ZombieBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("zombie_" + alien.Utils.makeRandomInt(2))
    };
    return f
} (Block);
ZombieBlock.prototype.__class__ = "ZombieBlock";
var WallBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("wall")
    };
    return f
} (Block);
WallBlock.prototype.__class__ = "WallBlock";
var WoodenBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("wooden")
    };
    return f
} (Block);
WoodenBlock.prototype.__class__ = "WoodenBlock";
var ExplBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("expl")
    };
    return f
} (Block);
ExplBlock.prototype.__class__ = "ExplBlock";
var MetalBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("metal")
    };
    return f
} (Block);
MetalBlock.prototype.__class__ = "MetalBlock";
var SpikesBlock = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.setup = function() {
        d.prototype.setup.call(this);
        this.setBody("spikes")
    };
    return f
} (Block);
SpikesBlock.prototype.__class__ = "SpikesBlock";
var SoundManager = function() {
    function d() {}
    var f = d.prototype;
    d.getInstance = function() {
        void 0 == this._instance && (this._instance = new d);
        return this._instance
    };
    f.playMusic = function(d) {
        void 0 === d && (d = null);
        d && (this.musicRes = d);
        this.musicMute || (this.music = RES.getRes(this.musicRes), this.music.play(!0))
    };
    f.stopMusic = function() {
        this.music && this.music.pause();
        this.music = null
    };
    f.switchMusic = function() {
        this.musicMute = !this.musicMute;
        this.musicRes && (this.musicMute ? this.music.pause() : this.playMusic())
    };
    Object.defineProperty(f, "musicMute", {
        get: function() {
            var d = egret.localStorage.getItem("musicMute");
            return d ? "1" == d: !1
        },
        set: function(d) {
            egret.localStorage.setItem("musicMute", d ? "1": "0")
        },
        enumerable: !0,
        configurable: !0
    });
    f.playSound = function(d) {
        void 0 === d && (d = null);
        d && (this.soundRes = d);
        this.soundMute || (this.sound = RES.getRes(this.soundRes), this.sound.play(!1))
    };
    f.stopSound = function() {
        this.sound && this.sound.pause();
        this.sound = null
    };
    f.switchSound = function() { (this.soundMute = !this.soundMute) && this.soundRes && this.sound.pause()
    };
    Object.defineProperty(f, "soundMute", {
        get: function() {
            var d = egret.localStorage.getItem("soundMute");
            return d ? "1" == d: !1
        },
        set: function(d) {
            egret.localStorage.setItem("soundMute", d ? "1": "0")
        },
        enumerable: !0,
        configurable: !0
    });
    return d
} ();
SoundManager.prototype.__class__ = "SoundManager";
var EventNames = function() {
    function d() {}
    d.LOADING_PROGRESS = "loadingProgress";
    return d
} ();
EventNames.prototype.__class__ = "EventNames";
var GameData = function() {
    function d() {
        this.interstitialShow = !0;
        this.currentLevel = 0;
        this.levels = [];
        this.save = []
    }
    var f = d.prototype;
    d.getInstance = function() {
        void 0 == this._instance && (this._instance = new d);
        return this._instance
    };
    f.onInterstitialShow = function() {
        this.interstitialShow = !0
    };
    f.initLevelsConfig = function() {
        var d = GameConfig.levels.concat(),
        e = egret.localStorage.getItem("save");
        if (e) try {
            this.save = JSON.parse(e)
        } catch(c) {
            this.save = []
        }
        d.forEach(function(a, b) {
            b > this.save.length - 1 ? (a.star = 0, a.unlock = !1) : (a.star = this.save[b], a.unlock = !0)
        },
        this);
        this.levels = d;
        this.updateUnlock()
    };
    f.saveData = function(d, e) {
        d > this.currentLevel && (this.currentLevel = d);
        this.levels[d].star = e;
        this.save[d] = e;
        egret.localStorage.setItem("save", JSON.stringify(this.save));
        this.updateUnlock()
    };
    f.updateUnlock = function() {
        this.save.length < this.levels.length && (this.levels[this.save.length].unlock = !0)
    };
    Object.defineProperty(f, "needShowAppRecommend", {
        get: function() {
            var d = !1,
            e = egret.localStorage.getItem("needShowAppRecommend");
            e && (d = "1" == e);
            return d
        },
        set: function(d) {
            egret.localStorage.setItem("needShowAppRecommend", d ? "1": "0")
        },
        enumerable: !0,
        configurable: !0
    });
    return d
} ();
GameData.prototype.__class__ = "GameData"; (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [98, 105]);
                this.elementsContent = [this.imgBg_i(), this.labNum_i(), this.imgBottom_i()];
                this.states = [new egret.gui.State("up", []), new egret.gui.State("down", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.imgBottom_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgBottom = a;
                this.__s(a, ["bottom", "horizontalCenter", "source"], [0, 0, "star_3"]);
                return a
            };
            a.labNum_i = function() {
                var a = new egret.gui.BitmapLabel;
                this.labNum = a;
                this.__s(a, ["font", "horizontalCenter", "text", "x", "y"], ["font0", 0.5, "0", 27, 21]);
                return a
            };
            a.imgBg_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgBg = a;
                this.__s(a, ["source", "x", "y"], ["level_item_bg", 7, 0]);
                return a
            };
            c._skinParts = ["imgBg", "labNum", "imgBottom"];
            return c
        } (egret.gui.Skin);
        d.IRLevelSkin = g;
        g.prototype.__class__ = "skins.components.IRLevelSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [400, 400]);
                this.elementsContent = [this.__5_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.Group;
                a.elementsContent = [this.dataGroup_i()];
                return a
            };
            a.__5_i = function() {
                var a = new egret.gui.Scroller;
                this.__s(a, ["percentHeight", "percentWidth"], [100, 100]);
                a.viewport = this.__4_i();
                return a
            };
            a.dataGroup_i = function() {
                var a = new egret.gui.DataGroup;
                this.dataGroup = a;
                a.percentWidth = 100;
                a.layout = this.__3_i();
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.TileLayout;
                this.__s(a, ["horizontalGap", "requestedColumnCount", "verticalGap"], [40, 3, 16]);
                return a
            };
            c._skinParts = ["dataGroup"];
            return c
        } (egret.gui.Skin);
        d.LevelListSkin = g;
        g.prototype.__class__ = "skins.components.LevelListSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [20, 100]);
                this.elementsContent = [this.track_i(), this.thumb_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.thumb_i = function() {
                var a = new egret.gui.Rect;
                this.thumb = a;
                this.__s(a, ["fillColor", "percentHeight", "width"], [12255746, 100, 10]);
                return a
            };
            a.track_i = function() {
                var a = new egret.gui.Rect;
                this.track = a;
                this.__s(a, ["fillColor", "percentHeight", "strokeColor", "percentWidth"], [1056034, 100, 1056034, 100]);
                return a
            };
            c._skinParts = ["track", "thumb"];
            return c
        } (egret.gui.Skin);
        d.LoadingProgressBarSkin = g;
        g.prototype.__class__ = "skins.components.LoadingProgressBarSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.__3_i(), this.pgbStep_i(), this.labStep_i(), this.labTipStep2_i(), this.labTipStep1_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.labStep_i = function() {
                var a = new egret.gui.BitmapLabel;
                this.labStep = a;
                this.__s(a, ["font", "text", "x", "y"], ["font1", "0", 52, 16]);
                return a
            };
            a.labTipStep1_i = function() {
                var a = new egret.gui.BitmapLabel;
                this.labTipStep1 = a;
                this.__s(a, ["font", "horizontalCenter", "text", "y"], ["font2", 83.5, "8", 47]);
                return a
            };
            a.labTipStep2_i = function() {
                var a = new egret.gui.BitmapLabel;
                this.labTipStep2 = a;
                this.__s(a, ["font", "horizontalCenter", "text", "y"], ["font2", 34, "7", 47]);
                return a
            };
            a.pgbStep_i = function() {
                var a = new egret.gui.ProgressBar;
                this.pgbStep = a;
                this.__s(a, "maximum minimum skinName value width x y".split(" "), [100, 0, d.components.MoveProgressBarSkin, 0, 175, 106, 32]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["progress_bar_bg", 0, 0]);
                return a
            };
            c._skinParts = ["pgbStep", "labStep", "labTipStep2", "labTipStep1"];
            return c
        } (egret.gui.Skin);
        f.MoveProgressSkin = g;
        g.prototype.__class__ = "skins.components.MoveProgressSkin"
    })(d.components || (d.components = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.__3_i(), this.buttonLayer_i(), this.__8_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_continue", "continue", 197, 0, 0]);
                return a
            };
            a.__5_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_reset", "reset", 197, 10, 10]);
                return a
            };
            a.__6_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_back_to_menu", "backToMenu", 197, 40, 40]);
                return a
            };
            a.__7_i = function() {
                var a = new egret.gui.VerticalLayout;
                a.gap = 30;
                return a
            };
            a.__8_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["title_pause", 38, 0]);
                return a
            };
            a.btnMoreGame_i = function() {
                var a = new alien.IconButton;
                this.btnMoreGame = a;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_more_games", "moreGames", 197, 20, 20]);

                return a
            };
            a.buttonLayer_i = function() {
                var a = new egret.gui.Group;
                this.buttonLayer = a;
                this.__s(a, ["x", "y"], [48, 101]);
                a.layout = this.__7_i();
                a.elementsContent = [this.__4_i(), this.__5_i(), this.btnMoreGame_i(), this.__6_i()];

                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["height", "source", "width", "y"], [515, "pop_common_bg", 295, 26]);
                return a
            };
            c._skinParts = ["btnMoreGame", "buttonLayer"];
            return c
        } (egret.gui.Skin);
        d.PanelMenuSkin = g;
        g.prototype.__class__ = "skins.panels.PanelMenuSkin"
    })(d.panels || (d.panels = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.__3_i(), this.buttonClose_i(), this.list_i(), this.__4_i(), this.labLoading_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                // this.__s(a, ["source", "x", "y"], ["title_app_recommend", 41, 37]);
                return a
            };
            a.buttonClose_i = function() {
                var a = new alien.IconButton;
                this.buttonClose = a;
                this.__s(a, ["height", "iconSource", "width", "x", "y"], [45, "button_close", 43, 397, -14]);
                return a
            };
            a.labLoading_i = function() {
                var a = new egret.gui.Label;
                this.labLoading = a;
                this.__s(a, ["horizontalCenter", "text", "textColor", "verticalCenter"], [0, "loading...", 0, 0]);
                return a
            };
            a.list_i = function() {
                var a = new egret.gui.List;
                this.list = a;
                this.__s(a, ["height", "itemRendererSkinName", "skinName", "x", "y"], [505, d.components.IRAppSkin, d.components.ListAppSkin, 29, 130]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "pop_common_bg";
                return a
            };
            c._skinParts = ["buttonClose", "list", "labLoading"];
            return c
        } (egret.gui.Skin);
        f.PanelRecommendSkin = g;
        g.prototype.__class__ = "skins.panels.PanelRecommendSkin"
    })(d.panels || (d.panels = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [273, 455]);
                this.elementsContent = [this.__3_i(), this.__4_i(), this.buttonLayer_i()];
                this.__7_i();
                this.starBar_i();
                this.states = [new egret.gui.State("victory", [new egret.gui.AddItems("__7", "buttonLayer", "last", ""), new egret.gui.AddItems("starBar", "", "last", "")]), new egret.gui.State("failed", [new egret.gui.SetProperty("__4", "source", "result_failed")])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                this.__4 = a;
                this.__s(a, ["source", "x", "y"], ["result_victory", 43, -34]);
                return a
            };
            a.__5_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_0_bg", 83, "symbol_level", "level", 87, 0, 0]);
                return a
            };
            a.__6_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_0_bg", 83, "symbol_reload_2", "reload", 87, 110, 7]);
                return a
            };
            a.__7_i = function() {
                var a = new alien.IconButton;
                this.__7 = a;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_0_bg", 83, "symbol_next_level", "nextLevel", 87, 226, 4]);
                return a
            };
            a.__8_i = function() {
                var a = new egret.gui.HorizontalLayout;
                a.gap = 40;
                return a
            };
            a.buttonLayer_i = function() {
                var a = new egret.gui.Group;
                this.buttonLayer = a;
                this.__s(a, ["horizontalCenter", "y"], [0, 207]);
                a.layout = this.__8_i();
                a.elementsContent = [this.__5_i(), this.__6_i()];
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "pop_result_bg";
                return a
            };
            a.starBar_i = function() {
                var a = new StarBar;
                this.starBar = a;
                this.__s(a, ["skinName", "x", "y"], [d.components.StarBarSkin, 40, 73]);
                return a
            };
            c._skinParts = ["buttonLayer", "starBar"];
            return c
        } (egret.gui.Skin);
        f.PanelResultSkin = g;
        g.prototype.__class__ = "skins.panels.PanelResultSkin"
    })(d.panels || (d.panels = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.width = 455;
                this.elementsContent = [this.__3_i(), this.__4_i(), this.buttonClose_i()];
                this.tutorialContainer_i();
                this.states = [new egret.gui.State("tutorail0", [new egret.gui.AddItems("tutorialContainer", "", "last", ""), new egret.gui.SetProperty("__3", "width", 440), new egret.gui.SetProperty("buttonClose", "y", -19), new egret.gui.SetProperty("buttonClose", "x", 405), new egret.gui.SetProperty("", "width", 440)]), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["title_tutorial", 100, -14]);
                return a
            };
            a.buttonClose_i = function() {
                var a = new alien.IconButton;
                this.buttonClose = a;
                this.__s(a, ["height", "iconSource", "width", "x", "y"], [45, "button_close", 43, 426, -16]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                this.__3 = a;
                a.source = "pop_result_bg";
                return a
            };
            a.tutorialContainer_i = function() {
                var a = new egret.gui.UIAsset;
                this.tutorialContainer = a;
                this.__s(a, ["height", "horizontalCenter", "touchChildren", "width", "y"], [179, 0, !0, 356, 64]);
                return a
            };
            c._skinParts = ["buttonClose", "tutorialContainer"];
            return c
        } (egret.gui.Skin);
        d.PanelTutorialSkin = g;
        g.prototype.__class__ = "skins.panels.PanelTutorialSkin"
    })(d.panels || (d.panels = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.__7_i(), this.__8_i()];
                this.__9_i();
                this.states = [new egret.gui.State("up", []), new egret.gui.State("down", [new egret.gui.AddItems("__9", "", "last", ""), new egret.gui.SetProperty("__9", "source", "symbol_forbid")]), new egret.gui.State("disabled", []), new egret.gui.State("upAndSelected", [new egret.gui.AddItems("__9", "", "last", "")]), new egret.gui.State("downAndSelected", []), new egret.gui.State("disabledAndSelected", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            a.__7_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["percentHeight", "source", "percentWidth"], [100, "button_0_bg", 100]);
                return a
            };
            a.__8_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["symbol_music", 14, 13]);
                return a
            };
            a.__9_i = function() {
                var a = new egret.gui.UIAsset;
                this.__9 = a;
                this.__s(a, ["source", "x", "y"], ["symbol_forbid", 11, 12]);
                return a
            };
            return c
        } (egret.gui.Skin);
        d.MusicButtonSkin = g;
        g.prototype.__class__ = "skins.ui.MusicButtonSkin"
    })(d.ui || (d.ui = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.elementsContent = [this.__7_i(), this.__8_i()];
                this.__9_i();
                this.states = [new egret.gui.State("up", []), new egret.gui.State("down", [new egret.gui.AddItems("__9", "", "last", ""), new egret.gui.SetProperty("__9", "source", "symbol_forbid")]), new egret.gui.State("disabled", []), new egret.gui.State("upAndSelected", [new egret.gui.AddItems("__9", "", "last", "")]), new egret.gui.State("downAndSelected", []), new egret.gui.State("disabledAndSelected", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            a.__7_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["percentHeight", "source", "percentWidth"], [100, "button_0_bg", 100]);
                return a
            };
            a.__8_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["symbol_sound", 14, 15]);
                return a
            };
            a.__9_i = function() {
                var a = new egret.gui.UIAsset;
                this.__9 = a;
                this.__s(a, ["source", "x", "y"], ["symbol_forbid", 11, 12]);
                return a
            };
            return c
        } (egret.gui.Skin);
        d.SoundButtonSkin = g;
        g.prototype.__class__ = "skins.ui.SoundButtonSkin"
    })(d.ui || (d.ui = {}))
})(skins || (skins = {}));
var IRApp = function(d) {
    function f() {
        d.apply(this, arguments)
    }
    __extends(f, d);
    f.prototype.dataChanged = function() {
        d.prototype.dataChanged.call(this);
        this.imgIcon.source = this.data.image;
        this.labName.text = this.data.name;
        this.labIntro.text = alien.Utils.stringCut(this.data.description, 17)
    };
    return f
} (egret.gui.ItemRenderer);
IRApp.prototype.__class__ = "IRApp";
var MoveProgress = function(d) {
    function f() {
        d.apply(this, arguments);
        this.star2 = 44;
        this.star1 = 72
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this)
    };
    g.initWithConfig = function(d) {
        this._config = d;
        this.labTipStep1.text = d.star1.toString();
        this.labTipStep2.text = d.star2.toString();
        this.labStep.text = "0";
        this.pgbStep.value = 0
    };
    g.updateStep = function(d) {
        this.labStep.text = d.toString();
        d >= this._config.star1 ? this.pgbStep.value = this.star1: d >= this._config.star2 && (this.pgbStep.value = this.star2)
    };
    return f
} (egret.gui.SkinnableComponent);
MoveProgress.prototype.__class__ = "MoveProgress";
var Tutorial = function(d) {
    function f(e) {
        d.call(this);
        this._pointOffset = 0;
        this._option = e;
        this.width = e.width;
        this.height = e.height;
        this.addChild(this._container = new egret.DisplayObjectContainer);
        this._container.scrollRect = this.scroll = new egret.Rectangle(0, 0, this.width, this.height);
        this.addChild(this._pointContainer = new egret.DisplayObjectContainer);
        this._pointContainer.y = this.height + 5;
        this.touchEnabled = !0;
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    }
    __extends(f, d);
    var g = f.prototype;
    g.onTouchTap = function(d) {
        this.nextPage()
    };
    Object.defineProperty(g, "option", {
        get: function() {
            return this._option
        },
        enumerable: !0,
        configurable: !0
    });
    g.addBmp = function(d, c) {
        var a = new egret.Bitmap(RES.getRes(d));
        a.x = c * this.width + (this.width - a.width) / 2;
        this._container.addChild(a);
        a = new egret.Bitmap;
        a.x = this._pointOffset + c * (10 + this.option.pointGap);
        this._pointContainer.addChild(a)
    };
    g.show = function(d) {
        this._currentTutorial = d;
        this._pointOffset = (this.width - this._currentTutorial.length * (10 + this.option.pointGap) + this.option.pointGap) / 2;
        this._container.removeChildren();
        this._pointContainer.removeChildren();
        this._currentTutorial.forEach(this.addBmp, this);
        this.page = 0
    };
    Object.defineProperty(g, "page", {
        get: function() {
            return this._page
        },
        set: function(d) {
            0 > d || d >= this._currentTutorial.length || (this._page = d, this._pointContainer._children.forEach(function(c, a) {
                c.texture = RES.getRes(a == d ? this.option.pointsSelect: this.option.pointsNormal)
            },
            this), egret.Tween.get(this.scroll).to({
                x: d * this.width
            },
            300))
        },
        enumerable: !0,
        configurable: !0
    });
    g.nextPage = function() {
        this._page + 1 >= this._currentTutorial.length ? this.page = 0 : this.page++
    };
    return f
} (egret.DisplayObjectContainer);
Tutorial.prototype.__class__ = "Tutorial"; (function(d) { (function(f) {
        var g = function() {
            function c() {}
            c.centerPopUp = function(a) {
                a.top = a.bottom = a.left = a.right = NaN;
                a.verticalCenter = a.horizontalCenter = 0;
                var b = a.parent;
                b && ("validateNow" in a && a.validateNow(), a.x = 0.5 * (b.width - a.layoutBoundsWidth), a.y = 0.5 * (b.height - a.layoutBoundsHeight))
            };
            c.centerHorizontal = function(a) {
                a.top = a.bottom = a.left = a.right = NaN;
                a.horizontalCenter = 0;
                var b = a.parent;
                b && ("validateNow" in a && a.validateNow(), a.x = 0.5 * (b.width - a.layoutBoundsWidth))
            };
            c.centerVertical = function(a) {
                a.top = a.bottom = a.left = a.right = NaN;
                a.verticalCenter = 0;
                var b = a.parent;
                b && ("validateNow" in a && a.validateNow(), a.y = 0.5 * (b.height - a.layoutBoundsHeight))
            };
            c.notCenterPopUp = function(a) {
                a.verticalCenter = a.horizontalCenter = NaN
            };
            c.getCenterPos = function(a) {
                var b = 0,
                c = 0,
                d = a.parent;
                d && ("validateNow" in a && a.validateNow(), b = 0.5 * (d.width - a.layoutBoundsWidth), c = 0.5 * (d.height - a.layoutBoundsHeight));
                return {
                    x: b,
                    y: c
                }
            };
            c.getCenterHPos = function(a) {
                var b = 0,
                c = a.parent;
                c && ("validateNow" in a && a.validateNow(), b = 0.5 * (c.width - a.layoutBoundsWidth));
                return b
            };
            c.getCenterVPos = function(a) {
                var b = 0,
                c = a.parent;
                c && ("validateNow" in a && a.validateNow(), b = 0.5 * (c.height - a.layoutBoundsHeight));
                return b
            };
            c.transDirection = function(a) {
                var b;
                switch (a) {
                case "up":
                    b = 0;
                    break;
                case "right":
                    b = 1;
                    break;
                case "bottom":
                    b = 2;
                    break;
                case "left":
                    b = 3
                }
                return b
            };
            return c
        } ();
        f.Utils = g;
        g.prototype.__class__ = "alien.dialogEffect.Utils";
        var e = function() {
            function c() {}
            var a = c.prototype;
            a.show = function(a, c, d, e, f) {
                a.horizontalCenter = a.verticalCenter = 0;
                c.addElement(a)
            };
            a.hide = function(a, c, d, e, f) {
                c.removeElement(a)
            };
            return c
        } ();
        f.None = e;
        e.prototype.__class__ = "alien.dialogEffect.None";
        e = function() {
            function c() {}
            var a = c.prototype;
            a.show = function(a, d, e, f, g) {
                a.horizontalCenter = a.verticalCenter = 0;
                a.alpha = 0;
                d.addElement(a);
                d = g && g.duration || c.DEFAULT_DURATION;
                egret.Tween.get(a).to({
                    alpha: 1
                },
                d)
            };
            a.hide = function(a, d, e, f, g) {
                e = g && g.duration || c.DEFAULT_DURATION;
                egret.Tween.get(a).to({
                    alpha: 0
                },
                e).call(function() {
                    d.removeElement(a)
                },
                this)
            };
            c.DEFAULT_DURATION = 200;
            return c
        } ();
        f.Fade = e;
        e.prototype.__class__ = "alien.dialogEffect.Fade";
        e = function() {
            function c() {}
            var a = c.prototype;
            a.show = function(a, e, f, E, t) {
                c.outPos || (c.outPos = [[0, -d.StageProxy.height], [d.StageProxy.width, 0], [0, d.StageProxy.height], [ - d.StageProxy.width, 0]]);
                g.notCenterPopUp(a);
                e.addElement(a);
                e = c.outPos[g.transDirection(t.direction)];
                a.x = 0 == e[0] ? g.getCenterHPos(a) : e[0];
                a.y = 0 == e[1] ? g.getCenterVPos(a) : e[1];
                f = g.getCenterPos(a);
                e = t && t.duration || c.DEFAULT_DURATION;
                f = {
                    x: f.x,
                    y: f.y
                };
                t && t.withFade && (a.alpha = 0, f.alpha = 1);
                egret.Tween.get(a).to(f, e, egret.Ease.getElasticOut(1, 2))
            };
            a.hide = function(a, d, e, f, t) {
                f = c.outPos[g.transDirection(t.direction)];
                e = t && t.duration || c.DEFAULT_DURATION;
                f = {
                    x: 0 == f[0] ? g.getCenterHPos(a) : f[0],
                    y: 0 == f[1] ? g.getCenterVPos(a) : f[1]
                };
                t && t.withFade && (a.alpha = 1, f.alpha = 0);
                egret.Tween.get(a).to(f, e, egret.Ease.getElasticIn(1, 2)).call(function() {
                    d.removeElement(a);
                    g.centerPopUp(a)
                },
                this)
            };
            c.DEFAULT_DURATION = 500;
            return c
        } ();
        f.Flew = e;
        e.prototype.__class__ = "alien.dialogEffect.Flew";
        e = function() {
            function c() {}
            var a = c.prototype;
            a.show = function(a, d, e, f, t) {
                e = t && t.duration || c.DEFAULT_DURATION;
                g.centerPopUp(a);
                a.scaleX = a.scaleY = 0;
                f = {
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                };
                t && t.withFade && (a.alpha = 0, f.alpha = 1);
                d.addElement(a);
                egret.Tween.get(a).to(f, e)
            };
            a.hide = function(a, d, e, f, g) {
                e = g && g.duration || c.DEFAULT_DURATION;
                a.scaleX = a.scaleY = 1;
                f = {
                    alpha: 0,
                    scaleX: 0,
                    scaleY: 0
                };
                g && g.withFade && (a.alpha = 1, f.alpha = 0);
                egret.Tween.get(a).to(f, e).call(function() {
                    d.removeElement(a);
                    a.scaleX = a.scaleY = 1
                },
                this)
            };
            c.DEFAULT_DURATION = 200;
            return c
        } ();
        f.Scale = e;
        e.prototype.__class__ = "alien.dialogEffect.Scale"
    })(d.dialogEffect || (d.dialogEffect = {}))
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function c() {
            this.mapSceneDef = new d.HashMap;
            this.mapScene = new d.HashMap;
            RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);
            RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this)
        }
        var a = c.prototype;
        c.getInstance = function() {
            void 0 == c._instance && (c._instance = new c);
            return c._instance
        };
        c.init = function(a, d) {
            void 0 === d && (d = "loading");
            c.getInstance().init(a, d)
        };
        c.addTopScene = function(a, d) {
            c.getInstance().addTopScene(a, d)
        };
        c.register = function(a, d, e) {
            void 0 === e && (e = null);
            c.getInstance().register(a, d, e)
        };
        c.show = function(a, d, e, f) {
            void 0 === d && (d = null);
            void 0 === e && (e = null);
            void 0 === f && (f = null);
            c.getInstance().show(a, d, e, f)
        };
        c.back = function(a, d, e) {
            void 0 === a && (a = null);
            void 0 === d && (d = null);
            void 0 === e && (e = null);
            return c.getInstance().back(a, d, e)
        };
        a.init = function(a, c) {
            void 0 === c && (c = "loading");
            this.uiStage = a;
            this.loadingSceneName = c;
            this.uiStage.addElement(this.unfixedLayer = new egret.gui.Group);
            this.uiStage.addElement(this.fixedLayer = new egret.gui.Group)
        };
        a.onResourceLoadComplete = function(a) {
            a.groupName == this.currentLoadGroup && this.nextShowEntity && (this.show(this.nextShowEntity.name, this.nextShowEntity.params, this.nextShowEntity.effectDef, this.nextShowEntity.callback, this.nextShowEntity.back), this.nextShowEntity = this.currentLoadGroup = null)
        };
        a.onResourceProgress = function(a) {
            a.groupName == this.currentLoadGroup && d.Dispatcher.dispatch(EventNames.LOADING_PROGRESS, {
                itemsLoaded: a.itemsLoaded,
                itemsTotal: a.itemsTotal
            })
        };
        a.addTopScene = function(a, c) {
            var d = new c;
            this.fixedLayer.addElement(d);
            d.onAdded(null)
        };
        a.register = function(a, c, d) {
            void 0 === d && (d = null);
            this.mapSceneDef.put(a, new g(c, d))
        };
        a.show = function(a, c, f, g, t) {
            void 0 === c && (c = null);
            void 0 === f && (f = null);
            void 0 === g && (g = null);
            void 0 === t && (t = !1);
            if (this.currentSceneName != a) {
                var p, k;
                if (this.mapScene.containsKey(a)) k = this.mapScene.get(a);
                else {
                    var l = this.mapSceneDef.get(a);
                    l.resPack && !RES.isGroupLoaded(l.resPack) ? (this.nextShowEntity = new e(a, c, f, g, t), this.currentLoadGroup = l.resPack, RES.loadGroup(l.resPack), a = this.loadingSceneName, k = this.mapScene.get(a)) : (k = new l.sceneDef, this.mapScene.put(a, k))
                } ! p && this.currentSceneName ? (p = f ? new f: new d.sceneEffect.None, this.currentScene.onRemoved()) : p = new d.sceneEffect.FadeBlack;
                this.currentSceneName != a && (k.touchChildren = !1, p.handover(this.currentScene, k, this.unfixedLayer,
                function() {
                    k.touchChildren = !0;
                    g && g()
                }), this.currentScene = k, t ? this.lastSceneName = a: a != this.loadingSceneName && (this.currentScene.lastSceneName = this.lastSceneName, this.lastSceneName = a), this.currentSceneName = a, this.currentScene.onAdded(c))
            }
        };
        a.back = function(a, c, d) {
            void 0 === a && (a = null);
            void 0 === c && (c = null);
            void 0 === d && (d = null);
            return this.currentScene.lastSceneName ? (this.show(this.currentScene.lastSceneName, a, c, d, !0), !0) : !1
        };
        return c
    } ();
    d.SceneManager = f;
    f.prototype.__class__ = "alien.SceneManager";
    var g = function() {
        return function(c, a) {
            void 0 === a && (a = null);
            this.sceneDef = c;
            this.resPack = a
        }
    } ();
    d.SceneConfig = g;
    g.prototype.__class__ = "alien.SceneConfig";
    var e = function() {
        return function(c, a, b, d, e) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            void 0 === d && (d = null);
            void 0 === e && (e = !1);
            this.back = this.callback = this.effectDef = this.params = null;
            this.name = c;
            this.params = a;
            this.effectDef = b;
            this.callback = d;
            this.back = e
        }
    } ();
    d.ShowEntity = e;
    e.prototype.__class__ = "alien.ShowEntity"
})(alien || (alien = {}));
var GameStage = function(d) {
    function f(e) {
        d.call(this);
        this.isGameOver = this.playing = !1;
        this.adStep = this.humanCount = this.fallingCounter = this.currentRotation = 0;
        this.cross = [[0, -1], [GameConfig.size + 1, 0], [0, GameConfig.size + 1], [ - 1, 0]];
        this.surround = [[0, -1], [GameConfig.size + 1, -1], [GameConfig.size + 1, 0], [GameConfig.size + 1, GameConfig.size + 1], [0, GameConfig.size + 1], [ - 1, GameConfig.size + 1], [ - 1, 0], [ - 1, -1]];
        this.resultHandler = e;
        Block.init();
        this.init()
    }
    __extends(f, d);
    var g = f.prototype;
    g.init = function() {
        this.addChild(this.container = new egret.DisplayObjectContainer);
        this.container.x = alien.StageProxy.width / 2;
        this.container.y = alien.StageProxy.width / 2;
        this.blocks = [];
        this.movableBlocks = [];
        this.container.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this);
        this.lab = new egret.TextField;
        this.lab.textColor = 16777215
    };
    g.restart = function(d) {
        this.levelConfig = d;
        this.reload()
    };
    g.reload = function() {
        4 < this.levelConfig.id && (GameData.getInstance().interstitialShow && this.adStep++, this.lab.text = GameData.getInstance().interstitialShow + "," + this.adStep, 0 == this.adStep % 5 && (GameData.getInstance().interstitialShow = !1, alien.Global.showInterstitial()));
        GameData.getInstance().needShowAppRecommend = !0;
        this.humanCount = this.step = 0;
        this.blocks.splice(0);
        this.movableBlocks.splice(0);
        this.container.removeChildren();
        this.currentRotation = this.container.rotation = 0;
        this.playing = !1;
        this.humanCount = this.fallingCounter = 0;
        this.isGameOver = !1;
        this.addBlocks()
    };
    g.addBlocks = function() {
        this.levelConfig.map.forEach(function(d, c) {
            if (0 != d) {
                var a = c % GameConfig.width,
                b = Math.floor(c / GameConfig.width),
                f = Block.create(d);
                f.x = (a - GameConfig.width / 2) * GameConfig.size;
                f.y = (b - GameConfig.height / 2) * GameConfig.size;
                1 > d ? this.container.addChildAt(f, 0) : this.container.addChild(f);
                7 == d && this.humanCount++;
                this.blocks.push(f);
                3 <= d && this.movableBlocks.push(f)
            }
        },
        this)
    };
    g.removeBlock = function(d) {
        this.blocks.splice(this.blocks.indexOf(d), 1);
        d = this.movableBlocks.indexOf(d);
        0 <= d && this.movableBlocks.splice(d, 1)
    };
    g.turnLeft = function() {
        this.playTurn( - 90)
    };
    g.turnRight = function() {
        this.playTurn(90)
    };
    g.playTurn = function(d) {
        this.playing || this.isGameOver || (SoundManager.getInstance().playSound("whoosh2_mp3"), this.playing = !0, this.step++, this.currentRotation += d, egret.Tween.get(this.container).to({
            rotation: this.currentRotation
        },
        200).call(function() {
            0 > this.currentRotation ? this.currentRotation += 360 : 360 <= this.currentRotation && (this.currentRotation -= 360);
            this.sortBlocks();
            this.container.rotation = this.currentRotation;
            this.adjustBlock(d)
        },
        this))
    };
    g.sortBlocks = function() {
        var d = this.currentRotation;
        this.movableBlocks = this.movableBlocks.sort(function(c, a) {
            switch (d) {
            case 0:
                return a.y - c.y;
            case 90:
                return a.x - c.x;
            case 180:
                return c.y - a.y;
            case 270:
                return c.x - a.x
            }
        })
    };
    g.adjustBlock = function(d) {
        this.blocks.forEach(function(c) {
            5 < c.data && c.adjustBody(d)
        },
        this);
        this.playFall()
    };
    g.playFall = function() {
        this.addEventListener(egret.Event.ENTER_FRAME, this.onEnterFrame, this);
        this.movableBlocks.forEach(function(d) {
            d.rotateDownPoint(this.currentRotation);
            d.isFalling = !0;
            this.fallingCounter++
        },
        this)
    };
    g.onEnterFrame = function(d) {
        this.checkForCollision();
        this.update()
    };
    g.checkForCollision = function() {
        this.movableBlocks.some(function(d) {
            if (d.isFalling && !d.playingExplosion) {
                var c = d.x + d.hitX,
                a = d.y + d.hitY;
                if ( - 340 > c || 340 < c || -340 > a || 340 < a) {
                    this.container.removeChild(d);
                    this.removeBlock(d);
                    if (6 == d.data || 7 == d.data) return this.gameOver(!1, "\u8d8a\u754c\u4e86"),
                    !0;
                    this.checkFalling()
                } ! (c = this.container.hitTest(c, a)) || c.isFalling || c.playingExplosion || (d.isFalling = !1, this.checkSurround(d), this.movableBlocks.forEach(function(a) {
                    6 == a.data && this.infect(a)
                },
                this), this.checkFalling())
            }
        },
        this)
    };
    g.checkFalling = function() {
        this.fallingCounter--;
        0 == this.fallingCounter && (this.playing = !1, this.removeEventListener(egret.Event.ENTER_FRAME, this.onEnterFrame, this), this.fallingFinished())
    };
    g.getSurroundBlock = function(d, c) {
        void 0 === c && (c = !0);
        var a = []; (c ? this.cross: this.surround).forEach(function(b) { (b = this.container.hitTest(d.x + b[0], d.y + b[1])) && !b.isFalling && a.push(b)
        },
        this);
        return a
    };
    g.onTouchTap = function(d) {
        this.sortBlocks();
        this.explosion(d.target);
        this.playFall()
    };
    g.explosion = function(d) {
        5 == d.data && (this.playExplosion(d), this.getSurroundBlock(d, !1).forEach(function(c) {
            2 == c.data ? this.playExplosion(c) : 7 == c.data || 6 == c.data ? this.gameOver(!1, "\u70b8\u6b7b\u4e86\uff01") : c.playingExplosion || this.explosion(c)
        },
        this))
    };
    g.playExplosion = function(d) {
        SoundManager.getInstance().playSound("explosion_mp3");
        this.removeBlock(d);
        d.playExplosion(this.container.removeChild.bind(this.container, d))
    };
    g.checkSurround = function(d) {
        this.getSurroundBlock(d).some(function(c) {
            if ((6 == d.data || 7 == d.data) && 3 == c.data) return this.gameOver(!1, "\u624e\u5230\u4e86\u523a"),
            !0;
            if ((6 == c.data || 7 == c.data) && 3 == d.data) return this.gameOver(!1, "\u88ab\u523a\u624e\u4e86"),
            !0
        },
        this)
    };
    g.infect = function(d) {
        this.getSurroundBlock(d).forEach(function(c) {
            7 == c.data && (this.changeToZombie(c), this.infect(c))
        },
        this)
    };
    g.changeToZombie = function(d) {
        SoundManager.getInstance().playSound("bite_mp3");
        d.changeToZombie();
        this.humanCount--;
        return 0 == this.humanCount ? (this.gameOver(!0, "\u6210\u529f\u4e86:" + this.step + "\u6b65"), !0) : !1
    };
    g.fallingFinished = function() {};
    g.gameOver = function(d, c) {
        if (!this.isGameOver) {
           var insertAds=setTimeout(" mobConfig.stop()",1000);
            console.log(c);
            this.isGameOver = !0;
            var a = 0;
            d && (a = this.step >= this.levelConfig.star1 ? 1 : this.step >= this.levelConfig.star2 ? 2 : 3, GameData.getInstance().saveData(this.levelConfig.id, a));
            this.resultHandler(d, a);
        }
    };
    g.update = function() {
        this.movableBlocks.forEach(function(d) {
            d.playingExplosion || d.update()
        },
        this)
    };
    return f
} (egret.DisplayObjectContainer);
GameStage.prototype.__class__ = "GameStage";
var SceneNames = function() {
    function d() {}
    d.LOADING = "loading";
    d.CREDITS = "credits";
    d.COVER = "cover";
    d.GUIDE = "guide";
    d.LEVEL = "level";
    d.LOADING_TIP = "loadingTip";
    d.PLAY = "play";
    d.RESULT = "result";
    d.COMMON = "common";
    return d
} ();
SceneNames.prototype.__class__ = "SceneNames"; (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.btnMusic_i(), this.btnSound_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.btnSound_i = function() {
                var a = new egret.gui.ToggleButton;
                this.btnSound = a;
                this.__s(a, ["label", "name", "skinName", "x", "y"], ["\u5207\u6362\u6309\u94ae", "sound", d.ui.SoundButtonSkin, 375, 698]);
                return a
            };
            a.btnMusic_i = function() {
                var a = new egret.gui.ToggleButton;
                this.btnMusic = a;
                this.__s(a, ["label", "name", "skinName", "x", "y"], ["\u5207\u6362\u6309\u94ae", "music", d.ui.MusicButtonSkin, 45, 698]);
                return a
            };
            c._skinParts = ["btnMusic", "btnSound"];
            return c
        } (egret.gui.Skin);
        f.SceneCommonSkin = g;
        g.prototype.__class__ = "skins.scenes.SceneCommonSkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.__3_i(), this.imgGameLogo_i(), this.__4_i(), this.buttonLayer_i(), this.grpPlatform_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["horizontalCenter", "source", "y"], [0, "logo_company", 685]);
                return a
            };
            a.__5_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_start", "start", 197, 0, 0]);
                return a
            };
            a.__6_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_credits", "credits", 197, 20, 20]);
                return a
            };
            a.__7_i = function() {
                var a = new egret.gui.VerticalLayout;
                a.gap = 10;
                return a
            };
            a.__8_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["name", "source", "x", "y"], ["appStore", "icon_app_stroe", 0, 0]);
                return a
            };
            a.__9_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["name", "source", "x", "y"], ["googlePlay", "icon_google_play", 219, 0]);
                return a
            };
            a.btnMoreGame_i = function() {
                var a = new alien.IconButton;
                this.btnMoreGame = a;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_2_bg", 73, "txt_more_games", "moreGames", 197, 10, 10]);
       
                return a
            };
            a.buttonLayer_i = function() {
                var a = new egret.gui.Group;
                this.buttonLayer = a;
                this.__s(a, ["horizontalCenter", "y"], [0, 375]);
                a.layout = this.__7_i();
                a.elementsContent = [this.__5_i(), this.btnMoreGame_i(), this.__6_i()];
                                
                return a
            };
            a.grpPlatform_i = function() {
                var a = new egret.gui.Group;
                this.grpPlatform = a;
                this.__s(a, ["x", "y"], [38, 626]);
                a.elementsContent = [this.__8_i(), this.__9_i()];
                return a
            };
            a.imgGameLogo_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgGameLogo = a;
                this.__s(a, ["source", "x", "y"], ["logo_game", 19, 133]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "scene_bg_png";
                return a
            };
            c._skinParts = ["imgGameLogo", "btnMoreGame", "buttonLayer", "grpPlatform"];
            return c
        } (egret.gui.Skin);
        d.SceneCoverSkin = g;
        g.prototype.__class__ = "skins.scenes.SceneCoverSkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {})); (function(d) { (function(d) {
        var g = function(d) {
            function c() {
                d.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.__3_i(), this.__4_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, d);
            var a = c.prototype;
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "scene_bg_png";
                return a
            };
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["source", "x", "y"], ["credits", 44, 107]);
                return a
            };
            return c
        } (egret.gui.Skin);
        d.SceneCreditsSkin = g;
        g.prototype.__class__ = "skins.scenes.SceneCreditsSkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.__3_i(), this.list_i(), this.uiLayer_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new alien.IconButton;
                this.__s(a, ["height", "iconSource", "name", "width"], [48, "button_back", "back", 66]);
                return a
            };
            a.list_i = function() {
                var a = new egret.gui.List;
                this.list = a;
                this.__s(a, "bottom horizontalCenter itemRendererSkinName skinName top width".split(" "), [120, 0, d.components.IRLevelSkin, d.components.LevelListSkin, 120, 400]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "scene_bg_png";
                return a
            };
            a.uiLayer_i = function() {
                var a = new egret.gui.Group;
                this.uiLayer = a;
                this.__s(a, ["x", "y"], [60, 61]);
                a.elementsContent = [this.__4_i()];
                return a
            };
            c._skinParts = ["list", "uiLayer"];
            return c
        } (egret.gui.Skin);
        f.SceneLevelSkin = g;
        g.prototype.__class__ = "skins.scenes.SceneLevelSkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.__3_i(), this.__4_i(), this.labVersion_i(), this.__5_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new egret.gui.UIAsset;
                this.__s(a, ["horizontalCenter", "source", "verticalCenter"], [0, "logo_company_big", -150]);
                return a
            };
            a.__5_i = function() {
                var a = new egret.gui.Group;
                this.__s(a, ["horizontalCenter", "verticalCenter", "width"], [0, 50, 315]);
                a.elementsContent = [this.progressBar_i(), this.imgHuman_i(), this.imgZombie_i()];
                return a
            };
            a.imgHuman_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgHuman = a;
                this.__s(a, ["source", "x", "y"], ["human_small", 286, -10]);
                return a
            };
            a.imgZombie_i = function() {
                var a = new egret.gui.UIAsset;
                this.imgZombie = a;
                this.__s(a, ["source", "x", "y"], ["zombie_small", 110, -10]);
                return a
            };
            a.labVersion_i = function() {
                var a = new egret.gui.Label;
                this.labVersion = a;
                this.__s(a, ["bottom", "fontFamily", "horizontalCenter", "size", "text"], [50, "\u5fae\u8f6f\u96c5\u9ed1", 0, 20, "Version:1.0"]);
                return a
            };
            a.progressBar_i = function() {
                var a = new egret.gui.ProgressBar;
                this.progressBar = a;
                this.__s(a, ["height", "skinName", "width"], [10, d.components.LoadingProgressBarSkin, 300]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.Rect;
                this.__s(a, ["fillColor", "percentHeight", "percentWidth"], [2176059, 100, 100]);
                return a
            };
            c._skinParts = ["labVersion", "progressBar", "imgHuman", "imgZombie"];
            return c
        } (egret.gui.Skin);
        f.SceneLoadingSkin = g;
        g.prototype.__class__ = "skins.scenes.SceneLoadingSkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {})); (function(d) { (function(f) {
        var g = function(e) {
            function c() {
                e.call(this);
                this.__s = egret.gui.setProperties;
                this.__s(this, ["height", "width"], [800, 480]);
                this.elementsContent = [this.__3_i(), this.gameStageContainer_i(), this.uiLayer_i()];
                this.states = [new egret.gui.State("normal", []), new egret.gui.State("disabled", [])]
            }
            __extends(c, e);
            var a = c.prototype;
            Object.defineProperty(a, "skinParts", {
                get: function() {
                    return c._skinParts
                },
                enumerable: !0,
                configurable: !0
            });
            a.__4_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "height horizontalCenter iconSource name width y".split(" "), [46, -80, "btn_left", "turnLeft", 90, 630]);
                return a
            };
            a.__5_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "height horizontalCenter iconSource name scaleX width y".split(" "), [46, 80, "btn_left", "turnRight", -1, 90, 630]);
                return a
            };
            a.__6_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_0_bg", 57, "symbol_pause", "pause", 60, 395, 95]);
                return a
            };
            a.__7_i = function() {
                var a = new alien.IconButton;
                this.__s(a, "bgSource height iconSource name width x y".split(" "), ["button_0_bg", 57, "symbol_reload", "reload", 60, 324, 95]);
                return a
            };
            a.gameStageContainer_i = function() {
                var a = new egret.gui.UIAsset;
                this.gameStageContainer = a;
                this.__s(a, ["height", "touchChildren", "percentWidth", "y"], [480, !0, 100, 150]);
                return a
            };
            a.moveProgress_i = function() {
                var a = new MoveProgress;
                this.moveProgress = a;
                this.__s(a, ["skinName", "x", "y"], [d.components.MoveProgressSkin, 25, 95]);
                return a
            };
            a.__3_i = function() {
                var a = new egret.gui.UIAsset;
                a.source = "scene_bg_png";
                return a
            };
            a.uiLayer_i = function() {
                var a = new egret.gui.Group;
                this.uiLayer = a;
                this.__s(a, ["percentHeight", "percentWidth"], [100, 100]);
                a.elementsContent = [this.__4_i(), this.__5_i(), this.__6_i(), this.__7_i(), this.moveProgress_i()];
                return a
            };
            c._skinParts = ["gameStageContainer", "moveProgress", "uiLayer"];
            return c
        } (egret.gui.Skin);
        f.ScenePlaySkin = g;
        g.prototype.__class__ = "skins.scenes.ScenePlaySkin"
    })(d.scenes || (d.scenes = {}))
})(skins || (skins = {}));
var IRLevel = function(d) {
    function f() {
        d.call(this)
    }
    __extends(f, d);
    f.prototype.dataChanged = function() {
        this.labNum.text = (this.data.id + 1).toString();
        var d = 4;
        this.data.unlock && (d = this.data.star);
        this.imgBottom.source = f.bottomRes[d]
    };
    f.bottomRes = ["star_0", "star_1", "star_2", "star_3", "level_item_lock"];
    return f
} (egret.gui.ItemRenderer);
IRLevel.prototype.__class__ = "IRLevel";
var PanelMenu = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.panels.PanelMenuSkin
    }
    __extends(f, d);
    var g = f.prototype;
    f.getInstance = function() {
        void 0 == this._instance && (this._instance = new f);
        return this._instance
    };
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.btnMoreGame.iconSource = alien.Global.getInstance().isNative ? "txt_recommendation": "txt_more_games";
        this.buttonLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonTap, this)
    };
    g.onButtonTap = function(d) {
        this._callback.call(this, d.target.name);
        this.close()
    };
    g.show = function(d) {
        SoundManager.getInstance().playSound("pop_mp3");
        this._callback = d;
        this.popup(this.close.bind(this))
    };
    return f
} (PanelBase);
PanelMenu.prototype.__class__ = "PanelMenu";
var PanelRecommend = function(d) {
    function f() {
        d.call(this);
        this._lock = !1;
        this.skinName = skins.panels.PanelRecommendSkin;
        this._loader = new egret.URLLoader;
        this._loader.addEventListener(egret.Event.COMPLETE, this.onLoaded, this);
        this._request = new egret.URLRequest(GameConfig.appRecommendUrl)
    }
    __extends(f, d);
    var g = f.prototype;
    f.getInstance = function() {
        void 0 == this._instance && (this._instance = new f);
        return this._instance
    };
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.list.itemRenderer = new egret.gui.ClassFactory(IRApp);
        this.list.dataProvider = this._appCollection = new egret.gui.ArrayCollection;
        this.list.addEventListener(egret.gui.IndexChangeEvent.CHANGE, this.onItemSelect, this);
        this.buttonClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCloseButtonTap, this)
    };
    g.onCloseButtonTap = function(d) {
        this.close()
    };
    g.onItemSelect = function(d) {
        alien.Global.jumpApp(this.list.selectedItem);
        this.list.selectedIndex = -1
    };
    g.onLoaded = function(d) {
        this.labLoading.visible = !1;
        this._appCollection.source = JSON.parse(this._loader.data).data
    };
    g.show = function() {
        this._lock || (this._loader.load(this._request), this._lock = !0);
        SoundManager.getInstance().playSound("pop_mp3");
        this.popup(this.close.bind(this))
    };
    return f
} (PanelBase);
PanelRecommend.prototype.__class__ = "PanelRecommend";
var PanelResult = function(d) {
    function f() {
        d.call(this);
        this.states = ["victory", "failed"];
        this._state = 0;
        this.skinName = skins.panels.PanelResultSkin
    }
    __extends(f, d);
    var g = f.prototype;
    f.getInstance = function() {
        void 0 == this._instance && (this._instance = new f);
        return this._instance
    };
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.buttonLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonTap, this)
    };
    g.onButtonTap = function(d) {
        this._callback.call(this, d.target.name);
        this._callback = null;
        this.close()
    };
    g.getCurrentSkinState = function() {
        return this.states[this._state]
    };
    g.show = function(d, c, a) {
        this._callback = a;
        this.popup();
        this.starBar.show(c);
        this._state = d ? 0 : 1;
        this.invalidateSkinState()
    };
    g.close = function() {
        this._callback && this._callback("level");
        d.prototype.close.call(this)
    };
    return f
} (PanelBase);
PanelResult.prototype.__class__ = "PanelResult";
var PanelTutorial = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.panels.PanelTutorialSkin
    }
    __extends(f, d);
    var g = f.prototype;
    f.getInstance = function() {
        void 0 == this._instance && (this._instance = new f);
        return this._instance
    };
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.tutorialContainer.source = this._tutorial = new Tutorial(GameConfig.tutorialConfig);
        this.buttonClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCloseButtonTap, this)
    };
    g.onCloseButtonTap = function(d) {
        this.close()
    };
    g.show = function(d) {
        SoundManager.getInstance().playSound("pop_mp3");
        this.popup(this.close.bind(this));
        this._tutorial.show(d)
    };
    return f
} (PanelBase);
PanelTutorial.prototype.__class__ = "PanelTutorial"; (function(d) {
    var f = function() {
        function d(c, a, b, e) {
            void 0 === e && (e = !0);
            this.oldPos = {};
            this._r = 0;
            this.target = c;
            this.offsetScale = a;
            this.duration = b;
            this.oldPos.x = c.x;
            this.oldPos.y = c.y;
            e && this.play()
        }
        var e = d.prototype;
        e.play = function() {
            this.target.stage && (this.target.anchorX = 0.5, this.target.anchorY = 1, this.target.x = this.oldPos.x + this.target.width / 2, this.target.y = this.oldPos.y + this.target.height, this.r = 0, this._tween = egret.Tween.get(this, {
                loop: !0
            }).to({
                r: 2 * Math.PI
            },
            1E3 * this.duration).call(function() {
                this._tween = null
            },
            this))
        };
        Object.defineProperty(e, "r", {
            get: function() {
                return this._r
            },
            set: function(c) {
                this._r = c;
                this.target.scaleX = Math.cos(this._r) * this.offsetScale + 1;
                this.target.scaleY = Math.cos(this._r - Math.PI / 2) * this.offsetScale + 1
            },
            enumerable: !0,
            configurable: !0
        });
        e.stop = function() {
            egret.Tween.removeTweens(this)
        };
        Object.defineProperty(e, "playing", {
            get: function() {
                return null != this._tween
            },
            enumerable: !0,
            configurable: !0
        });
        return d
    } ();
    d.Breathe = f;
    f.prototype.__class__ = "alien.Breathe"
})(alien || (alien = {})); (function(d) {
    var f = function() {
        function f() {
            this._pupUpStack = []
        }
        var e = f.prototype;
        f.getInstance = function() {
            void 0 == f._instance && (f._instance = new f);
            return f._instance
        };
        f.addPopUp = function(c, a, b, d, e) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            void 0 === d && (d = null);
            void 0 === e && (e = !0);
            f.getInstance().addPopUp(c, a, b, d, e)
        };
        f.removePopUp = function(c, a, b) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            f.getInstance().removePopUp(c, a, b)
        };
        f.removeTopPupUp = function() {
            return f.getInstance().removeTopPupUp()
        };
        e.addPopUp = function(c, a, b, e, f) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            void 0 === e && (e = null);
            void 0 === f && (f = !0);
            c.parent || (this._pupUpStack.unshift({
                target: c,
                modalTouchFun: e,
                modal: f
            }), this.updateModalMask(this._pupUpStack[0]), this.createEffectInstance(a).show(c, d.StageProxy.uiStage.popUpContainer,
            function() {},
            this, b))
        };
        e.removePopUp = function(c, a, b) {
            void 0 === a && (a = null);
            void 0 === b && (b = null);
            if (c.parent) {
                this.getInStack(c, !0);
                var e;
                d.Utils.foreach(this._pupUpStack,
                function(a, b) {
                    return a.modal ? (e = a, !1) : !0
                },
                this);
                e ? this.updateModalMask(e) : this.setModalMaskVisible(!1);
                this.createEffectInstance(a).hide(c, d.StageProxy.uiStage.popUpContainer,
                function() {},
                this, b)
            }
        };
        e.removeTopPupUp = function() {
            return 0 < d.StageProxy.uiStage.popUpContainer.numElements ? (d.StageProxy.uiStage.popUpContainer.getElementAt(d.StageProxy.uiStage.popUpContainer.numElements - 1).close(), !0) : !1
        };
        e.getInStack = function(c, a) {
            void 0 === a && (a = !1);
            var b;
            d.Utils.foreach(this._pupUpStack,
            function(a, d) {
                return a.target == c ? (b = {
                    item: a,
                    index: d
                },
                !1) : !0
            },
            this);
            b && a && this._pupUpStack.splice(b.index, 1);
            return b
        };
        e.createEffectInstance = function(c) {
            void 0 === c && (c = null);
            return c ? new c: new d.dialogEffect.None
        };
        e.onModalMaskTap = function(c) { (c = this._pupUpStack[0]) && c.modal && c.modalTouchFun && c.modalTouchFun()
        };
        e.updateModalMask = function(c) {
            var a = d.StageProxy.uiStage.popUpContainer.getElementIndex(this._modalMask);
            c = d.StageProxy.uiStage.popUpContainer.getElementIndex(c.target);
            a != c - 1 && this.setModalMaskVisible(!0, c)
        };
        e.setModalMaskVisible = function(c, a) {
            void 0 === a && (a = -1);
            c ? (this.modalMask.fillColor = f.modalMaskColor, this.modalMask.fillAlpha = f.modalMaskAlpha, this.modalMask.alpha = 0, 0 <= a ? (this.setModalMaskVisible(!0), d.StageProxy.uiStage.popUpContainer.addElementAt(this.modalMask, a)) : d.StageProxy.uiStage.popUpContainer.addElement(this.modalMask), egret.Tween.get(this.modalMask).to({
                alpha: 1
            },
            f.modalMaskDuration)) : this.modalMask.parent && egret.Tween.get(this.modalMask).to({
                alpha: 0
            },
            f.modalMaskDuration).call(function(a) {
                d.StageProxy.uiStage.popUpContainer.removeElement(a)
            },
            this, [this.modalMask])
        };
        Object.defineProperty(e, "modalMask", {
            get: function() {
                this._modalMask || (this._modalMask = new egret.gui.Rect, this._modalMask.width = d.StageProxy.width, this._modalMask.height = d.StageProxy.height, this._modalMask.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onModalMaskTap, this));
                return this._modalMask
            },
            enumerable: !0,
            configurable: !0
        });
        f.modalMaskColor = 0;
        f.modalMaskAlpha = 0.5;
        f.modalMaskDuration = 200;
        return f
    } ();
    d.PopUpManager = f;
    f.prototype.__class__ = "alien.PopUpManager"
})(alien || (alien = {}));
var AssetAdapter = function() {
    function d() {}
    d.prototype.getAsset = function(d, g, e, c) {
        function a(a) {
            g.call(e, a, d)
        }
        c = d;
        d.prototype && (c = new d);
        c instanceof egret.DisplayObject || c instanceof egret.Texture ? g.call(e, c, d) : "string" == typeof d ? RES.hasRes(d) ? RES.getResAsync(d, a, this) : RES.getResByUrl(d, a, this) : g.call(e, c, d)
    };
    return d
} ();
AssetAdapter.prototype.__class__ = "AssetAdapter";
var SceneCommon = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.SceneCommonSkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnsTap, this);
        this.btnMusic.selected = SoundManager.getInstance().musicMute;
        this.btnSound.selected = SoundManager.getInstance().soundMute
    };
    g.onBtnsTap = function(d) {
        if (d.target && d.target.name) switch (d.target.name) {
        case "music":
            SoundManager.getInstance().switchMusic();
            break;
        case "sound":
            SoundManager.getInstance().switchSound()
        }
    };
    return f
} (alien.SceneBase);
SceneCommon.prototype.__class__ = "SceneCommon";
var SceneCover = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.SceneCoverSkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.btnMoreGame.iconSource = alien.Global.getInstance().isNative ? "txt_recommendation": "txt_more_games";
        this.buttonLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onButtonTap, this);
        this.grpPlatform.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onGrpPlatformTap, this);
        GameData.getInstance().needShowAppRecommend && (PanelRecommend.getInstance().show(), GameData.getInstance().needShowAppRecommend = !1)
    };
    g.onButtonTap = function(d) {
        switch (d.target.name) {
        case "start":
            alien.SceneManager.show(SceneNames.LEVEL, null, alien.sceneEffect.Fade);
            break;
        case "moreGames":
            window.location.href=mobConfig.mainpage;
            // alien.Global.getInstance().isNative ? PanelRecommend.getInstance().show() : alien.Global.navigateToUrl(GameConfig.language.home);
            break;
        case "credits":
            alien.SceneManager.show(SceneNames.CREDITS, null, alien.sceneEffect.Fade)
        }
    };
    g.onGrpPlatformTap = function(d) {
       
    };
    g.onAdded = function() {
        SoundManager.getInstance().playMusic("menu_music_mp3")
    };
    g.onRemoved = function() {
        SoundManager.getInstance().stopMusic()
    };
    return f
} (alien.SceneBase);
SceneCover.prototype.__class__ = "SceneCover";
var SceneCredits = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.SceneCreditsSkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTap, this)
    };
    g.onTouchTap = function(d) {
        alien.SceneManager.back(null, alien.sceneEffect.Fade)
    };
    return f
} (alien.SceneBase);
SceneCredits.prototype.__class__ = "SceneCredits";
var SceneLevel = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.SceneLevelSkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.list.itemRenderer = new egret.gui.ClassFactory(IRLevel);
        this.list.dataProvider = this.levelCollection = new egret.gui.ArrayCollection;
        this.list.addEventListener(egret.gui.IndexChangeEvent.CHANGE, this.onLevelSelect, this);
        this.uiLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnsTap, this)
    };
    g.onLevelSelect = function(d) {
        d = this.list.selectedItem.id;
        this.list.selectedItem.unlock && alien.SceneManager.show(SceneNames.PLAY, {
            level: d
        },
        alien.sceneEffect.Fade);
        this.list.selectedIndex = -1
    };
    g.onBtnsTap = function(d) {
        if (d.target && d.target.name) switch (d.target.name) {
        case "back":
            alien.SceneManager.back(null, alien.sceneEffect.Fade)
        }
    };
    g.refresh = function() {
        this.levelCollection.source = GameData.getInstance().levels
    };
    g.onAdded = function() {
        this.refresh();
        SoundManager.getInstance().playMusic("menu_music_mp3")
    };
    g.onRemoved = function() {
        SoundManager.getInstance().stopMusic()
    };
    return f
} (alien.SceneBase);
SceneLevel.prototype.__class__ = "SceneLevel";
var SceneLoading = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.SceneLoadingSkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.labVersion.text = "Version:" + GameConfig.version;
        this.pw = this.progressBar.width;
        this.imgZombie.anchorX = 1.3;
        this.imgZombie.x = 0;
        this.imgHuman.anchorX = 0.5;
        this.imgHuman.x = this.pw
    };
    g.onLoadingProgress = function(d) {
        d = d.data.itemsLoaded / d.data.itemsTotal;
        this.progressBar.value = 100 * d;
        this.imgZombie.x = this.pw * d;
        1 == d && (this.imgHuman.source = "zombie_small")
    };
    g.onAdded = function(d) {
        alien.Dispatcher.addListener(EventNames.LOADING_PROGRESS, this.onLoadingProgress, this)
    };
    g.onRemoved = function() {
        alien.Dispatcher.removeListener(EventNames.LOADING_PROGRESS, this.onLoadingProgress, this)
    };
    return f
} (alien.SceneBase);
SceneLoading.prototype.__class__ = "SceneLoading";
var ScenePlay = function(d) {
    function f() {
        d.call(this);
        this.skinName = skins.scenes.ScenePlaySkin
    }
    __extends(f, d);
    var g = f.prototype;
    g.createChildren = function() {
        d.prototype.createChildren.call(this);
        this.gameStageContainer.source = this.gameStage = new GameStage(this.onGameResult.bind(this));
        this.uiLayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnsTap, this)
    };
    g.onGameResult = function(d, c) {
        SoundManager.getInstance().playSound(d ? "victory_mp3": "failed_mp3");
        PanelResult.getInstance().show(d, c, this.onPanelResult.bind(this))
    };
    g.onPanelResult = function(d) {
        switch (d) {
        case "level":
            alien.SceneManager.back(null, alien.sceneEffect.Fade);
            break;
        case "reload":
            this.reloadLevel();
            break;
        case "nextLevel":
            this.playNextLevel()
        }
    };
    g.onBtnsTap = function(d) {
        if (d.target && d.target.name) switch (d.target.name) {
        case "turnLeft":
            this.gameStage.turnLeft();
            break;
        case "turnRight":
            this.gameStage.turnRight();
            break;
        case "reload":
            this.reloadLevel();
            break;
        case "pause":
            PanelMenu.getInstance().show(this.onMenu.bind(this))
        }
        this.moveProgress.updateStep(this.gameStage.step)
    };
    g.onMenu = function(d) {
        switch (d) {
        case "reset":
            this.reloadLevel();
            break;
        case "moreGames":
           // alien.Global.navigateToUrl(GameConfig.language.home);
            break;
        case "backToMenu":
            alien.SceneManager.back(null, alien.sceneEffect.Fade)
        }
    };
    g.reloadLevel = function() {
        this.gameStage.reload();
        this.moveProgress.initWithConfig(this.levelConfig)
    };
    g.playLevel = function(d) {
        var c;
        GameConfig.tutorialConfig.tutorials.some(function(a) {
            if (a.level == d) return c = a,
            !0
        });
        c && PanelTutorial.getInstance().show(c.tutorial);
        this.levelConfig = GameConfig.levels[d];
        this.gameStage.restart(this.levelConfig);
        this.moveProgress.initWithConfig(this.levelConfig)
    };
    g.playNextLevel = function() {
        this.levelConfig.id + 1 < GameConfig.levels.length && this.playLevel(this.levelConfig.id + 1)
    };
    g.onAdded = function(d) {
        this.playLevel(d.level);
        SoundManager.getInstance().playMusic("play_music_mp3")
    };
    g.onRemoved = function() {
        SoundManager.getInstance().stopMusic()
    };
    return f
} (alien.SceneBase);
ScenePlay.prototype.__class__ = "ScenePlay";
var Main = function(d) {
    function f() {
        f.instance = this;
        d.call(this);
        this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this)
    }
    __extends(f, d);
    var g = f.prototype;
    g.onAddToStage = function(d) {
        alien.Dispatcher.init();
        egret.Injector.mapClass("egret.gui.IAssetAdapter", AssetAdapter);
        egret.gui.Theme.load("static/theme.thm");
        d = new egret.gui.UIStage;
        alien.StageProxy.init(this.stage, this, d);
        this.addChild(d);
        alien.SceneManager.init(d);
        alien.SceneManager.register(SceneNames.LOADING, SceneLoading);
        alien.SceneManager.register(SceneNames.COVER, SceneCover);
        alien.SceneManager.register(SceneNames.CREDITS, SceneCredits);
        alien.SceneManager.register(SceneNames.LEVEL, SceneLevel);
        alien.SceneManager.register(SceneNames.PLAY, ScenePlay);
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        RES.loadConfig("static/resource.json", "")
    };
    g.onConfigComplete = function(d) {
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this);
        RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this);
        RES.loadGroup("loading")
    };
    g.onResourceLoadComplete = function(d) {
        "loading" == d.groupName ? (alien.SceneManager.show(SceneNames.LOADING), 0 < RES.getGroupByName("preload").length ? RES.loadGroup("preload") : (RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.delayStart())) : "preload" == d.groupName && (RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), this.delayStart())
    };
    g.onResourceProgress = function(d) {
        "preload" == d.groupName && alien.Dispatcher.dispatch(EventNames.LOADING_PROGRESS, {
            itemsLoaded: d.itemsLoaded,
            itemsTotal: d.itemsTotal
        })
    };
    g.back = function() {
        alien.PopUpManager.removeTopPupUp() || alien.SceneManager.back(null, alien.sceneEffect.Fade) || alien.Global.closeApp()
    };
    g.interstitialShow = function() {
        GameData.getInstance().interstitialShow = !0
    };
    g.delayStart = function() {
        egret.ExternalInterface.addCallback("interstitialShow", this.interstitialShow);
        egret.ExternalInterface.addCallback("back", this.back);
        GameData.getInstance().initLevelsConfig();
        alien.TimeUtils.setTimeout(this.startGame, this, 1E3)
    };
    g.startGame = function() {
        alien.SceneManager.addTopScene(SceneNames.COMMON, SceneCommon);
        alien.SceneManager.show(SceneNames.COVER, null, alien.sceneEffect.Fade)
    };
    return f
} (egret.DisplayObjectContainer);
Main.prototype.__class__ = "Main"; (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.states = ["up", "down", "disabled"]
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "skinParts", {
            get: function() {
                return e._skinParts
            },
            enumerable: !0,
            configurable: !0
        });
        c.createChildren = function() {
            f.prototype.createChildren.call(this);
            this.grp = new egret.gui.Group;
            this.grp.percentWidth = 100;
            this.grp.percentHeight = 100;
            this.addElement(this.grp);
            this.iconDisplay = new egret.gui.UIAsset;
            this.iconDisplay.width = this.hostComponent.width;
            this.iconDisplay.height = this.hostComponent.height;
            this.grp.addElement(this.iconDisplay);
            this.labelDisplay = new egret.gui.BitmapLabel;
            this.grp.addElement(this.labelDisplay);
            d.Utils.anchorCenter(this.grp, this.hostComponent.width, this.hostComponent.height)
        };
        c.commitCurrentState = function() {
            f.prototype.commitCurrentState.call(this);
            switch (this.currentState) {
            case "up":
                egret.Tween.removeTweens(this.grp);
                egret.Tween.get(this.grp).to({
                    scaleX:
                    1,
                    scaleY: 1
                },
                500, egret.Ease.elasticOut);
                break;
            case "down":
                egret.Tween.removeTweens(this.grp),
                egret.Tween.get(this.grp).to({
                    scaleX: 1.1,
                    scaleY: 1.1
                },
                500, egret.Ease.elasticOut)
            }
        };
        e._skinParts = ["iconDisplay", "labelDisplay"];
        return e
    } (egret.gui.Skin);
    d.BLButtonSkin = f;
    f.prototype.__class__ = "alien.BLButtonSkin"
})(alien || (alien = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.states = ["up", "down", "disabled"]
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "skinParts", {
            get: function() {
                return e._skinParts
            },
            enumerable: !0,
            configurable: !0
        });
        c.createChildren = function() {
            f.prototype.createChildren.call(this);
            this.grp = new egret.gui.Group;
            this.grp.percentWidth = 100;
            this.grp.percentHeight = 100;
            this.addElement(this.grp);
            this.bgDisplay = new egret.gui.UIAsset;
            this.bgDisplay.width = this.hostComponent.width;
            this.bgDisplay.height = this.hostComponent.height;
            this.grp.addElement(this.bgDisplay);
            this.iconDisplay = new egret.gui.UIAsset;
            this.iconDisplay.anchorX = this.iconDisplay.anchorY = 0.5;
            this.iconDisplay.x = this.hostComponent.width / 2;
            this.iconDisplay.y = this.hostComponent.height / 2;
            this.grp.addElement(this.iconDisplay);
            d.Utils.anchorCenter(this.grp, this.hostComponent.width, this.hostComponent.height);
            new d.Breathe(this.hostComponent, 0.02, 1.5)
        };
        c.commitCurrentState = function() {
            f.prototype.commitCurrentState.call(this);
            switch (this.currentState) {
            case "up":
                egret.Tween.removeTweens(this.grp);
                egret.Tween.get(this.grp).to({
                    scaleX:
                    1,
                    scaleY: 1
                },
                500, egret.Ease.elasticOut);
                break;
            case "down":
                egret.Tween.removeTweens(this.grp),
                egret.Tween.get(this.grp).to({
                    scaleX: 1.1,
                    scaleY: 1.1
                },
                500, egret.Ease.elasticOut)
            }
        };
        e._skinParts = ["iconDisplay", "bgDisplay"];
        return e
    } (egret.gui.Skin);
    d.BubbleButtonSkin = f;
    f.prototype.__class__ = "alien.BubbleButtonSkin"
})(alien || (alien = {})); (function(d) {
    var f = function(f) {
        function e() {
            f.call(this);
            this.states = ["up", "down", "disabled"]
        }
        __extends(e, f);
        var c = e.prototype;
        Object.defineProperty(c, "skinParts", {
            get: function() {
                return e._skinParts
            },
            enumerable: !0,
            configurable: !0
        });
        c.createChildren = function() {
            f.prototype.createChildren.call(this);
            this.grp = new egret.gui.Group;
            this.grp.percentWidth = 100;
            this.grp.percentHeight = 100;
            this.addElement(this.grp);
            this.bgDisplay = new egret.gui.UIAsset;
            this.bgDisplay.width = this.hostComponent.width;
            this.bgDisplay.height = this.hostComponent.height;
            this.grp.addElement(this.bgDisplay);
            this.iconDisplay = new egret.gui.UIAsset;
            this.iconDisplay.anchorX = this.iconDisplay.anchorY = 0.5;
            this.iconDisplay.x = this.hostComponent.width / 2;
            this.iconDisplay.y = this.hostComponent.height / 2;
            this.grp.addElement(this.iconDisplay);
            d.Utils.anchorCenter(this.grp, this.hostComponent.width, this.hostComponent.height)
        };
        c.commitCurrentState = function() {
            f.prototype.commitCurrentState.call(this);
            switch (this.currentState) {
            case "up":
                egret.Tween.removeTweens(this.grp);
                egret.Tween.get(this.grp).to({
                    scaleX:
                    1,
                    scaleY: 1
                },
                500, egret.Ease.elasticOut);
                break;
            case "down":
                egret.Tween.removeTweens(this.grp),
                egret.Tween.get(this.grp).to({
                    scaleX: 1.1,
                    scaleY: 1.1
                },
                500, egret.Ease.elasticOut)
            }
        };
        e._skinParts = ["iconDisplay", "bgDisplay"];
        return e
    } (egret.gui.Skin);
    d.IconButtonSkin = f;
    f.prototype.__class__ = "alien.IconButtonSkin"
})(alien || (alien = {}));